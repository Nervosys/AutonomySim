
.. _program_listing_file_AutonomyLib_include_vehicles_car_firmwares_physxcar_PhysXCarApi.hpp:

Program Listing for File PhysXCarApi.hpp
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_AutonomyLib_include_vehicles_car_firmwares_physxcar_PhysXCarApi.hpp>` (``AutonomyLib/include/vehicles/car/firmwares/physxcar/PhysXCarApi.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright (c) Microsoft Corporation. All rights reserved.
   // Licensed under the MIT License.
   
   #ifndef autonomylib_vehicles_PhysXCarController_hpp
   #define autonomylib_vehicles_PhysXCarController_hpp
   
   #include "vehicles/car/api/CarApiBase.hpp"
   
   namespace nervosys {
   namespace autonomylib {
   
   class PhysXCarApi : public CarApiBase {
     public:
       PhysXCarApi(const AutonomySimSettings::VehicleSetting *vehicle_setting,
                   std::shared_ptr<SensorFactory> sensor_factory, const Kinematics::State &state,
                   const Environment &environment)
           : CarApiBase(vehicle_setting, sensor_factory, state, environment),
             home_geopoint_(environment.getHomeGeoPoint()) {}
   
       ~PhysXCarApi() {}
   
     protected:
       virtual void resetImplementation() override { CarApiBase::resetImplementation(); }
   
     public:
       virtual void update() override { CarApiBase::update(); }
   
       virtual const SensorCollection &getSensors() const override { return CarApiBase::getSensors(); }
   
       // VehicleApiBase Implementation
       virtual void enableApiControl(bool is_enabled) override {
           if (api_control_enabled_ != is_enabled) {
               last_controls_ = CarControls();
               api_control_enabled_ = is_enabled;
           }
       }
   
       virtual bool isApiControlEnabled() const override { return api_control_enabled_; }
   
       virtual GeoPoint getHomeGeoPoint() const override { return home_geopoint_; }
   
       virtual bool armDisarm(bool arm) override {
           // TODO: implement arming for car
           unused(arm);
           return true;
       }
   
     public:
       virtual void setCarControls(const CarControls &controls) override { last_controls_ = controls; }
   
       virtual void updateCarState(const CarState &car_state) override { last_car_state_ = car_state; }
   
       virtual const CarState &getCarState() const override { return last_car_state_; }
   
       virtual const CarControls &getCarControls() const override { return last_controls_; }
   
     private:
       bool api_control_enabled_ = false;
       GeoPoint home_geopoint_;
       CarControls last_controls_;
       CarState last_car_state_;
   };
   
   } // namespace autonomylib
   } // namespace nervosys
   
   #endif
