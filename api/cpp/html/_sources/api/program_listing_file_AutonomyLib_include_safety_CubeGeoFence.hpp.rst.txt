
.. _program_listing_file_AutonomyLib_include_safety_CubeGeoFence.hpp:

Program Listing for File CubeGeoFence.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_AutonomyLib_include_safety_CubeGeoFence.hpp>` (``AutonomyLib/include/safety/CubeGeoFence.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright (c) Microsoft Corporation. All rights reserved.
   // Licensed under the MIT License.
   
   #ifndef autonomylib_safety_CubeGeoFence_hpp
   #define autonomylib_safety_CubeGeoFence_hpp
   
   #include "common/Common.hpp"
   
   namespace nervosys {
   namespace autonomylib {
   
   class CubeGeoFence : public IGeoFence {
     private:
       Vector3r point_min_, point_max_, point_center_;
       float distance_accuracy_;
   
     public:
       CubeGeoFence(const Vector3r &point_min, const Vector3r &point_max, float distance_accuracy)
           : point_min_(point_min), point_max_(point_max), distance_accuracy_(distance_accuracy) {
           calculateCenter();
   
           Utils::logMessage("CubeGeoFence: %s", toString().c_str());
       }
   
       void setBoundry(const Vector3r &origin, float xy_length, float max_z, float min_z) override {
           point_min_ = Vector3r(-xy_length, -xy_length, 0) + origin;
           point_min_[2] = max_z;
   
           point_max_ = Vector3r(xy_length, xy_length, 0) + origin;
           point_max_[2] = min_z;
   
           calculateCenter();
   
           Utils::logMessage("CubeGeoFence: %s", toString().c_str());
       }
   
       void checkFence(const Vector3r &cur_loc, const Vector3r &dest_loc, bool &in_fence, bool &allow) override {
           in_fence = dest_loc[0] >= point_min_[0] && dest_loc[1] >= point_min_[1] && dest_loc[2] >= point_min_[2] &&
                      dest_loc[0] <= point_max_[0] && dest_loc[1] <= point_max_[1] && dest_loc[2] <= point_max_[2];
   
           if (!in_fence) {
               // are we better off with dest than cur location?
               float dest_dist = (dest_loc - point_center_).norm();
               float cur_dist = (cur_loc - point_center_).norm();
               allow = cur_dist - dest_dist >= -distance_accuracy_;
           } else
               allow = true;
       }
   
       string toString() const override {
           return Utils::stringf("min=%s, max=%s", VectorMath::toString(point_min_).c_str(),
                                 VectorMath::toString(point_max_).c_str());
       }
   
       virtual ~CubeGeoFence(){};
   
     private:
       void calculateCenter() { point_center_ = (point_max_ + point_min_) / 2; }
   };
   
   } // namespace autonomylib
   } // namespace nervosys
   
   #endif
