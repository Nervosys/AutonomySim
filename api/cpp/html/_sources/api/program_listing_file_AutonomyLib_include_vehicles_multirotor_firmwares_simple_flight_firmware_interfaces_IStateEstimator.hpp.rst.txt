
.. _program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IStateEstimator.hpp:

Program Listing for File IStateEstimator.hpp
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IStateEstimator.hpp>` (``AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IStateEstimator.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef autonomylib_vehicles_simpleflight_firmware_IStateEstimator_hpp
   #define autonomylib_vehicles_simpleflight_firmware_IStateEstimator_hpp
   
   #include "CommonStructs.hpp"
   
   namespace simple_flight {
   
   class IStateEstimator {
   
     public:
       virtual Axis3r getAngles() const = 0;
       virtual Axis3r getAngularVelocity() const = 0;
       virtual Axis3r getPosition() const = 0;
       virtual Axis3r getLinearVelocity() const = 0;
       virtual Axis4r getOrientation() const = 0;
       virtual GeoPoint getGeoPoint() const = 0;
   
       virtual KinematicsState getKinematicsEstimated() const = 0;
   
       virtual GeoPoint getHomeGeoPoint() const = 0;
   
       virtual Axis3r transformToBodyFrame(const Axis3r &world_frame_val) const = 0;
   
       virtual ~IStateEstimator() = default;
   };
   
   } // namespace simple_flight
   
   #endif
