
.. _program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IOffboardApi.hpp:

Program Listing for File IOffboardApi.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IOffboardApi.hpp>` (``AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IOffboardApi.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef autonomylib_vehicles_simpleflight_firmware_IOffboardApi_hpp
   #define autonomylib_vehicles_simpleflight_firmware_IOffboardApi_hpp
   
   #include "CommonStructs.hpp"
   #include "IGoal.hpp"
   
   #include <string>
   
   namespace simple_flight {
   
   class IOffboardApi : public IGoal {
   
     public:
       virtual bool canRequestApiControl(std::string &message) = 0;
       virtual bool hasApiControl() = 0;
       virtual bool requestApiControl(std::string &message) = 0;
       virtual void releaseApiControl() = 0;
       virtual bool setGoalAndMode(const Axis4r *goal, const GoalMode *goal_mode, std::string &message) = 0;
   
       virtual bool arm(std::string &message) = 0;
       virtual bool disarm(std::string &message) = 0;
       virtual VehicleStateType getVehicleState() const = 0;
   
       virtual bool getLandedState() const = 0;
   
       virtual const IStateEstimator &getStateEstimator() = 0;
       virtual GeoPoint getHomeGeoPoint() const = 0;
       virtual GeoPoint getGeoPoint() const = 0;
   };
   
   } // namespace simple_flight
   
   #endif
