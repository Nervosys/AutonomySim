
.. _program_listing_file_AutonomyLib_include_vehicles_car_api_CarRpcLibClient.hpp:

Program Listing for File CarRpcLibClient.hpp
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_AutonomyLib_include_vehicles_car_api_CarRpcLibClient.hpp>` (``AutonomyLib/include/vehicles/car/api/CarRpcLibClient.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright (c) Microsoft Corporation. All rights reserved.
   // Licensed under the MIT License.
   
   #ifndef autonomylib_vehicles_CarRpcLibClient_hpp
   #define autonomylib_vehicles_CarRpcLibClient_hpp
   
   #include "api/RpcLibClientBase.hpp"
   #include "common/Common.hpp"
   #include "common/CommonStructs.hpp"
   #include "common/ImageCaptureBase.hpp"
   #include "vehicles/car/api/CarApiBase.hpp"
   
   #include <functional>
   
   namespace nervosys {
   namespace autonomylib {
   
   class CarRpcLibClient : public RpcLibClientBase {
   
     public:
       CarRpcLibClient(const string &ip_address = "localhost", uint16_t port = RpcLibPort, float timeout_sec = 60);
   
       void setCarControls(const CarApiBase::CarControls &controls, const std::string &vehicle_name = "");
       CarApiBase::CarState getCarState(const std::string &vehicle_name = "");
       CarApiBase::CarControls getCarControls(const std::string &vehicle_name = "");
       virtual ~CarRpcLibClient(); // required for pimpl
   };
   
   } // namespace autonomylib
   } // namespace nervosys
   
   #endif
