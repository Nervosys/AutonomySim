
.. _program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_PidController.hpp:

Program Listing for File PidController.hpp
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_PidController.hpp>` (``AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/PidController.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef autonomylib_vehicles_simpleflight_firmware_PidController_hpp
   #define autonomylib_vehicles_simpleflight_firmware_PidController_hpp
   
   #include "RungKuttaPidIntegrator.hpp"
   #include "StdPidIntegrator.hpp"
   #include "interfaces/CommonStructs.hpp"
   #include "interfaces/IPidIntegrator.hpp"
   
   #include <algorithm>
   #include <cstdlib>
   
   namespace simple_flight {
   
   template <class T> class PidController : public IUpdatable {
   
     private:
       T goal_, measured_;
       T output_;
       uint64_t last_time_;
       const IBoardClock *clock_;
       float last_error_;
       float min_dt_;
       const PidConfig<T> config_;
       std::unique_ptr<IPidIntegrator<T>> integrator;
   
       // TODO: replace with std::clamp after moving to C++17
       static T clip(T val, T min_value, T max_value) { return std::max(min_value, std::min(val, max_value)); }
   
     public:
       PidController(const IBoardClock *clock = nullptr, const PidConfig<T> &config = PidConfig<T>())
           : clock_(clock), config_(config) {
           switch (config.integrator_type) {
           case PidConfig<T>::IntegratorType::Standard:
               integrator = std::unique_ptr<StdPidIntegrator<T>>(new StdPidIntegrator<T>(config_));
               break;
           case PidConfig<T>::IntegratorType::RungKutta:
               integrator = std::unique_ptr<RungKuttaPidIntegrator<T>>(new RungKuttaPidIntegrator<T>(config_));
               break;
           default:
               throw std::invalid_argument("PID integrator type is not recognized");
           }
       }
   
       void setGoal(const T &goal) { goal_ = goal; }
       const T &getGoal() const { return goal_; }
   
       void setMeasured(const T &measured) { measured_ = measured; }
       const T &getMeasured() const { return measured_; }
   
       const PidConfig<T> &getConfig() const { return config_; }
   
       // allow changing config at runtime
       void setConfig(const PidConfig<T> &config) {
           bool renabled = !config_.enabled && config.enabled;
           config_ = config;
   
           if (renabled) {
               last_error_ = goal_ - measured_;
               integrator->set(output_);
           }
       }
   
       T getOutput() { return output_; }
   
       virtual void reset() override {
           IUpdatable::reset();
   
           goal_ = T();
           measured_ = T();
           last_time_ = clock_ == nullptr ? 0 : clock_->millis();
           integrator->reset();
           last_error_ = goal_ - measured_;
           min_dt_ = config_.time_scale * config_.time_scale;
       }
   
       virtual void update() override {
           IUpdatable::update();
   
           if (!config_.enabled)
               return;
   
           const T error = goal_ - measured_;
   
           float dt = clock_ == nullptr ? 1 : (clock_->millis() - last_time_) * config_.time_scale;
   
           float pterm = error * config_.kp;
           float dterm = 0;
           if (dt > min_dt_) {
               integrator->update(dt, error, last_time_);
   
               float error_der = dt > 0 ? (error - last_error_) / dt : 0;
               dterm = error_der * config_.kd;
               last_error_ = error;
           }
   
           output_ = config_.output_bias + pterm + integrator->getOutput() + dterm;
   
           // limit final output
           output_ = clip(output_, config_.min_output, config_.max_output);
   
           last_time_ = clock_->millis();
       }
   };
   
   } // namespace simple_flight
   
   #endif
