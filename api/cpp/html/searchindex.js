Search.setIndex({"titles": ["Class ApiProvider", "Class ApiServerBase", "Class ArduCopterApi", "Class ArduCopterParams", "Class ArduCopterSoloApi", "Class ArduCopterSoloParams", "Class ArduRoverApi", "Class BarometerBase", "Class BarometerSimple", "Class CarApiBase", "Class CarApiFactory", "Class CarRpcLibClient", "Class CarRpcLibServer", "Class CubeGeoFence", "Class DebugPhysicsBody", "Class DebugPhysicsBody::WrenchVertex", "Class DistanceBase", "Class DistanceSimple", "Class Environment", "Class ExternalPhysicsEngine", "Class FastPhysicsEngine", "Class GpsBase", "Class GpsSimple", "Class IGeoFence", "Class ImuSimple", "Class Kinematics", "Class LidarBase", "Class LidarSimple", "Class MagnetometerBase", "Class MagnetometerSimple", "Class MavLinkMultirotorApi", "Class MavLinkMultirotorApi::MavLinkLogViewerLog", "Class MultirotorApiBase", "Class MultirotorApiBase::ObsStrategyChanger", "Class MultirotorApiBase::SingleCall", "Class MultirotorApiBase::SingleTaskCall", "Class MultirotorApiBase::UnsafeMoveException", "Class MultirotorParams", "Class MultirotorParamsFactory", "Class MultirotorPhysicsBody", "Class MultirotorRpcLibClient", "Class MultirotorRpcLibServer", "Class ObstacleMap", "Class PhysXCarApi", "Class PhysicsBody", "Class PhysicsBodyVertex", "Class PhysicsEngineBase", "Class PhysicsWorld", "Class Px4MultirotorParams", "Class RotorActuator", "Class RpcLibClientBase", "Class RpcLibServerBase", "Class RpcLibServerBase::ApiNotSupported", "Class SafetyEval", "Class SensorBase", "Class SensorCollection", "Class SensorFactory", "Class SimpleFlightApi", "Class SimpleFlightBoard", "Class SimpleFlightCommLink", "Class SimpleFlightCommon", "Class SimpleFlightEstimator", "Class SimpleFlightQuadXParams", "Class SphereGeoFence", "Class VehicleApiBase", "Class VehicleApiBase::VehicleCommandNotImplementedException", "Class VehicleApiBase::VehicleControllerException", "Class VehicleApiBase::VehicleMoveException", "Class VehicleSimApiBase", "Class World", "Class WorldSimApiBase", "Class CarRpcLibAdaptors", "Class MultirotorRpcLibAdaptors", "Class RpcLibAdaptorsBase", "Class AdaptiveController", "Class AngleLevelController", "Class AngleRateController", "Template Class Axis3", "Template Class Axis4", "Class CascadeController", "Class ConstantOutputController", "Class Firmware", "Class GoalMode", "Class IAxisController", "Class IBoard", "Class IBoardClock", "Class IBoardInputPins", "Class IBoardOutputPins", "Class IBoardSensors", "Class ICommLink", "Class IController", "Class IFirmware", "Class IGoal", "Class IOffboardApi", "Template Class IPidIntegrator", "Class IStateEstimator", "Class IUpdatable", "Class Mixer", "Class OffboardApi", "Class PassthroughController", "Template Class PidController", "Class PositionController", "Class RemoteControl", "Template Class RungKuttaPidIntegrator", "Template Class StdPidIntegrator", "Class VehicleState", "Class VelocityController", "Define check", "Define RPCLIB_MSGPACK", "Define check", "Define RPCLIB_MSGPACK", "Define check", "Define RPCLIB_MSGPACK", "Define check", "Define RPCLIB_MSGPACK", "Define check", "Define RPCLIB_MSGPACK", "Define check", "Define RPCLIB_MSGPACK", "Directory AutonomyLib", "Directory docs", "Directory include", "Directory api", "Directory physics", "Directory safety", "Directory sensors", "Directory barometer", "Directory distance", "Directory gps", "Directory imu", "Directory lidar", "Directory magnetometer", "Directory vehicles", "Directory car", "Directory api", "Directory firmwares", "Directory ardurover", "Directory physxcar", "Directory multirotor", "Directory api", "Directory firmwares", "Directory arducopter", "Directory mavlink", "Directory simple_flight", "Directory firmware", "Directory interfaces", "Directory src", "Directory api", "Directory safety", "Directory vehicles", "Directory car", "Directory api", "Directory multirotor", "Directory api", "Enum DrivetrainType", "Enum LandedState", "Enum RotorTurningDirection", "Enum GoalModeType", "Enum VehicleStateType", "File conf.py", "File ApiProvider.hpp", "File ApiServerBase.hpp", "File RpcLibAdaptorsBase.hpp", "File RpcLibClientBase.hpp", "File RpcLibServerBase.hpp", "File VehicleApiBase.hpp", "File VehicleSimApiBase.hpp", "File WorldSimApiBase.hpp", "File DebugPhysicsBody.hpp", "File Environment.hpp", "File ExternalPhysicsEngine.hpp", "File FastPhysicsEngine.hpp", "File Kinematics.hpp", "File PhysicsBody.hpp", "File PhysicsBodyVertex.hpp", "File PhysicsEngineBase.hpp", "File PhysicsWorld.hpp", "File World.hpp", "File CubeGeoFence.hpp", "File IGeoFence.hpp", "File ObstacleMap.hpp", "File SafetyEval.hpp", "File SphereGeoFence.hpp", "File SensorBase.hpp", "File SensorCollection.hpp", "File SensorFactory.hpp", "File BarometerBase.hpp", "File BarometerSimple.hpp", "File BarometerSimpleParams.hpp", "File DistanceBase.hpp", "File DistanceSimple.hpp", "File DistanceSimpleParams.hpp", "File GpsBase.hpp", "File GpsSimple.hpp", "File GpsSimpleParams.hpp", "File ImuSimple.hpp", "File ImuSimpleParams.hpp", "File LidarBase.hpp", "File LidarSimple.hpp", "File LidarSimpleParams.hpp", "File MagnetometerBase.hpp", "File MagnetometerSimple.hpp", "File MagnetometerSimpleParams.hpp", "File CarApiFactory.hpp", "File CarApiBase.hpp", "File CarRpcLibAdaptors.hpp", "File CarRpcLibClient.hpp", "File CarRpcLibServer.hpp", "File ArduRoverApi.hpp", "File PhysXCarApi.hpp", "File MultiRotorParams.hpp", "File MultiRotorParamsFactory.hpp", "File MultiRotorPhysicsBody.hpp", "File RotorActuator.hpp", "File RotorParams.hpp", "File MultirotorApiBase.hpp", "File MultirotorCommon.hpp", "File MultirotorRpcLibAdaptors.hpp", "File MultirotorRpcLibClient.hpp", "File MultirotorRpcLibServer.hpp", "File ArduCopterApi.hpp", "File ArduCopterParams.hpp", "File ArduCopterSoloApi.hpp", "File ArduCopterSoloParams.hpp", "File MavLinkMultirotorApi.hpp", "File Px4MultiRotorParams.hpp", "File SimpleFlightApi.hpp", "File SimpleFlightBoard.hpp", "File SimpleFlightCommLink.hpp", "File SimpleFlightCommon.hpp", "File SimpleFlightEstimator.hpp", "File SimpleFlightQuadXParams.hpp", "File AdaptiveController.hpp", "File AngleLevelController.hpp", "File AngleRateController.hpp", "File CascadeController.hpp", "File ConstantOutputController.hpp", "File Firmware.hpp", "File Mixer.hpp", "File OffboardApi.hpp", "File Params.hpp", "File PassthroughController.hpp", "File PidController.hpp", "File PositionController.hpp", "File RemoteControl.hpp", "File RungKuttaPidIntegrator.hpp", "File StdPidIntegrator.hpp", "File VelocityController.hpp", "File CommonStructs.hpp", "File IAxisController.hpp", "File IBoard.hpp", "File IBoardClock.hpp", "File IBoardInputPins.hpp", "File IBoardOutputPins.hpp", "File IBoardSensors.hpp", "File ICommLink.hpp", "File IController.hpp", "File IFirmware.hpp", "File IGoal.hpp", "File IOffboardApi.hpp", "File IPidIntegrator.hpp", "File IStateEstimator.hpp", "File IUpdatable.hpp", "File RpcLibClientBase.cpp", "File RpcLibServerBase.cpp", "File ObstacleMap.cpp", "File SafetyEval.cpp", "File CarRpcLibClient.cpp", "File CarRpcLibServer.cpp", "File MultirotorApiBase.cpp", "File MultirotorRpcLibClient.cpp", "File MultirotorRpcLibServer.cpp", "Function MSGPACK_ADD_ENUM(nervosys::autonomylib::DrivetrainType)", "Function MSGPACK_ADD_ENUM(nervosys::autonomylib::LandedState)", "Function MSGPACK_ADD_ENUM(nervosys::autonomylib::GpsBase::GnssFixType)", "Function MSGPACK_ADD_ENUM(nervosys::autonomylib::SafetyEval::ObsAvoidanceStrategy)", "Function MSGPACK_ADD_ENUM(nervosys::autonomylib::SafetyEval::SafetyViolationType_)", "Function MSGPACK_ADD_ENUM(nervosys::autonomylib::WorldSimApiBase::WeatherParameter)", "Function MSGPACK_ADD_ENUM(nervosys::autonomylib::ImageCaptureBase::ImageType)", "Full API", "Namespace conf", "Namespace mavlinkcom", "Namespace nervosys", "Namespace nervosys::autonomylib", "Namespace nervosys::autonomylib_rpclib", "Namespace simple_flight", "Namespace std", "Program Listing for File conf.py", "Program Listing for File ApiProvider.hpp", "Program Listing for File ApiServerBase.hpp", "Program Listing for File RpcLibAdaptorsBase.hpp", "Program Listing for File RpcLibClientBase.hpp", "Program Listing for File RpcLibServerBase.hpp", "Program Listing for File VehicleApiBase.hpp", "Program Listing for File VehicleSimApiBase.hpp", "Program Listing for File WorldSimApiBase.hpp", "Program Listing for File DebugPhysicsBody.hpp", "Program Listing for File Environment.hpp", "Program Listing for File ExternalPhysicsEngine.hpp", "Program Listing for File FastPhysicsEngine.hpp", "Program Listing for File Kinematics.hpp", "Program Listing for File PhysicsBody.hpp", "Program Listing for File PhysicsBodyVertex.hpp", "Program Listing for File PhysicsEngineBase.hpp", "Program Listing for File PhysicsWorld.hpp", "Program Listing for File World.hpp", "Program Listing for File CubeGeoFence.hpp", "Program Listing for File IGeoFence.hpp", "Program Listing for File ObstacleMap.hpp", "Program Listing for File SafetyEval.hpp", "Program Listing for File SphereGeoFence.hpp", "Program Listing for File SensorBase.hpp", "Program Listing for File SensorCollection.hpp", "Program Listing for File SensorFactory.hpp", "Program Listing for File BarometerBase.hpp", "Program Listing for File BarometerSimple.hpp", "Program Listing for File BarometerSimpleParams.hpp", "Program Listing for File DistanceBase.hpp", "Program Listing for File DistanceSimple.hpp", "Program Listing for File DistanceSimpleParams.hpp", "Program Listing for File GpsBase.hpp", "Program Listing for File GpsSimple.hpp", "Program Listing for File GpsSimpleParams.hpp", "Program Listing for File ImuSimple.hpp", "Program Listing for File ImuSimpleParams.hpp", "Program Listing for File LidarBase.hpp", "Program Listing for File LidarSimple.hpp", "Program Listing for File LidarSimpleParams.hpp", "Program Listing for File MagnetometerBase.hpp", "Program Listing for File MagnetometerSimple.hpp", "Program Listing for File MagnetometerSimpleParams.hpp", "Program Listing for File CarApiFactory.hpp", "Program Listing for File CarApiBase.hpp", "Program Listing for File CarRpcLibAdaptors.hpp", "Program Listing for File CarRpcLibClient.hpp", "Program Listing for File CarRpcLibServer.hpp", "Program Listing for File ArduRoverApi.hpp", "Program Listing for File PhysXCarApi.hpp", "Program Listing for File MultiRotorParams.hpp", "Program Listing for File MultiRotorParamsFactory.hpp", "Program Listing for File MultiRotorPhysicsBody.hpp", "Program Listing for File RotorActuator.hpp", "Program Listing for File RotorParams.hpp", "Program Listing for File MultirotorApiBase.hpp", "Program Listing for File MultirotorCommon.hpp", "Program Listing for File MultirotorRpcLibAdaptors.hpp", "Program Listing for File MultirotorRpcLibClient.hpp", "Program Listing for File MultirotorRpcLibServer.hpp", "Program Listing for File ArduCopterApi.hpp", "Program Listing for File ArduCopterParams.hpp", "Program Listing for File ArduCopterSoloApi.hpp", "Program Listing for File ArduCopterSoloParams.hpp", "Program Listing for File MavLinkMultirotorApi.hpp", "Program Listing for File Px4MultiRotorParams.hpp", "Program Listing for File SimpleFlightApi.hpp", "Program Listing for File SimpleFlightBoard.hpp", "Program Listing for File SimpleFlightCommLink.hpp", "Program Listing for File SimpleFlightCommon.hpp", "Program Listing for File SimpleFlightEstimator.hpp", "Program Listing for File SimpleFlightQuadXParams.hpp", "Program Listing for File AdaptiveController.hpp", "Program Listing for File AngleLevelController.hpp", "Program Listing for File AngleRateController.hpp", "Program Listing for File CascadeController.hpp", "Program Listing for File ConstantOutputController.hpp", "Program Listing for File Firmware.hpp", "Program Listing for File Mixer.hpp", "Program Listing for File OffboardApi.hpp", "Program Listing for File Params.hpp", "Program Listing for File PassthroughController.hpp", "Program Listing for File PidController.hpp", "Program Listing for File PositionController.hpp", "Program Listing for File RemoteControl.hpp", "Program Listing for File RungKuttaPidIntegrator.hpp", "Program Listing for File StdPidIntegrator.hpp", "Program Listing for File VelocityController.hpp", "Program Listing for File CommonStructs.hpp", "Program Listing for File IAxisController.hpp", "Program Listing for File IBoard.hpp", "Program Listing for File IBoardClock.hpp", "Program Listing for File IBoardInputPins.hpp", "Program Listing for File IBoardOutputPins.hpp", "Program Listing for File IBoardSensors.hpp", "Program Listing for File ICommLink.hpp", "Program Listing for File IController.hpp", "Program Listing for File IFirmware.hpp", "Program Listing for File IGoal.hpp", "Program Listing for File IOffboardApi.hpp", "Program Listing for File IPidIntegrator.hpp", "Program Listing for File IStateEstimator.hpp", "Program Listing for File IUpdatable.hpp", "Program Listing for File RpcLibClientBase.cpp", "Program Listing for File RpcLibServerBase.cpp", "Program Listing for File ObstacleMap.cpp", "Program Listing for File SafetyEval.cpp", "Program Listing for File CarRpcLibClient.cpp", "Program Listing for File CarRpcLibServer.cpp", "Program Listing for File MultirotorApiBase.cpp", "Program Listing for File MultirotorRpcLibClient.cpp", "Program Listing for File MultirotorRpcLibServer.cpp", "Struct ArduCopterApi::RotorControlMessage", "Struct ArduCopterSoloApi::RotorControlMessage", "Struct ArduCopterSoloApi::SensorMessage", "Struct ArduRoverApi::RoverControlMessage", "Struct BarometerBase::Output", "Struct BarometerSimpleParams", "Struct CarApiBase::CarControls", "Struct CarApiBase::CarState", "Struct DistanceSimpleParams", "Struct Environment::State", "Struct GpsBase::GnssReport", "Struct GpsBase::GpsPoint", "Struct GpsBase::NavSatFix", "Struct GpsBase::NavSatStatus", "Struct GpsBase::Output", "Struct GpsSimpleParams", "Struct ImuSimpleParams", "Struct ImuSimpleParams::Accelerometer", "Struct ImuSimpleParams::Gyroscope", "Struct ImuSimple::State", "Struct Kinematics::State", "Struct LidarSimpleParams", "Struct MagnetometerBase::Output", "Struct MagnetometerSimpleParams", "Struct MultirotorApiBase::PathPosition", "Struct MultirotorApiBase::PathSegment", "Struct MultirotorApiBase::StatusLock", "Struct MultirotorApiParams", "Struct MultirotorParams::Params", "Struct MultirotorParams::RotorPose", "Struct MultirotorRpcLibClient::impl", "Struct MultirotorState", "Struct ObstacleMap::ObstacleInfo", "Struct RotorActuator::Output", "Struct RotorParameters", "Struct RotorParams", "Struct RotorStates", "Struct RpcLibClientBase::impl", "Struct RpcLibServerBase::impl", "Struct SafetyEval::EvalResult", "Struct SensorBase::GroundTruth", "Struct YawMode", "Struct CarRpcLibAdaptors::CarControls", "Struct CarRpcLibAdaptors::CarState", "Struct MultirotorRpcLibAdaptors::MultirotorState", "Struct MultirotorRpcLibAdaptors::RotorParameters", "Struct MultirotorRpcLibAdaptors::RotorStates", "Struct MultirotorRpcLibAdaptors::YawMode", "Struct RpcLibAdaptorsBase::BarometerData", "Struct RpcLibAdaptorsBase::Box2D", "Struct RpcLibAdaptorsBase::Box3D", "Struct RpcLibAdaptorsBase::CameraInfo", "Struct RpcLibAdaptorsBase::CollisionInfo", "Struct RpcLibAdaptorsBase::DetectionInfo", "Struct RpcLibAdaptorsBase::DistanceSensorData", "Struct RpcLibAdaptorsBase::EnvironmentState", "Struct RpcLibAdaptorsBase::GeoPoint", "Struct RpcLibAdaptorsBase::GnssReport", "Struct RpcLibAdaptorsBase::GpsData", "Struct RpcLibAdaptorsBase::ImageRequest", "Struct RpcLibAdaptorsBase::ImageResponse", "Struct RpcLibAdaptorsBase::ImuData", "Struct RpcLibAdaptorsBase::KinematicsState", "Struct RpcLibAdaptorsBase::LidarData", "Struct RpcLibAdaptorsBase::MagnetometerData", "Struct RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse", "Struct RpcLibAdaptorsBase::Pose", "Struct RpcLibAdaptorsBase::ProjectionMatrix", "Struct RpcLibAdaptorsBase::Quaternionr", "Struct RpcLibAdaptorsBase::RCData", "Struct RpcLibAdaptorsBase::Vector2r", "Struct RpcLibAdaptorsBase::Vector3r", "Struct GeoPoint", "Struct KinematicsState", "Struct Mixer::motorMixer_t", "Struct Params", "Struct Params::AngleLevelPid", "Struct Params::AngleRatePid", "Struct Params::Motor", "Struct Params::PositionPid", "Struct Params::Rc", "Struct Params::Takeoff", "Struct Params::VelocityPid", "Template Struct PidConfig", "Typedef nervosys::autonomylib::RpcLibAdaptorsBase", "Typedef nervosys::autonomylib::CarRpcLibAdaptors", "Typedef nervosys::autonomylib::MultirotorRpcLibAdaptors", "Typedef simple_flight::TReal", "Typedef simple_flight::Axis4r", "Typedef simple_flight::Axis3r", "Full API", "Variable conf::html_theme", "Variable conf::version", "Variable conf::author", "Variable conf::breathe_default_project", "Variable conf::latex_elements", "Variable conf::autosectionlabel_maxdepth", "Variable conf::project", "Variable conf::primary_domain", "Variable conf::html_style", "Variable conf::texinfo_documents", "Variable conf::html_css_files", "Variable conf::epub_exclude_files", "Variable conf::latex_documents", "Variable conf::exclude_patterns", "Variable conf::man_pages", "Variable conf::autosummary_generate", "Variable conf::todo_include_todos", "Variable conf::html_theme_options", "Variable conf::intersphinx_mapping", "Variable conf::copyright", "Variable conf::master_doc", "Variable conf::autodoc_default_flags", "Variable conf::html_js_files", "Variable conf::language", "Variable conf::highlight_language", "Variable conf::autosectionlabel_prefix_document", "Variable conf::release", "Variable conf::source_suffix", "Variable conf::breathe_projects", "Variable conf::htmlhelp_basename", "Variable conf::extensions", "Variable conf::templates_path", "Variable conf::pygments_style", "Variable conf::epub_title", "Variable conf::html_static_path", "Variable conf::exhale_args", "Variable conf::html_title", "AutonomyLib"], "terms": {"defin": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 154, 155, 156, 157, 158, 272, 273, 274, 275, 276, 277, 278, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528], "file": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 154, 155, 156, 157, 158, 272, 273, 274, 275, 276, 277, 278, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527], "hpp": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 154, 155, 156, 157, 158, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 487, 488, 489, 490], "public": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 279, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 320, 321, 323, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "function": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 161, 177, 181, 206, 207, 218, 219, 263, 264, 269, 289, 297, 305, 309, 319, 334, 335, 338, 343, 346, 347, 360, 391, 392, 393, 394, 397, 405, 406, 407, 408, 409, 411, 415, 416, 420, 421, 423, 425, 426, 427, 429, 431, 432, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 483, 490, 528], "inlin": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 405, 406, 407, 408, 409, 411, 415, 416, 420, 421, 423, 425, 426, 427, 429, 431, 432, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 483], "worldsimapibas": [0, 50, 51, 122, 160, 162, 163, 279, 283, 288, 290, 291, 292, 391, 392, 490], "world_sim_api": [0, 288], "virtual": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 68, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 310, 311, 312, 313, 314, 315, 317, 318, 320, 321, 323, 325, 326, 328, 329, 332, 334, 335, 336, 337, 338, 340, 341, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390], "default": [0, 1, 3, 5, 8, 9, 17, 22, 24, 27, 29, 32, 37, 39, 48, 54, 56, 62, 64, 68, 70, 77, 85, 86, 87, 88, 92, 95, 96, 287, 288, 289, 293, 294, 295, 297, 301, 302, 303, 309, 311, 313, 315, 318, 319, 321, 323, 326, 327, 329, 331, 332, 338, 339, 340, 341, 342, 343, 349, 351, 352, 353, 354, 359, 360, 363, 365, 370, 372, 375, 376, 379, 380, 381, 382, 386, 389, 390, 391, 394, 397], "vehicleapibas": [0, 9, 32, 36, 39, 51, 122, 160, 181, 184, 186, 189, 192, 197, 200, 204, 212, 215, 279, 283, 288, 292, 332, 336, 337, 340, 343, 348, 352, 354, 490], "getvehicleapi": [0, 12, 32, 34, 41, 51, 279, 288, 292, 335, 343, 347, 392, 396, 399], "const": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 86, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 288, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 382, 383, 384, 386, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 405, 407, 408, 409, 415, 416, 421, 423, 425, 426, 429, 431, 432, 434, 436, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 479, 482], "std": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 16, 18, 21, 26, 28, 30, 31, 32, 36, 37, 38, 40, 41, 43, 47, 48, 50, 51, 52, 54, 56, 57, 59, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 77, 78, 89, 93, 97, 98, 105, 279, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 301, 304, 305, 308, 311, 313, 314, 317, 319, 320, 321, 323, 324, 325, 327, 328, 329, 331, 332, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 361, 362, 363, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 383, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 411, 430, 431, 436, 438, 444, 446, 452, 453, 459, 460, 463, 464, 465, 469, 472, 475, 482], "string": [0, 2, 6, 7, 11, 12, 13, 16, 18, 21, 23, 26, 28, 30, 32, 36, 40, 41, 42, 47, 50, 51, 52, 53, 54, 56, 57, 59, 63, 64, 65, 66, 67, 68, 70, 72, 73, 77, 78, 89, 93, 98, 105, 165, 224, 233, 234, 235, 248, 259, 287, 288, 290, 291, 292, 293, 294, 295, 297, 299, 304, 306, 307, 308, 309, 310, 311, 313, 314, 317, 319, 320, 325, 327, 328, 334, 335, 336, 343, 344, 345, 346, 347, 348, 350, 352, 354, 356, 361, 362, 363, 367, 372, 376, 383, 387, 391, 392, 395, 396, 398, 399, 411, 431, 432, 437, 438, 439, 444, 452, 453, 459, 460, 465, 469], "vehicle_nam": [0, 11, 12, 40, 41, 50, 51, 70, 288, 291, 292, 295, 331, 334, 335, 339, 346, 347, 391, 392, 395, 396, 398, 399], "getworldsimapi": [0, 51, 279, 288, 292, 392], "vehiclesimapibas": [0, 51, 122, 160, 169, 172, 212, 279, 283, 288, 292, 340, 490], "getvehiclesimapi": [0, 51, 279, 288, 292, 392], "size_t": [0, 1, 2, 30, 51, 57, 64, 288, 289, 290, 292, 293, 304, 338, 348, 350, 352, 354, 392, 438], "getvehiclecount": [0, 279, 288], "void": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 68, 69, 70, 73, 74, 75, 76, 78, 79, 80, 81, 83, 87, 88, 89, 90, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 334, 336, 337, 338, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 405, 406, 408, 415, 416, 421, 423, 434, 435, 438, 441], "insert_or_assign": [0, 279, 288], "vehicle_api": [0, 39, 288, 340], "vehicle_sim_api": [0, 288], "common_util": [0, 53, 288, 305, 309, 350, 352, 363, 394], "uniquevaluemap": [0, 160, 288], "bool": [0, 1, 2, 6, 9, 13, 20, 21, 23, 30, 32, 34, 40, 42, 43, 44, 47, 50, 51, 53, 57, 58, 63, 64, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 86, 90, 93, 98, 102, 288, 289, 290, 291, 292, 293, 294, 295, 299, 301, 304, 305, 306, 307, 308, 309, 310, 319, 320, 327, 330, 332, 333, 336, 337, 343, 344, 345, 346, 348, 352, 354, 355, 360, 363, 367, 368, 370, 372, 376, 380, 384, 387, 390, 391, 392, 393, 394, 397, 398, 399, 406, 407, 408, 414, 421, 423, 431, 438, 439, 441, 442, 443, 444, 447, 452, 458, 459, 460, 469, 475, 480, 483], "hasdefaultvehicl": [0, 279, 288], "makedefaultvehicl": [0, 279, 288], "nervosi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 54, 57, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 84, 89, 95, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 263, 264, 265, 266, 267, 268, 269, 270, 271, 279, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 375, 391, 392, 393, 394, 395, 396, 397, 398, 399, 416, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 493, 510], "autonomylib": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 54, 57, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 84, 89, 95, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 279, 282, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 416, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 490, 494, 519], "rpclibserverbas": [1, 12, 41, 117, 118, 122, 147, 160, 161, 162, 207, 219, 279, 283, 335, 347, 396, 399, 490], "subclass": [1, 7, 9, 16, 21, 23, 26, 28, 30, 32, 34, 37, 44, 45, 46, 50, 51, 54, 64, 66, 67, 73, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "start": [1, 51, 279, 287, 289, 292, 298, 299, 301, 302, 305, 308, 312, 315, 318, 321, 323, 326, 329, 336, 340, 341, 343, 348, 352, 372, 392, 397, 425], "block": [1, 51, 289, 292, 392, 438], "thread_count": [1, 51, 289, 292, 392, 438], "0": [1, 9, 17, 21, 23, 27, 30, 31, 32, 37, 44, 45, 50, 55, 64, 68, 70, 71, 72, 73, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 287, 289, 290, 291, 293, 294, 295, 296, 297, 299, 301, 302, 304, 306, 307, 308, 309, 310, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 329, 330, 332, 333, 336, 338, 340, 341, 342, 343, 344, 345, 348, 350, 351, 352, 354, 355, 356, 360, 361, 362, 363, 365, 366, 367, 368, 370, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 393, 394, 397, 405, 406, 408, 410, 415, 416, 417, 418, 421, 423, 427, 428, 434, 435, 441, 442, 447, 452, 456, 457, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 482, 483], "stop": [1, 51, 279, 289, 292, 299, 305, 352, 392, 397, 438], "struct": [2, 4, 6, 7, 9, 18, 21, 24, 25, 28, 32, 37, 40, 42, 49, 50, 51, 53, 54, 71, 72, 73, 97, 162, 169, 172, 180, 181, 183, 186, 188, 191, 192, 194, 195, 196, 199, 200, 202, 204, 205, 208, 210, 213, 214, 215, 216, 217, 220, 222, 238, 240, 248, 263, 264, 270, 283, 284, 285, 290, 291, 292, 297, 300, 308, 309, 311, 314, 316, 319, 320, 322, 323, 324, 327, 328, 330, 332, 333, 336, 338, 341, 342, 343, 344, 345, 346, 348, 350, 366, 368, 376, 391, 392, 398, 528], "rotorcontrolmessag": [2, 4, 220, 222, 279, 283, 348, 350], "multirotorapibas": [2, 3, 5, 30, 37, 41, 48, 57, 62, 64, 67, 139, 153, 165, 169, 172, 181, 210, 216, 217, 218, 219, 220, 224, 226, 279, 283, 338, 345, 346, 347, 348, 349, 351, 352, 353, 354, 359, 490], "multirotorparam": [2, 3, 5, 38, 39, 48, 57, 62, 138, 184, 185, 212, 213, 214, 215, 220, 221, 225, 226, 231, 279, 283, 339, 340, 348, 349, 351, 353, 354, 359, 365, 490], "vehicle_param": [2, 53, 57, 309, 348, 354, 394], "autonomysimset": [2, 3, 5, 6, 8, 9, 10, 17, 22, 24, 27, 29, 30, 37, 38, 43, 48, 56, 57, 62, 68, 166, 188, 191, 196, 199, 208, 220, 221, 224, 225, 226, 231, 294, 313, 315, 316, 318, 319, 321, 322, 323, 324, 326, 327, 329, 330, 331, 332, 336, 337, 338, 339, 348, 349, 351, 352, 353, 354, 359, 405, 408, 415, 416, 421, 423], "mavlinkconnectioninfo": [2, 3, 30, 336, 348, 349, 351, 352, 353], "connection_info": [2, 30, 336, 348, 349, 351, 352, 353], "resetimplement": [2, 6, 8, 9, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 32, 39, 43, 44, 45, 47, 49, 55, 57, 69, 279, 297, 298, 299, 300, 301, 302, 304, 305, 312, 315, 318, 321, 323, 326, 329, 332, 336, 337, 340, 341, 343, 348, 352, 354, 397], "overrid": [2, 3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 55, 57, 58, 61, 62, 63, 64, 68, 69, 74, 75, 76, 78, 79, 80, 81, 83, 98, 99, 100, 101, 102, 103, 104, 106, 287, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 314, 315, 317, 318, 320, 321, 323, 325, 326, 328, 329, 332, 335, 336, 337, 338, 340, 341, 343, 346, 347, 348, 349, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377], "updat": [2, 4, 6, 8, 9, 14, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 39, 42, 43, 44, 45, 46, 49, 55, 57, 58, 59, 64, 68, 69, 75, 76, 79, 80, 81, 94, 96, 98, 99, 100, 101, 102, 103, 104, 106, 279, 287, 293, 294, 297, 298, 299, 300, 301, 302, 303, 305, 308, 312, 315, 318, 319, 321, 323, 326, 329, 332, 336, 337, 340, 341, 343, 344, 348, 350, 352, 354, 355, 356, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 377, 388, 390, 393, 397, 434], "isapicontrolen": [2, 6, 30, 43, 50, 57, 64, 279, 291, 293, 336, 337, 348, 352, 354, 391, 392], "enableapicontrol": [2, 6, 30, 43, 50, 57, 64, 279, 291, 293, 336, 337, 348, 352, 354, 391, 392], "is_en": [2, 6, 30, 43, 47, 50, 57, 64, 70, 291, 293, 295, 304, 336, 337, 348, 352, 354, 391, 392], "armdisarm": [2, 6, 30, 43, 50, 57, 64, 279, 291, 293, 336, 337, 348, 352, 354, 391, 392], "arm": [2, 6, 30, 37, 43, 50, 57, 64, 93, 98, 158, 279, 291, 293, 336, 337, 338, 340, 344, 348, 351, 352, 354, 360, 367, 368, 372, 376, 387, 391, 392], "geopoint": [2, 6, 18, 21, 30, 32, 43, 50, 57, 60, 61, 64, 68, 70, 72, 73, 93, 95, 98, 105, 162, 248, 279, 284, 285, 290, 291, 293, 294, 295, 297, 320, 336, 337, 343, 344, 345, 348, 352, 354, 357, 358, 367, 376, 387, 389, 391, 392, 397, 409, 410, 412, 431, 444, 453, 455, 457], "gethomegeopoint": [2, 6, 18, 30, 43, 50, 57, 61, 64, 93, 95, 98, 105, 279, 291, 293, 297, 336, 337, 348, 352, 354, 358, 367, 372, 376, 387, 389, 391, 392, 397], "getstatusmessag": [2, 6, 30, 57, 59, 64, 279, 293, 336, 348, 352, 354, 356], "vector": [2, 6, 9, 27, 28, 30, 32, 37, 40, 47, 50, 56, 57, 59, 64, 68, 70, 72, 73, 78, 97, 212, 224, 227, 237, 238, 244, 263, 269, 290, 291, 293, 294, 295, 296, 299, 304, 308, 309, 313, 326, 328, 332, 336, 338, 340, 343, 344, 345, 346, 348, 350, 351, 352, 354, 355, 356, 360, 365, 366, 372, 376, 382, 391, 392, 394, 397, 398, 399, 422, 428, 436, 444, 446, 453, 459, 460, 463, 464, 465], "messag": [2, 6, 30, 32, 36, 50, 51, 52, 53, 57, 59, 64, 65, 66, 67, 70, 73, 89, 93, 98, 279, 290, 291, 292, 293, 295, 309, 314, 320, 328, 336, 341, 343, 344, 348, 350, 352, 354, 356, 367, 383, 387, 391, 392, 394, 397, 431, 439, 460], "sensorcollect": [2, 6, 9, 30, 37, 39, 43, 56, 57, 64, 125, 165, 183, 185, 204, 208, 210, 220, 224, 226, 279, 283, 293, 313, 332, 336, 337, 338, 340, 348, 352, 354, 490], "getsensor": [2, 6, 9, 30, 37, 39, 43, 57, 64, 279, 293, 332, 336, 337, 338, 340, 348, 350, 351, 352, 353, 354], "real_t": [2, 7, 14, 17, 18, 21, 27, 28, 30, 37, 39, 44, 45, 49, 57, 58, 64, 72, 73, 290, 293, 296, 297, 299, 301, 302, 314, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 330, 336, 338, 340, 341, 342, 344, 345, 348, 351, 352, 354, 355, 404, 405, 408, 409, 410, 415, 416, 417, 418, 421, 422, 423, 428, 433, 434, 435, 445, 448, 452, 454, 457, 468, 470, 471], "getactu": [2, 30, 57, 64, 279, 293, 340, 348, 352, 354], "unsign": [2, 30, 50, 57, 64, 70, 75, 76, 77, 78, 80, 83, 99, 101, 106, 291, 293, 295, 320, 348, 352, 354, 360, 361, 362, 363, 364, 369, 371, 372, 375, 376, 377, 391, 392], "int": [2, 9, 21, 27, 30, 42, 50, 57, 64, 68, 70, 71, 73, 75, 76, 77, 78, 80, 83, 89, 99, 101, 106, 156, 157, 290, 291, 293, 294, 295, 308, 320, 325, 326, 332, 333, 336, 341, 342, 344, 348, 350, 352, 354, 360, 361, 362, 363, 364, 366, 369, 371, 372, 373, 375, 376, 377, 383, 391, 392, 393, 394, 397, 406, 407, 411, 427, 432, 442, 443, 452, 460, 463], "rotor_index": [2, 30, 39, 57, 340, 348, 352, 354], "getactuatorcount": [2, 30, 57, 64, 279, 293, 348, 352, 354], "movebyrc": [2, 32, 40, 57, 279, 343, 346, 348, 354, 397, 398, 399], "rcdata": [2, 32, 40, 57, 64, 68, 72, 73, 162, 279, 284, 290, 293, 294, 343, 344, 345, 346, 348, 354, 397, 398, 399, 431, 444], "rc_data": [2, 32, 40, 57, 64, 72, 279, 293, 343, 344, 345, 346, 348, 354, 368, 397, 398, 431, 444], "setsimulatedgroundtruth": [2, 32, 57, 279, 343, 348, 354], "kinemat": [2, 6, 9, 10, 14, 30, 32, 39, 43, 44, 50, 54, 55, 57, 58, 60, 61, 68, 73, 123, 162, 163, 166, 173, 183, 204, 215, 216, 220, 226, 227, 229, 230, 279, 283, 290, 291, 293, 294, 296, 299, 301, 305, 311, 312, 318, 321, 323, 326, 329, 331, 332, 336, 337, 340, 343, 344, 348, 352, 354, 355, 357, 358, 391, 392, 397, 407, 431, 440, 462, 490], "state": [2, 6, 9, 10, 14, 18, 24, 25, 30, 32, 39, 43, 44, 50, 54, 55, 57, 58, 60, 61, 68, 73, 105, 169, 172, 195, 279, 283, 287, 290, 291, 293, 294, 296, 297, 299, 300, 301, 305, 311, 312, 323, 331, 332, 336, 337, 340, 341, 343, 344, 348, 350, 352, 354, 355, 357, 358, 360, 367, 372, 376, 391, 392, 398, 399, 407, 431, 440, 455, 462], "environ": [2, 6, 9, 10, 14, 32, 39, 43, 44, 49, 50, 54, 55, 57, 61, 68, 73, 123, 162, 163, 166, 173, 183, 213, 215, 220, 226, 230, 279, 283, 290, 291, 294, 296, 301, 311, 312, 315, 321, 323, 329, 331, 332, 336, 337, 340, 341, 343, 348, 354, 358, 391, 392, 440, 455, 490], "setrcdata": [2, 57, 64, 279, 293, 348, 354], "protect": [2, 3, 4, 5, 6, 7, 9, 12, 15, 16, 17, 18, 21, 26, 27, 28, 30, 32, 34, 37, 41, 43, 45, 48, 49, 50, 51, 57, 62, 96, 279, 291, 292, 296, 297, 302, 311, 314, 317, 318, 320, 325, 326, 328, 332, 335, 336, 337, 338, 341, 343, 347, 348, 349, 350, 351, 352, 353, 354, 359, 390, 397], "getkinematicsestim": [2, 30, 32, 57, 61, 95, 279, 343, 348, 352, 354, 358, 389, 397], "vector3r": [2, 9, 13, 14, 15, 18, 20, 21, 23, 28, 30, 32, 37, 40, 45, 46, 49, 50, 53, 57, 60, 63, 70, 73, 162, 279, 284, 290, 291, 295, 296, 297, 299, 300, 302, 303, 306, 307, 309, 310, 319, 320, 323, 324, 327, 328, 329, 330, 332, 338, 340, 341, 343, 344, 346, 348, 350, 352, 354, 357, 358, 391, 392, 394, 397, 398, 399, 407, 408, 409, 410, 416, 417, 418, 419, 421, 422, 423, 424, 425, 428, 429, 431, 439, 450, 452, 455, 457, 460, 461, 462, 464, 465, 466], "getposit": [2, 9, 30, 32, 45, 57, 61, 95, 279, 299, 302, 332, 343, 344, 348, 352, 354, 358, 360, 363, 367, 371, 389, 397, 407, 431], "getveloc": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "quaternionr": [2, 9, 30, 32, 53, 57, 60, 73, 162, 279, 284, 290, 299, 300, 309, 319, 327, 332, 338, 343, 344, 348, 352, 354, 357, 394, 397, 407, 408, 421, 431, 460, 461, 462, 465, 466], "getorient": [2, 9, 30, 32, 57, 61, 95, 279, 332, 343, 344, 348, 352, 354, 358, 389, 397, 407, 431], "landedst": [2, 30, 32, 57, 72, 216, 217, 279, 283, 343, 344, 345, 348, 352, 354, 431, 444], "getlandedst": [2, 30, 32, 57, 93, 98, 279, 343, 348, 352, 354, 367, 387], "getrcdata": [2, 57, 64, 68, 279, 293, 294, 343, 348, 354, 397], "getgpsloc": [2, 30, 32, 57, 279, 343, 348, 352, 354], "float": [2, 9, 11, 13, 21, 23, 30, 32, 40, 42, 50, 53, 57, 58, 63, 64, 68, 70, 71, 72, 73, 86, 87, 88, 94, 97, 102, 103, 104, 287, 290, 291, 293, 294, 295, 299, 306, 307, 308, 309, 310, 319, 320, 324, 327, 330, 332, 333, 334, 336, 343, 344, 345, 346, 348, 350, 352, 354, 355, 360, 361, 362, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 380, 381, 382, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 406, 407, 411, 423, 424, 425, 427, 432, 437, 439, 441, 442, 443, 447, 451, 455, 456, 460, 463, 464, 465, 467, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 487, 495], "getcommandperiod": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "gettakeoffz": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "getdistanceaccuraci": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "setcontrollergain": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "uint8_t": [2, 30, 32, 50, 57, 58, 70, 73, 87, 290, 291, 295, 343, 348, 350, 352, 354, 355, 381, 391, 392, 397, 460], "controllertyp": [2, 30, 32, 279, 343, 348, 352, 365, 368, 475], "kp": [2, 30, 32, 40, 57, 279, 343, 346, 348, 352, 354, 368, 370, 376, 397, 398, 399, 475, 476, 477, 479, 482, 483], "ki": [2, 30, 32, 40, 57, 279, 343, 346, 348, 352, 354, 368, 373, 374, 376, 397, 398, 399, 475, 476, 477, 479, 482, 483], "kd": [2, 30, 32, 40, 57, 279, 343, 346, 348, 352, 354, 368, 370, 376, 397, 398, 399, 475, 476, 477, 479, 482, 483], "commandmotorpwm": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "front_right_pwm": [2, 30, 32, 40, 57, 343, 346, 348, 352, 354, 397, 398, 399], "front_left_pwm": [2, 30, 32, 40, 57, 343, 346, 348, 352, 354, 397, 398, 399], "rear_right_pwm": [2, 30, 32, 40, 57, 343, 346, 348, 352, 354, 397, 398, 399], "rear_left_pwm": [2, 30, 32, 40, 57, 343, 346, 348, 352, 354, 397, 398, 399], "commandrollpitchyawratethrottl": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "roll": [2, 30, 32, 40, 57, 73, 77, 279, 290, 299, 319, 327, 336, 343, 346, 348, 350, 352, 354, 358, 360, 366, 367, 368, 372, 375, 376, 397, 398, 399, 469, 474], "pitch": [2, 30, 32, 40, 57, 73, 77, 279, 290, 299, 319, 327, 336, 343, 346, 348, 350, 352, 354, 358, 360, 366, 367, 368, 372, 375, 376, 397, 398, 399, 469, 474], "yaw_rat": [2, 30, 32, 40, 57, 343, 346, 348, 352, 354, 360, 397, 398, 399], "throttl": [2, 9, 30, 32, 40, 57, 71, 73, 78, 279, 290, 332, 333, 336, 338, 343, 346, 348, 352, 354, 360, 366, 367, 368, 372, 375, 376, 397, 398, 399, 403, 406, 442, 469, 474], "commandrollpitchyawz": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "yaw": [2, 30, 32, 40, 57, 73, 77, 279, 290, 299, 319, 327, 336, 343, 344, 346, 348, 350, 352, 354, 358, 360, 366, 367, 368, 371, 372, 375, 376, 394, 397, 398, 399, 469, 474], "z": [2, 30, 32, 37, 40, 53, 57, 77, 279, 290, 296, 299, 309, 319, 327, 338, 340, 343, 346, 348, 350, 351, 352, 354, 355, 357, 358, 360, 367, 368, 376, 391, 392, 394, 397, 398, 399], "commandrollpitchyawthrottl": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "commandrollpitchyawratez": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "commandangleratesz": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "roll_rat": [2, 30, 32, 40, 57, 343, 346, 348, 352, 354, 360, 397, 398, 399], "pitch_rat": [2, 30, 32, 40, 57, 343, 346, 348, 352, 354, 360, 397, 398, 399], "commandangleratesthrottl": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "commandveloc": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "vx": [2, 30, 32, 40, 53, 57, 309, 343, 346, 348, 352, 354, 360, 375, 394, 397, 398, 399], "vy": [2, 30, 32, 40, 53, 57, 309, 343, 346, 348, 352, 354, 360, 375, 394, 397, 398, 399], "vz": [2, 30, 32, 40, 57, 343, 346, 348, 352, 354, 360, 375, 397, 398, 399], "yawmod": [2, 30, 32, 40, 57, 72, 216, 217, 279, 283, 284, 343, 344, 345, 346, 348, 352, 354, 397, 398, 399], "yaw_mod": [2, 30, 32, 40, 57, 343, 346, 348, 352, 354, 397, 398, 399], "commandvelocityz": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "commandposit": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "x": [2, 30, 32, 37, 40, 57, 77, 279, 287, 290, 296, 299, 309, 319, 327, 330, 338, 340, 343, 346, 348, 351, 352, 354, 355, 357, 358, 360, 367, 368, 376, 391, 392, 394, 397, 398, 399], "y": [2, 30, 32, 40, 57, 77, 279, 287, 290, 296, 299, 319, 327, 338, 340, 343, 346, 348, 351, 352, 354, 355, 357, 358, 360, 367, 368, 373, 376, 391, 392, 397, 398, 399], "multirotorapiparam": [2, 30, 32, 53, 57, 216, 279, 283, 309, 343, 344, 348, 352, 354, 394], "getmultirotorapiparam": [2, 30, 32, 57, 279, 343, 348, 352, 354, 397], "closeconnect": [2, 6, 279, 336, 348], "connect": [2, 4, 6, 30, 50, 279, 290, 291, 336, 338, 340, 348, 350, 352, 391], "mavlinkvehicleset": [3, 5, 48, 336, 339, 349, 351, 353], "vehicle_set": [3, 5, 6, 9, 10, 37, 38, 43, 48, 57, 62, 331, 332, 336, 337, 338, 339, 349, 351, 353, 354, 359], "shared_ptr": [3, 5, 6, 9, 10, 30, 31, 32, 33, 38, 43, 48, 53, 56, 62, 309, 313, 331, 332, 336, 337, 338, 339, 343, 349, 350, 351, 352, 353, 359, 394, 397], "sensorfactori": [3, 5, 6, 9, 10, 37, 38, 43, 48, 62, 125, 183, 184, 187, 193, 195, 201, 204, 210, 221, 225, 231, 279, 283, 331, 332, 336, 337, 338, 339, 349, 351, 353, 359, 490], "sensor_factori": [3, 5, 6, 9, 10, 38, 43, 48, 62, 331, 332, 336, 337, 339, 349, 351, 353, 359], "unique_ptr": [3, 5, 10, 37, 38, 47, 48, 62, 69, 70, 291, 292, 295, 304, 305, 312, 331, 336, 338, 339, 340, 346, 348, 349, 351, 353, 354, 359, 361, 362, 363, 365, 370, 371, 375], "createmultirotorapi": [3, 5, 37, 48, 62, 279, 338, 349, 351, 353, 359], "setupparam": [3, 5, 37, 48, 62, 279, 338, 349, 351, 353, 359], "getsensorfactori": [3, 5, 37, 48, 62, 279, 338, 349, 351, 353, 359], "static": [3, 10, 25, 30, 37, 38, 60, 73, 77, 78, 82, 89, 105, 279, 287, 290, 293, 296, 299, 300, 331, 338, 339, 340, 341, 344, 348, 349, 350, 351, 352, 353, 354, 357, 360, 361, 368, 370, 372, 373, 374, 376, 383, 392, 420, 441, 453, 459, 460, 465, 472, 475], "getconnectioninfo": [3, 279, 349, 351, 353], "sensormessag": [4, 222, 279, 283, 350], "mavlinkmultirotorapi": [4, 32, 142, 177, 184, 186, 190, 192, 200, 211, 215, 222, 225, 279, 283, 339, 350, 353, 490], "close": [4, 30, 279, 336, 338, 348, 350, 352, 397], "rovercontrolmessag": [6, 208, 279, 283, 336], "carapibas": [6, 10, 11, 12, 43, 64, 71, 134, 165, 172, 183, 184, 185, 205, 206, 207, 208, 209, 279, 283, 331, 333, 334, 335, 336, 337, 395, 442, 443, 490], "vehicleset": [6, 9, 10, 37, 38, 43, 57, 62, 68, 294, 331, 332, 336, 337, 338, 339, 354, 359], "setcarcontrol": [6, 9, 11, 43, 279, 332, 334, 336, 337, 395, 396], "carcontrol": [6, 9, 11, 43, 71, 204, 205, 279, 283, 284, 332, 333, 334, 336, 337, 395, 396], "control": [6, 9, 11, 43, 97, 293, 299, 301, 332, 334, 336, 337, 340, 341, 343, 348, 350, 352, 354, 355, 360, 361, 363, 365, 366, 367, 368, 371, 372, 375, 376, 391, 392, 393, 394, 395, 396, 397, 398, 399], "updatecarst": [6, 9, 43, 279, 332, 336, 337], "carstat": [6, 9, 11, 43, 71, 204, 205, 279, 283, 284, 332, 333, 334, 336, 337, 395, 396], "car_stat": [6, 43, 336, 337], "getcarst": [6, 9, 11, 43, 279, 332, 334, 336, 337, 395, 396], "getcarcontrol": [6, 9, 11, 43, 279, 332, 334, 336, 337, 395, 396], "output": [7, 16, 21, 26, 28, 39, 49, 50, 64, 73, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 186, 192, 200, 213, 279, 283, 287, 290, 291, 293, 301, 309, 314, 315, 317, 318, 320, 321, 323, 325, 326, 328, 329, 336, 340, 341, 348, 352, 355, 360, 361, 365, 367, 370, 371, 375, 380, 391, 448, 458, 461, 464], "sensorbas": [7, 9, 16, 21, 26, 28, 55, 56, 125, 169, 172, 184, 185, 186, 189, 192, 197, 200, 204, 279, 283, 293, 312, 313, 314, 317, 320, 325, 328, 332, 336, 338, 348, 350, 352, 490], "barometersimpl": [7, 126, 185, 186, 188, 279, 283, 313, 490], "sensor_nam": [7, 16, 21, 26, 28, 54, 293, 311, 314, 315, 317, 318, 320, 321, 323, 325, 326, 328, 329], "reportst": [7, 9, 16, 19, 20, 21, 25, 26, 27, 28, 39, 44, 46, 49, 55, 69, 279, 298, 299, 300, 301, 303, 304, 305, 312, 314, 317, 320, 325, 326, 328, 332, 340, 341], "statereport": [7, 9, 16, 19, 20, 21, 25, 26, 27, 28, 39, 44, 46, 49, 55, 69, 298, 299, 300, 301, 303, 305, 312, 314, 317, 320, 325, 326, 328, 332, 340, 341], "report": [7, 9, 16, 19, 20, 21, 25, 26, 27, 28, 39, 44, 46, 49, 55, 69, 298, 299, 300, 301, 303, 305, 312, 314, 317, 320, 325, 326, 328, 332, 340, 341, 352], "getoutput": [7, 16, 21, 26, 28, 49, 74, 75, 76, 79, 80, 83, 90, 94, 99, 100, 101, 103, 104, 106, 279, 293, 304, 314, 315, 317, 318, 320, 321, 325, 328, 329, 336, 340, 341, 348, 352, 360, 361, 362, 363, 364, 365, 369, 370, 371, 373, 374, 375, 377, 384, 388], "setoutput": [7, 16, 21, 26, 28, 279, 314, 315, 317, 318, 320, 321, 323, 325, 326, 328, 329, 341], "member": [7, 9, 18, 21, 25, 28, 32, 36, 37, 40, 42, 44, 49, 50, 51, 53, 54, 69, 71, 72, 73, 279, 287, 305, 343, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 512], "ttimepoint": [7, 21, 28, 44, 73, 290, 299, 301, 314, 320, 323, 326, 328, 404, 414, 422, 448, 452, 454, 458, 460, 461, 463, 464], "time_stamp": [7, 21, 28, 73, 279, 290, 299, 314, 315, 318, 320, 321, 323, 325, 326, 328, 329, 404, 414, 422, 448, 452, 454, 458, 460, 461, 463, 464], "altitud": [7, 21, 32, 40, 73, 279, 290, 297, 314, 315, 320, 336, 343, 346, 348, 350, 352, 357, 397, 398, 399, 402, 404, 411, 448, 456], "pressur": [7, 73, 279, 290, 314, 315, 316, 352, 404, 448], "qnh": [7, 73, 279, 290, 314, 315, 316, 404, 405, 448], "barometerbas": [8, 50, 54, 64, 73, 126, 163, 165, 183, 187, 208, 220, 224, 279, 283, 290, 291, 293, 315, 336, 348, 352, 391, 448, 490], "barometerset": [8, 313, 315, 316, 405], "set": [8, 17, 22, 24, 27, 29, 94, 103, 104, 279, 287, 293, 295, 297, 299, 308, 311, 313, 315, 316, 318, 319, 321, 322, 323, 324, 326, 327, 329, 330, 332, 336, 338, 340, 343, 344, 348, 350, 351, 352, 354, 355, 361, 363, 365, 367, 370, 371, 372, 373, 374, 375, 376, 388, 393, 397, 405, 408, 415, 416, 421, 423], "arduroverapi": [9, 136, 184, 186, 190, 192, 198, 200, 203, 204, 279, 283, 331, 490], "physxcarapi": [9, 137, 203, 204, 279, 283, 331, 490], "initi": [9, 14, 18, 25, 30, 37, 44, 45, 49, 50, 54, 55, 68, 74, 75, 76, 79, 80, 83, 90, 99, 101, 106, 279, 291, 294, 296, 297, 299, 300, 301, 302, 304, 305, 308, 311, 312, 315, 318, 321, 322, 323, 326, 329, 332, 338, 339, 340, 341, 351, 352, 353, 360, 361, 362, 363, 364, 365, 367, 369, 371, 375, 377, 384, 391, 397], "addsensorsfromset": [9, 37, 279, 332, 338], "sensor_factory_": [9, 279, 332, 349, 351, 353, 359], "sensors_": [9, 30, 279, 312, 332, 336, 338, 348, 350, 352], "sensor_storage_": [9, 279, 332, 338], "throttle_v": [9, 332, 406], "steering_v": [9, 332, 406], "brake_v": [9, 332, 406], "handbrake_v": [9, 332, 406, 407], "is_manual_gear_v": [9, 332, 406], "manual_gear_v": [9, 332, 406], "gear_immediate_v": [9, 332, 406], "set_throttl": [9, 279, 332, 406], "forward": [9, 37, 327, 332, 338, 397, 406], "steer": [9, 71, 279, 332, 333, 336, 403, 406, 442], "brake": [9, 71, 279, 332, 333, 406, 442], "handbrak": [9, 71, 279, 332, 333, 406, 407, 442, 443], "fals": [9, 21, 42, 47, 50, 51, 70, 71, 73, 287, 290, 291, 293, 295, 299, 301, 304, 308, 319, 320, 327, 330, 332, 333, 336, 337, 340, 343, 348, 352, 354, 355, 360, 363, 367, 368, 390, 392, 393, 394, 397, 398, 406, 408, 414, 421, 438, 442, 452, 458, 469, 475, 480, 526], "is_manual_gear": [9, 71, 279, 332, 333, 336, 406, 442], "manual_gear": [9, 71, 279, 332, 333, 336, 406, 442], "gear_immedi": [9, 71, 279, 332, 333, 406, 442], "true": [9, 20, 47, 50, 71, 72, 287, 290, 291, 293, 298, 299, 304, 305, 306, 308, 309, 310, 319, 321, 323, 327, 329, 330, 332, 333, 336, 337, 338, 343, 344, 345, 348, 351, 352, 353, 354, 360, 363, 367, 371, 375, 376, 390, 391, 392, 393, 394, 397, 398, 406, 408, 421, 423, 441, 442, 447, 483, 506, 507, 516, 526], "speed_val": [9, 332, 344, 407, 434], "gear_val": [9, 332, 407], "rpm_val": [9, 332, 407], "maxrpm_val": [9, 332, 407], "kinematics_estimated_v": [9, 332, 344, 407, 431], "uint64_t": [9, 21, 30, 31, 47, 58, 69, 71, 72, 73, 85, 94, 103, 104, 290, 304, 305, 320, 321, 332, 333, 344, 345, 350, 352, 355, 360, 367, 368, 370, 372, 373, 374, 379, 388, 402, 407, 410, 431, 436, 443, 444, 446, 457, 469, 475, 480], "timestamp_v": [9, 332, 344, 407, 431, 436], "speed": [9, 49, 71, 72, 279, 299, 332, 333, 338, 341, 344, 345, 350, 354, 401, 402, 407, 433, 434, 443, 445], "gear": [9, 71, 279, 332, 333, 407, 443], "rpm": [9, 71, 279, 332, 333, 342, 407, 443], "maxrpm": [9, 71, 279, 332, 333, 407, 443], "kinematics_estim": [9, 71, 72, 279, 332, 333, 343, 344, 345, 407, 431, 443, 444], "timestamp": [9, 30, 31, 71, 72, 73, 279, 290, 325, 332, 333, 336, 343, 344, 345, 348, 350, 352, 397, 402, 407, 431, 436, 443, 444, 446, 469], "createapi": [10, 279, 331], "rpclibclientbas": [11, 40, 115, 116, 122, 147, 162, 167, 169, 172, 186, 189, 192, 200, 206, 218, 279, 283, 334, 346, 395, 398, 484, 490], "ip_address": [11, 40, 50, 291, 334, 346, 391, 395, 398, 437], "localhost": [11, 40, 50, 291, 334, 346, 352], "uint16_t": [11, 12, 40, 41, 50, 51, 58, 73, 86, 87, 290, 291, 292, 334, 335, 336, 346, 347, 348, 350, 352, 354, 355, 365, 368, 380, 381, 391, 392, 395, 396, 398, 399, 400, 401, 437, 438, 469, 475, 478, 480], "port": [11, 12, 40, 41, 50, 51, 291, 292, 334, 335, 336, 346, 347, 348, 350, 352, 391, 392, 395, 396, 398, 399, 437, 438], "rpclibport": [11, 12, 40, 41, 50, 51, 291, 292, 334, 335, 346, 347], "timeout_sec": [11, 30, 32, 40, 50, 291, 334, 343, 346, 352, 391, 395, 397, 398, 399, 437], "60": [11, 40, 50, 291, 334, 338, 342, 346, 352, 368, 475], "apiprovid": [12, 41, 51, 122, 164, 165, 166, 167, 279, 283, 292, 335, 347, 392, 396, 399, 490], "api_provid": [12, 41, 51, 292, 335, 347, 392, 396, 399], "server_address": [12, 41, 51, 292, 335, 347, 392, 396, 399, 438], "igeof": [13, 53, 63, 124, 181, 279, 283, 306, 309, 310, 394, 490], "point_min": [13, 306], "point_max": [13, 306], "distance_accuraci": [13, 63, 279, 306, 310, 344, 394, 427], "setboundri": [13, 23, 63, 279, 306, 307, 310, 394], "origin": [13, 23, 32, 40, 53, 63, 306, 307, 309, 310, 343, 346, 394, 397, 398, 399], "xy_length": [13, 23, 32, 40, 53, 63, 306, 307, 309, 310, 343, 346, 394, 397, 398, 399], "max_z": [13, 23, 32, 40, 53, 63, 306, 307, 309, 310, 343, 346, 394, 397, 398, 399], "min_z": [13, 23, 32, 40, 53, 63, 306, 307, 309, 310, 343, 346, 394, 397, 398, 399], "checkfenc": [13, 23, 63, 279, 306, 307, 309, 310, 394], "cur_loc": [13, 23, 63, 306, 307, 310, 344], "dest_loc": [13, 23, 32, 63, 306, 307, 310, 343], "in_fenc": [13, 23, 63, 306, 307, 310, 394], "allow": [13, 23, 63, 293, 297, 301, 302, 306, 307, 308, 310, 338, 341, 352, 354, 360, 368, 370, 372, 394, 397], "tostr": [13, 23, 42, 53, 63, 77, 78, 279, 296, 299, 306, 307, 308, 309, 310, 363, 376, 394, 397, 432, 439], "wrenchvertex": [14, 168, 279, 283, 296], "physicsbodi": [14, 20, 39, 46, 123, 168, 169, 172, 174, 175, 176, 177, 212, 220, 226, 279, 283, 296, 298, 299, 303, 304, 305, 340, 348, 354, 490], "updatekinemat": [14, 39, 44, 279, 296, 298, 299, 301, 340], "without": [14, 39, 44, 297, 299, 309, 343, 390, 391, 398], "getrestitut": [14, 39, 44, 279, 296, 299, 301, 340], "getfrict": [14, 39, 44, 279, 296, 299, 301, 340], "uint": [14, 37, 39, 44, 49, 50, 53, 54, 55, 58, 155, 291, 293, 296, 299, 301, 309, 311, 312, 327, 336, 338, 340, 341, 343, 344, 348, 350, 352, 354, 355, 393, 394, 397, 398, 399, 421, 424, 428], "wrenchvertexcount": [14, 39, 44, 279, 296, 299, 301, 340], "physicsbodyvertex": [14, 15, 39, 44, 49, 123, 173, 213, 279, 283, 296, 299, 301, 340, 341, 490], "getwrenchvertex": [14, 39, 44, 279, 296, 299, 301, 340], "index": [14, 39, 44, 55, 58, 77, 78, 86, 87, 287, 296, 301, 312, 332, 338, 340, 355, 376, 380, 381, 511], "dragvertexcount": [14, 39, 44, 279, 296, 299, 301, 340], "getdragvertex": [14, 39, 44, 279, 296, 299, 301, 340], "getshapevertex": [14, 279, 296], "shapevertexcount": [14, 279, 296], "thi": [15, 31, 33, 34, 35, 36, 37, 52, 65, 66, 67, 287, 292, 293, 294, 298, 299, 301, 302, 305, 308, 309, 316, 319, 338, 340, 341, 342, 343, 344, 349, 350, 351, 352, 355, 359, 360, 361, 366, 368, 371, 372, 375, 376, 377, 391, 392, 393, 394, 397, 398, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 422, 424, 425, 426, 428, 429, 430, 432, 433, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 476, 477, 478, 479, 480, 481, 482, 528], "i": [15, 31, 33, 34, 35, 36, 37, 52, 65, 66, 67, 279, 287, 290, 292, 293, 294, 298, 299, 300, 301, 302, 308, 309, 316, 318, 319, 323, 324, 326, 327, 329, 330, 331, 336, 338, 339, 340, 341, 342, 343, 344, 348, 350, 351, 352, 354, 355, 358, 360, 361, 362, 363, 365, 366, 367, 368, 370, 371, 372, 375, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 422, 424, 425, 426, 428, 429, 430, 432, 433, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482], "posit": [15, 18, 37, 45, 49, 50, 70, 73, 279, 290, 291, 295, 296, 297, 299, 300, 302, 309, 319, 320, 322, 326, 327, 332, 338, 340, 341, 343, 344, 352, 357, 358, 360, 367, 368, 372, 376, 391, 392, 394, 397, 409, 424, 429, 452, 455, 462, 465, 466, 473], "normal": [15, 37, 45, 49, 73, 279, 290, 296, 299, 302, 338, 340, 341, 343, 352, 360, 393, 394, 397, 429, 452], "forc": [15, 296, 299, 301, 302, 340, 341, 342], "zero": [15, 20, 25, 77, 78, 279, 296, 299, 300, 301, 302, 309, 319, 324, 327, 329, 330, 338, 344, 360, 368, 372, 376, 394, 397, 416, 417, 418, 420, 441], "setwrench": [15, 44, 45, 49, 279, 296, 299, 301, 302, 341], "wrench": [15, 44, 45, 49, 296, 299, 301, 302, 341], "distancesimpl": [16, 127, 189, 191, 208, 220, 224, 279, 283, 336, 348, 352, 490], "distancesensordata": [16, 50, 64, 73, 162, 279, 284, 290, 291, 293, 317, 318, 391, 392], "distancebas": [17, 54, 127, 163, 165, 183, 190, 279, 283, 291, 293, 318, 490], "distanceset": [17, 318, 319, 408], "distancesimpleparam": [17, 127, 190, 279, 283, 318, 490], "getparam": [17, 27, 37, 279, 318, 326, 336, 338, 340, 348, 349, 351, 352, 353, 354, 359], "getraylength": [17, 279, 318], "pose": [17, 25, 27, 30, 44, 50, 68, 70, 73, 162, 279, 284, 290, 291, 294, 295, 296, 299, 300, 301, 318, 319, 323, 326, 327, 329, 332, 336, 338, 340, 343, 344, 348, 351, 352, 355, 357, 358, 391, 392, 397, 408, 420, 421, 451, 453, 454, 463], "updatableobject": [18, 25, 44, 45, 47, 54, 55, 64, 68, 69, 165, 166, 169, 172, 173, 174, 183, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 312, 314, 317, 320, 325, 328, 329, 352], "sethomegeopoint": [18, 279, 297], "home_geo_point": [18, 105, 297, 376], "setposit": [18, 45, 279, 297, 299, 302], "getinitialst": [18, 25, 279, 297, 300, 301], "getstat": [18, 25, 105, 279, 297, 299, 300, 301, 315, 321, 323, 329, 341, 358, 367, 372, 376, 392], "failresetupdateord": [18, 279, 297], "err": [18, 297], "position_v": [18, 37, 297, 338, 409, 429], "geo_point_v": [18, 297, 409], "geo_point": [18, 21, 60, 73, 279, 290, 297, 315, 320, 321, 329, 336, 348, 350, 352, 357, 358, 392, 409, 410, 412, 453, 455, 457], "graviti": [18, 37, 73, 279, 290, 297, 299, 323, 324, 338, 360, 409, 416, 417, 455], "air_pressur": [18, 73, 279, 290, 297, 409, 455], "temperatur": [18, 73, 279, 290, 297, 352, 409, 455], "air_dens": [18, 73, 279, 290, 297, 299, 341, 342, 409, 435, 455], "physicsenginebas": [19, 20, 47, 69, 123, 170, 171, 173, 176, 177, 279, 283, 298, 299, 304, 305, 490], "enable_ground_lock": [20, 299], "wind": [20, 46, 50, 70, 291, 295, 299, 303, 391, 392], "ext_forc": [20, 46, 50, 70, 291, 295, 299, 303, 391, 392], "insert": [20, 55, 69, 279, 287, 299, 304, 305, 308, 312, 313, 356], "body_ptr": [20, 298, 299], "setwind": [20, 46, 70, 279, 295, 299, 303, 392], "setextforc": [20, 46, 70, 279, 295, 299, 303, 392], "gnssreport": [21, 73, 162, 192, 279, 283, 284, 290, 320, 414, 458], "gpspoint": [21, 192, 279, 283, 320], "navsatfix": [21, 192, 279, 283, 320], "navsatstatu": [21, 192, 279, 283, 320, 412], "gpssimpl": [21, 128, 185, 192, 194, 279, 283, 313, 490], "enum": [21, 50, 53, 54, 70, 291, 295, 309, 311, 320, 330, 342, 344, 368, 372, 376, 423, 475, 483, 490, 528], "navsatstatustyp": [21, 279, 320, 413], "valu": [21, 50, 53, 54, 58, 70, 154, 155, 156, 157, 158, 287, 291, 295, 299, 308, 316, 319, 323, 324, 336, 338, 340, 342, 343, 348, 350, 352, 355, 360, 367, 368, 372, 376, 391, 392, 393, 397, 398, 423, 475, 483], "enumer": [21, 50, 53, 54, 70, 154, 155, 156, 157, 158, 423, 475, 483], "status_no_fix": [21, 279, 320], "status_fix": [21, 279, 320], "status_sbas_fix": [21, 279, 320], "status_gbas_fix": [21, 279, 320], "navsatstatusservicetyp": [21, 279, 320, 413], "service_gp": [21, 279, 320], "service_glonass": [21, 279, 320], "service_compass": [21, 279, 320], "service_galileo": [21, 279, 320], "positioncovariancetyp": [21, 279, 320, 412], "covariance_type_unknown": [21, 279, 320], "covariance_type_approxim": [21, 279, 320], "covariance_type_diagonal_known": [21, 279, 320], "covariance_type_known": [21, 279, 320], "gnssfixtyp": [21, 73, 162, 279, 290, 320, 321, 410, 457], "gnss_fix_no_fix": [21, 279, 320, 321], "gnss_fix_time_onli": [21, 279, 320], "gnss_fix_2d_fix": [21, 279, 320, 321], "gnss_fix_3d_fix": [21, 279, 320, 321], "eph": [21, 73, 279, 290, 320, 321, 352, 410, 457], "epv": [21, 73, 279, 290, 320, 321, 352, 410, 457], "veloc": [21, 30, 32, 40, 53, 73, 279, 290, 299, 301, 309, 320, 321, 324, 336, 340, 343, 344, 346, 348, 350, 352, 355, 360, 367, 368, 382, 394, 397, 398, 399, 410, 425, 457], "fix_typ": [21, 73, 279, 290, 320, 321, 352, 410, 457], "time_utc": [21, 73, 279, 290, 320, 321, 352, 410, 457], "doubl": [21, 47, 50, 69, 70, 73, 290, 291, 295, 299, 304, 305, 320, 348, 350, 352, 355, 360, 376, 391, 392, 398, 402, 411, 412, 456, 472], "latitude_v": [21, 320, 411], "longitude_v": [21, 320, 411], "altitude_v": [21, 320, 411], "health_val": [21, 320, 411], "1": [21, 30, 32, 37, 40, 49, 50, 64, 73, 89, 287, 290, 291, 293, 294, 295, 296, 299, 301, 305, 306, 308, 309, 310, 311, 315, 316, 319, 320, 321, 322, 323, 324, 327, 330, 332, 336, 338, 340, 341, 342, 343, 344, 346, 348, 350, 351, 352, 354, 355, 360, 366, 368, 370, 372, 373, 375, 376, 380, 381, 383, 391, 392, 393, 394, 397, 408, 411, 415, 416, 417, 421, 423, 427, 428, 435, 452, 468, 475, 476, 477, 478, 479, 480, 482, 483, 505], "height_val": [21, 320, 411], "numeric_limit": [21, 320, 372, 376, 411, 472], "quiet_nan": [21, 320, 376, 411, 472], "to_str": [21, 279, 320, 350, 352, 361, 362, 363, 371, 372, 375, 376, 411], "latitud": [21, 32, 40, 73, 279, 290, 320, 336, 343, 346, 348, 350, 352, 357, 376, 397, 398, 399, 402, 411, 456, 472], "longitud": [21, 32, 40, 73, 279, 290, 320, 336, 343, 346, 348, 350, 352, 357, 376, 397, 398, 399, 402, 411, 456, 472], "height": [21, 70, 73, 279, 290, 295, 320, 342, 343, 352, 360, 411, 460], "health": [21, 279, 320, 343, 411], "position_covari": [21, 279, 320, 412], "9": [21, 320, 328, 351, 354, 360, 412], "statu": [21, 279, 320, 343, 352, 355, 398, 412, 413], "position_covariance_typ": [21, 279, 320, 412], "servic": [21, 279, 320, 413], "gnss": [21, 73, 279, 290, 320, 321, 336, 348, 350, 352, 414, 458], "is_valid": [21, 73, 279, 290, 293, 320, 321, 348, 352, 354, 397, 414, 458, 469], "gpsbase": [22, 50, 54, 64, 73, 128, 162, 163, 165, 183, 193, 208, 220, 224, 279, 283, 290, 291, 293, 321, 336, 348, 352, 391, 457, 458, 490], "gpsset": [22, 313, 321, 322, 415], "cubegeof": [23, 124, 279, 283, 310, 490], "spheregeof": [23, 124, 279, 283, 490], "imubas": [24, 50, 64, 73, 163, 165, 195, 208, 220, 224, 290, 291, 293, 323, 336, 348, 352, 391, 461], "imuset": [24, 313, 323, 324, 416], "getpos": [25, 44, 68, 279, 294, 300, 301, 392], "setpos": [25, 44, 68, 279, 294, 300, 301, 392], "twist": [25, 44, 279, 290, 296, 299, 300, 301, 321, 323, 343, 352, 355, 357, 358, 397, 420], "gettwist": [25, 44, 279, 300, 301], "settwist": [25, 44, 279, 300, 301], "setstat": [25, 105, 279, 300, 301, 367, 372, 376], "acceler": [25, 279, 290, 299, 300, 323, 352, 355, 357, 358, 360, 420], "lidarsimpl": [26, 130, 197, 199, 208, 220, 279, 283, 336, 348, 490], "lidardata": [26, 50, 64, 73, 162, 279, 284, 290, 291, 293, 325, 326, 391, 392], "lidarbas": [27, 54, 130, 165, 183, 198, 279, 283, 293, 326, 490], "lidarset": [27, 326, 327, 421], "lidarsimpleparam": [27, 130, 198, 279, 283, 326, 490], "getpointcloud": [27, 279, 326], "lidar_pos": [27, 326], "vehicle_pos": [27, 326], "ttimedelta": [27, 299, 323, 326, 391, 397], "delta_tim": [27, 326], "point_cloud": [27, 73, 279, 290, 325, 326, 336, 348, 463], "segmentation_cloud": [27, 326], "magnetometersimpl": [28, 131, 185, 200, 202, 279, 283, 313, 490], "magnetic_field_bodi": [28, 73, 279, 290, 328, 329, 352, 422, 464], "magnetic_field_covari": [28, 73, 279, 290, 328, 329, 422, 464], "magnetometerbas": [29, 50, 54, 64, 73, 131, 163, 165, 183, 201, 208, 220, 224, 279, 283, 290, 291, 293, 329, 336, 348, 352, 391, 464, 490], "magnetometerset": [29, 313, 329, 330, 423], "mavlinklogviewerlog": [30, 224, 279, 283, 352], "arducoptersoloapi": [30, 142, 223, 224, 279, 283, 351, 490], "sensor": [30, 55, 56, 121, 126, 127, 128, 129, 130, 131, 163, 165, 204, 208, 210, 220, 221, 224, 225, 226, 231, 291, 293, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 336, 338, 340, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 490], "is_simul": [30, 352], "getmocappos": [30, 279, 352], "long": [30, 343, 352, 391], "getsimtim": [30, 279, 352], "advancetim": [30, 279, 352], "isreadi": [30, 64, 279, 293, 343, 352], "canarm": [30, 64, 279, 293, 343, 352], "onarm": [30, 279, 352], "ondisarm": [30, 279, 352], "waitforhomeloc": [30, 279, 352], "waitforstablegroundposit": [30, 279, 352], "takeoff": [30, 32, 240, 279, 285, 343, 348, 351, 352, 354, 368, 397, 398, 399, 475], "land": [30, 32, 155, 279, 299, 343, 344, 348, 352, 354, 367, 397, 398, 399], "gohom": [30, 32, 279, 343, 352, 397, 398, 399], "movetoposit": [30, 32, 279, 343, 352, 397, 398, 399], "drivetraintyp": [30, 32, 40, 216, 217, 279, 283, 343, 344, 345, 346, 352, 397, 398, 399], "drivetrain": [30, 32, 40, 343, 346, 352, 397, 398, 399], "lookahead": [30, 32, 40, 343, 346, 352, 397, 398, 399], "adaptive_lookahead": [30, 32, 40, 343, 346, 352, 397, 398, 399], "hover": [30, 32, 279, 343, 352, 367, 394, 397, 398, 399], "sendtelemetri": [30, 64, 279, 293, 352], "last_interv": [30, 64, 293, 352], "writetelemetri": [30, 279, 352], "start_telemtry_thread": [30, 279, 352], "telemtry_thread": [30, 279, 352], "beforetask": [30, 32, 279, 343, 352], "aftertask": [30, 32, 279, 343, 352], "disconnect": [30, 50, 279, 291, 352, 391], "connect_thread": [30, 279, 352], "closeallconnect": [30, 279, 350, 352], "attribut": [30, 89, 279], "mutabl": [30, 343, 352], "mutex": [30, 180, 224, 301, 308, 350, 352, 393], "hil_controls_mutex_": [30, 279, 350, 352], "connection_info_": [30, 279, 336, 348, 349, 350, 351, 352, 353, 359], "rotor_controls_": [30, 279, 348, 350, 352], "rotorcontrolscount": [30, 279, 350, 352], "is_simulation_mode_": [30, 279, 350, 352], "8": [30, 287, 295, 296, 320, 338, 348, 352, 354, 360, 368, 475, 479], "mavlinkcom": [30, 31, 279, 336, 348, 350, 352], "mavlinklog": [30, 31, 352], "mavlinknod": [30, 31, 224, 352], "proxi": [30, 31, 352], "write": [30, 31, 279, 352, 365], "mavlinkmessag": [30, 31, 224, 352], "msg": [30, 31, 299, 350, 352], "obsstrategychang": [32, 215, 279, 283, 343], "pathposit": [32, 215, 279, 283, 343, 397], "pathseg": [32, 215, 279, 283, 343, 397], "singlecal": [32, 35, 215, 279, 283, 343, 352, 397], "singletaskcal": [32, 34, 215, 279, 283, 343, 352, 397], "statuslock": [32, 215, 279, 283, 343, 352], "unsafemoveexcept": [32, 64, 67, 215, 279, 283, 343, 397], "arducopterapi": [32, 141, 169, 172, 173, 184, 186, 190, 192, 198, 200, 215, 221, 279, 283, 349, 490], "simpleflightapi": [32, 143, 169, 172, 173, 184, 215, 227, 228, 229, 230, 231, 237, 279, 283, 359, 490], "movetogp": [32, 279, 343, 397, 398, 399], "movebyvelocitybodyfram": [32, 279, 343, 397, 398, 399], "durat": [32, 40, 50, 70, 287, 291, 295, 343, 346, 391, 392, 397, 398, 399, 521], "movebyvelocityzbodyfram": [32, 279, 343, 397, 398, 399], "movebymotorpwm": [32, 279, 343, 365, 397, 398, 399], "movebyrollpitchyawz": [32, 279, 343, 397, 398, 399], "movebyrollpitchyawthrottl": [32, 279, 343, 397, 398, 399], "movebyrollpitchyawratethrottl": [32, 279, 343, 397, 398, 399], "movebyrollpitchyawratez": [32, 279, 343, 397, 398, 399], "movebyangleratesz": [32, 279, 343, 397, 398, 399], "movebyangleratesthrottl": [32, 279, 343, 397, 398, 399], "movebyveloc": [32, 279, 343, 397, 398, 399], "movebyvelocityz": [32, 279, 343, 397, 398, 399], "moveonpath": [32, 279, 343, 397, 398, 399], "path": [32, 40, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 287, 343, 346, 352, 391, 397, 398, 399], "movetoz": [32, 279, 343, 397, 398, 399], "movebymanu": [32, 279, 343, 397, 398, 399], "vx_max": [32, 40, 343, 346, 397, 398, 399], "vy_max": [32, 40, 343, 346, 397, 398, 399], "z_min": [32, 40, 343, 346, 397, 398, 399], "rotatetoyaw": [32, 279, 343, 397, 398, 399], "margin": [32, 40, 343, 346, 397, 398, 399], "rotatebyyawr": [32, 279, 343, 397, 398, 399], "estimaterctrim": [32, 279, 343, 397], "trimdur": [32, 343, 397], "mincountfortrim": [32, 343, 397], "10": [32, 322, 323, 327, 338, 343, 352, 354, 360, 368, 397, 421, 475, 480], "maxtrim": [32, 343, 397], "100": [32, 315, 316, 319, 320, 321, 322, 327, 336, 338, 342, 343, 348, 352, 368, 397, 405, 408, 415, 421, 435, 475, 480], "setanglelevelcontrollergain": [32, 40, 279, 343, 346, 397, 398, 399], "setangleratecontrollergain": [32, 40, 279, 343, 346, 397, 398, 399], "setvelocitycontrollergain": [32, 40, 279, 343, 346, 397, 398, 399], "setpositioncontrollergain": [32, 40, 279, 343, 346, 397, 398, 399], "setsafetyev": [32, 279, 343, 397], "safetyev": [32, 33, 36, 40, 124, 148, 162, 165, 179, 180, 215, 216, 217, 279, 283, 290, 293, 343, 345, 346, 352, 397, 398, 399, 490], "safety_eval_ptr": [32, 33, 343, 397], "setsafeti": [32, 40, 53, 279, 309, 343, 346, 394, 397, 398, 399], "safetyviolationtyp": [32, 40, 53, 279, 309, 343, 346, 394, 397, 398, 399, 439], "enable_reason": [32, 40, 53, 309, 343, 346, 394, 397, 398, 399], "obs_clear": [32, 40, 53, 279, 309, 343, 344, 346, 394, 397, 398, 399, 427], "obsavoidancestrategi": [32, 33, 40, 53, 162, 279, 290, 309, 343, 346, 394, 397, 398, 399], "obs_startegi": [32, 40, 343, 346, 397, 398, 399], "obs_avoidance_vel": [32, 40, 343, 346, 397, 398, 399], "rotorst": [32, 40, 72, 216, 217, 279, 283, 284, 343, 344, 345, 346, 398, 399], "getrotorst": [32, 40, 279, 343, 346, 398, 399], "multirotorst": [32, 40, 72, 216, 217, 279, 283, 284, 343, 344, 345, 346, 398, 399], "getmultirotorst": [32, 40, 279, 343, 346, 398, 399], "cancellasttask": [32, 50, 64, 279, 291, 293, 343, 352, 391, 392, 397], "setrotorst": [32, 279, 343], "rotor_st": [32, 343], "typedef": [32, 53, 55, 309, 312, 321, 343, 354, 366, 376, 391, 392, 395, 396, 398, 399, 490, 528], "waitfunct": [32, 279, 343, 397], "getautolookahead": [32, 279, 343, 397], "max_factor": [32, 343, 397], "40": [32, 343], "min_factor": [32, 343, 397], "30": [32, 338, 343], "getobsavoidanceveloc": [32, 279, 343, 397], "risk_dist": [32, 343, 397], "max_obs_avoidance_vel": [32, 343, 397], "movebyrollpitchyawzintern": [32, 279, 343, 397], "movebyrollpitchyawthrottleintern": [32, 279, 343, 397], "movebyrollpitchyawratethrottleintern": [32, 279, 343, 397], "movebyrollpitchyawratezintern": [32, 279, 343, 397], "movebyanglerateszintern": [32, 279, 343, 397], "movebyangleratesthrottleintern": [32, 279, 343, 397], "movebyvelocityintern": [32, 279, 343, 397], "movebyvelocityzintern": [32, 279, 343, 397], "movetopositionintern": [32, 279, 343, 352, 397], "dest": [32, 53, 306, 309, 343, 394, 397], "emergencymaneuverifunsaf": [32, 279, 343, 397], "evalresult": [32, 36, 53, 181, 279, 283, 309, 343, 394, 397], "result": [32, 36, 279, 308, 309, 338, 343, 351, 352, 360, 372, 391, 392, 394, 397, 398], "safetycheckveloc": [32, 279, 343, 397], "safetycheckvelocityz": [32, 279, 343, 397], "safetycheckdestin": [32, 279, 343, 397], "waiter": [32, 165, 293, 343, 352, 397], "waitforfunct": [32, 279, 343, 352, 397], "max_wait": [32, 343], "waitforz": [32, 279, 343, 352, 397], "canceltoken": [32, 343], "getcanceltoken": [32, 279, 343, 352, 397], "api": [32, 34, 35, 121, 133, 138, 146, 150, 152, 181, 208, 209, 210, 212, 220, 224, 226, 266, 287, 288, 289, 290, 291, 292, 293, 294, 295, 299, 309, 326, 332, 333, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 367, 372, 391, 392, 394, 395, 396, 397, 398, 399, 426, 497, 526, 528], "isrootcal": [32, 34, 279, 343], "vehiclemoveexcept": [32, 36, 64, 66, 165, 279, 283, 293, 343, 352, 397], "result_v": [32, 36, 343], "type": [33, 70, 279, 291, 293, 299, 301, 312, 313, 314, 320, 328, 329, 332, 338, 341, 343, 352, 354, 363, 370, 391, 392, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 414, 417, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 476, 477, 478, 479, 480, 481, 482, 483], "new_startegi": [33, 343], "param": [37, 39, 49, 50, 58, 70, 75, 76, 79, 81, 97, 98, 101, 102, 106, 144, 210, 227, 233, 234, 236, 237, 238, 239, 241, 243, 247, 248, 279, 283, 285, 291, 295, 315, 316, 318, 319, 321, 323, 326, 327, 329, 330, 338, 340, 341, 349, 351, 352, 353, 354, 355, 359, 361, 362, 363, 364, 365, 366, 367, 369, 371, 372, 375, 376, 391, 392, 490], "rotorpos": [37, 210, 279, 283, 338, 340, 428], "arducopterparam": [37, 141, 185, 211, 220, 233, 234, 236, 237, 238, 239, 241, 243, 247, 279, 283, 339, 490], "arducoptersoloparam": [37, 142, 211, 222, 279, 283, 339, 490], "px4multirotorparam": [37, 142, 185, 211, 224, 279, 283, 339, 349, 359, 490], "simpleflightquadxparam": [37, 143, 185, 211, 226, 279, 283, 339, 490], "setupframegenericquad": [37, 279, 338, 349, 353, 359], "setupframegenerichex": [37, 279, 338, 353], "setupframegenericocto": [37, 279, 338, 353], "setupframeflamewheel": [37, 279, 338, 353], "setupframeflamewheelfla": [37, 279, 338, 353], "setupframeblacksheep": [37, 279, 338, 353], "initializerotorquadx": [37, 279, 338, 351, 365], "rotor_pos": [37, 279, 338, 340, 351, 428], "rotor_count": [37, 279, 338, 340, 348, 351, 354, 428], "arm_length": [37, 338, 351], "rotor_z": [37, 338, 351], "4": [37, 73, 287, 290, 295, 296, 299, 308, 311, 320, 322, 324, 338, 342, 351, 352, 354, 355, 360, 366, 368, 373, 376, 392, 397, 415, 416, 418, 428, 435, 467, 475, 478, 480, 496], "rotor": [37, 72, 279, 336, 338, 340, 341, 343, 344, 345, 348, 350, 351, 352, 360, 398, 399, 436, 446], "usual": [37, 287, 293, 338, 344, 352], "quadx": [37, 366], "pattern": [37, 287, 338], "http": [37, 287, 296, 299, 315, 316, 319, 323, 324, 327, 330, 338, 341, 342, 351, 509], "ardupilot": [37, 336, 338, 348, 350, 351, 352], "org": [37, 287, 299, 315, 338, 509], "copter": [37, 338, 368], "_imag": [37, 338], "motors_quadx_quadplu": [37, 338], "jpg": [37, 338], "which": [37, 293, 294, 299, 308, 311, 318, 321, 332, 338, 340, 341, 342, 343, 351, 352, 354, 360, 365, 375, 394, 397], "show": [37, 316, 344], "given": [37, 293, 338, 342, 343, 344, 351, 367, 393, 397], "an": [37, 293, 297, 299, 311, 323, 336, 348, 350, 352, 360], "arrai": [37, 181, 309, 336, 348], "motor": [37, 240, 279, 285, 336, 338, 348, 351, 352, 355, 365, 366, 367, 368, 372, 381, 475], "first": [37, 293, 294, 299, 305, 308, 312, 341, 352, 360, 361, 375, 390, 391, 392, 395, 396, 397, 398, 399], "place": [37, 296], "top": [37, 287, 338], "right": [37, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 391, 392, 393, 394, 395, 396, 397, 398, 399], "fli": 37, "counter": [37, 299, 338, 352], "clockwis": [37, 338, 342], "ccw": [37, 338], "second": [37, 47, 50, 69, 70, 291, 295, 299, 304, 305, 312, 313, 342, 343, 352, 361, 391, 392], "bottom": 37, "left": [37, 308, 338, 394], "also": [37, 287, 297, 299, 318, 340, 352, 397], "The": [37, 287, 293, 297, 300, 308, 340, 352, 360, 376, 397, 495, 500], "third": 37, "cw": [37, 338], "while": [37, 294, 299, 305, 308, 309, 326, 336, 340, 348, 352, 368, 372, 391, 392, 397], "last": [37, 299, 332, 340, 348, 352, 354, 363, 365, 372, 391, 397, 398], "how": [37, 309, 338, 352, 368, 397], "item": [37, 290], "arm_angl": [37, 338], "us": [37, 287, 293, 294, 299, 301, 311, 315, 316, 319, 330, 332, 336, 338, 340, 341, 342, 343, 348, 349, 350, 351, 352, 355, 358, 359, 360, 361, 365, 367, 371, 375, 376, 377, 391, 392, 395, 396, 397, 398, 399, 526], "so": [37, 287, 299, 305, 308, 323, 336, 338, 340, 341, 348, 350, 351, 352, 354, 361, 368, 371, 375, 391, 393, 397], "number": [37, 287, 293, 308, 316, 319, 338, 342, 348, 352, 354, 368, 397], "meter": [37, 290, 314, 327, 336, 342, 348, 351, 352, 354, 368], "where": [37, 308, 342, 394], "four": 37, "length": [37, 336, 338, 348, 350, 351, 352, 360, 373, 397], "2": [37, 89, 293, 295, 296, 299, 306, 308, 309, 310, 311, 320, 321, 323, 324, 336, 338, 340, 342, 344, 348, 350, 351, 352, 354, 355, 360, 361, 362, 368, 371, 372, 373, 375, 376, 382, 383, 393, 394, 397, 427, 475, 476, 477, 478, 480, 481, 482], "3": [37, 50, 58, 88, 291, 295, 299, 308, 311, 316, 320, 322, 323, 325, 336, 338, 342, 344, 348, 351, 352, 354, 355, 360, 368, 372, 373, 375, 376, 382, 394, 397, 415, 427, 475, 476, 480, 482], "degre": [37, 338, 350, 352, 368], "rel": [37, 287, 299, 326, 338, 352, 397], "provid": [37, 351, 352], "same": [37, 293, 297, 314, 315, 320, 328, 330, 341, 344, 350, 351, 352, 372, 397], "order": [37, 318, 338, 365], "exampl": [37, 287, 300, 344, 349, 359, 391], "angl": [37, 299, 308, 338, 343, 344, 350, 352, 354, 358, 360, 361, 368, 372, 376, 394, 397], "regular": [37, 316], "symmetr": [37, 293], "would": [37, 299, 311, 315, 338, 342, 343, 344, 368, 372, 397], "45": [37, 321, 327, 360, 421], "225": [37, 342], "315": 37, "offset": [37, 279, 330, 343, 397, 424], "each": [37, 287, 301, 308, 321, 338, 340, 372, 394, 397], "upward": [37, 338], "center": [37, 63, 299, 310, 338, 344, 351, 372], "mass": [37, 44, 279, 296, 301, 338, 340, 351, 360, 428], "initializerotorhexx": [37, 279, 338], "initializerotoroctox": [37, 279, 338], "initializerotor": [37, 279, 338], "rotorturningdirect": [37, 49, 214, 279, 283, 338, 341, 342, 429, 433], "rotor_direct": [37, 338], "direct": [37, 279, 299, 308, 338, 340, 341, 350, 394, 397, 401, 429], "you": [37, 287, 338, 342, 351, 352, 526], "want": [37, 294, 299, 338, 342, 343, 351, 352, 397], "spin": 37, "computeinertiamatrix": [37, 279, 296, 338, 351], "matrix3x3r": [37, 44, 296, 301, 338, 428], "inertia": [37, 44, 279, 296, 301, 338, 340, 351, 360, 428], "body_box": [37, 279, 296, 338, 340, 351, 428], "box_mass": [37, 296, 338, 351], "motor_assembly_weight": [37, 338, 351], "linear_drag_coeffici": [37, 279, 338, 340, 428], "3f": [37, 296, 321, 338, 368, 428, 475, 480], "0f": [37, 50, 291, 296, 297, 299, 301, 305, 315, 316, 318, 319, 322, 324, 327, 330, 338, 340, 341, 342, 344, 348, 350, 352, 354, 360, 366, 368, 376, 397, 405, 408, 415, 416, 417, 418, 421, 423, 427, 428, 435, 441, 475, 476, 477, 479, 481, 482, 483], "angular_drag_coeffici": [37, 279, 338, 428], "restitut": [37, 279, 299, 338, 340, 428], "55f": [37, 338, 428], "friction": [37, 279, 299, 338, 340, 428], "5f": [37, 296, 299, 338, 343, 344, 348, 351, 352, 354, 360, 368, 397, 427, 428, 475, 476, 477, 480], "rotorparam": [37, 49, 138, 156, 210, 213, 279, 283, 338, 341, 428, 490], "rotor_param": [37, 279, 338, 340, 351, 428], "normal_v": [37, 338, 429], "direction_v": [37, 338, 429], "createconfig": [38, 279, 339], "updatesensorsandcontrol": [39, 279, 340], "rotoractu": [39, 45, 138, 169, 174, 212, 214, 279, 283, 340, 490], "getrotoroutput": [39, 279, 340], "impl": [40, 50, 51, 263, 264, 270, 279, 283, 291, 292, 346, 391, 392, 398], "takeoffasync": [40, 279, 346, 398], "20": [40, 316, 319, 346, 350, 360, 405, 408], "landasync": [40, 279, 346, 398], "gohomeasync": [40, 279, 346, 398], "util": [40, 50, 160, 162, 177, 181, 205, 217, 224, 233, 234, 235, 236, 243, 263, 264, 265, 267, 268, 270, 271, 288, 290, 291, 293, 299, 301, 305, 306, 308, 309, 310, 319, 320, 324, 327, 331, 333, 336, 338, 339, 341, 343, 345, 346, 348, 350, 352, 354, 356, 358, 361, 362, 363, 364, 369, 371, 375, 391, 392, 393, 394, 395, 396, 397, 398, 399], "max": [40, 73, 279, 290, 306, 309, 316, 323, 338, 346, 352, 366, 370, 373, 374, 375, 391, 392, 393, 394, 397, 398, 449, 450], "movetogpsasync": [40, 279, 346, 398], "maxdegreeoffreedom": [40, 154, 279, 344, 346, 397], "movebyvelocitybodyframeasync": [40, 279, 346, 398], "movebyvelocityzbodyframeasync": [40, 279, 346, 398], "movebymotorpwmsasync": [40, 279, 346, 398], "movebyrollpitchyawzasync": [40, 279, 346, 398], "movebyrollpitchyawthrottleasync": [40, 279, 346, 398], "movebyrollpitchyawratethrottleasync": [40, 279, 346, 398], "movebyrollpitchyawratezasync": [40, 279, 346, 398], "movebyanglerateszasync": [40, 279, 346, 398], "movebyangleratesthrottleasync": [40, 279, 346, 398], "movebyvelocityasync": [40, 279, 346, 398], "movebyvelocityzasync": [40, 279, 346, 398], "moveonpathasync": [40, 279, 346, 398], "movetopositionasync": [40, 279, 346, 398], "movetozasync": [40, 279, 346, 398], "movebymanualasync": [40, 279, 346, 398], "rotatetoyawasync": [40, 279, 346, 398], "5": [40, 295, 311, 330, 338, 342, 344, 346, 351, 352, 354, 360, 368, 397, 475, 476, 480], "rotatebyyawrateasync": [40, 279, 346, 398], "hoverasync": [40, 279, 346, 398], "waitonlasttask": [40, 50, 279, 291, 346, 391, 398], "task_result": [40, 50, 291, 346, 391, 398], "nullptr": [40, 50, 75, 100, 101, 106, 288, 291, 293, 301, 305, 311, 312, 313, 336, 341, 346, 348, 350, 352, 360, 361, 363, 367, 370, 371, 375, 397], "nan": [40, 50, 105, 279, 291, 299, 301, 309, 324, 327, 346, 348, 352, 376, 394, 397, 472], "futur": [40, 391, 398, 430], "clmdep_msgpack": [40, 391, 392, 395, 396, 398, 399, 430], "object_handl": [40, 398, 430], "last_futur": [40, 279, 398, 430], "obstacleinfo": [42, 53, 180, 279, 283, 308, 309, 393, 394, 439], "hasobstacle_": [42, 279, 308, 393], "from_tick": [42, 308, 393], "to_tick": [42, 308, 393], "tick": [42, 279, 294, 308, 344, 393, 394, 432], "odd_blindspot": [42, 308, 393], "distanc": [42, 54, 73, 125, 163, 165, 208, 220, 224, 279, 290, 291, 293, 308, 309, 311, 317, 318, 319, 336, 344, 348, 352, 354, 361, 393, 394, 397, 432, 454, 490], "window": [42, 287, 308, 344, 393, 394], "confid": [42, 279, 308, 393, 394, 432], "setblindspot": [42, 279, 308, 393], "blindspot": [42, 308, 393], "hasobstacl": [42, 279, 308, 393, 394], "getclosestobstacl": [42, 279, 308, 393, 394], "gettick": [42, 279, 308, 393, 394], "angletotick": [42, 279, 308, 393, 394], "angle_rad": [42, 308, 393], "ticktoanglestart": [42, 279, 308, 393], "ticktoangleend": [42, 279, 308, 393], "ticktoanglemid": [42, 279, 308, 393, 394], "debugphysicsbodi": [44, 123, 173, 175, 176, 177, 279, 283, 490], "multirotorphysicsbodi": [44, 138, 165, 166, 173, 213, 222, 279, 283, 350, 490], "setcollisioninfo": [44, 279, 301], "collisioninfo": [44, 50, 68, 72, 73, 162, 279, 284, 290, 291, 294, 299, 301, 344, 345, 391, 392, 431, 444], "collision_info": [44, 299, 301, 392], "getphysicsbodi": [44, 279, 301, 305], "getmass": [44, 279, 299, 301], "getmassinv": [44, 279, 301], "getinertia": [44, 279, 299, 301], "getinertiainv": [44, 279, 299, 301], "getkinemat": [44, 279, 299, 301, 340], "getinitialkinemat": [44, 279, 301], "getenviron": [44, 279, 299, 301, 340], "hasenviron": [44, 279, 301], "getwrench": [44, 45, 279, 299, 301, 302], "getcollisioninfo": [44, 68, 279, 294, 299, 301], "collisionrespons": [44, 299, 301], "getcollisionresponseinfo": [44, 279, 299, 301], "isground": [44, 279, 298, 299, 301], "setground": [44, 279, 299, 301], "ground": [44, 298, 299, 301, 311, 320, 329, 332, 340, 343, 352, 355, 358], "lock": [44, 47, 69, 279, 299, 301, 304, 305, 308, 343, 352, 393, 397], "unlock": [44, 47, 69, 279, 299, 301, 304, 305, 343], "last_kinematics_tim": [44, 279, 299, 301], "getdragfactor": [45, 279, 299, 302], "setdragfactor": [45, 279, 302], "val": [45, 50, 58, 70, 78, 87, 94, 103, 104, 105, 291, 295, 302, 354, 355, 368, 370, 372, 373, 374, 376, 381, 388, 391, 392], "drag_factor": [45, 302], "getnorm": [45, 279, 299, 302, 341], "setnorm": [45, 279, 302], "updatablecontain": [46, 69, 175, 176, 177, 184, 303, 304, 305, 312], "externalphysicsengin": [46, 123, 175, 279, 283, 490], "fastphysicsengin": [46, 123, 175, 279, 283, 293, 490], "privat": [47, 288, 291, 292, 293, 296, 297, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 314, 315, 317, 318, 320, 321, 323, 325, 326, 328, 329, 336, 337, 338, 340, 341, 343, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 390], "physics_engin": [47, 69, 304, 305], "bodi": [47, 299, 301, 304, 308, 309, 323, 338, 340, 350, 351, 355, 360, 394], "update_period_nano": [47, 304], "3000000ll": [47, 304], "state_reporter_en": [47, 304], "start_async_upd": [47, 304], "reset": [47, 50, 58, 59, 70, 75, 76, 79, 80, 81, 83, 94, 96, 98, 99, 100, 101, 102, 103, 104, 106, 279, 291, 295, 297, 301, 304, 305, 311, 312, 315, 318, 321, 323, 326, 329, 332, 339, 340, 341, 343, 348, 352, 354, 355, 356, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 377, 388, 390, 391, 392, 398], "addbodi": [47, 279, 304], "getupdateperiodnano": [47, 279, 304], "startasyncupd": [47, 69, 279, 304, 305], "stopasyncupd": [47, 69, 279, 304, 305], "enablestatereport": [47, 279, 304], "updatestatereport": [47, 279, 304], "getdebugreport": [47, 279, 304], "paus": [47, 69, 70, 279, 295, 304, 305, 352, 392], "is_paus": [47, 50, 69, 70, 291, 295, 304, 305, 391, 392], "ispaus": [47, 69, 70, 279, 295, 304, 305, 392], "continuefortim": [47, 69, 70, 279, 295, 304, 305, 392], "continueforfram": [47, 69, 70, 279, 295, 304, 305, 392], "uint32_t": [47, 50, 69, 70, 73, 290, 291, 295, 304, 305, 350, 352, 391, 392, 402, 465], "frame": [47, 50, 69, 70, 291, 295, 299, 301, 304, 305, 308, 309, 323, 326, 327, 338, 350, 351, 355, 360, 391, 392, 394], "setframenumb": [47, 69, 279, 304, 305], "framenumb": [47, 69, 304, 305], "turning_direct": [49, 279, 341, 433], "id": [49, 341, 352], "setcontrolsign": [49, 279, 340, 341], "control_sign": [49, 341, 354], "thrust": [49, 72, 279, 301, 338, 341, 342, 344, 345, 351, 352, 354, 360, 368, 433, 434, 445], "torque_scal": [49, 72, 279, 341, 344, 345, 433, 434, 445], "control_signal_filt": [49, 279, 341, 433], "control_signal_input": [49, 279, 341, 433], "carrpclibcli": [50, 107, 108, 134, 151, 163, 204, 205, 279, 283, 485, 490], "multirotorrpclibcli": [50, 111, 112, 139, 153, 163, 215, 216, 217, 279, 283, 486, 490], "connectionst": [50, 279, 291, 391], "unknown": [50, 157, 158, 279, 291, 327, 352, 363, 372, 376, 391], "confirmconnect": [50, 279, 291, 391], "getconnectionst": [50, 279, 291, 391], "ping": [50, 279, 291, 391, 392], "getclientvers": [50, 279, 291, 391], "getserververs": [50, 279, 291, 391, 392], "getminrequiredserververs": [50, 279, 291, 391], "getminrequiredclientvers": [50, 279, 291, 391, 392], "simispaus": [50, 279, 291, 391, 392], "simpaus": [50, 279, 291, 391, 392], "simcontinuefortim": [50, 279, 291, 391, 392], "simcontinueforfram": [50, 279, 291, 391, 392], "simsettimeofdai": [50, 279, 291, 391, 392], "start_datetim": [50, 70, 291, 295, 391, 392], "is_start_datetime_dst": [50, 70, 291, 295, 391, 392], "celestial_clock_spe": [50, 70, 291, 295, 391, 392], "update_interval_sec": [50, 70, 291, 295, 391, 392], "move_sun": [50, 70, 291, 295, 391, 392], "simenableweath": [50, 279, 291, 391, 392], "enabl": [50, 70, 279, 291, 295, 301, 308, 313, 327, 352, 370, 372, 376, 391, 392, 397, 483], "simsetweatherparamet": [50, 279, 291, 391, 392], "weatherparamet": [50, 70, 162, 279, 290, 291, 295, 391, 392], "simlistsceneobject": [50, 279, 291, 391, 392], "name_regex": [50, 70, 291, 295, 391, 392], "simgetobjectpos": [50, 279, 291, 391, 392], "object_nam": [50, 70, 73, 279, 290, 291, 295, 391, 392, 452], "simloadlevel": [50, 279, 291, 391, 392], "level_nam": [50, 70, 291, 295, 391, 392], "simgetobjectscal": [50, 279, 291, 391, 392], "simsetobjectpos": [50, 279, 291, 391, 392], "teleport": [50, 70, 291, 295, 391, 392], "simsetobjectscal": [50, 279, 291, 391, 392], "scale": [50, 70, 291, 295, 341, 352, 355, 366, 391, 392], "simspawnobject": [50, 279, 291, 391, 392], "load_compon": [50, 70, 291, 295, 391, 392], "physics_en": [50, 70, 291, 295, 391, 392], "simdestroyobject": [50, 279, 291, 391, 392], "simsetsegmentationobjectid": [50, 279, 291, 391, 392], "mesh_nam": [50, 70, 291, 295, 391, 392], "object_id": [50, 70, 73, 279, 290, 291, 295, 391, 392, 452], "is_name_regex": [50, 70, 291, 295, 391, 392], "simgetsegmentationobjectid": [50, 279, 291, 391, 392], "simprintlogmessag": [50, 279, 291, 391, 392], "message_param": [50, 70, 291, 295, 391, 392], "char": [50, 70, 291, 295, 320, 336, 348, 352, 391, 392], "sever": [50, 70, 291, 295, 391, 392], "simadddetectionfiltermeshnam": [50, 279, 291, 391, 392], "camera_nam": [50, 73, 279, 290, 291, 391, 392, 459, 460], "imagecapturebas": [50, 68, 70, 73, 162, 163, 165, 166, 167, 205, 206, 217, 218, 279, 290, 291, 293, 294, 295, 333, 334, 345, 346, 391, 392, 459, 460], "imagetyp": [50, 70, 73, 162, 279, 290, 291, 295, 391, 392, 459, 460], "extern": [50, 70, 291, 293, 295, 299, 336, 340, 348, 352, 391, 392], "simsetdetectionfilterradiu": [50, 279, 291, 391, 392], "radius_cm": [50, 70, 291, 295, 391, 392], "simcleardetectionmeshnam": [50, 279, 291, 391, 392], "detectioninfo": [50, 70, 73, 162, 279, 284, 290, 291, 295, 391, 392], "simgetdetect": [50, 279, 291, 391, 392], "image_typ": [50, 70, 73, 279, 290, 291, 295, 391, 459, 460], "simflushpersistentmark": [50, 70, 279, 291, 295, 391, 392], "simplotpoint": [50, 70, 279, 291, 295, 391, 392], "point": [50, 68, 70, 291, 294, 295, 299, 326, 327, 338, 352, 391, 392, 394, 397], "color_rgba": [50, 68, 70, 291, 294, 295, 391, 392], "size": [50, 55, 70, 279, 287, 290, 291, 293, 295, 296, 304, 312, 325, 336, 338, 340, 348, 350, 352, 356, 360, 368, 373, 391, 392, 393, 397, 495], "is_persist": [50, 70, 291, 295, 391, 392], "simplotlinestrip": [50, 70, 279, 291, 295, 391, 392], "thick": [50, 68, 70, 291, 294, 295, 391, 392], "simplotlinelist": [50, 70, 279, 291, 295, 391, 392], "simplotarrow": [50, 70, 279, 291, 295, 391, 392], "points_start": [50, 70, 291, 295, 391, 392], "points_end": [50, 70, 291, 295, 391, 392], "arrow_s": [50, 70, 291, 295, 391, 392], "simplotstr": [50, 70, 279, 291, 295, 391, 392], "simplottransform": [50, 70, 279, 291, 295, 391, 392], "simplottransformswithnam": [50, 70, 279, 291, 295, 391, 392], "name": [50, 70, 73, 279, 287, 290, 291, 293, 295, 331, 339, 349, 352, 359, 391, 392, 395, 396, 398, 399, 453, 465], "tf_scale": [50, 70, 291, 295, 391, 392], "tf_thick": [50, 70, 291, 295, 391, 392], "text_scal": [50, 70, 291, 295, 391, 392], "text_color_rgba": [50, 70, 291, 295, 391, 392], "simrunconsolecommand": [50, 279, 291, 391, 392], "command": [50, 70, 287, 291, 293, 295, 340, 343, 344, 348, 352, 354, 391, 392, 397], "getlidardata": [50, 64, 279, 291, 293, 391, 392], "lidar_nam": [50, 64, 291, 293, 391, 392], "getimudata": [50, 64, 279, 291, 293, 336, 348, 350, 352, 391, 392], "imu_nam": [50, 64, 291, 293, 391, 392], "getbarometerdata": [50, 64, 279, 291, 293, 352, 391, 392], "barometer_nam": [50, 64, 291, 293, 391, 392], "getmagnetometerdata": [50, 64, 279, 291, 293, 352, 391, 392], "magnetometer_nam": [50, 64, 291, 293, 391, 392], "getgpsdata": [50, 64, 279, 291, 293, 336, 348, 350, 352, 391, 392], "gps_name": [50, 64, 291, 293, 391, 392], "getdistancesensordata": [50, 64, 279, 291, 293, 391, 392], "distance_sensor_nam": [50, 64, 291, 293, 391, 392], "simgetvehiclepos": [50, 279, 291, 391, 392], "simsetvehiclepos": [50, 279, 291, 391, 392], "ignore_collis": [50, 68, 291, 294, 391, 392], "simsettracelin": [50, 279, 291, 391, 392], "imagerespons": [50, 70, 73, 162, 279, 284, 290, 291, 295, 326, 391, 392], "simgetimag": [50, 279, 291, 391, 392], "imagerequest": [50, 70, 73, 162, 279, 284, 290, 291, 295, 391, 392], "request": [50, 70, 73, 290, 291, 295, 327, 352, 372, 391, 397, 453, 459], "simgetpresetlensset": [50, 279, 291, 391, 392], "simgetlensset": [50, 279, 291, 391, 392], "simsetpresetlensset": [50, 279, 291, 391, 392], "preset_lens_set": [50, 291, 391, 392], "simgetpresetfilmbackset": [50, 279, 291, 391, 392], "simsetpresetfilmbackset": [50, 279, 291, 391, 392], "preset_filmback_set": [50, 291, 391, 392], "simgetfilmbackset": [50, 279, 291, 391, 392], "simsetfilmbackset": [50, 279, 291, 391, 392], "sensor_width": [50, 291, 391], "sensor_heigth": [50, 291], "simgetfocallength": [50, 279, 291, 391, 392], "simsetfocallength": [50, 279, 291, 391, 392], "focal_length": [50, 70, 291, 295, 391], "simenablemanualfocu": [50, 279, 291, 391, 392], "simgetfocusdist": [50, 279, 291, 391, 392], "simsetfocusdist": [50, 279, 291, 391, 392], "focus_dist": [50, 70, 291, 295, 391, 392], "simgetfocusapertur": [50, 279, 291, 391, 392], "simsetfocusapertur": [50, 279, 291, 391, 392], "focus_apertur": [50, 70, 291, 295, 391, 392], "simenablefocusplan": [50, 279, 291, 391, 392], "simgetcurrentfieldofview": [50, 279, 291, 391, 392], "simtestlineofsighttopoint": [50, 279, 291, 391, 392], "simtestlineofsightbetweenpoint": [50, 279, 291, 391, 392], "point1": [50, 70, 291, 295, 391, 392], "point2": [50, 70, 291, 295, 391, 392], "simgetworldext": [50, 279, 291, 391, 392], "meshpositionvertexbuffersrespons": [50, 70, 73, 162, 279, 284, 290, 291, 295, 391, 392], "simgetmeshpositionvertexbuff": [50, 279, 291, 391, 392], "simaddvehicl": [50, 279, 291, 391, 392], "vehicle_typ": [50, 70, 291, 295, 331, 339, 391, 392], "pawn_path": [50, 70, 291, 295, 391, 392], "simgetcollisioninfo": [50, 279, 291, 391, 392], "camerainfo": [50, 70, 73, 162, 279, 284, 290, 291, 295, 391, 392], "simgetcamerainfo": [50, 279, 291, 391, 392], "simsetdistortionparam": [50, 279, 291, 391, 392], "param_nam": [50, 70, 291, 295, 391, 392], "simgetdistortionparam": [50, 279, 291, 391, 392], "simsetcamerapos": [50, 279, 291, 391, 392], "simsetcamerafov": [50, 279, 291, 391, 392], "fov_degre": [50, 70, 291, 295, 391, 392], "simcreatevoxelgrid": [50, 279, 291, 391, 392], "x_size": [50, 70, 291, 295], "y_size": [50, 70, 291, 295], "z_size": [50, 70, 291, 295], "re": [50, 70, 291, 295, 299, 351, 352, 363, 391, 392], "output_fil": [50, 70, 291, 295, 391, 392], "simgetgroundtruthkinemat": [50, 279, 291, 391, 392], "simsetkinemat": [50, 279, 291, 391, 392], "simgetgroundtruthenviron": [50, 279, 291, 391, 392], "simswaptextur": [50, 279, 291, 391, 392], "tag": [50, 70, 287, 291, 295, 391, 392], "tex_id": [50, 70, 291, 295, 391, 392], "component_id": [50, 70, 291, 295, 391, 392], "material_id": [50, 70, 291, 295, 391, 392], "simsetobjectmateri": [50, 279, 291, 391, 392], "material_nam": [50, 70, 291, 295, 391, 392], "simsetobjectmaterialfromtextur": [50, 279, 291, 391, 392], "texture_path": [50, 70, 291, 295, 391, 392], "startrecord": [50, 70, 279, 291, 295, 391, 392], "stoprecord": [50, 70, 279, 291, 295, 391, 392], "isrecord": [50, 70, 279, 291, 295, 391, 392], "simsetwind": [50, 279, 291, 391, 392], "simsetextforc": [50, 279, 291, 391, 392], "listvehicl": [50, 70, 279, 291, 295, 391, 392], "getsettingsstr": [50, 70, 279, 291, 295, 391, 392], "simlistasset": [50, 279, 291, 391, 392], "getclient": [50, 279, 291, 391, 395, 398], "rpc": [50, 51, 162, 205, 217, 263, 264, 267, 268, 270, 271, 290, 333, 345, 391, 392, 395, 396, 398, 399, 437, 438], "client": [50, 263, 267, 270, 279, 291, 326, 352, 391, 395, 398, 437], "apinotsupport": [51, 164, 279, 283, 292], "apiserverbas": [51, 122, 164, 279, 283, 292, 490], "carrpclibserv": [51, 109, 110, 134, 151, 164, 204, 205, 279, 283, 490], "multirotorrpclibserv": [51, 113, 114, 139, 153, 164, 215, 217, 279, 283, 490], "getserv": [51, 279, 292, 392, 396, 399], "runtime_error": [51, 52, 64, 66, 292, 293, 327, 331, 339, 372, 390, 397], "run": [51, 279, 343, 352, 360, 392, 438], "server": [51, 264, 268, 271, 279, 354, 391, 392, 396, 399, 438], "is_async_": [51, 279, 392, 438], "safetyviolationtype_": [53, 162, 279, 290, 309, 394, 397], "nosafetyviol": [53, 279, 309], "geofenc": [53, 279, 309, 394], "obstacl": [53, 279, 308, 309, 344, 393, 394, 397], "velocitylimit": [53, 279, 309], "all": [53, 279, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 365, 372, 391, 392, 393, 394, 395, 396, 397, 398, 399], "raiseexcept": [53, 279, 309, 394, 397], "closestmov": [53, 279, 309, 394], "oppositemov": [53, 279, 309, 394], "enumflag": [53, 181, 309], "fence_ptr": [53, 309, 394], "obstaclemap": [53, 124, 148, 181, 279, 283, 309, 394, 439, 490], "obs_xi": [53, 309], "issafeveloc": [53, 279, 309, 394, 397], "cur_po": [53, 279, 309, 394, 439], "quaternion": [53, 299, 309, 318, 352, 394, 397], "issafevelocityz": [53, 279, 309, 394, 397], "issafedestin": [53, 279, 309, 394, 397], "issafeposit": [53, 279, 309, 394], "obs_strategi": [53, 309, 394], "setobsavoidancestrategi": [53, 279, 309, 343, 394], "getobsavoidancestrategi": [53, 279, 309, 343, 394, 397], "is_saf": [53, 279, 309, 394, 397, 439], "reason": [53, 279, 300, 309, 352, 394, 397, 439], "cur_ob": [53, 279, 309, 394, 439], "dest_ob": [53, 279, 309, 394, 439], "suggested_ob": [53, 279, 309, 394, 439], "dest_po": [53, 279, 309, 394, 397, 439], "cur_dest_bodi": [53, 279, 309, 394, 439], "suggested_vec": [53, 279, 309, 394, 397, 439], "cur_risk_dist": [53, 279, 309, 394, 397, 439], "dest_risk_dist": [53, 279, 309, 394, 439], "groundtruth": [54, 183, 279, 283, 311, 315, 318, 321, 323, 326, 329], "sensortyp": [54, 55, 279, 293, 311, 312, 313, 336, 348, 350, 352], "baromet": [54, 125, 163, 165, 185, 208, 220, 224, 279, 291, 293, 311, 313, 314, 315, 316, 336, 348, 352, 490], "imu": [54, 125, 163, 165, 185, 208, 220, 224, 279, 291, 293, 311, 313, 323, 324, 336, 348, 352, 360, 490], "gp": [54, 125, 163, 165, 185, 208, 220, 224, 279, 291, 293, 299, 311, 313, 320, 321, 322, 336, 343, 344, 348, 350, 352, 490], "magnetomet": [54, 125, 163, 165, 185, 208, 220, 224, 279, 291, 293, 311, 313, 328, 329, 330, 336, 348, 352, 490], "lidar": [54, 125, 165, 208, 220, 279, 293, 311, 325, 326, 327, 336, 348, 490], "getgroundtruth": [54, 279, 311, 315, 318, 321, 323, 326, 329], "getnam": [54, 279, 293, 311, 352], "sensorbaseptr": [55, 279, 312], "getbytyp": [55, 279, 293, 312, 336, 348, 352], "clear": [55, 69, 279, 290, 296, 305, 312, 326, 332, 338, 340, 352, 356], "createsensorfromset": [56, 279, 313], "sensorset": [56, 313], "sensor_set": [56, 313, 332, 338], "createsensorsfromset": [56, 279, 313, 332, 338], "map": [56, 160, 287, 288, 308, 313, 344, 360, 393], "sensors_set": [56, 313], "sensor_storag": [56, 313], "controller_typ": [57, 279, 354, 365, 368, 397, 475], "simple_flight": [58, 59, 60, 61, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 106, 140, 144, 145, 157, 158, 211, 279, 339, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 397, 475, 490], "iboard": [58, 81, 85, 86, 87, 88, 96, 145, 227, 237, 251, 252, 253, 254, 262, 279, 285, 355, 365, 490], "setgroundtruthkinemat": [58, 61, 279, 354, 355, 358], "getmotorcontrolsign": [58, 279, 354, 355], "setinputchannel": [58, 279, 354, 355], "setisrcconnect": [58, 279, 354, 355], "is_connect": [58, 355], "micro": [58, 85, 279, 355, 379], "milli": [58, 85, 279, 355, 360, 367, 370, 372, 379], "readchannel": [58, 86, 279, 355, 372, 380], "getavgmotoroutput": [58, 86, 279, 355, 372, 380], "isrcconnect": [58, 86, 279, 355, 372, 380], "writeoutput": [58, 87, 279, 355, 365, 381], "setl": [58, 87, 279, 355, 381], "int32_t": [58, 59, 87, 89, 352, 355, 356, 381, 383], "color": [58, 87, 287, 355, 381], "readaccel": [58, 88, 279, 355, 382], "accel": [58, 88, 279, 323, 324, 352, 355, 382, 416], "readgyro": [58, 88, 279, 355, 382], "gyro": [58, 88, 279, 323, 324, 352, 355, 368, 382, 416], "icommlink": [59, 79, 81, 96, 98, 102, 145, 228, 235, 237, 239, 262, 279, 285, 356, 363, 365, 367, 372, 490], "log": [59, 89, 279, 293, 299, 301, 305, 336, 348, 350, 352, 354, 356, 358, 363, 367, 372, 375, 383, 394, 397], "log_level": [59, 89, 356, 383], "kloglevelinfo": [59, 89, 279, 336, 348, 350, 352, 356, 363, 367, 383], "templat": [60, 73, 82, 96, 242, 245, 246, 248, 260, 279, 285, 287, 290, 357, 370, 373, 374, 376, 388], "typenam": [60, 73, 77, 78, 94, 103, 104, 290, 357, 373, 374, 376, 388], "t": [60, 77, 78, 94, 96, 100, 103, 104, 287, 299, 305, 308, 316, 319, 322, 326, 336, 338, 343, 348, 351, 352, 354, 355, 357, 358, 370, 372, 373, 374, 375, 376, 388, 391, 392, 394, 395, 396, 397, 398, 399, 483], "makeconst": [60, 279, 357], "_": [60, 357], "makevari": [60, 279, 357], "axis3r": [60, 61, 95, 248, 279, 285, 357, 358, 360, 368, 372, 375, 376, 389, 473, 475, 477], "toaxis3r": [60, 279, 357, 358], "vec": [60, 328, 352, 357, 358, 394], "tovector3r": [60, 279, 354, 357, 358], "tokinematicsstate3r": [60, 279, 354, 357], "kinematicsst": [60, 61, 71, 72, 73, 95, 162, 248, 279, 284, 285, 290, 333, 345, 357, 358, 376, 389, 391, 392, 443, 444], "axis4r": [60, 61, 74, 75, 79, 90, 92, 93, 95, 97, 98, 101, 102, 106, 248, 279, 285, 354, 357, 358, 360, 361, 363, 365, 366, 367, 368, 371, 372, 375, 376, 384, 386, 387, 389, 473, 475, 476, 477, 479, 482], "toaxis4r": [60, 279, 357, 358], "q": [60, 338, 350, 352, 357], "toquaternion": [60, 279, 299, 319, 327, 352, 354, 357], "tosimpleflightgeopoint": [60, 279, 357, 358], "togeopoint": [60, 279, 354, 357], "istateestim": [61, 74, 75, 76, 79, 80, 81, 83, 90, 93, 98, 99, 101, 102, 106, 145, 235, 237, 248, 249, 256, 257, 279, 285, 358, 360, 361, 362, 363, 364, 365, 367, 369, 371, 372, 375, 377, 384, 385, 387, 490], "getangl": [61, 95, 279, 358, 360, 361, 389], "getangularveloc": [61, 95, 279, 358, 360, 362, 367, 389], "transformtobodyfram": [61, 95, 279, 299, 323, 329, 355, 358, 375, 389, 394, 397], "world_frame_v": [61, 95, 358, 389], "getlinearveloc": [61, 95, 279, 354, 358, 360, 367, 375, 389], "getgeopoint": [61, 93, 95, 98, 279, 354, 358, 367, 387, 389], "radiu": [63, 299, 310, 360], "max_height": [63, 310], "min_height": [63, 310], "vehiclecommandnotimplementedexcept": [64, 66, 165, 279, 283, 293, 397], "vehiclecontrollerexcept": [64, 65, 67, 165, 279, 283, 293], "actuator_index": [64, 293], "updaterenderedst": [68, 279, 294], "dt": [68, 94, 103, 104, 294, 299, 323, 360, 370, 372, 373, 374, 388], "updaterend": [68, 279, 294, 352], "getimagecaptur": [68, 279, 294], "testlineofsighttopoint": [68, 279, 294, 392], "getgroundtruthkinemat": [68, 279, 294, 392], "setkinemat": [68, 279, 294, 392], "getgroundtruthenviron": [68, 279, 294, 392], "getcollisioninfoandreset": [68, 279, 294, 392], "getremotecontrolid": [68, 279, 294], "getvehiclenam": [68, 279, 294], "getrecordfilelin": [68, 279, 294], "is_header_lin": [68, 294], "toggletrac": [68, 279, 294], "settracelin": [68, 279, 294, 392], "getvehicleset": [68, 279, 294], "erase_remov": [69, 279, 305], "period": [69, 305, 352, 360, 397], "pausefortim": [69, 279, 305, 352], "rain": [70, 279, 295], "roadwet": [70, 279, 295], "snow": [70, 279, 295], "roadsnow": [70, 279, 295], "mapleleaf": [70, 279, 295], "roadleaf": [70, 279, 295], "dust": [70, 279, 295], "fog": [70, 279, 295], "loadlevel": [70, 279, 295, 392], "spawnobject": [70, 279, 295, 392], "is_blueprint": [70, 295, 392], "destroyobject": [70, 279, 295, 392], "listasset": [70, 279, 295, 392], "settimeofdai": [70, 279, 295, 392], "enableweath": [70, 279, 295, 392], "setweatherparamet": [70, 279, 295, 392], "setsegmentationobjectid": [70, 279, 295, 392], "getsegmentationobjectid": [70, 279, 295, 392], "addvehicl": [70, 279, 295, 392], "printlogmessag": [70, 279, 295, 392], "listsceneobject": [70, 279, 295, 392], "getobjectpos": [70, 279, 295, 392], "getobjectscal": [70, 279, 295, 392], "setobjectpos": [70, 279, 295, 392], "runconsolecommand": [70, 279, 295, 392], "setobjectscal": [70, 279, 295, 392], "swaptextur": [70, 279, 295, 392], "setlightintens": [70, 279, 295, 392], "light_nam": [70, 295, 392], "intens": [70, 295, 392], "setobjectmateri": [70, 279, 295, 392], "setobjectmaterialfromtextur": [70, 279, 295, 392], "getmeshpositionvertexbuff": [70, 279, 295, 392], "createvoxelgrid": [70, 279, 295, 392], "testlineofsightbetweenpoint": [70, 279, 295, 392], "getworldext": [70, 279, 295, 392], "getcamerainfo": [70, 279, 295, 326, 392], "cameradetail": [70, 295, 392], "camera_detail": [70, 295], "setcamerapos": [70, 279, 295, 392], "setcamerafov": [70, 279, 295, 392], "setdistortionparam": [70, 279, 295, 392], "getdistortionparam": [70, 279, 295, 392], "getimag": [70, 279, 295, 392], "getpresetlensset": [70, 279, 295, 392], "getlensset": [70, 279, 295, 392], "setpresetlensset": [70, 279, 295, 392], "getpresetfilmbackset": [70, 279, 295, 392], "setpresetfilmbackset": [70, 279, 295, 392], "getfilmbackset": [70, 279, 295, 392], "setfilmbackset": [70, 279, 295, 392], "width": [70, 73, 279, 290, 295, 352, 392, 460], "getfocallength": [70, 279, 295, 392], "setfocallength": [70, 279, 295, 392], "enablemanualfocu": [70, 279, 295, 392], "getfocusdist": [70, 279, 295, 392], "setfocusdist": [70, 279, 295, 392], "getfocusapertur": [70, 279, 295, 392], "setfocusapertur": [70, 279, 295, 392], "enablefocusplan": [70, 279, 295, 392], "getcurrentfieldofview": [70, 279, 295, 392], "adddetectionfiltermeshnam": [70, 279, 295, 392], "setdetectionfilterradiu": [70, 279, 295, 392], "cleardetectionmeshnam": [70, 279, 295, 392], "getdetect": [70, 279, 295, 392], "autonomylib_rpclib": [71, 72, 73, 162, 205, 217, 279, 282, 290, 333, 345, 391, 392, 395, 396, 398, 399, 484, 485, 486], "rpclibadaptorsbas": [71, 72, 122, 167, 169, 172, 181, 205, 217, 263, 264, 274, 275, 276, 277, 278, 279, 283, 284, 333, 345, 391, 392, 490], "msgpack_define_map": [71, 72, 73, 279, 290, 333, 345, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "": [71, 72, 73, 290, 293, 294, 297, 299, 305, 306, 309, 310, 316, 324, 331, 333, 336, 339, 345, 348, 350, 351, 352, 361, 363, 368, 382, 394, 397, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "rotorparamet": [72, 216, 217, 279, 283, 284, 344, 345, 436, 446], "collis": [72, 279, 299, 300, 338, 344, 345, 352, 394, 431, 444], "gps_locat": [72, 279, 343, 344, 345, 431, 444], "landed_st": [72, 279, 343, 344, 345, 431, 444], "kinematics_tru": [72, 279, 345, 444], "readi": [72, 279, 343, 344, 345, 398, 431, 444], "ready_messag": [72, 279, 343, 344, 345, 431, 444], "controller_messag": [72, 279, 345, 444], "can_arm": [72, 279, 343, 344, 345, 431, 444], "is_rat": [72, 279, 344, 345, 352, 354, 397, 441, 447], "yaw_or_r": [72, 279, 344, 345, 352, 354, 397, 441, 447], "barometerdata": [73, 162, 279, 284, 290, 391, 392], "box2d": [73, 162, 279, 284, 290, 453], "box3d": [73, 162, 279, 284, 290, 453], "environmentst": [73, 162, 279, 284, 290, 391, 392], "gpsdata": [73, 162, 279, 284, 290, 391, 392], "imudata": [73, 162, 279, 284, 290, 391, 392], "magnetometerdata": [73, 162, 279, 284, 290, 391, 392], "projectionmatrix": [73, 162, 279, 284, 290, 451], "vector2r": [73, 162, 279, 284, 290, 397, 449], "carrpclibadaptor": [73, 134, 162, 204, 267, 268, 279, 283, 284, 395, 396, 490], "multirotorrpclibadaptor": [73, 139, 162, 181, 215, 216, 270, 271, 272, 273, 279, 283, 284, 398, 399, 490], "tsrc": [73, 290], "tdest": [73, 290], "d": [73, 279, 290, 299, 320, 336, 342, 345, 348, 350, 352, 354, 361, 362, 368, 371, 375, 397, 453, 475, 476, 477, 479, 482], "from": [73, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 279, 287, 290, 293, 294, 299, 308, 313, 316, 319, 324, 327, 330, 336, 338, 340, 341, 342, 344, 351, 352, 354, 360, 361, 365, 367, 368, 372, 391, 392, 393, 394, 397, 398, 453, 459, 460, 465], "min": [73, 279, 290, 306, 316, 344, 366, 368, 370, 372, 373, 374, 391, 392, 449, 450, 475, 482], "fov": [73, 279, 290, 326, 327, 451], "proj_mat": [73, 279, 290, 451], "has_collid": [73, 279, 290, 299, 452], "penetration_depth": [73, 279, 290, 299, 452], "impact_point": [73, 279, 290, 299, 452], "relative_pos": [73, 279, 290, 318, 319, 326, 327, 352, 408, 421, 453, 454], "request_adapt": [73, 290, 392, 453, 459], "min_dist": [73, 279, 290, 318, 319, 352, 408, 454], "max_dist": [73, 279, 290, 318, 319, 352, 408, 454], "pixels_as_float": [73, 279, 290, 459, 460], "compress": [73, 279, 290, 459, 460], "image_data_uint8": [73, 279, 290, 460], "image_data_float": [73, 279, 290, 460], "camera_posit": [73, 279, 290, 460], "camera_orient": [73, 279, 290, 460], "response_adapt": [73, 290, 460, 465], "respons": [73, 290, 299, 352, 361, 392, 460, 465], "orient": [73, 279, 290, 296, 299, 300, 319, 323, 326, 327, 329, 332, 336, 343, 344, 348, 350, 352, 355, 357, 358, 376, 397, 461, 462, 465, 466, 473], "angular_veloc": [73, 279, 290, 323, 336, 348, 350, 352, 357, 358, 376, 461, 462, 473], "linear_acceler": [73, 279, 290, 323, 336, 348, 350, 352, 357, 358, 376, 461, 462, 473], "linear_veloc": [73, 279, 290, 357, 358, 376, 462, 473], "angular_acceler": [73, 279, 290, 357, 358, 376, 462, 473], "segment": [73, 279, 290, 308, 326, 397, 463], "vertic": [73, 279, 290, 296, 301, 320, 340, 465], "indic": [73, 279, 290, 299, 309, 344, 351, 393, 465], "matrix": [73, 279, 290, 328, 338, 351, 365, 366, 467], "w_val": [73, 279, 290, 468], "x_val": [73, 77, 78, 82, 279, 290, 360, 376, 468, 470, 471], "y_val": [73, 77, 78, 82, 279, 290, 360, 373, 376, 468, 470, 471], "z_val": [73, 77, 78, 82, 279, 290, 360, 376, 468, 471], "left_z": [73, 279, 290, 469], "right_z": [73, 279, 290, 469], "switch": [73, 279, 287, 290, 313, 329, 348, 354, 360, 363, 365, 367, 368, 370, 372, 375, 391, 397, 469], "vendor_id": [73, 279, 290, 469], "is_initi": [73, 279, 290, 469], "icontrol": [74, 79, 96, 145, 235, 251, 258, 261, 262, 279, 285, 360, 363, 365, 490], "igoal": [74, 75, 76, 79, 80, 83, 90, 93, 99, 101, 102, 106, 145, 233, 235, 239, 243, 244, 247, 248, 249, 256, 259, 262, 279, 285, 360, 361, 362, 363, 364, 367, 369, 371, 372, 375, 377, 384, 387, 490], "goal": [74, 75, 76, 79, 80, 83, 90, 93, 98, 99, 100, 101, 106, 354, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 375, 377, 384, 387, 397], "state_estim": [74, 75, 76, 79, 80, 81, 83, 90, 98, 99, 101, 102, 106, 360, 361, 362, 363, 364, 365, 367, 369, 371, 372, 375, 377, 384], "islastgoalmodeallpassthrough": [74, 79, 90, 279, 360, 363, 365, 384], "iaxiscontrol": [75, 76, 80, 96, 99, 101, 106, 145, 233, 234, 236, 241, 243, 247, 251, 258, 261, 262, 279, 285, 361, 362, 363, 364, 369, 371, 375, 490], "iboardclock": [75, 76, 79, 84, 98, 100, 101, 102, 106, 145, 233, 234, 236, 241, 243, 244, 247, 249, 250, 256, 279, 285, 360, 361, 362, 363, 364, 367, 369, 370, 371, 372, 375, 377, 378, 384, 490], "clock": [75, 76, 79, 98, 100, 101, 102, 106, 299, 308, 315, 318, 321, 323, 326, 329, 343, 350, 352, 355, 361, 362, 363, 367, 370, 371, 372, 375, 391, 397], "axi": [75, 76, 80, 83, 99, 101, 106, 319, 327, 338, 340, 354, 360, 361, 362, 363, 364, 369, 371, 372, 375, 376, 377], "treal": [75, 76, 77, 80, 83, 99, 101, 106, 248, 279, 285, 361, 362, 364, 367, 368, 369, 371, 372, 375, 376, 377, 475, 480, 488, 489], "getgoalvalu": [75, 92, 98, 101, 102, 106, 279, 360, 361, 362, 363, 367, 369, 371, 372, 375, 386], "goalmod": [75, 92, 93, 98, 101, 102, 106, 248, 279, 285, 354, 360, 361, 363, 367, 368, 371, 372, 375, 376, 386, 387, 475], "getgoalmod": [75, 92, 98, 101, 102, 106, 279, 360, 361, 363, 367, 371, 372, 375, 386], "commonstruct": [77, 78, 82, 105, 145, 157, 158, 162, 163, 165, 166, 167, 169, 170, 171, 172, 173, 174, 183, 192, 204, 205, 206, 212, 216, 217, 218, 224, 230, 233, 234, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 258, 259, 260, 261, 290, 291, 293, 294, 295, 297, 298, 299, 300, 301, 302, 311, 320, 332, 333, 334, 340, 344, 345, 346, 352, 358, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 387, 388, 389, 472, 473, 483, 487, 488, 489, 490], "axis4": [77, 82, 248, 279, 285, 368, 376, 475, 480, 488], "goalmodetyp": [77, 82, 248, 279, 285, 354, 360, 361, 363, 371, 375, 376], "int16_t": [77, 352, 368, 475, 480], "oper": [77, 78, 279, 308, 309, 352, 376, 397], "equals3": [77, 279, 376], "other": [77, 78, 293, 297, 300, 338, 343, 350, 352, 360, 361, 372, 376, 397], "colwisemultiply3": [77, 279, 376], "constexpr": [77, 78, 89, 299, 360, 361, 373, 376, 383], "axiscount": [77, 78, 279, 360, 363, 372, 376], "axis3": [78, 248, 279, 285, 376, 489], "val4_val": [78, 82, 376], "axis3_v": [78, 376], "setaxis3": [78, 279, 372, 376], "setvalu": [78, 279, 352, 354, 376], "val4": [78, 279, 357, 376], "equals4": [78, 279, 363, 372, 376], "colwisemultiply4": [78, 279, 372, 376], "axis4toxyz": [78, 279, 375, 376], "swap_xi": [78, 376], "xyztoaxis4": [78, 279, 367, 371, 375, 376], "xyz": [78, 376], "comm_link": [79, 81, 98, 102, 354, 363, 365, 367, 372], "update_output": [80, 364], "reset_output": [80, 364], "ifirmwar": [81, 96, 145, 237, 259, 261, 262, 279, 285, 354, 365, 490], "board": [81, 354, 355, 365, 368], "ioffboardapi": [81, 91, 92, 98, 145, 237, 239, 248, 257, 258, 279, 285, 365, 367, 385, 490], "offboardapi": [81, 91, 93, 96, 144, 237, 240, 244, 248, 255, 258, 259, 262, 279, 285, 354, 365, 372, 385, 490], "anglelevel": [82, 157, 279, 354, 360, 363, 375, 376], "angler": [82, 157, 279, 354, 360, 361, 363, 376], "passthrough": [82, 157, 279, 354, 360, 363, 365, 375, 376], "getstandardanglemod": [82, 279, 368, 372, 376, 475], "getvelocityxyposzmod": [82, 279, 376], "getvelocitymod": [82, 279, 376], "getpositionmod": [82, 279, 367, 376], "getallratemod": [82, 279, 367, 372, 376], "getunknown": [82, 279, 361, 363, 371, 372, 375, 376], "iupdat": [83, 84, 89, 90, 91, 98, 100, 102, 145, 233, 239, 243, 247, 249, 250, 255, 256, 257, 258, 279, 285, 361, 367, 370, 371, 372, 375, 377, 378, 383, 384, 385, 386, 490], "anglelevelcontrol": [83, 92, 144, 234, 235, 240, 242, 247, 248, 249, 251, 258, 262, 279, 285, 363, 375, 490], "angleratecontrol": [83, 144, 233, 235, 240, 242, 248, 249, 251, 279, 285, 361, 363, 490], "constantoutputcontrol": [83, 144, 235, 240, 248, 249, 251, 279, 285, 363, 490], "passthroughcontrol": [83, 144, 235, 240, 249, 251, 279, 285, 363, 375, 490], "positioncontrol": [83, 92, 144, 235, 240, 242, 247, 248, 249, 251, 258, 262, 279, 285, 363, 490], "velocitycontrol": [83, 92, 144, 233, 235, 240, 242, 243, 249, 251, 258, 262, 279, 285, 363, 371, 490], "iboardinputpin": [84, 98, 102, 145, 244, 250, 279, 285, 367, 372, 378, 490], "iboardoutputpin": [84, 145, 250, 279, 285, 378, 490], "iboardsensor": [84, 145, 250, 279, 285, 378, 490], "simpleflightboard": [84, 143, 172, 226, 240, 250, 279, 283, 354, 490], "simpleflightcommlink": [89, 143, 226, 255, 279, 283, 354, 490], "kloglevelwarn": [89, 279, 383, 397], "kloglevelerror": [89, 279, 299, 301, 305, 350, 352, 367, 383], "adaptivecontrol": [90, 144, 237, 279, 285, 365, 490], "cascadecontrol": [90, 144, 233, 234, 236, 237, 241, 243, 247, 255, 256, 258, 261, 279, 285, 365, 490], "firmwar": [91, 133, 136, 137, 138, 141, 142, 143, 145, 203, 211, 279, 285, 331, 336, 337, 338, 339, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 490], "remotecontrol": [92, 96, 144, 237, 239, 248, 251, 252, 258, 279, 285, 365, 367, 490], "canrequestapicontrol": [93, 98, 279, 367, 387], "hasapicontrol": [93, 98, 279, 354, 367, 387], "requestapicontrol": [93, 98, 279, 354, 367, 387], "releaseapicontrol": [93, 98, 279, 354, 367, 387], "setgoalandmod": [93, 98, 279, 354, 367, 387], "goal_mod": [93, 98, 363, 367, 387], "disarm": [93, 98, 158, 279, 354, 367, 372, 376, 387], "vehiclestatetyp": [93, 98, 105, 248, 279, 285, 367, 368, 372, 376, 387, 475], "getvehiclest": [93, 98, 279, 352, 367, 387], "getstateestim": [93, 98, 279, 354, 367, 387], "rungkuttapidintegr": [94, 144, 242, 248, 279, 285, 370, 490], "stdpidintegr": [94, 144, 242, 248, 279, 285, 370, 490], "error": [94, 103, 104, 299, 336, 343, 344, 348, 352, 354, 360, 370, 373, 374, 388, 397], "last_tim": [94, 103, 104, 373, 374, 388], "simpleflightestim": [95, 143, 169, 172, 226, 229, 248, 279, 283, 354, 490], "pidcontrol": [96, 144, 224, 233, 234, 243, 245, 246, 247, 248, 260, 279, 285, 352, 361, 362, 371, 375, 490], "clearresetupdateassert": [96, 279, 377, 390], "motormixer_t": [97, 238, 279, 285, 366], "getmotoroutput": [97, 102, 279, 365, 366, 367, 372], "motor_output": [97, 366], "board_input": [98, 102, 367, 372], "pidconfig": [100, 103, 104, 248, 279, 285, 361, 362, 370, 371, 373, 374, 375, 376], "config": [100, 103, 104, 316, 327, 331, 339, 343, 351, 366, 370, 373, 374, 376], "setgoal": [100, 279, 361, 362, 370, 371, 375], "getgoal": [100, 279, 370], "setmeasur": [100, 279, 361, 362, 370, 371, 375], "measur": [100, 319, 338, 342, 348, 351, 352, 354, 360, 361, 370], "getmeasur": [100, 279, 370], "getconfig": [100, 279, 370], "setconfig": [100, 279, 370], "vehiclest": [102, 248, 279, 285, 352, 354, 367, 372, 376], "vehicle_st": [102, 372], "allowapicontrol": [102, 279, 367, 372], "ipidintegr": [103, 104, 145, 242, 248, 279, 285, 370, 373, 374, 490], "fromstr": [105, 279, 354, 376], "cpp": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 147, 148, 151, 153, 162, 163, 164, 180, 181, 205, 206, 207, 215, 216, 217, 218, 219, 287, 430, 437, 438, 484, 485, 486, 490, 498, 515], "doxygendefin": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118], "cannot": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 331, 339, 352, 365, 367, 375, 376, 397], "find": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 293, 299, 308, 309, 312, 338, 340, 351, 352, 393, 394, 397], "doxygen": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 287], "xml": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 287, 519], "project": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 159, 279, 280, 287, 397, 524, 527], "directori": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 287], "doxyxml": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 287, 519], "doc": [119, 287, 330, 338, 490, 509, 526], "includ": [119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 490, 526], "src": [119, 147, 148, 149, 150, 151, 152, 153, 352, 391, 392, 393, 394, 395, 396, 397, 398, 399, 490], "parent": [120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 371, 375], "conf": [120, 279, 490], "py": [120, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527], "physic": [121, 162, 163, 166, 183, 204, 212, 213, 215, 216, 220, 224, 226, 227, 229, 230, 290, 291, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 332, 338, 340, 341, 342, 343, 344, 348, 352, 354, 355, 357, 358, 360, 490], "safeti": [121, 146, 162, 165, 215, 217, 290, 293, 306, 307, 308, 309, 310, 343, 345, 354, 367, 393, 394, 397, 490], "vehicl": [121, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 153, 181, 266, 288, 291, 292, 293, 299, 308, 309, 319, 326, 327, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 394, 395, 396, 397, 398, 399, 490], "physicsworld": [123, 173, 175, 177, 279, 283, 490], "world": [123, 173, 175, 176, 224, 279, 283, 288, 292, 299, 301, 304, 309, 323, 350, 352, 490], "barometersimpleparam": [126, 187, 279, 283, 315, 490], "gpssimpleparam": [128, 193, 279, 283, 321, 490], "imusimpl": [129, 185, 196, 279, 283, 313, 490], "imusimpleparam": [129, 195, 279, 283, 323, 490], "magnetometersimpleparam": [131, 201, 279, 283, 329, 490], "car": [132, 134, 135, 136, 137, 149, 151, 319, 327, 331, 332, 333, 334, 335, 336, 337, 395, 396, 490], "multirotor": [132, 139, 140, 141, 142, 143, 144, 145, 149, 153, 181, 266, 309, 327, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 394, 397, 398, 399, 490], "carapifactori": [133, 208, 209, 279, 283, 490], "ardurov": [135, 203, 331, 336, 490], "physxcar": [135, 203, 331, 337, 490], "multirotorparamsfactori": [138, 221, 223, 224, 231, 279, 283, 490], "multirotorcommon": [139, 154, 155, 172, 181, 215, 217, 218, 266, 309, 343, 345, 346, 394, 427, 431, 434, 436, 441, 490], "arducopt": [140, 211, 299, 338, 339, 348, 349, 490], "mavlink": [140, 211, 339, 350, 351, 352, 353, 490], "simpleflightcommon": [143, 172, 226, 230, 279, 283, 354, 358, 490], "interfac": [144, 227, 228, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 301, 305, 338, 340, 352, 355, 356, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 490], "mixer": [144, 237, 240, 248, 279, 285, 365, 490], "class": [154, 155, 156, 157, 158, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 320, 321, 323, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 414, 419, 420, 422, 424, 425, 426, 428, 429, 430, 432, 433, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 483, 490, 528], "forwardonli": [154, 279, 344, 397], "fly": [155, 279, 338, 344, 352, 354], "rotorturningdirectionccw": [156, 279, 338, 342], "rotorturningdirectioncw": [156, 279, 338, 342], "velocityworld": [157, 279, 354, 360, 363, 371, 376], "positionworld": [157, 279, 354, 360, 363, 376], "constantoutput": [157, 279, 363, 376], "inact": [158, 279, 367, 368, 372, 376, 475], "beingarm": [158, 279, 367, 372, 376], "activ": [158, 279, 367, 372, 376], "beingdisarm": [158, 279, 367, 372, 376], "program": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 490], "list": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 490], "author": [159, 279, 280, 287, 394, 500, 505], "autodoc_default_flag": [159, 279, 280, 287], "autosectionlabel_maxdepth": [159, 279, 280, 287], "autosectionlabel_prefix_docu": [159, 279, 280, 287], "autosummary_gener": [159, 279, 280, 287], "breathe_default_project": [159, 279, 280, 287], "breathe_project": [159, 279, 280, 287], "copyright": [159, 279, 280, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 391, 392, 393, 394, 395, 396, 397, 398, 399], "epub_exclude_fil": [159, 279, 280, 287], "epub_titl": [159, 279, 280, 287], "exclude_pattern": [159, 279, 280, 287], "exhale_arg": [159, 279, 280, 287], "extens": [159, 279, 280, 287], "highlight_languag": [159, 279, 280, 287], "html_css_file": [159, 279, 280, 287], "html_js_file": [159, 279, 280, 287], "html_static_path": [159, 279, 280, 287], "html_style": [159, 279, 280, 287], "html_theme": [159, 279, 280, 287], "html_theme_opt": [159, 279, 280, 287], "html_titl": [159, 279, 280, 287], "htmlhelp_basenam": [159, 279, 280, 287], "intersphinx_map": [159, 279, 280, 287], "languag": [159, 279, 280, 287], "latex_docu": [159, 279, 280, 287], "latex_el": [159, 279, 280, 287], "man_pag": [159, 279, 280, 287], "master_doc": [159, 279, 280, 287, 500, 503, 505], "primary_domain": [159, 279, 280, 287], "pygments_styl": [159, 279, 280, 287], "releas": [159, 279, 280, 287], "source_suffix": [159, 279, 280, 287], "templates_path": [159, 279, 280, 287], "texinfo_docu": [159, 279, 280, 287], "todo_include_todo": [159, 279, 280, 287], "version": [159, 279, 280, 287, 308, 352, 391], "common": [160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 243, 263, 264, 265, 267, 268, 270, 271, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 329, 330, 332, 333, 334, 335, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 369, 371, 375, 391, 392, 393, 395, 396, 398, 399], "windowsapiscommonpost": [162, 205, 217, 263, 264, 267, 268, 270, 271, 290, 333, 345, 391, 392, 395, 396, 398, 399], "windowsapiscommonpr": [162, 205, 217, 263, 264, 267, 268, 270, 271, 290, 333, 345, 391, 392, 395, 396, 398, 399], "msgpack": [162, 205, 217, 290, 333, 345, 391, 392, 395, 396, 398, 399], "msgpack_add_enum": [162, 217, 279, 290, 345], "except": [165, 168, 173, 224, 227, 228, 233, 234, 235, 248, 269, 293, 296, 301, 305, 348, 352, 355, 356, 361, 362, 363, 376, 392, 394, 397], "iostream": [168, 170, 171, 269, 296, 298, 299, 397], "earthutil": [169, 187, 196, 201, 297, 299, 315, 316, 324, 329, 341, 397, 405, 416, 417], "geodeticconvert": [169, 297], "cinttyp": [170, 171, 298, 299], "steppableclock": [170, 171, 298, 299], "fstream": [170, 171, 269, 298, 299, 397], "memori": [170, 171, 181, 185, 215, 224, 234, 236, 241, 298, 299, 309, 313, 343, 352, 362, 364, 369], "sstream": [170, 171, 208, 220, 266, 298, 299, 336, 348, 394], "unordered_set": [173, 301], "statereporterwrapp": [176, 304], "clockfactori": [177, 227, 263, 267, 305, 336, 348, 355, 391, 395], "scheduledexecutor": [177, 305], "unordered_map": [184, 312], "delaylin": [187, 190, 193, 198, 201, 315, 318, 321, 326, 329], "frequencylimit": [187, 190, 193, 198, 201, 315, 318, 321, 326, 329], "gaussianmarkov": [187, 190, 315, 318], "random": [187, 190, 193, 198, 201, 299, 315, 318, 321, 323, 324, 326, 329, 372, 394, 397], "firstorderfilt": [193, 213, 321, 341], "cmath": [196, 266, 324, 394], "acceleromet": [196, 279, 283, 323, 324, 416], "gyroscop": [196, 279, 283, 324, 416], "vectormath": [204, 224, 296, 299, 301, 306, 309, 319, 323, 327, 329, 332, 336, 338, 348, 350, 352, 355, 358, 394, 397], "udpsocket": [208, 220, 336, 348], "limit": [213, 315, 318, 321, 326, 329, 341, 352, 360, 370, 373, 374], "atom": [215, 343], "thread": [215, 224, 263, 264, 265, 267, 270, 305, 308, 343, 352, 354, 391, 392, 393, 395, 398], "adhocconnect": [222, 350], "mavlinkconnect": [224, 352], "mavlinkvehicl": [224, 352], "mavlinkvideostream": [224, 352], "filesystem": [224, 352], "smoothingfilt": [224, 352], "timer": [224, 352], "queue": [224, 352], "tupl": [224, 287, 352], "algorithm": [238, 242, 260, 366, 370, 388], "cstdint": [239, 244, 249, 251, 252, 253, 255, 256, 367, 372, 377, 379, 380, 381, 383, 384], "anglelevelpid": [240, 279, 285, 368, 475], "angleratepid": [240, 279, 285, 368, 475], "positionpid": [240, 279, 285, 368, 475], "rc": [240, 279, 285, 287, 290, 293, 294, 348, 352, 354, 355, 360, 367, 368, 372, 397, 475], "velocitypid": [240, 279, 285, 368, 475], "cstdlib": [242, 370], "h": [263, 264, 267, 268, 270, 271, 391, 392, 395, 396, 398, 399], "check": [263, 264, 267, 268, 270, 271, 279, 308, 343, 344, 352, 377, 391, 392, 394, 395, 396, 397, 398, 399], "rpclib_msgpack": [263, 264, 267, 268, 270, 271, 279, 391, 392, 395, 396, 398, 399], "minwindefin": [264, 268, 271, 392, 396, 399], "nest": 279, "relationship": [279, 341], "document": [279, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 528], "pwm": [279, 341, 348, 350, 354, 355, 400, 401], "turbul": [279, 348, 350, 352, 354, 401], "head": [279, 343, 350, 397, 402], "speedn": [279, 350, 402], "speedd": [279, 350, 402], "xaccel": [279, 350, 402], "yaccel": [279, 350, 402], "zaccel": [279, 350, 402], "rollrat": [279, 350, 402], "pitchrat": [279, 350, 402], "yawrat": [279, 350, 402], "rolldeg": [279, 350, 402], "pitchdeg": [279, 350, 402], "yawdeg": [279, 350, 402], "airspe": [279, 350, 402], "magic": [279, 350, 352, 391, 402], "initializefromset": [279, 315, 316, 318, 319, 321, 322, 323, 324, 326, 327, 329, 330, 405, 408, 415, 416, 421, 423], "pressure_factor_sigma": [279, 315, 316, 405], "pressure_factor_tau": [279, 315, 316, 405], "uncorrelated_noise_sigma": [279, 315, 316, 318, 319, 405, 408], "update_lat": [279, 315, 316, 318, 319, 321, 322, 329, 330, 405, 408, 415, 423], "update_frequ": [279, 315, 316, 318, 319, 321, 322, 326, 327, 329, 330, 405, 408, 415, 421, 423], "startup_delai": [279, 315, 316, 318, 319, 321, 322, 326, 327, 329, 330, 405, 408, 415, 421, 423], "draw_debug_point": [279, 319, 327, 408, 421], "external_control": [279, 319, 327, 336, 348, 352, 408, 421], "eph_time_const": [279, 321, 322, 415], "epv_time_const": [279, 321, 322, 415], "eph_initi": [279, 321, 322, 415], "epv_initi": [279, 321, 322, 415], "eph_fin": [279, 321, 322, 415], "epv_fin": [279, 321, 322, 415], "eph_min_3d": [279, 321, 322, 415], "eph_min_2d": [279, 321, 322, 415], "gyroscope_bia": [279, 323, 419], "accelerometer_bia": [279, 323, 419], "min_sample_tim": [279, 323, 324, 416], "vrw": [279, 323, 324, 416, 417], "tau": [279, 299, 316, 323, 324, 416, 417, 418], "bias_stabl": [279, 323, 324, 416, 417, 418], "turn_on_bia": [279, 323, 324, 416, 417, 418], "arw": [279, 323, 324, 416, 418], "number_of_channel": [279, 326, 327, 421], "rang": [279, 326, 327, 352, 421], "points_per_second": [279, 327, 421], "horizontal_rotation_frequ": [279, 327, 421], "horizontal_fov_start": [279, 327, 421], "horizontal_fov_end": [279, 327, 421], "vertical_fov_upp": [279, 326, 327, 421], "vertical_fov_low": [279, 326, 327, 421], "data_fram": [279, 327, 421], "referencesourc": [279, 329, 330, 423], "referencesource_const": [279, 329, 330, 423], "referencesource_dipolemodel": [279, 329, 330, 423], "noise_sigma": [279, 329, 330, 423], "scale_factor": [279, 329, 330, 423], "noise_bia": [279, 329, 330, 423], "ref_update_frequ": [279, 330, 423], "dynamic_reference_sourc": [279, 329, 330, 423], "ref_sourc": [279, 329, 330, 423], "seg_index": [279, 343, 397, 424], "seg_norm": [279, 343, 397, 425], "seg": [279, 308, 343, 397, 425], "seg_length": [279, 343, 397, 425], "seg_veloc": [279, 343, 397, 425], "start_z": [279, 343, 397, 425], "seg_path_length": [279, 343, 397, 425], "vel_to_breaking_dist": [279, 344, 354, 394, 397, 427], "min_breaking_dist": [279, 344, 354, 394, 397, 427], "max_breaking_dist": [279, 344, 397, 427], "breaking_vel": [279, 344, 397, 427], "min_vel_for_break": [279, 344, 397, 427], "obs_window": [279, 344, 394, 427], "calculatemaxthrust": [279, 338, 342, 351, 435], "c_t": [279, 338, 342, 435], "c_p": [279, 338, 342, 435], "max_rpm": [279, 338, 342, 351, 435], "propeller_diamet": [279, 340, 342, 435], "propeller_height": [279, 340, 342, 435], "control_signal_filter_tc": [279, 341, 342, 435], "revolutions_per_second": [279, 342, 435], "max_spe": [279, 341, 342, 435], "max_speed_squar": [279, 341, 342, 435], "max_thrust": [279, 338, 341, 342, 351, 435], "max_torqu": [279, 341, 342, 435], "setzeror": [279, 344, 397, 441], "altiud": [279, 357, 376, 472], "cascad": [279, 365, 368, 475], "adapt": [279, 360, 365, 368, 397, 475], "angle_rate_pid": [279, 354, 361, 362, 368, 475], "angle_level_pid": [279, 354, 361, 368, 372, 375, 475], "position_pid": [279, 354, 368, 371, 475], "velocity_pid": [279, 354, 368, 371, 375, 475], "default_goal_mod": [279, 368, 372, 475], "default_vehicle_st": [279, 354, 367, 368, 475], "api_goal_timeout": [279, 367, 368, 475], "gains_chang": [279, 354, 363, 368, 475], "min_armed_throttl": [279, 367, 368, 372, 475, 478, 480, 482], "pi": [279, 342, 360, 368, 475, 476], "max_limit": [279, 361, 368, 371, 372, 375, 475, 476, 477, 479, 482], "p": [279, 350, 352, 354, 355, 361, 362, 368, 371, 375, 397, 475, 476, 477, 479, 482], "kmaxlimit": [279, 368, 475, 477, 479, 482], "motor_count": [279, 355, 365, 366, 368, 475, 478], "min_motor_output": [279, 366, 368, 475, 478], "max_motor_output": [279, 366, 368, 475, 478], "min_angling_throttl": [279, 366, 367, 368, 372, 475, 478, 480], "channel_count": [279, 355, 368, 475, 480], "read_interval_m": [279, 368, 372, 475, 480], "rate_level_mode_channel": [279, 368, 372, 475, 480], "allow_api_control_channel": [279, 368, 372, 475, 480], "action_request_toler": [279, 368, 372, 475, 480], "arm_dur": [279, 368, 372, 475, 480], "disarm_dur": [279, 368, 372, 475, 480], "neutral_dur": [279, 368, 372, 475, 480], "channel": [279, 348, 352, 368, 372, 475, 480], "max_angle_level_switch": [279, 368, 372, 475, 480], "allow_api_when_disconnect": [279, 354, 368, 372, 475, 480], "allow_api_alwai": [279, 354, 368, 372, 475, 480], "takeoff_z": [279, 348, 354, 368, 475, 481], "kminthrottl": [279, 368, 475, 482], "iterm_discount": [279, 368, 374, 375, 376, 475, 482, 483], "output_bia": [279, 368, 370, 375, 376, 475, 482, 483], "min_throttl": [279, 368, 375, 475, 482], "integratortyp": [279, 370, 376, 483], "standard": [279, 287, 308, 370, 376, 483], "rungkutta": [279, 370, 376, 483], "time_scal": [279, 370, 376, 483], "min_output": [279, 370, 373, 374, 376, 483], "max_output": [279, 370, 373, 374, 376, 483], "integrator_typ": [279, 370, 376, 483], "inherit": 279, "deriv": [279, 293, 294, 301, 302, 311, 338, 343, 356, 359, 391], "base": [279, 287, 293, 298, 299, 300, 301, 305, 308, 314, 317, 319, 320, 325, 326, 328, 340, 341, 352, 360, 367, 397], "return": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], "code": [287, 308, 315, 352, 360, 372, 391, 392, 394, 395, 396, 397, 398, 399], "utf": 287, "sphinx": [287, 521, 526], "configur": [287, 293, 332, 338, 343, 352, 397], "breath": [287, 521], "gener": [287, 299, 302, 316, 341, 342, 349, 352, 353, 359, 360, 397], "c": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 370, 373, 374, 391, 392, 393, 394, 395, 396, 397, 398, 399, 497, 526, 528], "bin": 287, "ex": [287, 293, 305, 352, 397], "doxyfil": 287, "For": [287, 293, 324, 372, 397], "full": [287, 393, 397, 528], "built": [287, 338], "see": [287, 299, 316, 319, 324, 330, 338, 341, 349, 359, 394, 397, 526], "www": [287, 299, 316, 319, 323, 324], "en": [287, 299, 315, 316, 319, 330, 514], "master": 287, "usag": 287, "html": [287, 296, 299, 316, 319, 327, 330, 338, 342, 502], "2024": [287, 510], "llc": [287, 510], "setup": [287, 309, 397], "If": [287, 299, 308, 326, 352, 391, 392, 395, 396, 398, 399], "modul": 287, "autodoc": [287, 521], "ar": [287, 290, 293, 294, 297, 299, 301, 306, 309, 313, 316, 319, 320, 324, 329, 338, 341, 343, 344, 350, 351, 352, 360, 361, 367, 368, 372, 392, 393, 394, 397, 526], "anoth": [287, 308, 352], "add": [287, 296, 299, 309, 315, 318, 323, 336, 340, 343, 348, 352, 397], "sy": 287, "here": [287, 294, 318, 326, 336, 338, 341, 343, 348, 352, 394, 397], "root": [287, 297], "o": [287, 294, 308, 352, 355], "abspath": 287, "make": [287, 299, 308, 338, 343, 351, 352, 360, 361, 391, 393, 394], "absolut": 287, "like": [287, 299, 308, 326, 336, 340, 348, 350, 352, 368, 391, 392, 395, 396, 397, 398, 399], "shown": 287, "import": [287, 318], "ext": [287, 521], "sphinx_immateri": [287, 491, 521], "inform": [287, 299, 308, 309, 352], "autonomysim": [287, 327, 336, 352, 391, 497, 500, 503, 505, 528], "short": [287, 320, 343], "__version__": 287, "alpha": 287, "beta": 287, "your": [287, 352], "need": [287, 294, 299, 300, 308, 320, 326, 336, 343, 348, 352, 354, 361, 371, 375, 397, 526], "minim": [287, 294, 352], "needs_sphinx": 287, "ani": [287, 299, 311, 338, 340, 343, 351, 352, 355, 358, 372, 392, 397], "thei": [287, 340, 351, 352], "can": [287, 293, 299, 305, 311, 326, 338, 343, 344, 351, 352, 360, 368, 372, 391, 393, 394, 397], "come": [287, 352, 394, 397], "custom": [287, 352, 366], "ones": 287, "autosummari": [287, 521], "autosectionlabel": [287, 521], "doctest": [287, 521], "intersphinx": [287, 521], "inheritance_diagram": [287, 521], "todo": [287, 296, 297, 299, 301, 305, 315, 319, 320, 323, 326, 327, 329, 332, 336, 337, 341, 343, 348, 351, 352, 354, 355, 367, 368, 370, 372, 373, 374, 376, 391, 392, 394, 395, 396, 397, 398, 399, 521], "mathjax": [287, 521], "coverag": [287, 521], "napoleon": [287, 521], "viewcod": [287, 521], "exhal": [287, 521], "breathe_projects_sourc": 287, "breathe_default_memb": 287, "undoc": 287, "These": [287, 343, 526], "argument": [287, 526], "requir": [287, 291, 294, 311, 334, 338, 343, 346, 352, 368, 375, 391, 392, 394, 395, 396, 397, 398, 399, 526], "containmentfold": [287, 526], "rootfilenam": [287, 526], "library_root": [287, 526], "rst": [287, 518, 526], "doxygenstripfrompath": [287, 526], "heavili": [287, 526], "encourag": [287, 526], "option": [287, 338, 343, 352, 394, 526], "rootfiletitl": [287, 526], "librari": [287, 391, 392, 393, 394, 395, 396, 397, 398, 399, 526, 528], "suggest": [287, 309, 394, 397, 526], "createtreeview": [287, 526], "tip": [287, 526], "bootstrap": [287, 526], "theme": [287, 526], "treeviewisbootstrap": [287, 526], "exhaleexecutesdoxygen": [287, 526], "exhaledoxygenstdin": [287, 526], "input": [287, 293, 301, 308, 309, 340, 341, 360, 397, 526], "tell": [287, 352, 397], "what": [287, 305, 308, 344, 348, 351, 352, 354, 394, 397], "primari": 287, "being": [287, 299, 338, 360, 372], "pygment": 287, "highlight": 287, "should": [287, 293, 294, 299, 300, 302, 308, 311, 338, 341, 343, 344, 348, 352, 354, 368, 372, 391, 394, 397, 398], "contain": [287, 352], "_templat": [287, 522], "suffix": 287, "e": [287, 293, 299, 338, 352, 355, 358, 371, 393, 394, 397], "sourc": [287, 329], "filenam": [287, 352], "specifi": [287, 316, 344, 352, 365, 393, 397], "multipl": [287, 348, 352, 354, 390], "md": 287, "toctre": 287, "content": [287, 324, 354], "autogener": 287, "refer": [287, 316, 319, 329, 330, 360, 397], "support": [287, 293, 338, 352, 360, 361, 362, 368, 371, 391, 392, 395, 396, 397, 398, 399], "do": [287, 294, 297, 299, 300, 308, 311, 315, 326, 338, 343, 352, 355, 358, 367, 372, 394, 397], "translat": [287, 299, 344], "via": [287, 293, 297, 340, 352, 367], "gettext": 287, "catalog": 287, "line": 287, "case": [287, 293, 313, 329, 352, 354, 360, 363, 365, 370, 372, 375, 391, 397], "match": [287, 316, 319, 352, 368], "ignor": [287, 293, 299, 313, 352, 372], "when": [287, 294, 299, 342, 350, 352, 368, 394, 397], "look": [287, 299, 308, 348, 351, 352, 354, 394], "affect": [287, 341], "html_extra_path": 287, "_build": [287, 504], "thumb": [287, 504], "db": [287, 504], "ds_store": [287, 504], "syntax": 287, "style": [287, 338], "python": [287, 352, 391, 509], "get_all_styl": 287, "print": [287, 354], "none": [287, 372, 394, 509, 523], "monokai": 287, "jbm": 287, "github": [287, 324], "io": [287, 316, 319, 330], "immateri": 287, "more": [287, 299, 327, 336, 338, 348, 360, 394, 397], "titl": 287, "v": [287, 299, 367], "revis": 287, "help": 287, "page": [287, 528], "builtin": 287, "alabast": 287, "sheet": [287, 316, 330], "copi": [287, 336, 348, 352, 393], "after": [287, 299, 311, 326, 332, 340, 341, 343, 352, 370, 373, 374, 397], "css": [287, 499, 501, 513], "overwrit": 287, "_static": [287, 525], "extra": [287, 354, 499, 501, 513], "j": [287, 290, 299, 323, 360, 513], "specif": [287, 293, 338, 352, 356, 360], "feel": [287, 299], "further": 287, "avail": [287, 292, 293, 301, 309, 330, 342, 352, 391, 392, 393, 394, 395, 396, 397, 398, 399], "site_url": 287, "repo_url": 287, "com": [287, 299, 316, 324, 327, 338, 341, 342, 351, 352], "repo_nam": 287, "edit_uri": 287, "edit": 287, "globaltoc_collaps": 287, "toc_title_is_page_titl": 287, "version_dropdown": 287, "version_info": 287, "main": [287, 308, 352], "alias": 287, "featur": 287, "announc": 287, "dismiss": 287, "annot": 287, "tab": 287, "link": 287, "header": [287, 391, 392, 393, 394, 395, 396, 397, 398, 399], "autohid": 287, "mkdocstr": 287, "navig": [287, 323, 324], "expand": 287, "instant": 287, "section": 287, "footer": 287, "track": 287, "search": [287, 308, 393, 502], "share": [287, 311], "toc": 287, "follow": [287, 352, 397], "integr": [287, 299, 360, 370, 373, 374], "font": [287, 495], "text": [287, 352], "roboto": 287, "mono": 287, "palett": 287, "media": 287, "prefer": 287, "scheme": [287, 308], "toggl": 287, "icon": 287, "materi": [287, 299], "bright": 287, "auto": [287, 290, 292, 293, 299, 312, 313, 315, 316, 318, 319, 322, 324, 327, 330, 332, 336, 338, 340, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 363, 367, 391, 392, 397, 398], "light": [287, 299], "mode": [287, 344, 352, 354, 360, 363, 365, 367, 372, 376, 391, 392, 393, 394, 395, 396, 397, 398, 399], "nervosys_light": 287, "7": [287, 295, 336, 338, 348, 352, 354, 360], "dark": 287, "nervosys_dark": 287, "system": [287, 308, 309, 342, 343, 348, 352, 354, 360, 391, 392, 395, 396, 398, 399, 500], "favicon": 287, "imag": [287, 299, 352], "rune": 287, "svg": 287, "logo": 287, "book": 287, "open": [287, 352], "variant": 287, "repo": 287, "fontawesom": 287, "brand": 287, "git": 287, "alt": [287, 314, 336, 348, 352, 360], "pencil": 287, "view": 287, "ey": 287, "social": 287, "discord": 287, "gg": 287, "x84jxyje": 287, "twitter": 287, "squar": [287, 297, 360], "miss": 287, "sidebar": 287, "must": [287, 290, 297, 309, 311, 338, 343, 352, 367, 372, 375, 376, 390, 397], "dictionari": 287, "don": [287, 299, 308, 336, 348, 352, 354, 355, 358, 372, 373, 374, 392, 397], "itself": [287, 352], "localtoc": 287, "relat": [287, 343], "sourcelink": 287, "searchbox": 287, "html_sidebar": 287, "htmlhelp": 287, "builder": 287, "autonomysimdoc": [287, 520], "latex": [287, 495], "element": [287, 328, 336, 348], "paper": [287, 316, 319, 495], "letterpap": [287, 495], "a4pap": [287, 495], "papers": [287, 495], "10pt": [287, 495], "11pt": [287, 495], "12pt": [287, 495], "pointsiz": [287, 495], "addit": [287, 299, 318, 352, 495], "stuff": [287, 495], "preambl": [287, 495], "figur": [287, 495], "align": [287, 495], "figure_align": [287, 495], "htbp": [287, 495], "group": 287, "tree": 287, "target": [287, 321, 368, 397], "documentclass": 287, "howto": 287, "manual": [287, 352, 503], "own": 287, "tex": [287, 503], "adam": [287, 503], "erickson": [287, 503], "One": [287, 397], "entri": 287, "per": [287, 315, 316, 330, 342, 366, 372, 397], "descript": [287, 324], "texinfo": 287, "dir": [287, 341], "menu": 287, "categori": 287, "simul": [287, 288, 292, 294, 348, 350, 352, 354, 355, 368, 500], "engin": [287, 294, 300, 301, 303, 305, 340, 500], "autonom": [287, 500], "miscellan": [287, 500], "epub": 287, "bibliograph": 287, "dublin": 287, "core": [287, 299, 338, 351], "info": [287, 293, 309, 352], "uniqu": 287, "identifi": 287, "isbn": 287, "homepag": 287, "epub_identifi": 287, "A": [287, 316, 319, 324, 360], "identif": 287, "epub_uid": 287, "pack": [287, 350], "todolist": 287, "produc": [287, 301, 316, 341, 368, 372], "els": [287, 290, 292, 299, 306, 310, 312, 319, 327, 331, 332, 336, 338, 339, 343, 348, 350, 352, 353, 354, 360, 361, 363, 365, 367, 372, 376, 391, 392, 394, 397, 398], "noth": [287, 297, 299, 300, 303, 343, 352], "microsoft": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 391, 392, 393, 394, 395, 396, 397, 398, 399], "corpor": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 391, 392, 393, 394, 395, 396, 397, 398, 399], "reserv": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 391, 392, 393, 394, 395, 396, 397, 398, 399], "licens": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 391, 392, 393, 394, 395, 396, 397, 398, 399], "under": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 391, 392, 393, 394, 395, 396, 397, 398, 399], "mit": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 391, 392, 393, 394, 395, 396, 397, 398, 399], "ifndef": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], "autonomylib_api_apiprovider_hpp": 288, "namespac": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 490, 528], "world_sim_api_": 288, "vehicle_apis_": 288, "findordefault": 288, "vehicle_sim_apis_": 288, "valssiz": 288, "endif": [288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], "autonomylib_api_apiserverbase_hpp": 289, "autonomylib_api_rpclibadaptorsbase_hpp": 290, "push_back": [290, 313, 315, 318, 321, 329, 338, 345, 352, 356, 391, 397], "w": [290, 352, 357], "data": [290, 293, 309, 316, 327, 336, 338, 343, 348, 350, 351, 352, 354, 366, 399], "valid": [290, 352, 393, 397], "request_adaptor": 290, "linear": [290, 296, 299, 300, 301, 321, 323, 338, 343, 352, 355, 357, 358, 397], "angular": [290, 296, 299, 300, 323, 324, 338, 344, 352, 355, 357, 358, 360, 367, 382, 397], "field": [290, 297, 300, 314, 323, 328, 329, 340, 341, 351, 352], "comput": [290, 293, 297, 299, 330, 338, 342, 351, 397], "implement": [290, 293, 298, 299, 300, 301, 302, 305, 308, 312, 315, 318, 321, 323, 326, 329, 332, 336, 337, 340, 341, 343, 348, 352, 354, 355, 356, 360, 363, 391, 397], "m": [290, 299, 319, 324, 338, 342, 350, 352, 360, 368, 382, 397], "autonomylib_api_rpclibclientbase_hpp": 291, "method": [291, 293, 294, 301, 305, 315, 318, 321, 323, 326, 329, 338, 340, 341, 342, 343, 352, 356, 360, 392], "rcp": 291, "differ": [291, 338, 342, 343, 351, 352], "pimpl": [291, 334, 346, 392, 396, 399], "task": [291, 293, 343, 391, 397, 398], "manag": [291, 343], "cinemautonomysim": [291, 295, 391, 392], "end": [291, 295, 298, 299, 300, 301, 302, 305, 308, 312, 315, 318, 321, 323, 326, 329, 336, 340, 341, 343, 348, 352, 354, 356, 391, 392, 397, 425], "record": [291, 295], "pimpl_": [291, 292, 346, 391, 392, 398], "autonomylib_api_rpclibserverbase_hpp": 292, "api_provider_": [292, 392], "throw": [292, 293, 301, 313, 327, 329, 331, 336, 338, 339, 348, 350, 352, 361, 362, 363, 365, 370, 371, 372, 375, 376, 390, 397], "could": [292, 326, 352, 397], "either": [292, 326], "becaus": [292, 294, 297, 299, 300, 308, 316, 318, 319, 331, 338, 339, 343, 344, 352, 359, 367, 372, 375, 377, 397], "onli": [292, 308, 309, 336, 341, 348, 349, 352, 359, 361, 362, 366, 372, 391, 392, 393, 394, 395, 396, 397, 398, 399], "doe": [292, 299, 332, 352, 366, 371, 397], "exist": [292, 293, 299, 343, 352, 397], "sim": [292, 352, 354, 391], "autonomylib_api_vehicleapibase_hpp": 293, "obtain": [293, 326], "send": [293, 336, 348, 350, 352, 360, 397], "mani": [293, 311], "thing": [293, 361, 366, 371, 375], "estim": [293, 355, 358, 360], "onboard": 293, "etc": [293, 342, 352], "low": [293, 299, 324, 342, 343, 368, 372], "level": [293, 295, 316, 330, 336, 343, 348, 354, 360, 361, 372], "actuat": [293, 340, 352, 354], "high": [293, 299, 343, 344, 352, 354], "movement": [293, 336], "mai": [293, 299, 301, 308, 309, 316, 340, 343, 352, 377, 397], "some": [293, 338, 343, 351, 352, 368, 391, 397], "applic": 293, "rais": [293, 392, 394], "call": [293, 294, 297, 298, 299, 300, 301, 302, 305, 311, 314, 317, 320, 325, 326, 328, 338, 340, 341, 342, 343, 351, 352, 355, 365, 367, 390, 391, 392, 395, 397, 398], "async": [293, 305, 391], "unus": [293, 294, 297, 301, 302, 303, 305, 336, 337, 340, 343, 348, 350, 352, 355, 356, 360, 364, 369, 373, 374, 391, 397], "somewher": 293, "viewer": [293, 352], "cloud": [293, 326], "action": [293, 316, 352, 368, 372], "below": [293, 299, 308, 316, 319, 338, 343, 344, 352, 354, 397], "two": [293, 308, 343, 352, 361, 371, 375], "bound": 293, "its": [293, 299, 308, 361, 368, 394], "hardwar": 293, "get": [293, 294, 297, 299, 305, 308, 313, 322, 336, 340, 341, 343, 348, 349, 351, 352, 353, 354, 355, 359, 360, 361, 372, 375, 377, 391, 394, 397, 398], "suppli": [293, 376], "read": [293, 294, 327, 352, 372, 397], "unsupport": 293, "invalid_rc_data": 293, "static_cast": [293, 294, 296, 299, 305, 312, 313, 321, 323, 325, 335, 336, 339, 340, 341, 342, 347, 348, 351, 352, 353, 354, 355, 360, 361, 373, 376, 391, 392, 395, 396, 397, 398, 399], "findsensorbynam": 293, "stringf": [293, 299, 305, 306, 308, 309, 310, 320, 331, 336, 339, 348, 350, 352, 354, 358, 363, 375, 391, 394, 397], "No": 293, "c_str": [293, 299, 306, 309, 310, 331, 336, 339, 348, 350, 352, 363, 394, 397], "distance_sensor": [293, 336, 348, 352], "empti": [293, 352], "one": [293, 294, 308, 313, 338, 352, 360, 391, 393, 397], "found": [293, 308, 309, 394], "Not": [293, 336, 348, 352], "effici": [293, 342], "suffic": 293, "small": [293, 299, 308, 397], "count_sensor": 293, "current_sensor": 293, "break": [293, 329, 336, 344, 348, 352, 354, 360, 363, 365, 370, 372, 375, 394, 397], "autonomylib_api_vehiclesimapibase_hpp": 294, "everi": [294, 352], "render": 294, "we": [294, 299, 305, 306, 308, 309, 321, 322, 326, 338, 340, 341, 342, 343, 344, 348, 350, 351, 352, 354, 355, 358, 361, 365, 367, 368, 371, 372, 374, 375, 391, 392, 394, 397], "transfer": [294, 340], "As": 294, "halt": 294, "happen": [294, 326], "process": [294, 308, 315, 316], "chang": [294, 299, 315, 316, 326, 338, 341, 343, 348, 350, 351, 352, 363, 366, 370, 374, 397], "const_cast": [294, 343, 357, 376], "mean": [294, 299, 316, 338, 344, 352, 365, 394, 397], "disabl": [294, 309, 313, 336, 348, 352, 377, 391, 395, 397, 398], "keyborad": 294, "host": [294, 352], "pointer": [294, 336, 348, 359], "singleton": [294, 319, 327], "autonomylib_api_worldsimapibase_hpp": 295, "6": [295, 296, 311, 338, 340, 352, 354, 360, 368, 373, 475, 482], "plot": [295, 324, 338], "camera": [295, 326, 351], "autonomylib_physics_debugphysicsbody_hpp": 296, "force_": 296, "inertia_": [296, 301], "mass_": [296, 301], "body_box_": 296, "createwrenchvertic": 296, "wrench_vertices_": 296, "createdragvertic": [296, 340], "drag_vertices_": 296, "cout": [296, 391], "po": [296, 299, 338, 352, 363, 397], "ori": 296, "endl": [296, 391], "lin": [296, 300], "vel": [296, 299, 300, 320, 352, 397], "ang": [296, 300, 358], "restitution_": 296, "friction_": 296, "box": [296, 299, 338, 340, 351], "drag_vertic": 296, "drag_coeffici": 296, "body_x": 296, "body_i": 296, "body_z": 296, "top_bottom_area": [296, 340], "left_right_area": [296, 340], "front_back_area": [296, 340], "drag_factor_unit": [296, 340], "six": [296, 340], "drag": [296, 299, 340], "repres": [296, 340, 341], "side": [296, 340, 352, 360, 361, 394], "emplace_back": [296, 338, 340], "wrench_vertic": 296, "18": [296, 351, 352], "put": [296, 308, 352], "farsid": [296, 338], "ph": [296, 338], "utexa": [296, 338], "edu": [296, 299, 324, 338, 342], "teach": [296, 299, 338], "336k": [296, 338], "newtonhtml": [296, 338], "node64": [296, 338], "12": [296, 308, 323, 338, 360, 368, 475, 480], "20f": [296, 338, 352], "12f": [296, 338], "04f": [296, 338], "7f": 296, "autonomylib_physics_environment_hpp": 297, "time": [297, 299, 318, 321, 342, 343, 348, 352, 354, 363, 372, 373], "constructor": [297, 301, 302, 311, 323, 332, 341], "later": [297, 299, 301, 302, 336, 341, 348, 393], "initial_": [297, 300], "updatest": [297, 352], "home_geo_point_": [297, 376], "homegeopoint": 297, "geodetic_converter_": 297, "sethom": 297, "local": [297, 299, 336, 348, 350, 352, 360], "ned": [297, 326, 338, 342, 343, 348, 352, 354, 375], "coordin": [297, 299, 309, 343, 348, 352, 354, 375], "current_": [297, 300], "twice": 297, "inbetween": 297, "multirotorpawnsimapi": [297, 352], "carsimapi": 297, "those": 297, "directli": [297, 352, 365], "ned2geodet": 297, "geo_pot": 297, "getgeopotenti": 297, "1000": [297, 324, 336, 348, 350, 352, 354, 355, 376, 416, 483], "getstandardtemperatur": 297, "getstandardpressur": [297, 315], "getairdens": [297, 341], "avoid": [297, 299, 309, 336, 348, 352, 394], "recalcul": [297, 342], "getgrav": 297, "autonomylib_physics_externalphysicsengine_hpp": 298, "updatablest": [298, 299, 300, 301, 302, 305, 312, 315, 318, 321, 323, 326, 340, 341], "writevalu": [298, 299, 300, 305, 314, 317, 320, 325, 326, 328, 340, 341], "autonomylib_physics_fastphysicsengine_hpp": 299, "enable_ground_lock_": 299, "wind_": 299, "ext_force_": 299, "setnam": [299, 304, 305, 340], "initphysicsbodi": 299, "updatephys": 299, "phy": 299, "debug_string_": 299, "str": [299, 336, 348], "torqu": [299, 301, 302, 341, 342], "nownano": [299, 315, 318, 321, 323, 326, 329, 336, 343, 348, 350, 352, 355], "updatesinc": [299, 323, 326], "current": [299, 308, 309, 336, 348, 350, 351, 352, 355, 360, 367, 394, 397], "sinc": [299, 336, 348, 352, 363], "next": [299, 300, 315, 318, 323, 329, 340, 397], "next_wrench": 299, "wa": [299, 308, 343, 352, 361, 362, 363, 365, 367, 372, 375, 376, 392, 397], "necessari": 299, "take": [299, 300, 301, 308, 309, 336, 348, 391, 397], "account": [299, 300, 338], "getnextkinematicsnocollis": 299, "collision_respons": 299, "alreadi": [299, 352, 355, 367, 392, 394, 397], "respond": [299, 344, 352, 391], "until": [299, 322, 372, 397], "collision_time_stamp": 299, "is_collision_respons": 299, "getnextkinematicsoncollis": 299, "updatecollisionresponseinfo": 299, "throttledlogoutput": 299, "ha": [299, 308, 316, 332, 336, 338, 340, 348, 350, 352, 360, 367, 372, 394, 397], "priu64": 299, "getstepcount": 299, "now": [299, 305, 349, 350, 352, 355, 358, 359, 361, 394], "done": [299, 324, 338, 352, 397], "pawnsimapi": 299, "think": 299, "sequenc": [299, 377], "comment": 299, "out": [299, 343, 344, 348, 351, 352, 354, 392, 397], "work": [299, 311, 343, 351, 352, 394, 397], "collision_count_raw": 299, "increment": 299, "didn": [299, 338], "collid": 299, "rest": [299, 352, 397], "squarednorm": 299, "krestingvelocitymax": 299, "collision_count_non_rest": 299, "dt_real": 299, "go": [299, 394, 397], "awai": [299, 394, 397], "keep": [299, 340, 344, 352, 368, 372, 397], "dot": [299, 352, 397], "avg": 299, "vcur_avg": 299, "averag": [299, 397], "angular_avg": 299, "contact": [299, 391], "r": [299, 324, 345, 350, 360], "impact": 299, "straight": 299, "surfac": [299, 360], "assum": [299, 324, 352, 355, 358], "normal_bodi": 299, "is_ground_norm": 299, "isapproximatelyequ": 299, "ab": [299, 332, 360, 367, 375, 397], "kaxistoler": 299, "ground_collis": 299, "z_vel": [299, 397], "is_land": 299, "coord": 299, "why": [299, 351, 352, 368, 397], "colid": 299, "bounci": 299, "reduc": [299, 321, 352], "coeffici": [299, 338, 351], "bounc": [299, 352], "better": [299, 306, 309, 352, 354, 367, 394], "did": 299, "g": [299, 352], "grass": 299, "inelast": [299, 338], "hard": 299, "road": 299, "crank": 299, "up": [299, 338, 343, 351, 352, 368, 372, 391, 397], "doesn": [299, 308, 316, 319, 352, 391, 392, 394, 395, 396, 397, 398, 399], "try": [299, 305, 341, 348, 352, 360, 367, 397], "slide": [299, 360], "across": 299, "again": [299, 352], "depend": [299, 340], "have": [299, 308, 340, 352, 354, 363, 372, 391, 394, 397], "fix": [299, 305, 320, 336, 348, 352], "vcur_avg_bodi": 299, "contact_vel_bodi": 299, "cross": 299, "gafferongam": 299, "columb": 299, "coulomb": 299, "impuls": 299, "magnitud": 299, "n": [299, 336, 342, 348, 352, 360, 373, 397], "part": [299, 308, 326], "chri": 299, "hecker": 299, "eq": 299, "chrisheck": 299, "e7": 299, "gdmphys3": 299, "pdf": [299, 316, 323, 324], "impulse_mag_denom": 299, "impulse_mag": 299, "abov": [299, 319, 327, 338, 342, 343, 397], "modifi": 299, "compon": 299, "tangent": 299, "contact_tang_bodi": 299, "contact_tang_unit_bodi": 299, "friction_mag_denom": 299, "friction_mag": 299, "norm": [299, 306, 310, 343, 352, 394, 397], "contact_tang_unit": 299, "transformtoworldfram": [299, 394], "9f": [299, 322, 415], "dure": [299, 352], "hack": [299, 391, 392, 395, 396, 398, 399], "cancel": [299, 343, 344, 352, 391, 397, 398], "too": [299, 352, 368, 372, 394, 397], "much": [299, 308, 352, 361, 368, 397], "off": [299, 306, 352, 394], "object": [299, 300, 305, 340, 352, 365, 377, 397], "toeulerianangl": [299, 336, 348, 350, 358, 397], "lot": [299, 352, 368], "elimin": 299, "due": [299, 340, 343, 348, 352, 354, 394, 397], "sit": 299, "shouldn": [299, 305, 343], "hit": [299, 352], "acc": [299, 352], "bump": 299, "equal": [299, 397], "opposit": [299, 309, 394, 397], "our": [299, 305, 341, 352, 397], "downward": [299, 327, 352], "trigger": 299, "kcollisionresponsecycl": 299, "elapsedsinc": [299, 397], "last_message_tim": 299, "getdragwrench": 299, "linear_vel": 299, "angular_vel_bodi": 299, "wind_world": 299, "had": [299, 301, 394, 397], "proport": [299, 341], "total": [299, 397], "b": 299, "term": 299, "pg": 299, "44": 299, "classic": 299, "mechan": 299, "john": 299, "taylor": 299, "To": 299, "unit": [299, 309, 316, 338], "stackexchang": [299, 338, 341, 342], "question": 299, "304742": [299, 338], "similarli": 299, "calcul": [299, 323, 326, 329, 352, 360, 394, 397], "note": [299, 338, 340, 352, 365, 397], "wrt": 299, "relative_vel": 299, "linear_vel_bodi": 299, "vi": 299, "vertex": [299, 301, 302], "vel_vertex": 299, "vel_comp": 299, "ve": [299, 342, 352, 375, 397], "cull": 299, "face": [299, 327], "kdragminveloc": 299, "drag_forc": 299, "drag_torqu": 299, "convert": [299, 308, 323, 324, 326, 336, 344, 348, 352, 354, 355, 365, 376, 391, 397], "leav": [299, 352, 367, 397], "getbodywrench": 299, "sum": 299, "rigid": 299, "aggreg": 299, "vertex_wrench": 299, "appli": [299, 315, 352, 365], "farther": 299, "than": [299, 306, 309, 336, 338, 348, 368, 393, 394, 397], "cog": [299, 352], "f": [299, 308, 309, 310, 320, 352, 354, 358, 375, 394, 397], "avg_linear": 299, "avg_angular": 299, "act": 299, "body_wrench": 299, "stick": [299, 355, 368, 372], "net": [299, 338], "exce": 299, "weight": [299, 338, 351], "external_force_magnitud": 299, "weight_magnitud": 299, "lose": 299, "drag_wrench": 299, "space": [299, 397], "ext_force_wrench": 299, "wrn": 299, "new": [299, 312, 313, 331, 332, 338, 339, 340, 349, 351, 352, 353, 354, 359, 361, 362, 363, 365, 370, 371, 375, 391, 392, 397, 398], "ll": [299, 351], "step": [299, 305, 352], "vibrat": 299, "euler": [299, 350, 360], "rotat": [299, 319, 327, 338, 341, 342, 350, 397], "equat": 299, "wikipedia": [299, 315], "wiki": [299, 315, 324], "s_equations_": 299, "body_dynam": 299, "momentum": 299, "l": [299, 352, 360], "omega": 299, "angular_momentum": 299, "angular_momentum_r": 299, "verlet": 299, "udel": 299, "bnikol": 299, "phys660": 299, "numerical_od": 299, "node5": 299, "bug": [299, 352], "increas": [299, 319, 397], "idenfinit": 299, "clip": [299, 341, 352, 370, 372, 373, 374, 397], "everyth": [299, 352], "turn": [299, 341], "infin": 299, "speedoflight": 299, "disc": 299, "1m": [299, 343], "computenextpos": 299, "current_pos": 299, "velocti": 299, "displac": 299, "angle_per_unit": 299, "isdefinitelygreaterthan": 299, "angleaxisr": [299, 338], "angle_dt_aa": 299, "angle_dt_q": 299, "previou": [299, 340, 343, 352, 397], "proof": 299, "q0": 299, "q1": 299, "qx": 299, "attitud": [299, 352], "let": [299, 340, 373, 374, 397], "transform": [299, 309, 323, 375, 394], "Then": 299, "back": [299, 308, 352, 397], "simplifi": 299, "thu": 299, "q0q1": 299, "hasnan": [299, 301, 394, 397], "debugbreak": [299, 301, 305, 352, 356], "accumul": [299, 352, 374], "undefin": 299, "25f": [299, 338, 368, 475, 477, 479], "1f": [299, 316, 319, 322, 338, 344, 352, 368, 372, 397, 415, 427, 475, 480], "stringstream": 299, "autonomylib_physics_kinematics_hpp": 300, "zero_st": 300, "ident": [300, 319, 327, 408, 421], "final": [300, 361, 365, 370, 371], "well": [300, 372, 397], "occur": [300, 305, 321, 343, 397], "accl": 300, "autonomylib_physics_physicsbody_hpp": 301, "covari": [301, 352], "out_of_rang": [301, 376], "collision_info_": 301, "kinematics_": [301, 355, 358], "mass_inv_": 301, "inertia_inv_": 301, "invers": [301, 394], "environment_": [301, 340, 341, 358], "setpar": [301, 305, 340], "detect": [301, 352, 390, 394, 397], "wrench_": 301, "collision_response_": 301, "grounded_": 301, "individu": 301, "vertex_index": 301, "signal": [301, 340, 341, 354, 355, 360], "writehead": 301, "getter": [301, 302, 340, 398, 399], "mutex_": [301, 308, 393], "setter": [301, 302, 343], "friend": 301, "autonomylib_physics_physicsbodyvertex_hpp": 302, "drag_factor_": 302, "initial_position_": 302, "initial_normal_": 302, "position_": 302, "normal_": 302, "current_wrench_": 302, "autonomylib_physics_physicsenginebase_hpp": 303, "autonomylib_physics_physicsworld_hpp": 304, "world_": [304, 352], "move": [304, 305, 340, 343, 352, 367, 370, 373, 374, 394, 397], "update_period_nanos_": 304, "initializeworld": 304, "reporter_": 304, "seten": 304, "canreport": 304, "clearreport": 304, "getreport": 304, "bi": 304, "bodies_": 304, "autonomylib_physics_world_hpp": 305, "physics_engine_": 305, "synchron": 305, "sleep": [305, 352, 355, 397], "executor_": 305, "getsleeptimeavg": 305, "membership": 305, "modif": [305, 338, 360], "probabl": [305, 348, 352, 354], "pass": [305, 342, 343, 352, 397], "around": [305, 308, 309, 319, 327, 343, 344, 350, 393, 394], "bind": [305, 336, 348, 392, 396, 399], "worldupdatorasync": 305, "placehold": [305, 360], "_1": 305, "dt_nano": 305, "catch": [305, 348, 352, 397], "autonomylib_safety_cubegeofence_hpp": 306, "point_min_": 306, "point_max_": 306, "point_center_": 306, "distance_accuracy_": [306, 310], "calculatecent": 306, "logmessag": [306, 310, 397], "cur": [306, 309, 397], "locat": [306, 309, 352], "dest_dist": 306, "cur_dist": 306, "autonomylib_safety_igeofence_hpp": 307, "autonomylib_safety_obstaclemap_hpp": 308, "2d": 308, "circular": 308, "disk": [308, 352], "design": [308, 324, 338], "criteria": 308, "delet": 308, "queri": [308, 393], "veri": [308, 326, 343, 344], "fast": [308, 338, 340], "typic": [308, 343, 344], "possibl": [308, 368], "grid": 308, "approach": [308, 316, 319], "larg": [308, 352], "constant": [308, 329, 342, 344, 360], "laser": 308, "faster": 308, "circl": [308, 360, 393, 394], "divid": [308, 338, 351], "mark": [308, 313, 352], "0xxx1": 308, "xx": 308, "3xxx2": 308, "essenti": 308, "alwai": [308, 393, 394, 397], "between": [308, 311, 338, 343, 354, 361], "form": 308, "cone": 308, "u": [308, 340, 351, 352, 360], "front": [308, 352, 394], "dji": [308, 342, 351], "matric": 308, "guidanc": 308, "about": [308, 315, 318, 343, 351, 360], "safe": [308, 343, 348, 352, 354, 394, 397], "concurr": 308, "fulli": [308, 322], "expect": [308, 348, 350, 397], "continu": [308, 313, 352, 397], "store": [308, 359, 360], "distances_": [308, 393], "deviat": [308, 324], "confidences_": [308, 393], "decid": 308, "reolut": 308, "ticks_": [308, 393], "blind": 308, "spot": 308, "neighbour": 308, "blindspots_": [308, 393], "ob": [308, 309, 393], "wrap": [308, 393], "emploi": 308, "simpl": 308, "model": [308, 316, 319, 324, 330, 349, 351, 353, 359, 360, 373], "just": [308, 344, 351, 352, 397], "serial": [308, 352], "odd": 308, "within": [308, 321, 394, 397], "entir": [308, 309], "minimum": [308, 338, 344], "radian": [308, 342, 352, 368, 394], "mid": 308, "autonomylib_safety_safetyeval_hpp": 309, "neu": 309, "metric": 309, "bitwis": 309, "closest": [309, 393, 394], "free": [309, 394], "destin": [309, 394], "along": [309, 340, 397], "desir": [309, 360], "evalu": [309, 394], "structur": [309, 320], "partial": 309, "fill": 309, "toward": [309, 397], "might": [309, 352], "were": [309, 350, 352], "consid": [309, 351, 391, 394, 397], "risk": [309, 394], "far": [309, 394], "zone": 309, "lower": [309, 326, 343, 394, 397], "higher": [309, 338, 368], "vehicle_params_": [309, 348, 352, 354, 394], "fence_ptr_": [309, 394], "obs_xy_ptr_": [309, 394], "enable_reasons_": [309, 394], "obs_strategy_": [309, 394], "appendtoresult": [309, 394], "getdestin": [309, 394], "isthisriskdistless": [309, 394], "this_risk_dist": [309, 394], "other_risk_dist": [309, 394], "iscurrentsaf": [309, 394], "setsuggestedveloc": [309, 394], "adjustclearanceforprstl": [309, 394], "base_clear": [309, 394], "obs_confid": [309, 394], "autonomylib_safety_spheregeofence_hpp": 310, "center_": 310, "radius_": 310, "min_height_": 310, "max_height_": 310, "center_dest": 310, "center_dest_xi": 310, "cur_center_norm": 310, "autonomylib_sensors_sensorbase_hpp": 311, "truth": [311, 329, 332, 340, 343, 355, 358], "construct": 311, "made": [311, 336, 348, 352], "good": [311, 352, 372, 397], "name_": 311, "ground_truth_": 311, "autonomylib_sensors_sensorcollection_hpp": 312, "type_int": 312, "pair": 312, "emplac": 312, "sensorbasecontain": 312, "autonomylib_sensors_sensorfactorybase_hpp": 313, "creat": [313, 331, 332, 338, 339, 352, 354, 360, 363, 377], "sensor_typ": [313, 352], "invalid_argu": [313, 329, 336, 338, 348, 350, 352, 361, 362, 363, 365, 370, 371, 375, 376, 397], "unexpect": 313, "collect": [313, 332, 338], "sensor_setting_pair": 313, "autonomylib_sensors_barometerbase_hpp": 314, "ro": [314, 320, 328], "pascal": 314, "baro": [314, 352], "output_": [314, 317, 320, 325, 328, 341, 361, 362, 363, 364, 369, 370, 371, 375], "pr": 314, "autonomylib_sensors_barometer_hpp": 315, "params_": [315, 318, 321, 323, 326, 329, 338, 340, 341, 348, 354, 355, 361, 362, 363, 365, 366, 367, 371, 372, 375], "gm": [315, 316], "walk": [315, 323, 324], "factor": [315, 341], "pressure_factor_": 315, "uncorrelated_noise_": [315, 318], "randomgeneratorgausianr": [315, 318], "correlated_noise_": [315, 318], "correlated_noise_tau": [315, 316, 318, 319], "correlated_noise_sigma": [315, 316, 318, 319], "frequenc": [315, 318, 321, 324, 326, 329, 352], "freq_limiter_": [315, 318, 321, 326, 329], "delay_line_": [315, 318, 321, 329], "getoutputintern": [315, 318, 329], "iswaitcomplet": [315, 318, 321, 326, 329], "ground_truth": [315, 318, 321, 323, 326, 329], "drift": 315, "10m": [315, 316], "hour": [315, 316, 324, 391], "nois": [315, 316, 318, 319, 323, 324, 329, 330, 343, 368], "2m": [315, 318, 344], "sigma": [315, 316, 318, 319], "sealevelpressur": [315, 316, 405], "altimet": [315, 316, 319], "formula": [315, 342], "pressure_altitud": 315, "driver": 315, "pow": [315, 342], "190284f": 315, "145366": 315, "45f": 315, "3048f": 315, "autonomylib_sensors_barometersimpleparams_hpp": 316, "user": [316, 352, 372], "sea": 316, "hpa": 316, "avh": 316, "950": 316, "1013": 316, "1050": 316, "ie": [316, 394], "approx": [316, 394], "65": 316, "variat": 316, "quiet": 316, "condit": [316, 394], "taken": 316, "20th": 316, "marin": 316, "atla": 316, "david": 316, "burch": 316, "2014": 316, "70": 316, "interv": [316, 321], "varianc": [316, 324, 352], "starpath": 316, "ebooksampl": 316, "9780914025382_sampl": 316, "0365f": [316, 405], "3600": [316, 324, 405, 416, 418], "ref": [316, 319, 323, 324, 342, 360], "stochast": [316, 319], "barometr": [316, 319], "angelo": [316, 319], "maria": [316, 319], "sabatini": [316, 319], "vincenzo": [316, 319], "genoves": [316, 319], "sampl": [316, 319, 338], "tabl": [316, 319], "ncbi": [316, 319], "nlm": [316, 319], "nih": [316, 319], "gov": [316, 319], "pmc": [316, 319], "articl": [316, 319, 324], "pmc3871085": [316, 319], "howev": [316, 319, 338, 397], "mention": [316, 319], "experi": [316, 319], "27f": [316, 319], "87f": [316, 319], "24f": [316, 319, 324, 416, 417], "mea": 316, "ms56112": 316, "021mbar": 316, "datasheet": [316, 324], "resoult": 316, "027mbar": 316, "1024": 316, "te": 316, "commerc": 316, "documentdeliveri": 316, "ddecontrol": 316, "srchrtrv": 316, "docnm": 316, "ms5611": 316, "01ba03": 316, "doctyp": 316, "doclang": 316, "english": 316, "027f": [316, 405], "jmavsim": [316, 319, 352], "px4": [316, 319, 322, 330, 352, 360], "ekf": [316, 319, 330], "dev": [316, 319, 330], "advanc": [316, 319, 330, 360], "parameter_refer": [316, 319, 330], "sec": [316, 319, 322, 323, 324, 327, 330, 342, 368, 382, 397], "50": [316, 319, 322, 330, 338, 348, 352, 354, 397, 405, 408, 415, 423], "hz": [316, 319, 322, 327, 330], "json": [316, 322, 324, 330, 336, 348, 352], "getfloat": [316, 319, 322, 324, 327, 330], "pressurefactorsigma": 316, "pressurefactortau": 316, "uncorrelatednoisesigma": 316, "updatelat": [316, 322, 330], "updatefrequ": [316, 322, 330], "startupdelai": [316, 322, 330], "autonomylib_sensors_distancebase_hpp": 317, "dist": [317, 361, 397], "curr": 317, "autonomylib_sensors_distancesimple_hpp": 318, "commut": 318, "autonomylib_sensors_distancesimpleparams_hpp": 319, "4000": [319, 408], "littl": [319, 327, 350], "especi": [319, 327], "mayb": 319, "002f": [319, 408], "settings_json": [319, 327], "mindist": 319, "maxdist": 319, "getbool": [319, 327], "drawdebugpoint": [319, 327], "externalcontrol": [319, 327], "createvectorset": [319, 327], "nanvector": [319, 327], "createrotationset": [319, 327], "nanrot": [319, 327], "simmode_nam": [319, 327], "isnan": [319, 324, 327, 376, 394, 397, 398], "ksimmodetypemultirotor": [319, 327], "bit": [319, 326, 327, 352], "degreestoradian": [319, 327, 354], "autonomylib_sensors_gpsbase_hpp": 320, "cleanup": [320, 343], "80": [320, 360], "unabl": 320, "unaug": 320, "satellit": 320, "augment": 320, "beidou": 320, "hdop": 320, "vdop": 320, "horizont": 320, "dilut": [320, 321, 322], "unitless": 320, "loc": 320, "autonomylib_sensors_gpssimple_hpp": 321, "filter": [321, 341, 342, 352], "eph_filt": 321, "over": [321, 344, 352], "accuraci": [321, 336, 343, 344, 348, 397], "epv_filt": 321, "addoutputtodelaylin": 321, "0e3": [321, 391], "normal_distribut": 321, "normaldistribut": 321, "autonomylib_sensors_gpssimpleparams_hpp": 322, "won": [322, 326, 397], "converg": 322, "fusion": 322, "accuracti": 322, "2f": [322, 330, 338, 343, 352, 368, 394, 415, 423, 475, 482], "eph_timeconst": 322, "epv_timeconst": 322, "ephiniti": 322, "epviniti": 322, "ephfin": 322, "epvfin": 322, "ephmin3d": 322, "ephmin2d": 322, "autonomylib_sensors_imusimple_hpp": 323, "gyro_bias_stability_norm": 323, "sqrt": [323, 324, 341, 350, 360, 416, 418], "accel_bias_stability_norm": 323, "last_time_": [323, 326, 360, 370, 373], "state_": [323, 376], "gauss_dist": 323, "updateoutput": [323, 326], "addnois": 323, "introduct": 323, "inerti": [323, 326], "oliv": 323, "woodman": 323, "pp": [323, 324], "cl": 323, "cam": 323, "ac": 323, "uk": 323, "techreport": 323, "ucam": 323, "tr": 323, "696": 323, "sqrt_dt": 323, "gyrosocp": 323, "stddev": [323, 330], "gyro_sigma_arw": 323, "bia": [323, 324, 330, 360], "gyro_sigma_bia": 323, "accel_sigma_vrw": 323, "accel_sigma_bia": 323, "randomvectorgaussianr": [323, 329], "cach": 323, "autonomylib_sensors_imusimpleparams_hpp": 324, "paramet": [324, 338, 352, 360, 394], "ethz": 324, "asl": 324, "kalibr": 324, "intrins": 324, "mpu": 324, "6000": 324, "invensens": 324, "character": 324, "cost": 324, "mem": 324, "cluster": 324, "precis": 324, "daniel": 324, "greenheck": 324, "2009": 324, "17": [324, 352, 370, 373, 374], "epubl": 324, "marquett": 324, "cgi": 324, "viewcont": 324, "1326": 324, "context": 324, "theses_open": 324, "wp": 324, "upload": 324, "2015": 324, "02": 324, "datasheet1": 324, "allan": 324, "3300": 324, "30f": [324, 416, 418], "m_pif": [324, 338, 340, 342, 352, 361, 393, 397, 416, 418], "180": [324, 338, 350, 352, 361, 368, 397, 416, 418], "deg": 324, "rad": [324, 382], "stabil": [324, 352], "500": [324, 354, 416, 418], "6f": [324, 416, 417, 418], "hr": 324, "calibr": 324, "0e3f": [324, 416, 417], "mg": 324, "800": [324, 338, 416, 417], "36": [324, 416, 417], "1e": [324, 352, 416, 417], "ug": 324, "intern": [324, 361, 371, 375], "angularrandomwalk": 324, "gyrobiasstabilitytau": 324, "gyrobiasst": 324, "velocityrandomwalk": 324, "accelbiasstabilitytau": 324, "accelbiasst": 324, "autonomylib_sensors_lidarbase_hpp": 325, "numpoint": 325, "autonomylib_sensors_lidarsimple_hpp": 326, "numchannel": 326, "upper": 326, "point_cloud_": 326, "befor": [326, 329, 341, 352, 367, 390, 393], "arbitrari": 326, "decis": 326, "drone": [326, 327, 338, 340, 343, 344, 352, 360, 397], "accur": [326, 360], "wai": [326, 336, 348, 352, 372], "seem": [326, 350, 397], "NOT": 326, "global": 326, "That": 326, "unintuit": 326, "consist": 326, "segmentation_cloud_": 326, "autonomylib_sensors_lidarsimpleparams_hpp": 327, "velodyn": 327, "vlp": 327, "16": [327, 352, 360, 421], "puck": 327, "velodynelidar": 327, "10000": [327, 352, 360, 421], "100000": [327, 397, 421], "359": [327, 421], "15": [327, 352, 421], "datafram": [327, 421], "getint": 327, "numberofchannel": 327, "pointspersecond": 327, "rotationspersecond": 327, "getstr": 327, "kvehicleinertialfram": 327, "vehicleinertialfram": 327, "ksensorlocalfram": 327, "sensorlocalfram": 327, "verticalfovupp": 327, "By": [327, 490], "verticalfovlow": 327, "horizontalfovstart": 327, "horizontalfovend": 327, "autonomylib_sensors_magnetometerbase_hpp": 328, "gauss": [328, 329, 330], "3x3": 328, "mag": [328, 352], "autonomylib_sensors_magnetometersimple_hpp": 329, "noise_vec_": 329, "bias_vec_": 329, "randomvectorr": 329, "updaterefer": 329, "magnet": 329, "seattl": 329, "magnetic_field_true_": 329, "34252f": 329, "09805f": 329, "93438f": 329, "getmagfield": 329, "1e4f": 329, "tesla": 329, "recogn": [329, 331, 339, 365, 370], "autonomylib_sensors_magnetometersimpleparams_hpp": 330, "005f": [330, 342, 352, 423, 435], "mgauss": 330, "spec": [330, 351], "rm": 330, "goo": 330, "gl": 330, "uoz6ft": 330, "specsheet": 330, "dipol": 330, "enough": [330, 348, 352, 354, 368], "power": [330, 336, 338, 348, 350, 351], "noisesigma": 330, "scalefactor": 330, "noisebia": 330, "autonomylib_vehicles_carapifactory_hpp": 331, "kvehicletypeardurov": 331, "kvehicletypephysxcar": 331, "autonomylib_vehicles_carapibase_hpp": 332, "shortcut": [332, 344], "temporari": [332, 336, 348], "uniti": 332, "helper": [332, 343], "maintain": [332, 338, 397], "raii": [332, 338, 343], "been": [332, 340, 352, 360, 363, 367], "autonomylib_vehicles_carrpclibadaptors_hpp": 333, "autonomylib_vehicles_carrpclibclient_hpp": 334, "autonomylib_vehicles_carrpclibserver_hpp": 335, "autonomylib_no_rpc": [335, 391, 392, 395, 396, 398, 399], "autonomylib_vehicles_ardurovercarcontroller_hpp": 336, "home_geopoint_": [336, 337], "sendsensor": [336, 348], "recvrovercontrol": 336, "carpawnsim": 336, "keyboard": 336, "last_car_state_": [336, 337], "last_controls_": [336, 337], "udp_socket_": [336, 348], "port_": [336, 348], "udp_port": [336, 348, 350, 352], "ip_": [336, 348], "udp_address": [336, 348, 350, 352], "udpip": [336, 348, 350], "invalid": [336, 343, 348, 350, 352], "udpport": [336, 348, 350, 352], "udp": [336, 348, 350, 352], "ip": [336, 348, 350, 352], "remot": [336, 348, 350, 352, 367, 397], "local_host_ip": [336, 348, 350, 352], "receiv": [336, 348, 350, 352, 354, 367, 372, 397], "control_port_loc": [336, 348, 350, 352], "make_uniqu": [336, 348], "pkt": [336, 348], "recv_ret": [336, 348], "recv": [336, 348], "sizeof": [336, 348, 350, 352], "errorno": [336, 348], "byte": [336, 348], "instead": [336, 348, 352, 374, 376, 391, 397], "zu": [336, 348], "ostringstream": [336, 348], "buf": [336, 348], "imu_output": [336, 348, 350, 352], "setprecis": [336, 348], "count_gps_sensor": [336, 348, 350, 352], "gps_output": [336, 348, 350, 352], "lat": [336, 348, 352], "lon": [336, 348, 352], "world_linear_veloc": [336, 348], "present": [336, 348], "count_distance_sensor": [336, 348, 352], "rng": [336, 348], "mm": [336, 348], "isn": [336, 348, 351, 352], "trail": [336, 348], "comma": [336, 348], "sep": [336, 348], "distance_output": [336, 348, 352], "ap": [336, 348], "count_lidar": [336, 348], "lidar_output": [336, 348], "begin": [336, 348, 352, 356, 366, 393], "ostream_iter": [336, 348], "backend": [336, 348], "singl": [336, 348], "parser": [336, 348], "newlin": [336, 348], "someth": [336, 348, 352, 394], "ptr": [336, 348], "written": [336, 348], "underli": [336, 348], "buffer": [336, 348], "sensor_data": [336, 348], "sendto": [336, 348], "autonomylib_vehicles_physxcarcontroller_hpp": 337, "api_control_enabled_": 337, "autonomylib_vehicles_multirotorparams_hpp": 338, "si": 338, "klsin": 338, "bpmsg": 338, "quadcopt": [338, 351, 352], "nice": 338, "streamlin": 338, "fun": 338, "10x": 338, "smaller": [338, 397], "replac": [338, 360, 370, 373, 374], "exact": 338, "14061": [338, 341, 342], "perfectli": 338, "elast": 338, "complet": [338, 343, 352, 391, 397, 398], "build": [338, 352, 391, 392, 395, 396, 398, 399], "unit_z": 338, "accord": 338, "hand": [338, 343], "rule": 338, "quadx_rot": 338, "rotatevector": 338, "count": [338, 397], "hexa": 338, "esc": 338, "hexa_rot30": 338, "hexa_rot60": 338, "no_rot": 338, "octo": 338, "__________": 338, "67": 338, "22": [338, 352], "octo_rot22": 338, "octo_rot67": 338, "dimens": [338, 351], "f450": [338, 351], "artofcircuit": [338, 351], "product": [338, 351], "hj450": [338, 351], "distribut": [338, 351], "2275f": 338, "6kg": 338, "idl": [338, 352], "percentag": 338, "8kg": 338, "simpleflight": 338, "maximum": 338, "abl": 338, "lift": 338, "even": [338, 394, 397], "caus": [338, 340, 341, 352, 393], "055f": [338, 351], "mt2212": 338, "recomput": [338, 351], "propel": [338, 340, 342, 351], "diamet": [338, 342, 351], "abdomen": [338, 351], "180f": 338, "11f": [338, 360], "040f": 338, "5kg": 338, "25kg": 338, "vari": 338, "600": 338, "148": 338, "225f": [338, 342, 435], "635f": 338, "052f": 338, "047f": 338, "9500": 338, "real": [338, 351, 352], "16f": 338, "10f": [338, 350], "14f": 338, "15f": 338, "9324": 338, "placement": 338, "team": 338, "blacksheep": [338, 353], "discoveri": 338, "98": 338, "quad": [338, 368], "22f": 338, "255f": 338, "actual": [338, 397], "down": [338, 397], "correctli": 338, "diydron": 338, "profil": 338, "blog": 338, "tb": 338, "revers": [338, 381], "55": 338, "125": 338, "dronesvis": 338, "750kv": 338, "fpv": 338, "prop": [338, 342], "uiuc": [338, 342], "databas": [338, 342], "selig": [338, 342], "ae": [338, 342], "illinoi": [338, 342], "volum": 338, "ef_130x70_static_ctcp": 338, "png": 338, "autonomylib_vehicles_multirotorparamsfactory_hpp": 339, "kvehicletypepx4": 339, "kvehicletypearducoptersolo": 339, "kvehicletypearducopt": 339, "kvehicletypesimpleflight": 339, "autonomylib_vehicles_multirotorphysicsbody_hpp": 340, "vehicle_api_": 340, "resetsensor": 340, "otherwis": [340, 372, 381, 397], "cycl": [340, 352, 397], "lag": 340, "appear": [340, 350], "crazi": 340, "jerk": 340, "whenev": 340, "issu": [340, 352], "reportsensor": 340, "rotors_": 340, "starthead": 340, "endhead": 340, "updatesensor": 340, "drag_faces_": 340, "createrotor": 340, "initsensor": 340, "seen": 340, "central": 340, "approxim": [340, 397], "area": [340, 342], "expos": 340, "introduc": [340, 368], "propeller_area": 340, "propeller_xsect": 340, "owner": 340, "autonomylib_vehicles_rotoractuator_hpp": 341, "voltag": 341, "ultim": 341, "id_": 341, "turning_direction_": 341, "air_density_sea_level_": 341, "control_signal_filter_": 341, "setinput": 341, "environment": 341, "updateenvironmentalfactor": 341, "ctrl": 341, "fl": 341, "air": [341, 342, 368], "densiti": [341, 342], "32013": [341, 342], "air_density_ratio_": 341, "getinput": 341, "ration": 341, "debug": [341, 343, 352], "autonomylib_vehicles_rotorparams_hpp": 342, "In": [342, 350, 397], "newton": 342, "rho": 342, "kg": [342, 351, 360], "revolut": 342, "dimensionless": 342, "perform": [342, 352, 397], "propdb": 342, "gw": 342, "9x5": 342, "109919": 342, "040164": 342, "6396": [342, 435], "667": 342, "109919f": [342, 435], "co": [342, 350, 360, 394, 397], "040164f": [342, 435], "667f": [342, 435], "minut": 342, "2286f": [342, 435], "phantom": 342, "cylindr": 342, "cm": [342, 352], "179446268f": [342, 435], "055562f": [342, 435], "nsquar": 342, "autonomylib_vehicles_multirotorapibase_hpp": 343, "gain": [343, 354, 360, 363], "basic": 343, "success": [343, 367], "neg": [343, 348, 352, 354, 397], "transit": [343, 367], "recommend": 343, "loop": [343, 352, 360], "init": [343, 393], "purpos": 343, "interrupt": [343, 397], "timeout": [343, 352, 391, 397, 398], "rotor_states_": 343, "token_": 343, "wrapper": 343, "emerg": 343, "maneuv": 343, "wait": [343, 352, 372, 391], "anyth": 343, "succeed": 343, "api_": 343, "token": 343, "try_lock": 343, "worri": 343, "spuriou": [343, 372], "failur": [343, 352], "getrecursioncount": 343, "correct": 343, "gymnast": 343, "most": 343, "lock_": 343, "recursive_mutex": 343, "status_mutex_": 343, "lock_guard": [343, 350, 352, 393], "path_length": [343, 397, 425], "safety_eval_ptr_": [343, 397], "old_strategy_": 343, "setnextpathposit": [343, 397], "path_seg": [343, 397], "cur_path_loc": [343, 397], "next_dist": [343, 397], "next_path_loc": [343, 397], "adjustyaw": [343, 397], "movetopathposit": [343, 397], "last_z": [343, 397], "isyawwithinmargin": [343, 397], "yaw_target": [343, 397], "variabl": [343, 352, 360, 490, 528], "rc_data_trims_": [343, 397], "obs_avoidance_vel_": [343, 397], "landing_vel_": [343, 397], "approx_zero_vel_": [343, 397], "05f": [343, 352, 360], "approx_zero_angular_vel_": [343, 397], "01f": [343, 352, 360, 367, 376, 483], "autonomylib_vehicles_dronecommon_hpp": 344, "thrust_val": [344, 434], "torque_scaler_v": [344, 434], "rotors_v": [344, 436], "is_rate_v": [344, 441], "yaw_or_rate_v": [344, 441], "properti": 344, "proportion": 344, "ideal": 344, "2x": [344, 394], "test": [344, 352, 397], "differenti": 344, "less": [344, 352, 394], "clearanc": 344, "reachabl": 344, "network": 344, "collision_v": [344, 431], "gps_location_v": [344, 431], "landed_state_v": [344, 431], "rc_data_v": [344, 431], "ready_v": [344, 431], "can_arm_v": [344, 431], "autonomylib_vehicles_multirotorrpclibadaptors_hpp": 345, "autonomylib_vehicles_multirotorrpclibclient_hpp": 346, "autonomylib_vehicles_multirotorrpclibserver_hpp": 347, "autonomylib_vehicles_arducopterapi_hpp": 348, "recvrotorcontrol": 348, "last_rcdata_": [348, 354], "is_rc_connected_": 348, "through": [348, 352, 354], "50hz": [348, 352, 354], "pick": [348, 352, 354], "backwash": [348, 352, 354], "fire": [348, 352, 354], "movetoloc": [348, 352, 354], "travel": [348, 352, 354, 397], "safety_params_": [348, 354], "normalizerotorcontrol": [348, 350, 352], "2000": [348, 350], "getswitch": [348, 354], "karducopterrotorcontrolcount": [348, 350, 400, 401], "11": [348, 350, 354, 360], "autonomylib_vehicles_arducopterparams_hpp": 349, "autonomylib_vehicles_arducoptersoloapi_h": 350, "packet": 350, "lla": 350, "m_pi": [350, 360], "bodyrpi": 350, "unreal": [350, 352, 391, 392, 395, 396, 398, 399], "rpy": 350, "pysim": 350, "bodyvelocityrpi": 350, "earthrpi": 350, "bodyanglestoearthangl": 350, "arupilot": 350, "But": 350, "0x4c56414f": 350, "udpsocket_": 350, "memcpi": [350, 352], "sendmessag": [350, 352], "unsubscrib": 350, "rotorsubscriptionid_": 350, "connectlocaludp": [350, 352], "arducoptersoloconnector": 350, "adhocmessagehandl": 350, "handler": 350, "rotorpowermessagehandl": 350, "subscrib": [350, 352], "ifdef": [350, 391, 395, 398], "__linux__": 350, "__attribute__": 350, "__packed__": 350, "pragma": 350, "push": [350, 352], "sent": [350, 352, 360], "apm": 350, "execut": [350, 397], "endian": 350, "msl": 350, "earth": 350, "pop": [350, 352], "solo": [350, 351], "datagram": 350, "format": 350, "got": [350, 352], "guard_actu": [350, 352], "hil_control": [350, 352], "phi": [350, 360], "theta": [350, 360], "phidot": 350, "tan": [350, 360], "sin": [350, 360, 394, 397], "thetadot": 350, "fab": 350, "0e": 350, "psidot": 350, "autonomylib_vehicles_arducoptersolo_hpp": 351, "api_ptr": [351, 353], "whether": 351, "perhap": [351, 352], "sai": [351, 397], "sure": [351, 352, 361, 391, 393], "setupsolo": 351, "3dr": 351, "inch": 351, "life": 351, "22987f": 351, "kilogram": 351, "And": 351, "sort": 351, "suffici": 351, "presum": 351, "8f": [351, 352], "guess": 351, "55g": 351, "km": 351, "2413f": 351, "1143f": 351, "0762f": 351, "autonomylib_vehicles_mavlinkmultirotorapi_hpp": 352, "connect_thread_": 352, "joinabl": 352, "join": 352, "telemetry_thread_": 352, "non": 352, "mavlinkdronecontrol": 352, "lock_step_enabled_": 352, "lock_step": 352, "openallconnect": 352, "is_ready_": 352, "is_ready_message_": 352, "fail": [352, 367], "guard": 352, "mocap_pose_mutex_": 352, "mocap_pose_": 352, "stack": 352, "getpar": 352, "cool": 352, "bean": 352, "dynamic_cast": 352, "gr": 352, "was_reset_": 352, "ensur": 352, "hil_sensor": 352, "hil_gp": 352, "lock_step_active_": 352, "sim_time_us_": 352, "connected_": 352, "connection_": 352, "isopen": 352, "got_first_heartbeat_": 352, "telemetry_mutex_": 352, "update_count_": 352, "last_update_time_": 352, "1000000": [352, 355], "terribli": 352, "wrong": 352, "lockstep": 352, "lock_step_resets_": 352, "addstatusmessag": 352, "hilactuatorcontrolsmessag": 352, "received_actuator_controls_": 352, "drop": 352, "yet": [352, 363], "hil_sensor_count_": 352, "mag_output": 352, "baro_output": 352, "sendhilsensor": 352, "pa": 352, "millibar": 352, "sendsystemtim": 352, "senddistancesensor": 352, "77": 352, "last_gps_time_": 352, "gps_veloc": 352, "gps_velocity_xi": 352, "gps_cog": 352, "isapproximatelyzero": 352, "radianstodegre": 352, "atan2": [352, 394, 397], "360": [352, 361], "sendhilgp": 352, "update_time_": 352, "restart": 352, "happili": 352, "has_gps_lock_": 352, "var": 352, "status_text_mutex_": 352, "status_messages_": 352, "duplic": [352, 397], "current_state_": 352, "local_est": 352, "lin_vel": 352, "is_api_control_enabled_": 352, "checkvalidvehicl": 352, "mav_vehicle_": 352, "requestcontrol": 352, "releasecontrol": 352, "logic_error": 352, "attempt": 352, "con": 352, "getconnect": 352, "log_": 352, "time_t": 352, "tm": 352, "localtim": 352, "folder": 352, "04d": 352, "02d": 352, "tm_year": 352, "1900": 352, "tm_mon": 352, "tm_mdai": 352, "ensurefold": 352, "tm_hour": 352, "tm_min": 352, "tm_sec": 352, "fullpath": 352, "combin": 352, "log_file_name_": 352, "make_shar": 352, "mavlinkfilelog": 352, "openforwrit": 352, "startloggingsendmessag": 352, "startloggingreceivemessag": 352, "sitl": 352, "stoploggingsendmessag": 352, "stoploggingreceivemessag": 352, "home": 352, "is_set": 352, "iscomplet": [352, 397], "ground_variance_": 352, "groundtoler": 352, "stabl": 352, "reject": 352, "bugbug": 352, "realli": [352, 375, 397], "properli": [352, 354], "flat": 352, "roughli": 352, "global_est": 352, "global_po": 352, "hook": 352, "hasn": 352, "returntohom": 352, "save": 352, "cruis": 352, "mavlinkparamet": 352, "manual_velocity_paramet": 352, "cruise_velocity_paramet": 352, "max_velocity_paramet": 352, "getparamet": 352, "mpc_vel_manu": 352, "mpc_xy_cruis": 352, "mpc_xy_vel_max": 352, "setparamet": 352, "goal_po": 352, "goal_dist_vect": 352, "goal_dist": [352, 397], "goal_norm": [352, 397], "result_temp": 352, "asyncresult": 352, "loiter": 352, "start_tim": 352, "chrono": [352, 398], "system_clock": 352, "iscancel": 352, "mavlinktelemetri": 352, "gettelemetri": 352, "messages_receiv": 352, "hil_message_timer_": 352, "messagereceivedtimeout": 352, "hil": 352, "pleas": [352, 391], "node": 352, "logviewer_proxy_": 352, "listen": 352, "mavcon": 352, "gc": 352, "handler_microsecond": 352, "messages_handl": 352, "messages_s": 352, "gcs_message_timer_": 352, "render_tim": 352, "int64_t": [352, 391], "microsecond": 352, "average_delai": 352, "average_upd": 352, "actuator_delay_": 352, "update_r": 352, "sensor_r": 352, "actuation_delai": 352, "lock_step_reset": 352, "update_tim": 352, "captur": 352, "mavlink_stx_mavlink1": 352, "encod": 352, "update_checksum": 352, "unpredict": 352, "telemetri": 352, "this_thread": 352, "sleep_for": [352, 355, 391], "target_height_": 352, "pid": [352, 360, 361, 370, 371, 375, 376], "experiment": 352, "altholdcommand": 352, "mavlinktest": 352, "best": 352, "achiev": [352, 397], "shoot": 352, "amount": [352, 397], "outsid": [352, 394], "recalibr": 352, "thrust_controller_": 352, "setpoint": 352, "09f": 352, "21f": 352, "movebyattitud": 352, "movebylocalveloc": 352, "movebylocalvelocitywithalthold": 352, "movetolocalposit": 352, "decoupl": 352, "vehicalparam": 352, "startoffboardmod": 352, "endoffboardmod": 352, "proxy_": 352, "hmmm": 352, "bad": 352, "socket": 352, "connecting_": 352, "is_armed_": 352, "is_hil_mode_set_": 352, "setnormalmod": 352, "hil_node_": 352, "video_server_": 352, "logviewer_out_proxy_": 352, "qgc_proxy_": 352, "resetst": 352, "createmavconnect": 352, "connecttologview": 352, "connecttoqgc": 352, "haven": 352, "told": 352, "session": 352, "mocapposemessag": 352, "still": [352, 368, 372, 393], "sendcollis": 352, "normalx": 352, "normali": 352, "normalz": 352, "mavlinkcollis": 352, "getlocalsystemid": 352, "mav_collision_act": 352, "mav_collision_action_report": 352, "threat_level": 352, "mav_collision_threat_level": 352, "mav_collision_threat_level_non": 352, "abus": 352, "know": 352, "time_to_minimum_delta": 352, "altitude_minimum_delta": 352, "horizontal_minimum_delta": 352, "hasvideorequest": 352, "mavlinkvideoserv": 352, "mavlinkvideorequest": 352, "image_req": 352, "sendimag": 352, "mavlink_data_stream_img_png": 352, "sendfram": 352, "remov": 352, "mav_mode_flag_hil_en": 352, "flag": 352, "set_mode_mutex_": 352, "mav_mode_flag": 352, "mavcmddosetmod": 352, "cmd": 352, "mav_cmd": 352, "mav_cmd_do_set_mod": 352, "sendcommand": 352, "sethilmod": 352, "devic": 352, "ensuresafemod": 352, "smooth": [352, 367], "effect": 352, "behavior": [352, 372], "determin": [352, 394], "getvehiclestatevers": 352, "state_version_": 352, "them": [352, 394], "is_controls_0_1_": 352, "sendtestmessag": 352, "mavlinkheartbeat": 352, "autopilot": 352, "mav_autopilot": 352, "mav_autopilot_px4": 352, "mav_typ": 352, "mav_type_gc": 352, "base_mod": 352, "custom_mod": 352, "mavlink_vers": 352, "system_statu": 352, "logview": 352, "logviewer_ip_address": 352, "createproxi": 352, "logviewer_ip_port": 352, "talk": [352, 391], "out_connect": 352, "logviewerout": 352, "logviewer_ip_sport": 352, "proxylog": 352, "qgc_ip_address": 352, "qgc": 352, "qgc_ip_port": 352, "connection_v": 352, "processqgcmessag": 352, "domain_error": 352, "connectremoteudp": 352, "ok": 352, "reus": [352, 372], "sysid": 352, "compid": 352, "few": [352, 397], "endpoint": 352, "funnel": 352, "sim_sysid": 352, "sim_compid": 352, "whatev": 352, "findpx4": 352, "findserialport": 352, "iter": [352, 397], "serialportinfo": 352, "vid": 352, "pixhawkvendorid": 352, "pixhawkfmuv4productid": 352, "pixhawkfmuv2productid": 352, "pixhawkfmuv2oldbootloaderproductid": 352, "pixhawkfmuv5productid": 352, "displaynam": 352, "px4_": 352, "npo": 352, "printf": 352, "select": 352, "portname_str": 352, "wchar_t": 352, "ch": 352, "portnam": 352, "use_seri": 352, "createmavserialconnect": 352, "serial_port": 352, "baud_rat": 352, "createmavethernetconnect": 352, "uncom": 352, "connecttovideoserv": 352, "remoteipaddr": 352, "use_tcp": 352, "tcp_port": 352, "tcpport": 352, "tcp": 352, "accepttcp": 352, "accept": 352, "instanc": 352, "processmavmessag": 352, "vehicle_sysid": 352, "vehicle_compid": 352, "control_ip_address": 352, "localcontrolport": 352, "127": 352, "app": 352, "handl": [352, 354, 367, 393], "separ": 352, "quickli": 352, "retri": 352, "gcsconnect": 352, "control_port_remot": 352, "setmessageinterv": 352, "mavlinkhomeposit": 352, "kmessageid": 352, "plai": 352, "connectvehicl": 352, "processcontrolmessag": 352, "msgid": 352, "arriv": 352, "mavlink_msg_id_highres_imu": 352, "mavlink_msg_id_actuator_control_target": 352, "mavlink_msg_id_servo_output_raw": 352, "mavlink_msg_id_gps_raw_int": 352, "mavlink_msg_id_timesync": 352, "mavlink_msg_id_altitud": 352, "mavlink_msg_id_vfr_hud": 352, "mavlink_msg_id_estimator_statu": 352, "mavlink_msg_id_extended_sys_st": 352, "mavlink_msg_id_gps_global_origin": 352, "mavlink_msg_id_p": 352, "mavlink_msg_id_sys_statu": 352, "mavlink_msg_id_system_tim": 352, "mavlink_msg_id_link_node_statu": 352, "mavlink_msg_id_autopilot_vers": 352, "mavlink_msg_id_command_ack": 352, "mavlink_msg_id_statustext": 352, "mavlink_msg_id_param_valu": 352, "heartbeat": 352, "startheartbeat": 352, "send_params_": 352, "sendparam": 352, "port_nam": 352, "port_name_auto": 352, "flight": [352, 391], "usb": 352, "baud": 352, "rate": [352, 354, 360, 361, 372, 397], "connectseri": 352, "ignoremessag": 352, "mavlinkattposmocap": 352, "commun": 352, "fake": 352, "mo": 352, "cap": 352, "hitl": 352, "mavlinkhilsensor": 352, "getlastsensormessag": 352, "last_message_mutex_": 352, "last_sensor_message_": 352, "mavlinkdistancesensor": 352, "getlastdistancemessag": 352, "last_distance_message_": 352, "mavlinkhilgp": 352, "getlastgpsmessag": 352, "last_gps_message_": 352, "kei": 352, "setarm": 352, "decod": 352, "guard_statu": 352, "becam": 352, "status_messages_maxs": 352, "handlelockstep": 352, "0x1": 352, "wide": 352, "last_hil_sensor_time_": 352, "time_usec": 352, "delai": 352, "heartbeatmessag": 352, "guard_heartbeat": 352, "heartbeat_mutex_": 352, "mav_mode_flag_safety_arm": 352, "mav_type_fixed_w": 352, "wing": 352, "servo": 352, "multi": 352, "statustextmessag": 352, "establish": 352, "commandlongmessag": 352, "mav_cmd_set_message_interv": 352, "msg_id": 352, "param1": 352, "115": 352, "hil_state_quaternion": 352, "hil_state_freq_": 352, "param2": 352, "hilcontrolsmessag": 352, "actuators_message_supported_": 352, "guard_control": 352, "roll_aileron": 352, "pitch_elev": 352, "yaw_rudd": 352, "aux1": 352, "aux2": 352, "aux3": 352, "aux4": 352, "isarm": 352, "128": 352, "mavlinkgpsrawint": 352, "gps_fix_typ": 352, "gps_fix_type_no_gp": 352, "gps_fix_type_no_fix": 352, "has_home_": 352, "mavlinklocalposit": 352, "monitorgroundaltitud": 352, "mavlinkextendedsysst": 352, "mavlinksysstatu": 352, "mavlinkautopilotvers": 352, "abs_pressur": 352, "pressure_alt": 352, "xacc": 352, "yacc": 352, "zacc": 352, "fields_upd": 352, "0b111": 352, "xgyro": 352, "ygyro": 352, "zgyro": 352, "0b111000": 352, "xmag": 352, "ymag": 352, "zmag": 352, "0b111000000": 352, "0b1101000000000": 352, "diff_pressur": 352, "31": 352, "tu": 352, "last_sys_time_": 352, "mavlinksystemtim": 352, "msg_system_tim": 352, "time_unix_usec": 352, "time_boot_m": 352, "current_dist": 352, "sensor_id": 352, "mav_sensor_rotation_custom": 352, "It": [352, 391, 397, 398], "velocity_xi": 352, "satellites_vis": 352, "1e7": 352, "vn": 352, "vd": 352, "nanpos": 352, "ground_filter_": 352, "25": 352, "review": 352, "9900": 352, "pixhawkfmuv1productid": 352, "5000": 352, "mav_vehicle_control_": 352, "mavlinksetmod": 352, "setmodemessag": 352, "mavlinkstatustext": 352, "mavlinkhilcontrol": 352, "mavlinkhilactuatorcontrol": 352, "mavlinkcommandlong": 352, "system_tim": 352, "autonomylib_vehicles_px4multirotorparams_hpp": 353, "flamewheel": 353, "flamewheelfla": 353, "hexacopt": 353, "octocopt": 353, "autonomylib_vehicles_simpleflightapi_hpp": 354, "readset": 354, "commlink": [354, 356], "board_": [354, 365], "comm_link_": [354, 363, 365, 367, 372], "estimator_": 354, "firmware_": 354, "controller_type_enum": 354, "kp_axis4": 354, "ki_axis4": 354, "kd_axis4": 354, "unimpl": 354, "angletopwm": 354, "1500": 354, "thrusttopwm": 354, "switchtopwm": 354, "switchval": 354, "maxswitchv": 354, "remote_control_id_": 354, "remote_control_id": 354, "autonomylib_vehicles_simpleflightboard_hpp": 355, "perfect": [355, 358], "motor_output_": 355, "input_channels_": 355, "is_connected_": 355, "linear_accel": 355, "angular_vel": 355, "assign": [355, 360, 365, 366], "op": 355, "msec": 355, "clockbas": [355, 391], "autonomylib_vehicles_simpleflightcommlink_hpp": 356, "messages_": 356, "autonomylib_vehicles_simpleflightcommon_hpp": 357, "conv": [357, 358], "state3r": 357, "autonomylib_vehicles_simpleflightestimator_hpp": 358, "est": 358, "angul": 358, "tran": 358, "autonomylib_vehicles_simpleflightquadxparams_hpp": 359, "vehicle_setting_": 359, "subroutin": 360, "mr": 360, "domann": 360, "lab": 360, "univers": [360, 368], "oklahoma": 360, "advisor": 360, "dr": 360, "afflitto": 360, "characterist": 360, "autonomylib_vehicles_simpleflight_firmware_adaptivecontroller_hpp": 360, "goal_": [360, 361, 362, 363, 367, 369, 370, 371, 372, 375], "state_estimator_": [360, 361, 362, 363, 365, 367, 371, 372, 375], "angle_r": 360, "update_state_v": 360, "update_go": 360, "output_controls_": 360, "get_u1": 360, "get_u2": 360, "get_u3": 360, "get_u4": 360, "is_last_goal_mode_all_passthrough_": [360, 363], "last_mode_": 360, "clock_": [360, 361, 362, 363, 367, 370, 371, 372, 375], "ix": 360, "02f": 360, "ii": 360, "iz": 360, "03f": 360, "lx": 360, "ly": 360, "916f": 360, "grav": 360, "81f": 360, "jr": 360, "00006f": 360, "k_phi": 360, "75f": 360, "75": 360, "k_theta": 360, "26": 360, "k_psi": 360, "13": 360, "k_roll": 360, "450": 360, "k_pitch": 360, "k_yaw": 360, "40000": 360, "400": 360, "satur": 360, "u1_sat": 360, "u2_sat": 360, "95f": 360, "u3_sat": 360, "u4_sat": 360, "trajectori": 360, "14159265359f": [360, 368, 475, 476], "neqn": 360, "x_0": 360, "ref_vec": 360, "ref_sum": 360, "velocity_integr": 360, "array_length": 360, "adaptive_i": 360, "adaptive_output": 360, "last_yaw": 360, "slidingmodemodel": 360, "x_in": 360, "xdot_in": 360, "y_in": 360, "ydot_in": 360, "z_in": 360, "zdot_in": 360, "phi_in": 360, "p_in": 360, "theta_in": 360, "q_in": 360, "psi_in": 360, "r_in": 360, "x_de": 360, "y_de": 360, "refs_temp": 360, "temp": 360, "size_squar": 360, "psi": 360, "pqr": 360, "angular_r": 360, "rollrate_ref": 360, "pitchrate_ref": 360, "yawrate_ref": 360, "pc": [360, 397], "qc": 360, "delta_rol": 360, "delta_pitch": 360, "delta_yaw": 360, "uncertainti": 360, "s3_p": 360, "s3_q": 360, "s3_r": 360, "iconfig": 360, "s2_phi": 360, "s2_theta": 360, "s2_psi": 360, "delta_z": 360, "zdotdot": 360, "delta_phi": 360, "delta_theta": 360, "delta_psi": 360, "r_matrix": 360, "r_invers": 360, "ref_angl": 360, "outer": 360, "u_vec": 360, "u1": 360, "u2": 360, "u3": 360, "u4": 360, "deadband": 360, "0001": 360, "00001": 360, "10001": 360, "count1": 360, "count2": 360, "count3": 360, "count4": 360, "rungekutta": [360, 373], "gettimeu": 360, "003f": [360, 373], "sliding_iconfig": 360, "zddot": 360, "x_desir": 360, "x_current": 360, "xdot": 360, "y_desir": 360, "y_current": 360, "ydot": 360, "yaw_curr": [360, 397], "fz": 360, "xddot": 360, "yddot": 360, "81": 360, "inverse_3x3": 360, "det_a": 360, "dummi": 360, "pqr_gener": 360, "angular_velocities_from_pqr": 360, "pqr_val": 360, "angles_v": 360, "remapu": 360, "control_u1": 360, "control_u2": 360, "control_u3": 360, "control_u4": 360, "yp": [360, 373], "t_val": 360, "zero_vec": [360, 373], "k1": [360, 373], "k2": [360, 373], "k3": [360, 373], "k4": [360, 373], "y_temp": [360, 373], "y_out": [360, 373], "velocity_r": 360, "velocity_go": 360, "004f": 360, "0007f": 360, "0005f": 360, "lambda_theta": 360, "lambda_theta_r": 360, "lambda_phi": 360, "lambda_phi_r": 360, "lambda_psi": 360, "0004f": 360, "lambda_psi_r": 360, "lambda_z": 360, "21": 360, "adjust": [360, 397], "inner": 360, "law": 360, "015": 360, "slope": 360, "delta_dot": 360, "goe": 360, "rescal": 360, "smoother": 360, "35": 360, "remap": 360, "autonomylib_vehicles_simpleflight_firmware_anglelevelcontroller_hpp": 361, "axis_": [361, 362, 364, 369, 371, 375], "pid_": [361, 362, 371, 375], "rate_controller_": 361, "rate_mode_": 361, "rate_goal_": 361, "level_go": 361, "goal_angl": 361, "measured_angl": 361, "adjusttomindistanceangl": 361, "drive": [361, 371, 375], "angle1": 361, "angle2": 361, "twopi": 361, "both": [361, 393, 397], "restrict": 361, "fmod": 361, "invert": 361, "autonomylib_vehicles_simpleflight_firmware_angleratecontroller_hpp": 362, "autonomylib_vehicles_simpleflight_firmware_cascadecontroller_hpp": 363, "last_goal_mode_": 363, "axis_controllers_": 363, "goal_val": 363, "last_goal_val_": 363, "goalval": 363, "append": [363, 372, 376, 394, 397], "autonomylib_vehicles_simpleflight_firmware_constantoutputcontroller_hpp": 364, "update_output_": 364, "reset_output_": 364, "autonomylib_vehicles_simpleflight_firmware_firmware_hpp": 365, "offboard_api_": 365, "mixer_": 365, "controller_": 365, "motor_outputs_": 365, "output_control": 365, "ax": 365, "explain": 365, "motor_index": [365, 366], "mix": 365, "autonomylib_vehicles_simpleflight_firmware_mixer_hpp": 366, "kmotorcount": 366, "mixerquadx": 366, "min_motor": 366, "min_el": 366, "undershoot": 366, "max_motor": 366, "max_el": 366, "sign": 366, "front_r": 366, "rear_l": 366, "front_l": 366, "rear_r": 366, "autonomylib_vehicles_simpleflight_firmware_offboardapi_hpp": 367, "rc_": 367, "vehicle_state_": [367, 372], "landed_": 367, "has_api_control_": 367, "takenoff_": 367, "goal_timestamp_": 367, "updategoalfromrc": 367, "is_api_timedout_": 367, "enter": [367, 394], "goal_mode_": [367, 372], "detectland": 367, "detecttakingoff": 367, "disallow": 367, "isgreaterthanarmedthrottl": 367, "checkthrottl": 367, "isalmostzero": 367, "takenoff": 367, "kmovementtoler": 367, "08": 367, "autonomylib_vehicles_simpleflight_firmware_params_hpp": 368, "respect": 368, "min_armed_output": 368, "destabil": 368, "correspond": 368, "unarm": 368, "toler": [368, 372], "millisecond": 368, "stai": [368, 394], "max_xxx_rat": 368, "wobbl": 368, "oscil": 368, "p_xxx_rate": 368, "sensit": 368, "filtrat": 368, "max_pitch": 368, "roll_angl": 368, "verticl": 368, "extrem": 368, "8e26f": [368, 475, 479], "big": 368, "known": 368, "hardcod": 368, "9999f": [368, 475, 482], "autonomylib_vehicles_simpleflight_firmware_passthroughcontroller_hpp": 369, "autonomylib_vehicles_simpleflight_firmware_pidcontroller_hpp": 370, "config_": [370, 373, 374], "measured_": 370, "runtim": [370, 374], "renabl": 370, "last_error_": 370, "min_dt_": 370, "pterm": 370, "dterm": 370, "error_d": 370, "clamp": [370, 373, 374], "min_valu": [370, 373, 374], "max_valu": [370, 373, 374], "autonomylib_vehicles_simpleflight_firmware_positioncontroller_hpp": 371, "child": [371, 375], "velocity_controller_": 371, "velocity_mode_": 371, "velocity_goal_": 371, "goal_position_world": 371, "measured_position_world": 371, "autonomylib_vehicles_simpleflight_firmware_remotecontrol_hpp": 372, "board_inputs_": 372, "allow_api_control_": 372, "last_rec_read_": 372, "last_angle_mode_": 372, "request_duration_": 372, "updategoalmod": 372, "updateallowapicontrol": 372, "special": 372, "rcrequesttyp": 372, "rc_action": 372, "getactionrequest": 372, "machin": 372, "armrequest": 372, "Being": 372, "neural": 372, "neutral": 372, "neutralrequest": 372, "unless": 372, "disarmrequest": 372, "updatego": 372, "idea": 372, "angle_mode_": 372, "randomli": 372, "word": 372, "isintoler": 372, "stick_min": 372, "yaw_action_posit": 372, "yaw_action_neg": 372, "throttle_act": 372, "roll_action_posit": 372, "roll_action_neg": 372, "normalized_pitch": 372, "pitch_act": 372, "autonomylib_vehicles_simpleflight_firmware_rungkuttapidintegrator_hpp": 373, "iterm_int_": [373, 374], "clipiterm": [373, 374], "error_int": 373, "iterm": [373, 374], "grow": [373, 374], "beyond": [373, 374], "windup": [373, 374], "yp_val": 373, "y_vec": 373, "yp_vec": 373, "autonomylib_vehicles_simpleflight_firmware_stdpidintegrator_hpp": 374, "supoort": 374, "autonomylib_vehicles_simpleflight_firmware_velocitycontroller_hpp": 375, "pid_config": 375, "child_mode_": 375, "child_controller_": 375, "child_goal_": 375, "goal_velocity_world": 375, "goal_velocity_loc": 375, "measured_velocity_world": 375, "measured_velocity_loc": 375, "vc": 375, "autonomylib_vehicles_simpleflight_firmware_commonstructures_hpp": 376, "vals_": 376, "access": 376, "zero_v": 376, "val4_": 376, "kp_val": [376, 483], "ki_val": [376, 483], "kd_val": [376, 483], "min_output_v": [376, 483], "max_output_v": [376, 483], "time_scale_v": [376, 483], "enabled_v": [376, 483], "output_bias_v": [376, 483], "iterm_discount_v": [376, 483], "autonomylib_vehicles_simpleflight_firmware_iaxiscontroller_hpp": 377, "autonomylib_vehicles_simpleflight_firmware_iboard_hpp": 378, "autonomylib_vehicles_simpleflight_firmware_iboardclock_hpp": 379, "autonomylib_vehicles_simpleflight_firmware_iboardinputpins_hpp": 380, "autonomylib_vehicles_simpleflight_firmware_iboardoutputpins_hpp": 381, "autonomylib_vehicles_simpleflight_firmware_iboardsensors_hpp": 382, "autonomylib_vehicles_simpleflight_firmware_icommlink_hpp": 383, "autonomylib_vehicles_simpleflight_firmware_icontroller_hpp": 384, "autonomylib_vehicles_simpleflight_firmware_ifirmware_hpp": 385, "autonomylib_vehicles_simpleflight_firmware_igoal_hpp": 386, "autonomylib_vehicles_simpleflight_firmware_ioffboardapi_hpp": 387, "autonomylib_vehicles_simpleflight_firmware_ipidintegrator_hpp": 388, "autonomylib_vehicles_simpleflight_firmware_istateestimator_hpp": 389, "autonomylib_vehicles_simpleflight_firmware_iupdatable_hpp": 390, "reset_cal": 390, "update_cal": 390, "autonomylib_header_onli": [391, 392, 393, 394, 395, 396, 397, 398, 399], "14": [391, 392, 395, 396, 398, 399], "compil": [391, 392, 395, 396, 398, 399], "binari": [391, 392, 395, 396, 398, 399], "precompil": [391, 392, 395, 396, 398], "strict_mode_off": [391, 392, 395, 396, 398, 399], "nil": [391, 395, 398], "undef": [391, 392, 394, 395, 396, 398, 399], "ue4": [391, 392, 395, 396, 398, 399], "macro": [391, 392, 394, 395, 396, 398, 399], "stupid": [391, 392, 395, 396, 398, 399], "conflict": [391, 392, 395, 396, 398, 399], "expr": [391, 392, 395, 396, 398, 399], "strict_mode_on": [391, 392, 395, 396, 398, 399], "_msc_ver": [391, 395, 398], "__pragma": [391, 395, 398], "warn": [391, 395, 398], "4239": [391, 395, 398], "give": 391, "set_timeout": 391, "get_connection_st": 391, "connection_st": 391, "sync": 391, "droneserv": 391, "flush": 391, "command_context": 391, "pause_tim": 391, "server_v": 391, "client_ver": 391, "server_min_v": 391, "client_min_v": 391, "ver_info": 391, "ver": 391, "req": 391, "cerr": 391, "older": 391, "upgrad": 391, "response_adaptor": 391, "sensor_height": 391, "minor": 391, "arg": 391, "three": 391, "raw_result": 391, "final_result": 391, "conv_point": [391, 392], "conv_points_start": [391, 392], "conv_points_end": [391, 392], "conv_posit": [391, 392], "conv_pos": [391, 392], "conv_wind": 391, "conv_ext_forc": 391, "nouser": [392, 396, 399], "close_sess": 392, "deadlock": 392, "ui": 392, "async_run": 392, "pend": 392, "heigth": 392, "focal_lenght": 392, "conv_result": 392, "exit": [392, 397], "resetinprogress": 392, "sim_world_api": 392, "lidar_data": 392, "imu_data": 392, "barometer_data": 392, "magnetometer_data": 392, "gps_data": 392, "distance_sensor_data": 392, "camera_info": 392, "simsetlightintens": 392, "suppress": 392, "bomb": 392, "suppress_except": 392, "overflow": 393, "iw": 393, "larger": 393, "ad": 393, "whole": 393, "floortoint": 393, "interfear": 394, "obs_xy_ptr": 394, "fenc": 394, "geo": 394, "wors": 394, "safer": 394, "cur_dest": [394, 397], "cur_dest_norm": [394, 397], "point_angl": 394, "point_tick": 394, "potenti": 394, "unsaf": [394, 397], "surround": 394, "cdf": 394, "epsilon": 394, "05": 394, "95": 394, "akapoor": 394, "additional_clear": 394, "ref_tick": 394, "matter": 394, "right_ob": 394, "left_ob": 394, "right_risk_dist": 394, "left_risk_dist": 394, "suggested_tick": 394, "suggested_angl": 394, "suggested_bodi": 394, "velocity_mag": 394, "dest_pos_dist": 394, "suddenli": 394, "ret": 397, "hold": 397, "near_zero_vel_count": 397, "vx_new": 397, "vy_new": 397, "adj_yaw_mod": 397, "istimeout": 397, "termin": 397, "command_period_dist": 397, "progress": 397, "least": 397, "path3d": 397, "slow": 397, "breaking_dist": 397, "lookahead_error_increas": 397, "lookahead_error": 397, "overshoot": 397, "path_length_remain": 397, "pn": 397, "cc": 397, "care": 397, "perpendicular": 397, "circumst": 397, "goal_vect": 397, "iszero": 397, "actual_vect": 397, "fig": 397, "actual_on_go": 397, "1e3": 397, "scalableclock": 397, "1e5": 397, "abort": 397, "pf": 397, "backward": 397, "climb": 397, "never": 397, "geodeticton": 397, "cur_xi": 397, "kmaxmessageag": 397, "kmaxrcvalu": 397, "10000f": 397, "freez": 397, "starting_quaternion": 397, "ag": 397, "OR": 397, "old": 397, "subtract": 397, "vel_word": 397, "vel_bodi": 397, "terrain": 397, "violat": 397, "successfulli": 397, "start_po": 397, "normalizeangl": 397, "move_yaw_mod": 397, "stop_yaw_mod": 397, "sop": 397, "stabli": 397, "apart": 397, "cur_z": 397, "trim": 397, "waiter_trim": 397, "dividebi": 397, "isanymorethan": 397, "expected_dist": 397, "velocity_vect": 397, "vect": 397, "yield": 397, "xy": 397, "plan": 397, "untouch": 397, "compar": 397, "strict": 397, "strategi": 397, "temporarili": 397, "suppos": 397, "em": 397, "avoidance_vel": 397, "uncheck": 397, "caller": 397, "wise": 397, "situat": 397, "against": 397, "ran": 397, "getyaw": 397, "async_cal": 398, "conv_path": [398, 399], "future_statu": 398, "wait_for": 398, "pre": 399, "subdirectori": 490, "definit": 490}, "objects": {"": [[272, 0, 1, "_CPPv416MSGPACK_ADD_ENUMN8nervosys11autonomylib14DrivetrainTypeE", "MSGPACK_ADD_ENUM", ""], [273, 0, 1, "_CPPv416MSGPACK_ADD_ENUMN8nervosys11autonomylib11LandedStateE", "MSGPACK_ADD_ENUM", ""], [274, 0, 1, "_CPPv416MSGPACK_ADD_ENUMN8nervosys11autonomylib7GpsBase11GnssFixTypeE", "MSGPACK_ADD_ENUM", ""], [275, 0, 1, "_CPPv416MSGPACK_ADD_ENUMN8nervosys11autonomylib10SafetyEval20ObsAvoidanceStrategyE", "MSGPACK_ADD_ENUM", ""], [276, 0, 1, "_CPPv416MSGPACK_ADD_ENUMN8nervosys11autonomylib10SafetyEval20SafetyViolationType_E", "MSGPACK_ADD_ENUM", ""], [277, 0, 1, "_CPPv416MSGPACK_ADD_ENUMN8nervosys11autonomylib15WorldSimApiBase16WeatherParameterE", "MSGPACK_ADD_ENUM", ""], [278, 0, 1, "_CPPv416MSGPACK_ADD_ENUMN8nervosys11autonomylib16ImageCaptureBase9ImageTypeE", "MSGPACK_ADD_ENUM", ""], [0, 1, 1, "_CPPv4N8nervosys11autonomylib11ApiProviderE", "nervosys::autonomylib::ApiProvider", "Public Functions    inline ApiProvider(WorldSimApiBase *world_sim_api)      virtual ~ApiProvider() = default      inline virtual VehicleApiBase *getVehicleApi(const std::string &vehicle_name)      inline virtual WorldSimApiBase *getWorldSimApi()      inline virtual VehicleSimApiBase *getVehicleSimApi(const std::string &vehicle_name) const      inline size_t getVehicleCount() const      inline void insert_or_assign(const std::string &vehicle_name, VehicleApiBase *vehicle_api, VehicleSimApiBase *vehicle_sim_api)      inline const common_utils::UniqueValueMap<std::string, VehicleApiBase*> &getVehicleApis()      inline const common_utils::UniqueValueMap<std::string, VehicleSimApiBase*> &getVehicleSimApis()      inline bool hasDefaultVehicle() const      inline void makeDefaultVehicle(const std::string &vehicle_name)"], [0, 0, 1, "_CPPv4N8nervosys11autonomylib11ApiProvider11ApiProviderEP15WorldSimApiBase", "nervosys::autonomylib::ApiProvider::ApiProvider", ""], [0, 2, 2, "_CPPv4N8nervosys11autonomylib11ApiProvider11ApiProviderEP15WorldSimApiBase", "nervosys::autonomylib::ApiProvider::ApiProvider::world_sim_api", ""], [0, 0, 1, "_CPPv4N8nervosys11autonomylib11ApiProvider13getVehicleApiERKNSt6stringE", "nervosys::autonomylib::ApiProvider::getVehicleApi", ""], [0, 2, 2, "_CPPv4N8nervosys11autonomylib11ApiProvider13getVehicleApiERKNSt6stringE", "nervosys::autonomylib::ApiProvider::getVehicleApi::vehicle_name", ""], [0, 0, 1, "_CPPv4N8nervosys11autonomylib11ApiProvider14getVehicleApisEv", "nervosys::autonomylib::ApiProvider::getVehicleApis", ""], [0, 0, 1, "_CPPv4NK8nervosys11autonomylib11ApiProvider15getVehicleCountEv", "nervosys::autonomylib::ApiProvider::getVehicleCount", ""], [0, 0, 1, "_CPPv4NK8nervosys11autonomylib11ApiProvider16getVehicleSimApiERKNSt6stringE", "nervosys::autonomylib::ApiProvider::getVehicleSimApi", ""], [0, 2, 2, "_CPPv4NK8nervosys11autonomylib11ApiProvider16getVehicleSimApiERKNSt6stringE", "nervosys::autonomylib::ApiProvider::getVehicleSimApi::vehicle_name", ""], [0, 0, 1, "_CPPv4N8nervosys11autonomylib11ApiProvider17getVehicleSimApisEv", "nervosys::autonomylib::ApiProvider::getVehicleSimApis", ""], [0, 0, 1, "_CPPv4N8nervosys11autonomylib11ApiProvider14getWorldSimApiEv", "nervosys::autonomylib::ApiProvider::getWorldSimApi", ""], [0, 0, 1, "_CPPv4NK8nervosys11autonomylib11ApiProvider17hasDefaultVehicleEv", "nervosys::autonomylib::ApiProvider::hasDefaultVehicle", ""], [0, 0, 1, "_CPPv4N8nervosys11autonomylib11ApiProvider16insert_or_assignERKNSt6stringEP14VehicleApiBaseP17VehicleSimApiBase", "nervosys::autonomylib::ApiProvider::insert_or_assign", ""], [0, 2, 2, "_CPPv4N8nervosys11autonomylib11ApiProvider16insert_or_assignERKNSt6stringEP14VehicleApiBaseP17VehicleSimApiBase", "nervosys::autonomylib::ApiProvider::insert_or_assign::vehicle_api", ""], [0, 2, 2, "_CPPv4N8nervosys11autonomylib11ApiProvider16insert_or_assignERKNSt6stringEP14VehicleApiBaseP17VehicleSimApiBase", "nervosys::autonomylib::ApiProvider::insert_or_assign::vehicle_name", ""], [0, 2, 2, "_CPPv4N8nervosys11autonomylib11ApiProvider16insert_or_assignERKNSt6stringEP14VehicleApiBaseP17VehicleSimApiBase", "nervosys::autonomylib::ApiProvider::insert_or_assign::vehicle_sim_api", ""], [0, 0, 1, "_CPPv4N8nervosys11autonomylib11ApiProvider18makeDefaultVehicleERKNSt6stringE", "nervosys::autonomylib::ApiProvider::makeDefaultVehicle", ""], [0, 2, 2, "_CPPv4N8nervosys11autonomylib11ApiProvider18makeDefaultVehicleERKNSt6stringE", "nervosys::autonomylib::ApiProvider::makeDefaultVehicle::vehicle_name", ""], [0, 0, 1, "_CPPv4N8nervosys11autonomylib11ApiProviderD0Ev", "nervosys::autonomylib::ApiProvider::~ApiProvider", ""], [1, 1, 1, "_CPPv4N8nervosys11autonomylib13ApiServerBaseE", "nervosys::autonomylib::ApiServerBase", "Subclassed by nervosys::autonomylib::RpcLibServerBase"], [1, 0, 1, "_CPPv4N8nervosys11autonomylib13ApiServerBase5startEbNSt6size_tE", "nervosys::autonomylib::ApiServerBase::start", ""], [1, 2, 2, "_CPPv4N8nervosys11autonomylib13ApiServerBase5startEbNSt6size_tE", "nervosys::autonomylib::ApiServerBase::start::block", ""], [1, 2, 2, "_CPPv4N8nervosys11autonomylib13ApiServerBase5startEbNSt6size_tE", "nervosys::autonomylib::ApiServerBase::start::thread_count", ""], [1, 0, 1, "_CPPv4N8nervosys11autonomylib13ApiServerBase4stopEv", "nervosys::autonomylib::ApiServerBase::stop", ""], [1, 0, 1, "_CPPv4N8nervosys11autonomylib13ApiServerBaseD0Ev", "nervosys::autonomylib::ApiServerBase::~ApiServerBase", ""], [2, 1, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApiE", "nervosys::autonomylib::ArduCopterApi", "Public Functions    inline ArduCopterApi(const MultirotorParams *vehicle_params, const AutonomySimSettings::MavLinkConnectionInfo &connection_info)      inline ~ArduCopterApi()      inline virtual void resetImplementation() override      inline virtual void update() override      inline virtual bool isApiControlEnabled() const override      inline virtual void enableApiControl(bool is_enabled) override      inline virtual bool armDisarm(bool arm) override      inline virtual GeoPoint getHomeGeoPoint() const override      inline virtual void getStatusMessages(std::vector<std::string> &messages) override      inline virtual const SensorCollection &getSensors() const override      inline virtual real_T getActuation(unsigned int rotor_index) const override      inline virtual size_t getActuatorCount() const override      inline virtual void moveByRC(const RCData &rc_data) override      inline virtual void setSimulatedGroundTruth(const Kinematics::State *kinematics, const Environment *environment) override      inline virtual bool setRCData(const RCData &rc_data) override    Protected Functions    inline virtual Kinematics::State getKinematicsEstimated() const override      inline virtual Vector3r getPosition() const override      inline virtual Vector3r getVelocity() const override      inline virtual Quaternionr getOrientation() const override      inline virtual LandedState getLandedState() const override      inline virtual RCData getRCData() const override      inline virtual GeoPoint getGpsLocation() const override      inline virtual float getCommandPeriod() const override      inline virtual float getTakeoffZ() const override      inline virtual float getDistanceAccuracy() const override      inline virtual void setControllerGains(uint8_t controllerType, const vector<float> &kp, const vector<float> &ki, const vector<float> &kd) override      inline virtual void commandMotorPWMs(float front_right_pwm, float front_left_pwm, float rear_right_pwm, float rear_left_pwm) override      inline virtual void commandRollPitchYawrateThrottle(float roll, float pitch, float yaw_rate, float throttle) override      inline virtual void commandRollPitchYawZ(float roll, float pitch, float yaw, float z) override      inline virtual void commandRollPitchYawThrottle(float roll, float pitch, float yaw, float throttle) override      inline virtual void commandRollPitchYawrateZ(float roll, float pitch, float yaw_rate, float z) override      inline virtual void commandAngleRatesZ(float roll_rate, float pitch_rate, float yaw_rate, float z) override      inline virtual void commandAngleRatesThrottle(float roll_rate, float pitch_rate, float yaw_rate, float throttle) override      inline virtual void commandVelocity(float vx, float vy, float vz, const YawMode &yaw_mode) override      inline virtual void commandVelocityZ(float vx, float vy, float z, const YawMode &yaw_mode) override      inline virtual void commandPosition(float x, float y, float z, const YawMode &yaw_mode) override      inline virtual const MultirotorApiParams &getMultirotorApiParams() const override      inline void closeConnections()      inline void connect()"], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi13ArduCopterApiEPK16MultirotorParamsRKN19AutonomySimSettings21MavLinkConnectionInfoE", "nervosys::autonomylib::ArduCopterApi::ArduCopterApi", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi13ArduCopterApiEPK16MultirotorParamsRKN19AutonomySimSettings21MavLinkConnectionInfoE", "nervosys::autonomylib::ArduCopterApi::ArduCopterApi::connection_info", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi13ArduCopterApiEPK16MultirotorParamsRKN19AutonomySimSettings21MavLinkConnectionInfoE", "nervosys::autonomylib::ArduCopterApi::ArduCopterApi::vehicle_params", ""], [400, 1, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi19RotorControlMessageE", "nervosys::autonomylib::ArduCopterApi::RotorControlMessage", "Public Members    uint16_t pwm[kArduCopterRotorControlCount]"], [400, 3, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi19RotorControlMessage3pwmE", "nervosys::autonomylib::ArduCopterApi::RotorControlMessage::pwm", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi9armDisarmEb", "nervosys::autonomylib::ArduCopterApi::armDisarm", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi9armDisarmEb", "nervosys::autonomylib::ArduCopterApi::armDisarm::arm", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16closeConnectionsEv", "nervosys::autonomylib::ArduCopterApi::closeConnections", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandAngleRatesThrottle", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandAngleRatesThrottle::pitch_rate", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandAngleRatesThrottle::roll_rate", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandAngleRatesThrottle::throttle", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandAngleRatesThrottle::yaw_rate", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi18commandAngleRatesZEffff", "nervosys::autonomylib::ArduCopterApi::commandAngleRatesZ", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi18commandAngleRatesZEffff", "nervosys::autonomylib::ArduCopterApi::commandAngleRatesZ::pitch_rate", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi18commandAngleRatesZEffff", "nervosys::autonomylib::ArduCopterApi::commandAngleRatesZ::roll_rate", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi18commandAngleRatesZEffff", "nervosys::autonomylib::ArduCopterApi::commandAngleRatesZ::yaw_rate", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi18commandAngleRatesZEffff", "nervosys::autonomylib::ArduCopterApi::commandAngleRatesZ::z", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16commandMotorPWMsEffff", "nervosys::autonomylib::ArduCopterApi::commandMotorPWMs", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16commandMotorPWMsEffff", "nervosys::autonomylib::ArduCopterApi::commandMotorPWMs::front_left_pwm", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16commandMotorPWMsEffff", "nervosys::autonomylib::ArduCopterApi::commandMotorPWMs::front_right_pwm", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16commandMotorPWMsEffff", "nervosys::autonomylib::ArduCopterApi::commandMotorPWMs::rear_left_pwm", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16commandMotorPWMsEffff", "nervosys::autonomylib::ArduCopterApi::commandMotorPWMs::rear_right_pwm", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandPosition", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandPosition::x", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandPosition::y", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandPosition::yaw_mode", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandPosition::z", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawThrottle", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawThrottle::pitch", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawThrottle::roll", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawThrottle::throttle", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawThrottle::yaw", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi20commandRollPitchYawZEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawZ", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi20commandRollPitchYawZEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawZ::pitch", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi20commandRollPitchYawZEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawZ::roll", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi20commandRollPitchYawZEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawZ::yaw", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi20commandRollPitchYawZEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawZ::z", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawrateThrottle", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawrateThrottle::pitch", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawrateThrottle::roll", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawrateThrottle::throttle", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawrateThrottle::yaw_rate", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawrateZ", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawrateZ::pitch", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawrateZ::roll", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawrateZ::yaw_rate", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::ArduCopterApi::commandRollPitchYawrateZ::z", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandVelocity", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandVelocity::vx", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandVelocity::vy", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandVelocity::vz", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandVelocity::yaw_mode", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandVelocityZ", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandVelocityZ::vx", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandVelocityZ::vy", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandVelocityZ::yaw_mode", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::ArduCopterApi::commandVelocityZ::z", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi7connectEv", "nervosys::autonomylib::ArduCopterApi::connect", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16enableApiControlEb", "nervosys::autonomylib::ArduCopterApi::enableApiControl", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16enableApiControlEb", "nervosys::autonomylib::ArduCopterApi::enableApiControl::is_enabled", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi12getActuationEj", "nervosys::autonomylib::ArduCopterApi::getActuation", ""], [2, 2, 2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi12getActuationEj", "nervosys::autonomylib::ArduCopterApi::getActuation::rotor_index", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi16getActuatorCountEv", "nervosys::autonomylib::ArduCopterApi::getActuatorCount", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi16getCommandPeriodEv", "nervosys::autonomylib::ArduCopterApi::getCommandPeriod", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi19getDistanceAccuracyEv", "nervosys::autonomylib::ArduCopterApi::getDistanceAccuracy", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi14getGpsLocationEv", "nervosys::autonomylib::ArduCopterApi::getGpsLocation", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi15getHomeGeoPointEv", "nervosys::autonomylib::ArduCopterApi::getHomeGeoPoint", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi22getKinematicsEstimatedEv", "nervosys::autonomylib::ArduCopterApi::getKinematicsEstimated", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi14getLandedStateEv", "nervosys::autonomylib::ArduCopterApi::getLandedState", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi22getMultirotorApiParamsEv", "nervosys::autonomylib::ArduCopterApi::getMultirotorApiParams", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi14getOrientationEv", "nervosys::autonomylib::ArduCopterApi::getOrientation", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi11getPositionEv", "nervosys::autonomylib::ArduCopterApi::getPosition", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi9getRCDataEv", "nervosys::autonomylib::ArduCopterApi::getRCData", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi10getSensorsEv", "nervosys::autonomylib::ArduCopterApi::getSensors", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi17getStatusMessagesERNSt6vectorINSt6stringEEE", "nervosys::autonomylib::ArduCopterApi::getStatusMessages", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi17getStatusMessagesERNSt6vectorINSt6stringEEE", "nervosys::autonomylib::ArduCopterApi::getStatusMessages::messages", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi11getTakeoffZEv", "nervosys::autonomylib::ArduCopterApi::getTakeoffZ", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi11getVelocityEv", "nervosys::autonomylib::ArduCopterApi::getVelocity", ""], [2, 0, 1, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi19isApiControlEnabledEv", "nervosys::autonomylib::ArduCopterApi::isApiControlEnabled", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi8moveByRCERK6RCData", "nervosys::autonomylib::ArduCopterApi::moveByRC", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi8moveByRCERK6RCData", "nervosys::autonomylib::ArduCopterApi::moveByRC::rc_data", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi19resetImplementationEv", "nervosys::autonomylib::ArduCopterApi::resetImplementation", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::ArduCopterApi::setControllerGains", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::ArduCopterApi::setControllerGains::controllerType", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::ArduCopterApi::setControllerGains::kd", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::ArduCopterApi::setControllerGains::ki", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::ArduCopterApi::setControllerGains::kp", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi9setRCDataERK6RCData", "nervosys::autonomylib::ArduCopterApi::setRCData", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi9setRCDataERK6RCData", "nervosys::autonomylib::ArduCopterApi::setRCData::rc_data", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi23setSimulatedGroundTruthEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::ArduCopterApi::setSimulatedGroundTruth", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi23setSimulatedGroundTruthEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::ArduCopterApi::setSimulatedGroundTruth::environment", ""], [2, 2, 2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi23setSimulatedGroundTruthEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::ArduCopterApi::setSimulatedGroundTruth::kinematics", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApi6updateEv", "nervosys::autonomylib::ArduCopterApi::update", ""], [2, 0, 1, "_CPPv4N8nervosys11autonomylib13ArduCopterApiD0Ev", "nervosys::autonomylib::ArduCopterApi::~ArduCopterApi", ""], [3, 1, 1, "_CPPv4N8nervosys11autonomylib16ArduCopterParamsE", "nervosys::autonomylib::ArduCopterParams", "Public Functions    inline ArduCopterParams(const AutonomySimSettings::MavLinkVehicleSetting &vehicle_setting, std::shared_ptr<const SensorFactory> sensor_factory)      virtual ~ArduCopterParams() = default      inline virtual std::unique_ptr<MultirotorApiBase> createMultirotorApi() override    Protected Functions    inline virtual void setupParams() override      inline virtual const SensorFactory *getSensorFactory() const override    Protected Static Functions    static inline const AutonomySimSettings::MavLinkConnectionInfo &getConnectionInfo(const AutonomySimSettings::MavLinkVehicleSetting &vehicle_setting)"], [3, 0, 1, "_CPPv4N8nervosys11autonomylib16ArduCopterParams16ArduCopterParamsERKN19AutonomySimSettings21MavLinkVehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::ArduCopterParams::ArduCopterParams", ""], [3, 2, 2, "_CPPv4N8nervosys11autonomylib16ArduCopterParams16ArduCopterParamsERKN19AutonomySimSettings21MavLinkVehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::ArduCopterParams::ArduCopterParams::sensor_factory", ""], [3, 2, 2, "_CPPv4N8nervosys11autonomylib16ArduCopterParams16ArduCopterParamsERKN19AutonomySimSettings21MavLinkVehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::ArduCopterParams::ArduCopterParams::vehicle_setting", ""], [3, 0, 1, "_CPPv4N8nervosys11autonomylib16ArduCopterParams19createMultirotorApiEv", "nervosys::autonomylib::ArduCopterParams::createMultirotorApi", ""], [3, 0, 1, "_CPPv4N8nervosys11autonomylib16ArduCopterParams17getConnectionInfoERKN19AutonomySimSettings21MavLinkVehicleSettingE", "nervosys::autonomylib::ArduCopterParams::getConnectionInfo", ""], [3, 2, 2, "_CPPv4N8nervosys11autonomylib16ArduCopterParams17getConnectionInfoERKN19AutonomySimSettings21MavLinkVehicleSettingE", "nervosys::autonomylib::ArduCopterParams::getConnectionInfo::vehicle_setting", ""], [3, 0, 1, "_CPPv4NK8nervosys11autonomylib16ArduCopterParams16getSensorFactoryEv", "nervosys::autonomylib::ArduCopterParams::getSensorFactory", ""], [3, 0, 1, "_CPPv4N8nervosys11autonomylib16ArduCopterParams11setupParamsEv", "nervosys::autonomylib::ArduCopterParams::setupParams", ""], [3, 0, 1, "_CPPv4N8nervosys11autonomylib16ArduCopterParamsD0Ev", "nervosys::autonomylib::ArduCopterParams::~ArduCopterParams", ""], [4, 1, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApiE", "nervosys::autonomylib::ArduCopterSoloApi", "Public Functions    inline virtual ~ArduCopterSoloApi()      inline virtual void update()      inline virtual void close()    Protected Functions    inline virtual void connect()"], [401, 1, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi19RotorControlMessageE", "nervosys::autonomylib::ArduCopterSoloApi::RotorControlMessage", "Public Members    uint16_t pwm[kArduCopterRotorControlCount]      uint16_t speed      uint16_t direction      uint16_t turbulance"], [401, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi19RotorControlMessage9directionE", "nervosys::autonomylib::ArduCopterSoloApi::RotorControlMessage::direction", ""], [401, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi19RotorControlMessage3pwmE", "nervosys::autonomylib::ArduCopterSoloApi::RotorControlMessage::pwm", ""], [401, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi19RotorControlMessage5speedE", "nervosys::autonomylib::ArduCopterSoloApi::RotorControlMessage::speed", ""], [401, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi19RotorControlMessage10turbulanceE", "nervosys::autonomylib::ArduCopterSoloApi::RotorControlMessage::turbulance", ""], [402, 1, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessageE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage", "Public Members    uint64_t timestamp      double latitude      double longitude      double altitude      double heading      double speedN      double speedE      double speedD      double xAccel      double yAccel      double zAccel      double rollRate      double pitchRate      double yawRate      double rollDeg      double pitchDeg      double yawDeg      double airspeed      uint32_t magic"], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage8airspeedE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::airspeed", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage8altitudeE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::altitude", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage7headingE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::heading", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage8latitudeE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::latitude", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage9longitudeE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::longitude", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage5magicE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::magic", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage8pitchDegE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::pitchDeg", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage9pitchRateE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::pitchRate", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage7rollDegE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::rollDeg", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage8rollRateE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::rollRate", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage6speedDE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::speedD", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage6speedEE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::speedE", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage6speedNE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::speedN", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage9timestampE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::timestamp", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage6xAccelE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::xAccel", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage6yAccelE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::yAccel", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage6yawDegE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::yawDeg", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage7yawRateE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::yawRate", ""], [402, 3, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage6zAccelE", "nervosys::autonomylib::ArduCopterSoloApi::SensorMessage::zAccel", ""], [4, 0, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi5closeEv", "nervosys::autonomylib::ArduCopterSoloApi::close", ""], [4, 0, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi7connectEv", "nervosys::autonomylib::ArduCopterSoloApi::connect", ""], [4, 0, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi6updateEv", "nervosys::autonomylib::ArduCopterSoloApi::update", ""], [4, 0, 1, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApiD0Ev", "nervosys::autonomylib::ArduCopterSoloApi::~ArduCopterSoloApi", ""], [5, 1, 1, "_CPPv4N8nervosys11autonomylib20ArduCopterSoloParamsE", "nervosys::autonomylib::ArduCopterSoloParams", "Public Functions    inline ArduCopterSoloParams(const AutonomySimSettings::MavLinkVehicleSetting &vehicle_settings, std::shared_ptr<const SensorFactory> sensor_factory)      virtual ~ArduCopterSoloParams() = default      inline virtual std::unique_ptr<MultirotorApiBase> createMultirotorApi() override      inline virtual void setupParams() override    Protected Functions    inline virtual const SensorFactory *getSensorFactory() const override"], [5, 0, 1, "_CPPv4N8nervosys11autonomylib20ArduCopterSoloParams20ArduCopterSoloParamsERKN19AutonomySimSettings21MavLinkVehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::ArduCopterSoloParams::ArduCopterSoloParams", ""], [5, 2, 2, "_CPPv4N8nervosys11autonomylib20ArduCopterSoloParams20ArduCopterSoloParamsERKN19AutonomySimSettings21MavLinkVehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::ArduCopterSoloParams::ArduCopterSoloParams::sensor_factory", ""], [5, 2, 2, "_CPPv4N8nervosys11autonomylib20ArduCopterSoloParams20ArduCopterSoloParamsERKN19AutonomySimSettings21MavLinkVehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::ArduCopterSoloParams::ArduCopterSoloParams::vehicle_settings", ""], [5, 0, 1, "_CPPv4N8nervosys11autonomylib20ArduCopterSoloParams19createMultirotorApiEv", "nervosys::autonomylib::ArduCopterSoloParams::createMultirotorApi", ""], [5, 0, 1, "_CPPv4NK8nervosys11autonomylib20ArduCopterSoloParams16getSensorFactoryEv", "nervosys::autonomylib::ArduCopterSoloParams::getSensorFactory", ""], [5, 0, 1, "_CPPv4N8nervosys11autonomylib20ArduCopterSoloParams11setupParamsEv", "nervosys::autonomylib::ArduCopterSoloParams::setupParams", ""], [5, 0, 1, "_CPPv4N8nervosys11autonomylib20ArduCopterSoloParamsD0Ev", "nervosys::autonomylib::ArduCopterSoloParams::~ArduCopterSoloParams", ""], [6, 1, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApiE", "nervosys::autonomylib::ArduRoverApi", "Public Functions    inline ArduRoverApi(const AutonomySimSettings::VehicleSetting *vehicle_setting, std::shared_ptr<SensorFactory> sensor_factory, const Kinematics::State &state, const Environment &environment)      inline ~ArduRoverApi()      inline virtual void update() override      inline virtual const SensorCollection &getSensors() const override      inline virtual bool isApiControlEnabled() const override      inline virtual void enableApiControl(bool is_enabled) override      inline virtual bool armDisarm(bool arm) override      inline virtual GeoPoint getHomeGeoPoint() const override      inline virtual void getStatusMessages(std::vector<std::string> &messages) override      inline virtual void setCarControls(const CarControls &controls) override      inline virtual void updateCarState(const CarState &car_state) override      inline virtual const CarState &getCarState() const override      inline virtual const CarControls &getCarControls() const override    Protected Functions    inline virtual void resetImplementation() override      inline void closeConnections()      inline void connect()"], [6, 0, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApi12ArduRoverApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::ArduRoverApi::ArduRoverApi", ""], [6, 2, 2, "_CPPv4N8nervosys11autonomylib12ArduRoverApi12ArduRoverApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::ArduRoverApi::ArduRoverApi::environment", ""], [6, 2, 2, "_CPPv4N8nervosys11autonomylib12ArduRoverApi12ArduRoverApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::ArduRoverApi::ArduRoverApi::sensor_factory", ""], [6, 2, 2, "_CPPv4N8nervosys11autonomylib12ArduRoverApi12ArduRoverApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::ArduRoverApi::ArduRoverApi::state", ""], [6, 2, 2, "_CPPv4N8nervosys11autonomylib12ArduRoverApi12ArduRoverApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::ArduRoverApi::ArduRoverApi::vehicle_setting", ""], [403, 1, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApi19RoverControlMessageE", "nervosys::autonomylib::ArduRoverApi::RoverControlMessage", "Public Members    float throttle      float steering"], [403, 3, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApi19RoverControlMessage8steeringE", "nervosys::autonomylib::ArduRoverApi::RoverControlMessage::steering", ""], [403, 3, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApi19RoverControlMessage8throttleE", "nervosys::autonomylib::ArduRoverApi::RoverControlMessage::throttle", ""], [6, 0, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApi9armDisarmEb", "nervosys::autonomylib::ArduRoverApi::armDisarm", ""], [6, 2, 2, "_CPPv4N8nervosys11autonomylib12ArduRoverApi9armDisarmEb", "nervosys::autonomylib::ArduRoverApi::armDisarm::arm", ""], [6, 0, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApi16closeConnectionsEv", "nervosys::autonomylib::ArduRoverApi::closeConnections", ""], [6, 0, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApi7connectEv", "nervosys::autonomylib::ArduRoverApi::connect", ""], [6, 0, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApi16enableApiControlEb", "nervosys::autonomylib::ArduRoverApi::enableApiControl", ""], [6, 2, 2, "_CPPv4N8nervosys11autonomylib12ArduRoverApi16enableApiControlEb", "nervosys::autonomylib::ArduRoverApi::enableApiControl::is_enabled", ""], [6, 0, 1, "_CPPv4NK8nervosys11autonomylib12ArduRoverApi14getCarControlsEv", "nervosys::autonomylib::ArduRoverApi::getCarControls", ""], [6, 0, 1, "_CPPv4NK8nervosys11autonomylib12ArduRoverApi11getCarStateEv", "nervosys::autonomylib::ArduRoverApi::getCarState", ""], [6, 0, 1, "_CPPv4NK8nervosys11autonomylib12ArduRoverApi15getHomeGeoPointEv", "nervosys::autonomylib::ArduRoverApi::getHomeGeoPoint", ""], [6, 0, 1, "_CPPv4NK8nervosys11autonomylib12ArduRoverApi10getSensorsEv", "nervosys::autonomylib::ArduRoverApi::getSensors", ""], [6, 0, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApi17getStatusMessagesERNSt6vectorINSt6stringEEE", "nervosys::autonomylib::ArduRoverApi::getStatusMessages", ""], [6, 2, 2, "_CPPv4N8nervosys11autonomylib12ArduRoverApi17getStatusMessagesERNSt6vectorINSt6stringEEE", "nervosys::autonomylib::ArduRoverApi::getStatusMessages::messages", ""], [6, 0, 1, "_CPPv4NK8nervosys11autonomylib12ArduRoverApi19isApiControlEnabledEv", "nervosys::autonomylib::ArduRoverApi::isApiControlEnabled", ""], [6, 0, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApi19resetImplementationEv", "nervosys::autonomylib::ArduRoverApi::resetImplementation", ""], [6, 0, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApi14setCarControlsERK11CarControls", "nervosys::autonomylib::ArduRoverApi::setCarControls", ""], [6, 2, 2, "_CPPv4N8nervosys11autonomylib12ArduRoverApi14setCarControlsERK11CarControls", "nervosys::autonomylib::ArduRoverApi::setCarControls::controls", ""], [6, 0, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApi6updateEv", "nervosys::autonomylib::ArduRoverApi::update", ""], [6, 0, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApi14updateCarStateERK8CarState", "nervosys::autonomylib::ArduRoverApi::updateCarState", ""], [6, 2, 2, "_CPPv4N8nervosys11autonomylib12ArduRoverApi14updateCarStateERK8CarState", "nervosys::autonomylib::ArduRoverApi::updateCarState::car_state", ""], [6, 0, 1, "_CPPv4N8nervosys11autonomylib12ArduRoverApiD0Ev", "nervosys::autonomylib::ArduRoverApi::~ArduRoverApi", ""], [7, 1, 1, "_CPPv4N8nervosys11autonomylib13BarometerBaseE", "nervosys::autonomylib::BarometerBase", "Subclassed by nervosys::autonomylib::BarometerSimple"], [7, 0, 1, "_CPPv4N8nervosys11autonomylib13BarometerBase13BarometerBaseERKNSt6stringE", "nervosys::autonomylib::BarometerBase::BarometerBase", ""], [7, 2, 2, "_CPPv4N8nervosys11autonomylib13BarometerBase13BarometerBaseERKNSt6stringE", "nervosys::autonomylib::BarometerBase::BarometerBase::sensor_name", ""], [7, 1, 1, "_CPPv4N8nervosys11autonomylib13BarometerBase6OutputE", "nervosys::autonomylib::BarometerBase::Output", "Public Members    TTimePoint time_stamp      real_T altitude      real_T pressure      real_T qnh"], [7, 3, 1, "_CPPv4N8nervosys11autonomylib13BarometerBase6Output8altitudeE", "nervosys::autonomylib::BarometerBase::Output::altitude", ""], [7, 3, 1, "_CPPv4N8nervosys11autonomylib13BarometerBase6Output8pressureE", "nervosys::autonomylib::BarometerBase::Output::pressure", ""], [7, 3, 1, "_CPPv4N8nervosys11autonomylib13BarometerBase6Output3qnhE", "nervosys::autonomylib::BarometerBase::Output::qnh", ""], [7, 3, 1, "_CPPv4N8nervosys11autonomylib13BarometerBase6Output10time_stampE", "nervosys::autonomylib::BarometerBase::Output::time_stamp", ""], [7, 0, 1, "_CPPv4NK8nervosys11autonomylib13BarometerBase9getOutputEv", "nervosys::autonomylib::BarometerBase::getOutput", ""], [7, 0, 1, "_CPPv4N8nervosys11autonomylib13BarometerBase11reportStateER13StateReporter", "nervosys::autonomylib::BarometerBase::reportState", ""], [7, 2, 2, "_CPPv4N8nervosys11autonomylib13BarometerBase11reportStateER13StateReporter", "nervosys::autonomylib::BarometerBase::reportState::reporter", ""], [7, 0, 1, "_CPPv4N8nervosys11autonomylib13BarometerBase9setOutputERK6Output", "nervosys::autonomylib::BarometerBase::setOutput", ""], [7, 2, 2, "_CPPv4N8nervosys11autonomylib13BarometerBase9setOutputERK6Output", "nervosys::autonomylib::BarometerBase::setOutput::output", ""], [8, 1, 1, "_CPPv4N8nervosys11autonomylib15BarometerSimpleE", "nervosys::autonomylib::BarometerSimple", "Public Functions    inline BarometerSimple(const AutonomySimSettings::BarometerSetting &setting = AutonomySimSettings::BarometerSetting())      inline virtual void resetImplementation() override      inline virtual void update() override      virtual ~BarometerSimple() = default"], [8, 0, 1, "_CPPv4N8nervosys11autonomylib15BarometerSimple15BarometerSimpleERKN19AutonomySimSettings16BarometerSettingE", "nervosys::autonomylib::BarometerSimple::BarometerSimple", ""], [8, 2, 2, "_CPPv4N8nervosys11autonomylib15BarometerSimple15BarometerSimpleERKN19AutonomySimSettings16BarometerSettingE", "nervosys::autonomylib::BarometerSimple::BarometerSimple::setting", ""], [8, 0, 1, "_CPPv4N8nervosys11autonomylib15BarometerSimple19resetImplementationEv", "nervosys::autonomylib::BarometerSimple::resetImplementation", ""], [8, 0, 1, "_CPPv4N8nervosys11autonomylib15BarometerSimple6updateEv", "nervosys::autonomylib::BarometerSimple::update", ""], [8, 0, 1, "_CPPv4N8nervosys11autonomylib15BarometerSimpleD0Ev", "nervosys::autonomylib::BarometerSimple::~BarometerSimple", ""], [405, 1, 1, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParamsE", "nervosys::autonomylib::BarometerSimpleParams", "Public Functions    inline void initializeFromSettings(const AutonomySimSettings::BarometerSetting &settings)    Public Members    real_T qnh = EarthUtils::SeaLevelPressure / 100.0f      real_T pressure_factor_sigma = 0.0365f / 20      real_T pressure_factor_tau = 3600      real_T uncorrelated_noise_sigma = 0.027f * 100      real_T update_latency = 0.0f      real_T update_frequency = 50      real_T startup_delay = 0"], [405, 0, 1, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams22initializeFromSettingsERKN19AutonomySimSettings16BarometerSettingE", "nervosys::autonomylib::BarometerSimpleParams::initializeFromSettings", ""], [405, 2, 2, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams22initializeFromSettingsERKN19AutonomySimSettings16BarometerSettingE", "nervosys::autonomylib::BarometerSimpleParams::initializeFromSettings::settings", ""], [405, 3, 1, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams21pressure_factor_sigmaE", "nervosys::autonomylib::BarometerSimpleParams::pressure_factor_sigma", ""], [405, 3, 1, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams19pressure_factor_tauE", "nervosys::autonomylib::BarometerSimpleParams::pressure_factor_tau", ""], [405, 3, 1, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams3qnhE", "nervosys::autonomylib::BarometerSimpleParams::qnh", ""], [405, 3, 1, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams13startup_delayE", "nervosys::autonomylib::BarometerSimpleParams::startup_delay", ""], [405, 3, 1, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams24uncorrelated_noise_sigmaE", "nervosys::autonomylib::BarometerSimpleParams::uncorrelated_noise_sigma", ""], [405, 3, 1, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams16update_frequencyE", "nervosys::autonomylib::BarometerSimpleParams::update_frequency", ""], [405, 3, 1, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams14update_latencyE", "nervosys::autonomylib::BarometerSimpleParams::update_latency", ""], [9, 1, 1, "_CPPv4N8nervosys11autonomylib10CarApiBaseE", "nervosys::autonomylib::CarApiBase", "Subclassed by nervosys::autonomylib::ArduRoverApi, nervosys::autonomylib::PhysXCarApi"], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase10CarApiBaseEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiBase::CarApiBase", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase10CarApiBaseEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiBase::CarApiBase::environment", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase10CarApiBaseEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiBase::CarApiBase::sensor_factory", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase10CarApiBaseEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiBase::CarApiBase::state", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase10CarApiBaseEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiBase::CarApiBase::vehicle_setting", ""], [9, 1, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControlsE", "nervosys::autonomylib::CarApiBase::CarControls", "Public Functions    inline CarControls()      inline CarControls(float throttle_val, float steering_val, float brake_val, bool handbrake_val, bool is_manual_gear_val, int manual_gear_val, bool gear_immediate_val)      inline void set_throttle(float throttle_val, bool forward)    Public Members    float throttle = 0      float steering = 0      float brake = 0      bool handbrake = false      bool is_manual_gear = false      int manual_gear = 0      bool gear_immediate = true"], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11CarControlsEfffbbib", "nervosys::autonomylib::CarApiBase::CarControls::CarControls", ""], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11CarControlsEv", "nervosys::autonomylib::CarApiBase::CarControls::CarControls", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11CarControlsEfffbbib", "nervosys::autonomylib::CarApiBase::CarControls::CarControls::brake_val", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11CarControlsEfffbbib", "nervosys::autonomylib::CarApiBase::CarControls::CarControls::gear_immediate_val", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11CarControlsEfffbbib", "nervosys::autonomylib::CarApiBase::CarControls::CarControls::handbrake_val", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11CarControlsEfffbbib", "nervosys::autonomylib::CarApiBase::CarControls::CarControls::is_manual_gear_val", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11CarControlsEfffbbib", "nervosys::autonomylib::CarApiBase::CarControls::CarControls::manual_gear_val", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11CarControlsEfffbbib", "nervosys::autonomylib::CarApiBase::CarControls::CarControls::steering_val", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11CarControlsEfffbbib", "nervosys::autonomylib::CarApiBase::CarControls::CarControls::throttle_val", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls5brakeE", "nervosys::autonomylib::CarApiBase::CarControls::brake", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls14gear_immediateE", "nervosys::autonomylib::CarApiBase::CarControls::gear_immediate", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls9handbrakeE", "nervosys::autonomylib::CarApiBase::CarControls::handbrake", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls14is_manual_gearE", "nervosys::autonomylib::CarApiBase::CarControls::is_manual_gear", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11manual_gearE", "nervosys::autonomylib::CarApiBase::CarControls::manual_gear", ""], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls12set_throttleEfb", "nervosys::autonomylib::CarApiBase::CarControls::set_throttle", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls12set_throttleEfb", "nervosys::autonomylib::CarApiBase::CarControls::set_throttle::forward", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls12set_throttleEfb", "nervosys::autonomylib::CarApiBase::CarControls::set_throttle::throttle_val", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls8steeringE", "nervosys::autonomylib::CarApiBase::CarControls::steering", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls8throttleE", "nervosys::autonomylib::CarApiBase::CarControls::throttle", ""], [9, 1, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarStateE", "nervosys::autonomylib::CarApiBase::CarState", "Public Functions    inline CarState()      inline CarState(float speed_val, int gear_val, float rpm_val, float maxrpm_val, bool handbrake_val, const Kinematics::State &kinematics_estimated_val, uint64_t timestamp_val)      inline const Vector3r &getPosition() const      inline const Quaternionr &getOrientation() const    Public Members    float speed      int gear      float rpm      float maxrpm      bool handbrake      Kinematics::State kinematics_estimated      uint64_t timestamp"], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState8CarStateEfiffbRKN10Kinematics5StateE8uint64_t", "nervosys::autonomylib::CarApiBase::CarState::CarState", ""], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState8CarStateEv", "nervosys::autonomylib::CarApiBase::CarState::CarState", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState8CarStateEfiffbRKN10Kinematics5StateE8uint64_t", "nervosys::autonomylib::CarApiBase::CarState::CarState::gear_val", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState8CarStateEfiffbRKN10Kinematics5StateE8uint64_t", "nervosys::autonomylib::CarApiBase::CarState::CarState::handbrake_val", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState8CarStateEfiffbRKN10Kinematics5StateE8uint64_t", "nervosys::autonomylib::CarApiBase::CarState::CarState::kinematics_estimated_val", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState8CarStateEfiffbRKN10Kinematics5StateE8uint64_t", "nervosys::autonomylib::CarApiBase::CarState::CarState::maxrpm_val", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState8CarStateEfiffbRKN10Kinematics5StateE8uint64_t", "nervosys::autonomylib::CarApiBase::CarState::CarState::rpm_val", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState8CarStateEfiffbRKN10Kinematics5StateE8uint64_t", "nervosys::autonomylib::CarApiBase::CarState::CarState::speed_val", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState8CarStateEfiffbRKN10Kinematics5StateE8uint64_t", "nervosys::autonomylib::CarApiBase::CarState::CarState::timestamp_val", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState4gearE", "nervosys::autonomylib::CarApiBase::CarState::gear", ""], [9, 0, 1, "_CPPv4NK8nervosys11autonomylib10CarApiBase8CarState14getOrientationEv", "nervosys::autonomylib::CarApiBase::CarState::getOrientation", ""], [9, 0, 1, "_CPPv4NK8nervosys11autonomylib10CarApiBase8CarState11getPositionEv", "nervosys::autonomylib::CarApiBase::CarState::getPosition", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState9handbrakeE", "nervosys::autonomylib::CarApiBase::CarState::handbrake", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState20kinematics_estimatedE", "nervosys::autonomylib::CarApiBase::CarState::kinematics_estimated", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState6maxrpmE", "nervosys::autonomylib::CarApiBase::CarState::maxrpm", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState3rpmE", "nervosys::autonomylib::CarApiBase::CarState::rpm", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState5speedE", "nervosys::autonomylib::CarApiBase::CarState::speed", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState9timestampE", "nervosys::autonomylib::CarApiBase::CarState::timestamp", ""], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase22addSensorsFromSettingsEPKN19AutonomySimSettings14VehicleSettingE", "nervosys::autonomylib::CarApiBase::addSensorsFromSettings", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase22addSensorsFromSettingsEPKN19AutonomySimSettings14VehicleSettingE", "nervosys::autonomylib::CarApiBase::addSensorsFromSettings::vehicle_setting", ""], [9, 0, 1, "_CPPv4NK8nervosys11autonomylib10CarApiBase14getCarControlsEv", "nervosys::autonomylib::CarApiBase::getCarControls", ""], [9, 0, 1, "_CPPv4NK8nervosys11autonomylib10CarApiBase11getCarStateEv", "nervosys::autonomylib::CarApiBase::getCarState", ""], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase10getSensorsEv", "nervosys::autonomylib::CarApiBase::getSensors", ""], [9, 0, 1, "_CPPv4NK8nervosys11autonomylib10CarApiBase10getSensorsEv", "nervosys::autonomylib::CarApiBase::getSensors", ""], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase10initializeEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiBase::initialize", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase10initializeEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiBase::initialize::environment", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase10initializeEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiBase::initialize::sensor_factory", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase10initializeEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiBase::initialize::state", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase10initializeEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiBase::initialize::vehicle_setting", ""], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase11reportStateER13StateReporter", "nervosys::autonomylib::CarApiBase::reportState", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase11reportStateER13StateReporter", "nervosys::autonomylib::CarApiBase::reportState::reporter", ""], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase19resetImplementationEv", "nervosys::autonomylib::CarApiBase::resetImplementation", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase15sensor_factory_E", "nervosys::autonomylib::CarApiBase::sensor_factory_", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase15sensor_storage_E", "nervosys::autonomylib::CarApiBase::sensor_storage_", ""], [9, 3, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase8sensors_E", "nervosys::autonomylib::CarApiBase::sensors_", ""], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase14setCarControlsERK11CarControls", "nervosys::autonomylib::CarApiBase::setCarControls", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase14setCarControlsERK11CarControls", "nervosys::autonomylib::CarApiBase::setCarControls::controls", ""], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase6updateEv", "nervosys::autonomylib::CarApiBase::update", ""], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBase14updateCarStateERK8CarState", "nervosys::autonomylib::CarApiBase::updateCarState", ""], [9, 2, 2, "_CPPv4N8nervosys11autonomylib10CarApiBase14updateCarStateERK8CarState", "nervosys::autonomylib::CarApiBase::updateCarState::state", ""], [9, 0, 1, "_CPPv4N8nervosys11autonomylib10CarApiBaseD0Ev", "nervosys::autonomylib::CarApiBase::~CarApiBase", ""], [10, 1, 1, "_CPPv4N8nervosys11autonomylib13CarApiFactoryE", "nervosys::autonomylib::CarApiFactory", "Public Static Functions    static inline std::unique_ptr<CarApiBase> createApi(const AutonomySimSettings::VehicleSetting *vehicle_setting, std::shared_ptr<SensorFactory> sensor_factory, const Kinematics::State &state, const Environment &environment)"], [10, 0, 1, "_CPPv4N8nervosys11autonomylib13CarApiFactory9createApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiFactory::createApi", ""], [10, 2, 2, "_CPPv4N8nervosys11autonomylib13CarApiFactory9createApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiFactory::createApi::environment", ""], [10, 2, 2, "_CPPv4N8nervosys11autonomylib13CarApiFactory9createApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiFactory::createApi::sensor_factory", ""], [10, 2, 2, "_CPPv4N8nervosys11autonomylib13CarApiFactory9createApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiFactory::createApi::state", ""], [10, 2, 2, "_CPPv4N8nervosys11autonomylib13CarApiFactory9createApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::CarApiFactory::createApi::vehicle_setting", ""], [485, 4, 1, "_CPPv4N8nervosys11autonomylib17CarRpcLibAdaptorsE", "nervosys::autonomylib::CarRpcLibAdaptors", ""], [11, 1, 1, "_CPPv4N8nervosys11autonomylib15CarRpcLibClientE", "nervosys::autonomylib::CarRpcLibClient", "Public Functions    CarRpcLibClient(const string &ip_address = \"localhost\", uint16_t port = RpcLibPort, float timeout_sec = 60)      void setCarControls(const CarApiBase::CarControls &controls, const std::string &vehicle_name = \"\")      CarApiBase::CarState getCarState(const std::string &vehicle_name = \"\")      CarApiBase::CarControls getCarControls(const std::string &vehicle_name = \"\")      virtual ~CarRpcLibClient()"], [11, 0, 1, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient15CarRpcLibClientERK6string8uint16_tf", "nervosys::autonomylib::CarRpcLibClient::CarRpcLibClient", ""], [11, 2, 2, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient15CarRpcLibClientERK6string8uint16_tf", "nervosys::autonomylib::CarRpcLibClient::CarRpcLibClient::ip_address", ""], [11, 2, 2, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient15CarRpcLibClientERK6string8uint16_tf", "nervosys::autonomylib::CarRpcLibClient::CarRpcLibClient::port", ""], [11, 2, 2, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient15CarRpcLibClientERK6string8uint16_tf", "nervosys::autonomylib::CarRpcLibClient::CarRpcLibClient::timeout_sec", ""], [11, 0, 1, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient14getCarControlsERKNSt6stringE", "nervosys::autonomylib::CarRpcLibClient::getCarControls", ""], [11, 2, 2, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient14getCarControlsERKNSt6stringE", "nervosys::autonomylib::CarRpcLibClient::getCarControls::vehicle_name", ""], [11, 0, 1, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient11getCarStateERKNSt6stringE", "nervosys::autonomylib::CarRpcLibClient::getCarState", ""], [11, 2, 2, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient11getCarStateERKNSt6stringE", "nervosys::autonomylib::CarRpcLibClient::getCarState::vehicle_name", ""], [11, 0, 1, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient14setCarControlsERKN10CarApiBase11CarControlsERKNSt6stringE", "nervosys::autonomylib::CarRpcLibClient::setCarControls", ""], [11, 2, 2, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient14setCarControlsERKN10CarApiBase11CarControlsERKNSt6stringE", "nervosys::autonomylib::CarRpcLibClient::setCarControls::controls", ""], [11, 2, 2, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient14setCarControlsERKN10CarApiBase11CarControlsERKNSt6stringE", "nervosys::autonomylib::CarRpcLibClient::setCarControls::vehicle_name", ""], [11, 0, 1, "_CPPv4N8nervosys11autonomylib15CarRpcLibClientD0Ev", "nervosys::autonomylib::CarRpcLibClient::~CarRpcLibClient", ""], [12, 1, 1, "_CPPv4N8nervosys11autonomylib15CarRpcLibServerE", "nervosys::autonomylib::CarRpcLibServer", "Public Functions    CarRpcLibServer(ApiProvider *api_provider, string server_address, uint16_t port = RpcLibPort)      virtual ~CarRpcLibServer()    Protected Functions    inline virtual CarApiBase *getVehicleApi(const std::string &vehicle_name) override"], [12, 0, 1, "_CPPv4N8nervosys11autonomylib15CarRpcLibServer15CarRpcLibServerEP11ApiProvider6string8uint16_t", "nervosys::autonomylib::CarRpcLibServer::CarRpcLibServer", ""], [12, 2, 2, "_CPPv4N8nervosys11autonomylib15CarRpcLibServer15CarRpcLibServerEP11ApiProvider6string8uint16_t", "nervosys::autonomylib::CarRpcLibServer::CarRpcLibServer::api_provider", ""], [12, 2, 2, "_CPPv4N8nervosys11autonomylib15CarRpcLibServer15CarRpcLibServerEP11ApiProvider6string8uint16_t", "nervosys::autonomylib::CarRpcLibServer::CarRpcLibServer::port", ""], [12, 2, 2, "_CPPv4N8nervosys11autonomylib15CarRpcLibServer15CarRpcLibServerEP11ApiProvider6string8uint16_t", "nervosys::autonomylib::CarRpcLibServer::CarRpcLibServer::server_address", ""], [12, 0, 1, "_CPPv4N8nervosys11autonomylib15CarRpcLibServer13getVehicleApiERKNSt6stringE", "nervosys::autonomylib::CarRpcLibServer::getVehicleApi", ""], [12, 2, 2, "_CPPv4N8nervosys11autonomylib15CarRpcLibServer13getVehicleApiERKNSt6stringE", "nervosys::autonomylib::CarRpcLibServer::getVehicleApi::vehicle_name", ""], [12, 0, 1, "_CPPv4N8nervosys11autonomylib15CarRpcLibServerD0Ev", "nervosys::autonomylib::CarRpcLibServer::~CarRpcLibServer", ""], [13, 1, 1, "_CPPv4N8nervosys11autonomylib12CubeGeoFenceE", "nervosys::autonomylib::CubeGeoFence", "Public Functions    inline CubeGeoFence(const Vector3r &point_min, const Vector3r &point_max, float distance_accuracy)      inline virtual void setBoundry(const Vector3r &origin, float xy_length, float max_z, float min_z) override      inline virtual void checkFence(const Vector3r &cur_loc, const Vector3r &dest_loc, bool &in_fence, bool &allow) override      inline virtual string toString() const override      inline virtual ~CubeGeoFence()"], [13, 0, 1, "_CPPv4N8nervosys11autonomylib12CubeGeoFence12CubeGeoFenceERK8Vector3rRK8Vector3rf", "nervosys::autonomylib::CubeGeoFence::CubeGeoFence", ""], [13, 2, 2, "_CPPv4N8nervosys11autonomylib12CubeGeoFence12CubeGeoFenceERK8Vector3rRK8Vector3rf", "nervosys::autonomylib::CubeGeoFence::CubeGeoFence::distance_accuracy", ""], [13, 2, 2, "_CPPv4N8nervosys11autonomylib12CubeGeoFence12CubeGeoFenceERK8Vector3rRK8Vector3rf", "nervosys::autonomylib::CubeGeoFence::CubeGeoFence::point_max", ""], [13, 2, 2, "_CPPv4N8nervosys11autonomylib12CubeGeoFence12CubeGeoFenceERK8Vector3rRK8Vector3rf", "nervosys::autonomylib::CubeGeoFence::CubeGeoFence::point_min", ""], [13, 0, 1, "_CPPv4N8nervosys11autonomylib12CubeGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::CubeGeoFence::checkFence", ""], [13, 2, 2, "_CPPv4N8nervosys11autonomylib12CubeGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::CubeGeoFence::checkFence::allow", ""], [13, 2, 2, "_CPPv4N8nervosys11autonomylib12CubeGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::CubeGeoFence::checkFence::cur_loc", ""], [13, 2, 2, "_CPPv4N8nervosys11autonomylib12CubeGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::CubeGeoFence::checkFence::dest_loc", ""], [13, 2, 2, "_CPPv4N8nervosys11autonomylib12CubeGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::CubeGeoFence::checkFence::in_fence", ""], [13, 0, 1, "_CPPv4N8nervosys11autonomylib12CubeGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::CubeGeoFence::setBoundry", ""], [13, 2, 2, "_CPPv4N8nervosys11autonomylib12CubeGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::CubeGeoFence::setBoundry::max_z", ""], [13, 2, 2, "_CPPv4N8nervosys11autonomylib12CubeGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::CubeGeoFence::setBoundry::min_z", ""], [13, 2, 2, "_CPPv4N8nervosys11autonomylib12CubeGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::CubeGeoFence::setBoundry::origin", ""], [13, 2, 2, "_CPPv4N8nervosys11autonomylib12CubeGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::CubeGeoFence::setBoundry::xy_length", ""], [13, 0, 1, "_CPPv4NK8nervosys11autonomylib12CubeGeoFence8toStringEv", "nervosys::autonomylib::CubeGeoFence::toString", ""], [13, 0, 1, "_CPPv4N8nervosys11autonomylib12CubeGeoFenceD0Ev", "nervosys::autonomylib::CubeGeoFence::~CubeGeoFence", ""], [14, 1, 1, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBodyE", "nervosys::autonomylib::DebugPhysicsBody", "Update kinematics without a state"], [15, 1, 1, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody12WrenchVertexE", "nervosys::autonomylib::DebugPhysicsBody::WrenchVertex", "Public Functions    inline WrenchVertex(const Vector3r &position, const Vector3r &normal, const Vector3r &force = Vector3r::Zero())    Protected Functions    inline virtual void setWrench(Wrench &wrench) override"], [15, 0, 1, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody12WrenchVertex12WrenchVertexERK8Vector3rRK8Vector3rRK8Vector3r", "nervosys::autonomylib::DebugPhysicsBody::WrenchVertex::WrenchVertex", ""], [15, 2, 2, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody12WrenchVertex12WrenchVertexERK8Vector3rRK8Vector3rRK8Vector3r", "nervosys::autonomylib::DebugPhysicsBody::WrenchVertex::WrenchVertex::force", ""], [15, 2, 2, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody12WrenchVertex12WrenchVertexERK8Vector3rRK8Vector3rRK8Vector3r", "nervosys::autonomylib::DebugPhysicsBody::WrenchVertex::WrenchVertex::normal", ""], [15, 2, 2, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody12WrenchVertex12WrenchVertexERK8Vector3rRK8Vector3rRK8Vector3r", "nervosys::autonomylib::DebugPhysicsBody::WrenchVertex::WrenchVertex::position", ""], [15, 0, 1, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody12WrenchVertex9setWrenchER6Wrench", "nervosys::autonomylib::DebugPhysicsBody::WrenchVertex::setWrench", ""], [15, 2, 2, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody12WrenchVertex9setWrenchER6Wrench", "nervosys::autonomylib::DebugPhysicsBody::WrenchVertex::setWrench::wrench", ""], [14, 0, 1, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody15dragVertexCountEv", "nervosys::autonomylib::DebugPhysicsBody::dragVertexCount", ""], [14, 0, 1, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody13getDragVertexE4uint", "nervosys::autonomylib::DebugPhysicsBody::getDragVertex", ""], [14, 0, 1, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody13getDragVertexE4uint", "nervosys::autonomylib::DebugPhysicsBody::getDragVertex", ""], [14, 2, 2, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody13getDragVertexE4uint", "nervosys::autonomylib::DebugPhysicsBody::getDragVertex::index", ""], [14, 2, 2, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody13getDragVertexE4uint", "nervosys::autonomylib::DebugPhysicsBody::getDragVertex::index", ""], [14, 0, 1, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody11getFrictionEv", "nervosys::autonomylib::DebugPhysicsBody::getFriction", ""], [14, 0, 1, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody14getRestitutionEv", "nervosys::autonomylib::DebugPhysicsBody::getRestitution", ""], [14, 0, 1, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody14getShapeVertexE4uint", "nervosys::autonomylib::DebugPhysicsBody::getShapeVertex", ""], [14, 2, 2, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody14getShapeVertexE4uint", "nervosys::autonomylib::DebugPhysicsBody::getShapeVertex::index", ""], [14, 0, 1, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody15getWrenchVertexE4uint", "nervosys::autonomylib::DebugPhysicsBody::getWrenchVertex", ""], [14, 0, 1, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody15getWrenchVertexE4uint", "nervosys::autonomylib::DebugPhysicsBody::getWrenchVertex", ""], [14, 2, 2, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody15getWrenchVertexE4uint", "nervosys::autonomylib::DebugPhysicsBody::getWrenchVertex::index", ""], [14, 2, 2, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody15getWrenchVertexE4uint", "nervosys::autonomylib::DebugPhysicsBody::getWrenchVertex::index", ""], [14, 0, 1, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody10initializeEP10KinematicsP11Environment", "nervosys::autonomylib::DebugPhysicsBody::initialize", ""], [14, 2, 2, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody10initializeEP10KinematicsP11Environment", "nervosys::autonomylib::DebugPhysicsBody::initialize::environment", ""], [14, 2, 2, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody10initializeEP10KinematicsP11Environment", "nervosys::autonomylib::DebugPhysicsBody::initialize::kinematics", ""], [14, 0, 1, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody16shapeVertexCountEv", "nervosys::autonomylib::DebugPhysicsBody::shapeVertexCount", ""], [14, 0, 1, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody16updateKinematicsERKN10Kinematics5StateE", "nervosys::autonomylib::DebugPhysicsBody::updateKinematics", ""], [14, 0, 1, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody16updateKinematicsEv", "nervosys::autonomylib::DebugPhysicsBody::updateKinematics", "Update kinematics without a state"], [14, 2, 2, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody16updateKinematicsERKN10Kinematics5StateE", "nervosys::autonomylib::DebugPhysicsBody::updateKinematics::kinematics", ""], [14, 0, 1, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody17wrenchVertexCountEv", "nervosys::autonomylib::DebugPhysicsBody::wrenchVertexCount", ""], [16, 1, 1, "_CPPv4N8nervosys11autonomylib12DistanceBaseE", "nervosys::autonomylib::DistanceBase", "Subclassed by nervosys::autonomylib::DistanceSimple"], [16, 0, 1, "_CPPv4N8nervosys11autonomylib12DistanceBase12DistanceBaseERKNSt6stringE", "nervosys::autonomylib::DistanceBase::DistanceBase", ""], [16, 2, 2, "_CPPv4N8nervosys11autonomylib12DistanceBase12DistanceBaseERKNSt6stringE", "nervosys::autonomylib::DistanceBase::DistanceBase::sensor_name", ""], [16, 0, 1, "_CPPv4NK8nervosys11autonomylib12DistanceBase9getOutputEv", "nervosys::autonomylib::DistanceBase::getOutput", ""], [16, 0, 1, "_CPPv4N8nervosys11autonomylib12DistanceBase11reportStateER13StateReporter", "nervosys::autonomylib::DistanceBase::reportState", ""], [16, 2, 2, "_CPPv4N8nervosys11autonomylib12DistanceBase11reportStateER13StateReporter", "nervosys::autonomylib::DistanceBase::reportState::reporter", ""], [16, 0, 1, "_CPPv4N8nervosys11autonomylib12DistanceBase9setOutputERK18DistanceSensorData", "nervosys::autonomylib::DistanceBase::setOutput", ""], [16, 2, 2, "_CPPv4N8nervosys11autonomylib12DistanceBase9setOutputERK18DistanceSensorData", "nervosys::autonomylib::DistanceBase::setOutput::output", ""], [17, 1, 1, "_CPPv4N8nervosys11autonomylib14DistanceSimpleE", "nervosys::autonomylib::DistanceSimple", "Public Functions    inline DistanceSimple(const AutonomySimSettings::DistanceSetting &setting = AutonomySimSettings::DistanceSetting())      inline virtual void resetImplementation() override      inline virtual void update() override      virtual ~DistanceSimple() = default      inline const DistanceSimpleParams &getParams() const    Protected Functions    virtual real_T getRayLength(const Pose &pose) = 0"], [17, 0, 1, "_CPPv4N8nervosys11autonomylib14DistanceSimple14DistanceSimpleERKN19AutonomySimSettings15DistanceSettingE", "nervosys::autonomylib::DistanceSimple::DistanceSimple", ""], [17, 2, 2, "_CPPv4N8nervosys11autonomylib14DistanceSimple14DistanceSimpleERKN19AutonomySimSettings15DistanceSettingE", "nervosys::autonomylib::DistanceSimple::DistanceSimple::setting", ""], [17, 0, 1, "_CPPv4NK8nervosys11autonomylib14DistanceSimple9getParamsEv", "nervosys::autonomylib::DistanceSimple::getParams", ""], [17, 0, 1, "_CPPv4N8nervosys11autonomylib14DistanceSimple12getRayLengthERK4Pose", "nervosys::autonomylib::DistanceSimple::getRayLength", ""], [17, 2, 2, "_CPPv4N8nervosys11autonomylib14DistanceSimple12getRayLengthERK4Pose", "nervosys::autonomylib::DistanceSimple::getRayLength::pose", ""], [17, 0, 1, "_CPPv4N8nervosys11autonomylib14DistanceSimple19resetImplementationEv", "nervosys::autonomylib::DistanceSimple::resetImplementation", ""], [17, 0, 1, "_CPPv4N8nervosys11autonomylib14DistanceSimple6updateEv", "nervosys::autonomylib::DistanceSimple::update", ""], [17, 0, 1, "_CPPv4N8nervosys11autonomylib14DistanceSimpleD0Ev", "nervosys::autonomylib::DistanceSimple::~DistanceSimple", ""], [408, 1, 1, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParamsE", "nervosys::autonomylib::DistanceSimpleParams", "Public Functions    inline void initializeFromSettings(const AutonomySimSettings::DistanceSetting &settings)    Public Members    real_T min_distance = 20.0f / 100      real_T max_distance = 4000.0f / 100      Pose relative_pose{Vector3r(0, 0, -1), Quaternionr::Identity()}      bool draw_debug_points = false      bool external_controller = true      real_T uncorrelated_noise_sigma = 0.002f * 100      real_T update_latency = 0.0f      real_T update_frequency = 50      real_T startup_delay = 0"], [408, 3, 1, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams17draw_debug_pointsE", "nervosys::autonomylib::DistanceSimpleParams::draw_debug_points", ""], [408, 3, 1, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams19external_controllerE", "nervosys::autonomylib::DistanceSimpleParams::external_controller", ""], [408, 0, 1, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams22initializeFromSettingsERKN19AutonomySimSettings15DistanceSettingE", "nervosys::autonomylib::DistanceSimpleParams::initializeFromSettings", ""], [408, 2, 2, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams22initializeFromSettingsERKN19AutonomySimSettings15DistanceSettingE", "nervosys::autonomylib::DistanceSimpleParams::initializeFromSettings::settings", ""], [408, 3, 1, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams12max_distanceE", "nervosys::autonomylib::DistanceSimpleParams::max_distance", ""], [408, 3, 1, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams12min_distanceE", "nervosys::autonomylib::DistanceSimpleParams::min_distance", ""], [408, 3, 1, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams13relative_poseE", "nervosys::autonomylib::DistanceSimpleParams::relative_pose", ""], [408, 3, 1, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams13startup_delayE", "nervosys::autonomylib::DistanceSimpleParams::startup_delay", ""], [408, 3, 1, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams24uncorrelated_noise_sigmaE", "nervosys::autonomylib::DistanceSimpleParams::uncorrelated_noise_sigma", ""], [408, 3, 1, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams16update_frequencyE", "nervosys::autonomylib::DistanceSimpleParams::update_frequency", ""], [408, 3, 1, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams14update_latencyE", "nervosys::autonomylib::DistanceSimpleParams::update_latency", ""], [154, 5, 1, "_CPPv4N8nervosys11autonomylib14DrivetrainTypeE", "nervosys::autonomylib::DrivetrainType", "Values:"], [154, 6, 1, "_CPPv4N8nervosys11autonomylib14DrivetrainType11ForwardOnlyE", "nervosys::autonomylib::DrivetrainType::ForwardOnly", ""], [154, 6, 1, "_CPPv4N8nervosys11autonomylib14DrivetrainType18MaxDegreeOfFreedomE", "nervosys::autonomylib::DrivetrainType::MaxDegreeOfFreedom", ""], [18, 1, 1, "_CPPv4N8nervosys11autonomylib11EnvironmentE", "nervosys::autonomylib::Environment", "Public Functions    inline Environment()      inline Environment(const State &initial)      inline void initialize(const State &initial)      inline void setHomeGeoPoint(const GeoPoint &home_geo_point)      inline GeoPoint getHomeGeoPoint() const      inline void setPosition(const Vector3r &position)      inline const State &getInitialState() const      inline const State &getState() const      inline State &getState()      inline virtual void update() override    Protected Functions    inline virtual void resetImplementation() override      inline virtual void failResetUpdateOrdering(std::string err) override      struct State  Public Functions    inline State()      inline State(const Vector3r &position_val, const GeoPoint &geo_point_val)    Public Members    Vector3r position      GeoPoint geo_point      Vector3r gravity      real_T air_pressure      real_T temperature      real_T air_density"], [18, 0, 1, "_CPPv4N8nervosys11autonomylib11Environment11EnvironmentERK5State", "nervosys::autonomylib::Environment::Environment", ""], [18, 0, 1, "_CPPv4N8nervosys11autonomylib11Environment11EnvironmentEv", "nervosys::autonomylib::Environment::Environment", ""], [18, 2, 2, "_CPPv4N8nervosys11autonomylib11Environment11EnvironmentERK5State", "nervosys::autonomylib::Environment::Environment::initial", ""], [18, 1, 1, "_CPPv4N8nervosys11autonomylib11Environment5StateE", "nervosys::autonomylib::Environment::State", "Public Functions    inline State()      inline State(const Vector3r &position_val, const GeoPoint &geo_point_val)    Public Members    Vector3r position      GeoPoint geo_point      Vector3r gravity      real_T air_pressure      real_T temperature      real_T air_density"], [18, 0, 1, "_CPPv4N8nervosys11autonomylib11Environment5State5StateERK8Vector3rRK8GeoPoint", "nervosys::autonomylib::Environment::State::State", ""], [18, 0, 1, "_CPPv4N8nervosys11autonomylib11Environment5State5StateEv", "nervosys::autonomylib::Environment::State::State", ""], [18, 2, 2, "_CPPv4N8nervosys11autonomylib11Environment5State5StateERK8Vector3rRK8GeoPoint", "nervosys::autonomylib::Environment::State::State::geo_point_val", ""], [18, 2, 2, "_CPPv4N8nervosys11autonomylib11Environment5State5StateERK8Vector3rRK8GeoPoint", "nervosys::autonomylib::Environment::State::State::position_val", ""], [18, 3, 1, "_CPPv4N8nervosys11autonomylib11Environment5State11air_densityE", "nervosys::autonomylib::Environment::State::air_density", ""], [18, 3, 1, "_CPPv4N8nervosys11autonomylib11Environment5State12air_pressureE", "nervosys::autonomylib::Environment::State::air_pressure", ""], [18, 3, 1, "_CPPv4N8nervosys11autonomylib11Environment5State9geo_pointE", "nervosys::autonomylib::Environment::State::geo_point", ""], [18, 3, 1, "_CPPv4N8nervosys11autonomylib11Environment5State7gravityE", "nervosys::autonomylib::Environment::State::gravity", ""], [18, 3, 1, "_CPPv4N8nervosys11autonomylib11Environment5State8positionE", "nervosys::autonomylib::Environment::State::position", ""], [18, 3, 1, "_CPPv4N8nervosys11autonomylib11Environment5State11temperatureE", "nervosys::autonomylib::Environment::State::temperature", ""], [18, 0, 1, "_CPPv4N8nervosys11autonomylib11Environment23failResetUpdateOrderingENSt6stringE", "nervosys::autonomylib::Environment::failResetUpdateOrdering", ""], [18, 2, 2, "_CPPv4N8nervosys11autonomylib11Environment23failResetUpdateOrderingENSt6stringE", "nervosys::autonomylib::Environment::failResetUpdateOrdering::err", ""], [18, 0, 1, "_CPPv4NK8nervosys11autonomylib11Environment15getHomeGeoPointEv", "nervosys::autonomylib::Environment::getHomeGeoPoint", ""], [18, 0, 1, "_CPPv4NK8nervosys11autonomylib11Environment15getInitialStateEv", "nervosys::autonomylib::Environment::getInitialState", ""], [18, 0, 1, "_CPPv4N8nervosys11autonomylib11Environment8getStateEv", "nervosys::autonomylib::Environment::getState", ""], [18, 0, 1, "_CPPv4NK8nervosys11autonomylib11Environment8getStateEv", "nervosys::autonomylib::Environment::getState", ""], [18, 0, 1, "_CPPv4N8nervosys11autonomylib11Environment10initializeERK5State", "nervosys::autonomylib::Environment::initialize", ""], [18, 2, 2, "_CPPv4N8nervosys11autonomylib11Environment10initializeERK5State", "nervosys::autonomylib::Environment::initialize::initial", ""], [18, 0, 1, "_CPPv4N8nervosys11autonomylib11Environment19resetImplementationEv", "nervosys::autonomylib::Environment::resetImplementation", ""], [18, 0, 1, "_CPPv4N8nervosys11autonomylib11Environment15setHomeGeoPointERK8GeoPoint", "nervosys::autonomylib::Environment::setHomeGeoPoint", ""], [18, 2, 2, "_CPPv4N8nervosys11autonomylib11Environment15setHomeGeoPointERK8GeoPoint", "nervosys::autonomylib::Environment::setHomeGeoPoint::home_geo_point", ""], [18, 0, 1, "_CPPv4N8nervosys11autonomylib11Environment11setPositionERK8Vector3r", "nervosys::autonomylib::Environment::setPosition", ""], [18, 2, 2, "_CPPv4N8nervosys11autonomylib11Environment11setPositionERK8Vector3r", "nervosys::autonomylib::Environment::setPosition::position", ""], [18, 0, 1, "_CPPv4N8nervosys11autonomylib11Environment6updateEv", "nervosys::autonomylib::Environment::update", ""], [19, 1, 1, "_CPPv4N8nervosys11autonomylib21ExternalPhysicsEngineE", "nervosys::autonomylib::ExternalPhysicsEngine", "Public Functions    inline ExternalPhysicsEngine()      inline virtual void resetImplementation() override      inline virtual void update() override      inline virtual void reportState(StateReporter &reporter) override"], [19, 0, 1, "_CPPv4N8nervosys11autonomylib21ExternalPhysicsEngine21ExternalPhysicsEngineEv", "nervosys::autonomylib::ExternalPhysicsEngine::ExternalPhysicsEngine", ""], [19, 0, 1, "_CPPv4N8nervosys11autonomylib21ExternalPhysicsEngine11reportStateER13StateReporter", "nervosys::autonomylib::ExternalPhysicsEngine::reportState", ""], [19, 2, 2, "_CPPv4N8nervosys11autonomylib21ExternalPhysicsEngine11reportStateER13StateReporter", "nervosys::autonomylib::ExternalPhysicsEngine::reportState::reporter", ""], [19, 0, 1, "_CPPv4N8nervosys11autonomylib21ExternalPhysicsEngine19resetImplementationEv", "nervosys::autonomylib::ExternalPhysicsEngine::resetImplementation", ""], [19, 0, 1, "_CPPv4N8nervosys11autonomylib21ExternalPhysicsEngine6updateEv", "nervosys::autonomylib::ExternalPhysicsEngine::update", ""], [20, 1, 1, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngineE", "nervosys::autonomylib::FastPhysicsEngine", "Public Functions    inline FastPhysicsEngine(bool enable_ground_lock = true, Vector3r wind = Vector3r::Zero(), Vector3r ext_force = Vector3r::Zero())      inline virtual void resetImplementation() override      inline virtual void insert(PhysicsBody *body_ptr) override      inline virtual void update() override      inline virtual void reportState(StateReporter &reporter) override      inline virtual void setWind(const Vector3r &wind) override      inline virtual void setExtForce(const Vector3r &ext_force) override"], [20, 0, 1, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine17FastPhysicsEngineEb8Vector3r8Vector3r", "nervosys::autonomylib::FastPhysicsEngine::FastPhysicsEngine", ""], [20, 2, 2, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine17FastPhysicsEngineEb8Vector3r8Vector3r", "nervosys::autonomylib::FastPhysicsEngine::FastPhysicsEngine::enable_ground_lock", ""], [20, 2, 2, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine17FastPhysicsEngineEb8Vector3r8Vector3r", "nervosys::autonomylib::FastPhysicsEngine::FastPhysicsEngine::ext_force", ""], [20, 2, 2, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine17FastPhysicsEngineEb8Vector3r8Vector3r", "nervosys::autonomylib::FastPhysicsEngine::FastPhysicsEngine::wind", ""], [20, 0, 1, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine6insertEP11PhysicsBody", "nervosys::autonomylib::FastPhysicsEngine::insert", ""], [20, 2, 2, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine6insertEP11PhysicsBody", "nervosys::autonomylib::FastPhysicsEngine::insert::body_ptr", ""], [20, 0, 1, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine11reportStateER13StateReporter", "nervosys::autonomylib::FastPhysicsEngine::reportState", ""], [20, 2, 2, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine11reportStateER13StateReporter", "nervosys::autonomylib::FastPhysicsEngine::reportState::reporter", ""], [20, 0, 1, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine19resetImplementationEv", "nervosys::autonomylib::FastPhysicsEngine::resetImplementation", ""], [20, 0, 1, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine11setExtForceERK8Vector3r", "nervosys::autonomylib::FastPhysicsEngine::setExtForce", ""], [20, 2, 2, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine11setExtForceERK8Vector3r", "nervosys::autonomylib::FastPhysicsEngine::setExtForce::ext_force", ""], [20, 0, 1, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine7setWindERK8Vector3r", "nervosys::autonomylib::FastPhysicsEngine::setWind", ""], [20, 2, 2, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine7setWindERK8Vector3r", "nervosys::autonomylib::FastPhysicsEngine::setWind::wind", ""], [20, 0, 1, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine6updateEv", "nervosys::autonomylib::FastPhysicsEngine::update", ""], [21, 1, 1, "_CPPv4N8nervosys11autonomylib7GpsBaseE", "nervosys::autonomylib::GpsBase", "Subclassed by nervosys::autonomylib::GpsSimple"], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase22PositionCovarianceType28COVARIANCE_TYPE_APPROXIMATEDE", "nervosys::autonomylib::GpsBase::COVARIANCE_TYPE_APPROXIMATED", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase22PositionCovarianceType30COVARIANCE_TYPE_DIAGONAL_KNOWNE", "nervosys::autonomylib::GpsBase::COVARIANCE_TYPE_DIAGONAL_KNOWN", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase22PositionCovarianceType21COVARIANCE_TYPE_KNOWNE", "nervosys::autonomylib::GpsBase::COVARIANCE_TYPE_KNOWN", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase22PositionCovarianceType23COVARIANCE_TYPE_UNKNOWNE", "nervosys::autonomylib::GpsBase::COVARIANCE_TYPE_UNKNOWN", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase11GnssFixType15GNSS_FIX_2D_FIXE", "nervosys::autonomylib::GpsBase::GNSS_FIX_2D_FIX", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase11GnssFixType15GNSS_FIX_3D_FIXE", "nervosys::autonomylib::GpsBase::GNSS_FIX_3D_FIX", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase11GnssFixType15GNSS_FIX_NO_FIXE", "nervosys::autonomylib::GpsBase::GNSS_FIX_NO_FIX", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase11GnssFixType18GNSS_FIX_TIME_ONLYE", "nervosys::autonomylib::GpsBase::GNSS_FIX_TIME_ONLY", ""], [21, 5, 1, "_CPPv4N8nervosys11autonomylib7GpsBase11GnssFixTypeE", "nervosys::autonomylib::GpsBase::GnssFixType", "Values:"], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase11GnssFixType15GNSS_FIX_2D_FIXE", "nervosys::autonomylib::GpsBase::GnssFixType::GNSS_FIX_2D_FIX", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase11GnssFixType15GNSS_FIX_3D_FIXE", "nervosys::autonomylib::GpsBase::GnssFixType::GNSS_FIX_3D_FIX", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase11GnssFixType15GNSS_FIX_NO_FIXE", "nervosys::autonomylib::GpsBase::GnssFixType::GNSS_FIX_NO_FIX", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase11GnssFixType18GNSS_FIX_TIME_ONLYE", "nervosys::autonomylib::GpsBase::GnssFixType::GNSS_FIX_TIME_ONLY", ""], [21, 1, 1, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReportE", "nervosys::autonomylib::GpsBase::GnssReport", "Public Members    GeoPoint geo_point      real_T eph      real_T epv      Vector3r velocity      GnssFixType fix_type      uint64_t time_utc = 0"], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport3ephE", "nervosys::autonomylib::GpsBase::GnssReport::eph", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport3epvE", "nervosys::autonomylib::GpsBase::GnssReport::epv", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport8fix_typeE", "nervosys::autonomylib::GpsBase::GnssReport::fix_type", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport9geo_pointE", "nervosys::autonomylib::GpsBase::GnssReport::geo_point", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport8time_utcE", "nervosys::autonomylib::GpsBase::GnssReport::time_utc", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport8velocityE", "nervosys::autonomylib::GpsBase::GnssReport::velocity", ""], [21, 0, 1, "_CPPv4N8nervosys11autonomylib7GpsBase7GpsBaseERKNSt6stringE", "nervosys::autonomylib::GpsBase::GpsBase", ""], [21, 2, 2, "_CPPv4N8nervosys11autonomylib7GpsBase7GpsBaseERKNSt6stringE", "nervosys::autonomylib::GpsBase::GpsBase::sensor_name", ""], [21, 1, 1, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPointE", "nervosys::autonomylib::GpsBase::GpsPoint", "Public Functions    inline GpsPoint()      inline GpsPoint(double latitude_val, double longitude_val, float altitude_val, int health_val = -1, float height_val = std::numeric_limits<float>::quiet_NaN())      inline string to_string()    Public Members    double latitude      double longitude      float height      float altitude      int health"], [21, 0, 1, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8GpsPointEddfif", "nervosys::autonomylib::GpsBase::GpsPoint::GpsPoint", ""], [21, 0, 1, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8GpsPointEv", "nervosys::autonomylib::GpsBase::GpsPoint::GpsPoint", ""], [21, 2, 2, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8GpsPointEddfif", "nervosys::autonomylib::GpsBase::GpsPoint::GpsPoint::altitude_val", ""], [21, 2, 2, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8GpsPointEddfif", "nervosys::autonomylib::GpsBase::GpsPoint::GpsPoint::health_val", ""], [21, 2, 2, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8GpsPointEddfif", "nervosys::autonomylib::GpsBase::GpsPoint::GpsPoint::height_val", ""], [21, 2, 2, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8GpsPointEddfif", "nervosys::autonomylib::GpsBase::GpsPoint::GpsPoint::latitude_val", ""], [21, 2, 2, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8GpsPointEddfif", "nervosys::autonomylib::GpsBase::GpsPoint::GpsPoint::longitude_val", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8altitudeE", "nervosys::autonomylib::GpsBase::GpsPoint::altitude", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint6healthE", "nervosys::autonomylib::GpsBase::GpsPoint::health", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint6heightE", "nervosys::autonomylib::GpsBase::GpsPoint::height", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8latitudeE", "nervosys::autonomylib::GpsBase::GpsPoint::latitude", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint9longitudeE", "nervosys::autonomylib::GpsBase::GpsPoint::longitude", ""], [21, 0, 1, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint9to_stringEv", "nervosys::autonomylib::GpsBase::GpsPoint::to_string", ""], [21, 1, 1, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFixE", "nervosys::autonomylib::GpsBase::NavSatFix", "Public Members    GeoPoint geo_point      double position_covariance[9] = {}      NavSatStatus status      PositionCovarianceType position_covariance_type"], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFix9geo_pointE", "nervosys::autonomylib::GpsBase::NavSatFix::geo_point", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFix19position_covarianceE", "nervosys::autonomylib::GpsBase::NavSatFix::position_covariance", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFix24position_covariance_typeE", "nervosys::autonomylib::GpsBase::NavSatFix::position_covariance_type", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFix6statusE", "nervosys::autonomylib::GpsBase::NavSatFix::status", ""], [21, 1, 1, "_CPPv4N8nervosys11autonomylib7GpsBase12NavSatStatusE", "nervosys::autonomylib::GpsBase::NavSatStatus", "Public Members    NavSatStatusType status      NavSatStatusServiceType service"], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase12NavSatStatus7serviceE", "nervosys::autonomylib::GpsBase::NavSatStatus::service", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase12NavSatStatus6statusE", "nervosys::autonomylib::GpsBase::NavSatStatus::status", ""], [21, 5, 1, "_CPPv4N8nervosys11autonomylib7GpsBase23NavSatStatusServiceTypeE", "nervosys::autonomylib::GpsBase::NavSatStatusServiceType", "Values:"], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase23NavSatStatusServiceType15SERVICE_COMPASSE", "nervosys::autonomylib::GpsBase::NavSatStatusServiceType::SERVICE_COMPASS", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase23NavSatStatusServiceType15SERVICE_GALILEOE", "nervosys::autonomylib::GpsBase::NavSatStatusServiceType::SERVICE_GALILEO", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase23NavSatStatusServiceType15SERVICE_GLONASSE", "nervosys::autonomylib::GpsBase::NavSatStatusServiceType::SERVICE_GLONASS", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase23NavSatStatusServiceType11SERVICE_GPSE", "nervosys::autonomylib::GpsBase::NavSatStatusServiceType::SERVICE_GPS", ""], [21, 5, 1, "_CPPv4N8nervosys11autonomylib7GpsBase16NavSatStatusTypeE", "nervosys::autonomylib::GpsBase::NavSatStatusType", "Values:"], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase16NavSatStatusType10STATUS_FIXE", "nervosys::autonomylib::GpsBase::NavSatStatusType::STATUS_FIX", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase16NavSatStatusType15STATUS_GBAS_FIXE", "nervosys::autonomylib::GpsBase::NavSatStatusType::STATUS_GBAS_FIX", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase16NavSatStatusType13STATUS_NO_FIXE", "nervosys::autonomylib::GpsBase::NavSatStatusType::STATUS_NO_FIX", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase16NavSatStatusType15STATUS_SBAS_FIXE", "nervosys::autonomylib::GpsBase::NavSatStatusType::STATUS_SBAS_FIX", ""], [21, 1, 1, "_CPPv4N8nervosys11autonomylib7GpsBase6OutputE", "nervosys::autonomylib::GpsBase::Output", "Public Members    TTimePoint time_stamp      GnssReport gnss      bool is_valid = false"], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase6Output4gnssE", "nervosys::autonomylib::GpsBase::Output::gnss", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase6Output8is_validE", "nervosys::autonomylib::GpsBase::Output::is_valid", ""], [21, 3, 1, "_CPPv4N8nervosys11autonomylib7GpsBase6Output10time_stampE", "nervosys::autonomylib::GpsBase::Output::time_stamp", ""], [21, 5, 1, "_CPPv4N8nervosys11autonomylib7GpsBase22PositionCovarianceTypeE", "nervosys::autonomylib::GpsBase::PositionCovarianceType", "Values:"], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase22PositionCovarianceType28COVARIANCE_TYPE_APPROXIMATEDE", "nervosys::autonomylib::GpsBase::PositionCovarianceType::COVARIANCE_TYPE_APPROXIMATED", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase22PositionCovarianceType30COVARIANCE_TYPE_DIAGONAL_KNOWNE", "nervosys::autonomylib::GpsBase::PositionCovarianceType::COVARIANCE_TYPE_DIAGONAL_KNOWN", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase22PositionCovarianceType21COVARIANCE_TYPE_KNOWNE", "nervosys::autonomylib::GpsBase::PositionCovarianceType::COVARIANCE_TYPE_KNOWN", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase22PositionCovarianceType23COVARIANCE_TYPE_UNKNOWNE", "nervosys::autonomylib::GpsBase::PositionCovarianceType::COVARIANCE_TYPE_UNKNOWN", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase23NavSatStatusServiceType15SERVICE_COMPASSE", "nervosys::autonomylib::GpsBase::SERVICE_COMPASS", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase23NavSatStatusServiceType15SERVICE_GALILEOE", "nervosys::autonomylib::GpsBase::SERVICE_GALILEO", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase23NavSatStatusServiceType15SERVICE_GLONASSE", "nervosys::autonomylib::GpsBase::SERVICE_GLONASS", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase23NavSatStatusServiceType11SERVICE_GPSE", "nervosys::autonomylib::GpsBase::SERVICE_GPS", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase16NavSatStatusType10STATUS_FIXE", "nervosys::autonomylib::GpsBase::STATUS_FIX", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase16NavSatStatusType15STATUS_GBAS_FIXE", "nervosys::autonomylib::GpsBase::STATUS_GBAS_FIX", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase16NavSatStatusType13STATUS_NO_FIXE", "nervosys::autonomylib::GpsBase::STATUS_NO_FIX", ""], [21, 6, 1, "_CPPv4N8nervosys11autonomylib7GpsBase16NavSatStatusType15STATUS_SBAS_FIXE", "nervosys::autonomylib::GpsBase::STATUS_SBAS_FIX", ""], [21, 0, 1, "_CPPv4NK8nervosys11autonomylib7GpsBase9getOutputEv", "nervosys::autonomylib::GpsBase::getOutput", ""], [21, 0, 1, "_CPPv4N8nervosys11autonomylib7GpsBase11reportStateER13StateReporter", "nervosys::autonomylib::GpsBase::reportState", ""], [21, 2, 2, "_CPPv4N8nervosys11autonomylib7GpsBase11reportStateER13StateReporter", "nervosys::autonomylib::GpsBase::reportState::reporter", ""], [21, 0, 1, "_CPPv4N8nervosys11autonomylib7GpsBase9setOutputERK6Output", "nervosys::autonomylib::GpsBase::setOutput", ""], [21, 2, 2, "_CPPv4N8nervosys11autonomylib7GpsBase9setOutputERK6Output", "nervosys::autonomylib::GpsBase::setOutput::output", ""], [22, 1, 1, "_CPPv4N8nervosys11autonomylib9GpsSimpleE", "nervosys::autonomylib::GpsSimple", "Public Functions    inline GpsSimple(const AutonomySimSettings::GpsSetting &setting = AutonomySimSettings::GpsSetting())      inline virtual void resetImplementation() override      inline virtual void update() override      virtual ~GpsSimple() = default"], [22, 0, 1, "_CPPv4N8nervosys11autonomylib9GpsSimple9GpsSimpleERKN19AutonomySimSettings10GpsSettingE", "nervosys::autonomylib::GpsSimple::GpsSimple", ""], [22, 2, 2, "_CPPv4N8nervosys11autonomylib9GpsSimple9GpsSimpleERKN19AutonomySimSettings10GpsSettingE", "nervosys::autonomylib::GpsSimple::GpsSimple::setting", ""], [22, 0, 1, "_CPPv4N8nervosys11autonomylib9GpsSimple19resetImplementationEv", "nervosys::autonomylib::GpsSimple::resetImplementation", ""], [22, 0, 1, "_CPPv4N8nervosys11autonomylib9GpsSimple6updateEv", "nervosys::autonomylib::GpsSimple::update", ""], [22, 0, 1, "_CPPv4N8nervosys11autonomylib9GpsSimpleD0Ev", "nervosys::autonomylib::GpsSimple::~GpsSimple", ""], [415, 1, 1, "_CPPv4N8nervosys11autonomylib15GpsSimpleParamsE", "nervosys::autonomylib::GpsSimpleParams", "Public Functions    inline void initializeFromSettings(const AutonomySimSettings::GpsSetting &settings)    Public Members    real_T eph_time_constant = 0.9f      real_T epv_time_constant = 0.9f      real_T eph_initial = 100.0f      real_T epv_initial = 100.0f      real_T eph_final = 0.1f      real_T epv_final = 0.1f      real_T eph_min_3d = 3.0f      real_T eph_min_2d = 4.0f      real_T update_latency = 0.2f      real_T update_frequency = 50      real_T startup_delay = 1"], [415, 3, 1, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams9eph_finalE", "nervosys::autonomylib::GpsSimpleParams::eph_final", ""], [415, 3, 1, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams11eph_initialE", "nervosys::autonomylib::GpsSimpleParams::eph_initial", ""], [415, 3, 1, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams10eph_min_2dE", "nervosys::autonomylib::GpsSimpleParams::eph_min_2d", ""], [415, 3, 1, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams10eph_min_3dE", "nervosys::autonomylib::GpsSimpleParams::eph_min_3d", ""], [415, 3, 1, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams17eph_time_constantE", "nervosys::autonomylib::GpsSimpleParams::eph_time_constant", ""], [415, 3, 1, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams9epv_finalE", "nervosys::autonomylib::GpsSimpleParams::epv_final", ""], [415, 3, 1, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams11epv_initialE", "nervosys::autonomylib::GpsSimpleParams::epv_initial", ""], [415, 3, 1, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams17epv_time_constantE", "nervosys::autonomylib::GpsSimpleParams::epv_time_constant", ""], [415, 0, 1, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams22initializeFromSettingsERKN19AutonomySimSettings10GpsSettingE", "nervosys::autonomylib::GpsSimpleParams::initializeFromSettings", ""], [415, 2, 2, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams22initializeFromSettingsERKN19AutonomySimSettings10GpsSettingE", "nervosys::autonomylib::GpsSimpleParams::initializeFromSettings::settings", ""], [415, 3, 1, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams13startup_delayE", "nervosys::autonomylib::GpsSimpleParams::startup_delay", ""], [415, 3, 1, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams16update_frequencyE", "nervosys::autonomylib::GpsSimpleParams::update_frequency", ""], [415, 3, 1, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams14update_latencyE", "nervosys::autonomylib::GpsSimpleParams::update_latency", ""], [23, 1, 1, "_CPPv4N8nervosys11autonomylib9IGeoFenceE", "nervosys::autonomylib::IGeoFence", "Subclassed by nervosys::autonomylib::CubeGeoFence, nervosys::autonomylib::SphereGeoFence"], [23, 0, 1, "_CPPv4N8nervosys11autonomylib9IGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::IGeoFence::checkFence", ""], [23, 2, 2, "_CPPv4N8nervosys11autonomylib9IGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::IGeoFence::checkFence::allow", ""], [23, 2, 2, "_CPPv4N8nervosys11autonomylib9IGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::IGeoFence::checkFence::cur_loc", ""], [23, 2, 2, "_CPPv4N8nervosys11autonomylib9IGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::IGeoFence::checkFence::dest_loc", ""], [23, 2, 2, "_CPPv4N8nervosys11autonomylib9IGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::IGeoFence::checkFence::in_fence", ""], [23, 0, 1, "_CPPv4N8nervosys11autonomylib9IGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::IGeoFence::setBoundry", ""], [23, 2, 2, "_CPPv4N8nervosys11autonomylib9IGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::IGeoFence::setBoundry::max_z", ""], [23, 2, 2, "_CPPv4N8nervosys11autonomylib9IGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::IGeoFence::setBoundry::min_z", ""], [23, 2, 2, "_CPPv4N8nervosys11autonomylib9IGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::IGeoFence::setBoundry::origin", ""], [23, 2, 2, "_CPPv4N8nervosys11autonomylib9IGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::IGeoFence::setBoundry::xy_length", ""], [23, 0, 1, "_CPPv4NK8nervosys11autonomylib9IGeoFence8toStringEv", "nervosys::autonomylib::IGeoFence::toString", ""], [23, 0, 1, "_CPPv4N8nervosys11autonomylib9IGeoFenceD0Ev", "nervosys::autonomylib::IGeoFence::~IGeoFence", ""], [24, 1, 1, "_CPPv4N8nervosys11autonomylib9ImuSimpleE", "nervosys::autonomylib::ImuSimple", "Public Functions    inline ImuSimple(const AutonomySimSettings::ImuSetting &setting = AutonomySimSettings::ImuSetting())      inline virtual void resetImplementation() override      inline virtual void update() override      virtual ~ImuSimple() = default"], [24, 0, 1, "_CPPv4N8nervosys11autonomylib9ImuSimple9ImuSimpleERKN19AutonomySimSettings10ImuSettingE", "nervosys::autonomylib::ImuSimple::ImuSimple", ""], [24, 2, 2, "_CPPv4N8nervosys11autonomylib9ImuSimple9ImuSimpleERKN19AutonomySimSettings10ImuSettingE", "nervosys::autonomylib::ImuSimple::ImuSimple::setting", ""], [419, 1, 1, "_CPPv4N8nervosys11autonomylib9ImuSimple5StateE", "nervosys::autonomylib::ImuSimple::State", "Public Members    Vector3r gyroscope_bias      Vector3r accelerometer_bias"], [419, 3, 1, "_CPPv4N8nervosys11autonomylib9ImuSimple5State18accelerometer_biasE", "nervosys::autonomylib::ImuSimple::State::accelerometer_bias", ""], [419, 3, 1, "_CPPv4N8nervosys11autonomylib9ImuSimple5State14gyroscope_biasE", "nervosys::autonomylib::ImuSimple::State::gyroscope_bias", ""], [24, 0, 1, "_CPPv4N8nervosys11autonomylib9ImuSimple19resetImplementationEv", "nervosys::autonomylib::ImuSimple::resetImplementation", ""], [24, 0, 1, "_CPPv4N8nervosys11autonomylib9ImuSimple6updateEv", "nervosys::autonomylib::ImuSimple::update", ""], [24, 0, 1, "_CPPv4N8nervosys11autonomylib9ImuSimpleD0Ev", "nervosys::autonomylib::ImuSimple::~ImuSimple", ""], [416, 1, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParamsE", "nervosys::autonomylib::ImuSimpleParams", "Public Functions    inline void initializeFromSettings(const AutonomySimSettings::ImuSetting &settings)    Public Members    struct nervosys::autonomylib::ImuSimpleParams::Gyroscope gyro      struct nervosys::autonomylib::ImuSimpleParams::Accelerometer accel      real_T min_sample_time = 1 / 1000.0f      struct Accelerometer  Public Members    real_T vrw = 0.24f * EarthUtils::Gravity / 1.0E3f      real_T tau = 800      real_T bias_stability = 36.0f * 1E-6f * EarthUtils::Gravity      Vector3r turn_on_bias = Vector3r::Zero()      struct Gyroscope  Public Members    real_T arw = 0.30f / sqrt(3600.0f) * M_PIf / 180      real_T tau = 500      real_T bias_stability = 4.6f / 3600 * M_PIf / 180      Vector3r turn_on_bias = Vector3r::Zero()"], [416, 1, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13AccelerometerE", "nervosys::autonomylib::ImuSimpleParams::Accelerometer", "Public Members    real_T vrw = 0.24f * EarthUtils::Gravity / 1.0E3f      real_T tau = 800      real_T bias_stability = 36.0f * 1E-6f * EarthUtils::Gravity      Vector3r turn_on_bias = Vector3r::Zero()"], [416, 3, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13Accelerometer14bias_stabilityE", "nervosys::autonomylib::ImuSimpleParams::Accelerometer::bias_stability", ""], [416, 3, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13Accelerometer3tauE", "nervosys::autonomylib::ImuSimpleParams::Accelerometer::tau", ""], [416, 3, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13Accelerometer12turn_on_biasE", "nervosys::autonomylib::ImuSimpleParams::Accelerometer::turn_on_bias", ""], [416, 3, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13Accelerometer3vrwE", "nervosys::autonomylib::ImuSimpleParams::Accelerometer::vrw", ""], [416, 1, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9GyroscopeE", "nervosys::autonomylib::ImuSimpleParams::Gyroscope", "Public Members    real_T arw = 0.30f / sqrt(3600.0f) * M_PIf / 180      real_T tau = 500      real_T bias_stability = 4.6f / 3600 * M_PIf / 180      Vector3r turn_on_bias = Vector3r::Zero()"], [416, 3, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9Gyroscope3arwE", "nervosys::autonomylib::ImuSimpleParams::Gyroscope::arw", ""], [416, 3, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9Gyroscope14bias_stabilityE", "nervosys::autonomylib::ImuSimpleParams::Gyroscope::bias_stability", ""], [416, 3, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9Gyroscope3tauE", "nervosys::autonomylib::ImuSimpleParams::Gyroscope::tau", ""], [416, 3, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9Gyroscope12turn_on_biasE", "nervosys::autonomylib::ImuSimpleParams::Gyroscope::turn_on_bias", ""], [416, 3, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams5accelE", "nervosys::autonomylib::ImuSimpleParams::accel", ""], [416, 3, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams4gyroE", "nervosys::autonomylib::ImuSimpleParams::gyro", ""], [416, 0, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams22initializeFromSettingsERKN19AutonomySimSettings10ImuSettingE", "nervosys::autonomylib::ImuSimpleParams::initializeFromSettings", ""], [416, 2, 2, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams22initializeFromSettingsERKN19AutonomySimSettings10ImuSettingE", "nervosys::autonomylib::ImuSimpleParams::initializeFromSettings::settings", ""], [416, 3, 1, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams15min_sample_timeE", "nervosys::autonomylib::ImuSimpleParams::min_sample_time", ""], [25, 1, 1, "_CPPv4N8nervosys11autonomylib10KinematicsE", "nervosys::autonomylib::Kinematics", "Public Functions    inline Kinematics(const State &initial = State::zero())      inline void initialize(const State &initial)      inline virtual void resetImplementation() override      inline virtual void update() override      inline virtual void reportState(StateReporter &reporter) override      inline const Pose &getPose() const      inline void setPose(const Pose &pose)      inline const Twist &getTwist() const      inline void setTwist(const Twist &twist)      inline const State &getState() const      inline void setState(const State &state)      inline const State &getInitialState() const      struct State  Public Members    Pose pose      Twist twist      Accelerations accelerations    Public Static Functions    static inline State zero()"], [25, 0, 1, "_CPPv4N8nervosys11autonomylib10Kinematics10KinematicsERK5State", "nervosys::autonomylib::Kinematics::Kinematics", ""], [25, 2, 2, "_CPPv4N8nervosys11autonomylib10Kinematics10KinematicsERK5State", "nervosys::autonomylib::Kinematics::Kinematics::initial", ""], [25, 1, 1, "_CPPv4N8nervosys11autonomylib10Kinematics5StateE", "nervosys::autonomylib::Kinematics::State", "Public Members    Pose pose      Twist twist      Accelerations accelerations    Public Static Functions    static inline State zero()"], [25, 3, 1, "_CPPv4N8nervosys11autonomylib10Kinematics5State13accelerationsE", "nervosys::autonomylib::Kinematics::State::accelerations", ""], [25, 3, 1, "_CPPv4N8nervosys11autonomylib10Kinematics5State4poseE", "nervosys::autonomylib::Kinematics::State::pose", ""], [25, 3, 1, "_CPPv4N8nervosys11autonomylib10Kinematics5State5twistE", "nervosys::autonomylib::Kinematics::State::twist", ""], [25, 0, 1, "_CPPv4N8nervosys11autonomylib10Kinematics5State4zeroEv", "nervosys::autonomylib::Kinematics::State::zero", ""], [25, 0, 1, "_CPPv4NK8nervosys11autonomylib10Kinematics15getInitialStateEv", "nervosys::autonomylib::Kinematics::getInitialState", ""], [25, 0, 1, "_CPPv4NK8nervosys11autonomylib10Kinematics7getPoseEv", "nervosys::autonomylib::Kinematics::getPose", ""], [25, 0, 1, "_CPPv4NK8nervosys11autonomylib10Kinematics8getStateEv", "nervosys::autonomylib::Kinematics::getState", ""], [25, 0, 1, "_CPPv4NK8nervosys11autonomylib10Kinematics8getTwistEv", "nervosys::autonomylib::Kinematics::getTwist", ""], [25, 0, 1, "_CPPv4N8nervosys11autonomylib10Kinematics10initializeERK5State", "nervosys::autonomylib::Kinematics::initialize", ""], [25, 2, 2, "_CPPv4N8nervosys11autonomylib10Kinematics10initializeERK5State", "nervosys::autonomylib::Kinematics::initialize::initial", ""], [25, 0, 1, "_CPPv4N8nervosys11autonomylib10Kinematics11reportStateER13StateReporter", "nervosys::autonomylib::Kinematics::reportState", ""], [25, 2, 2, "_CPPv4N8nervosys11autonomylib10Kinematics11reportStateER13StateReporter", "nervosys::autonomylib::Kinematics::reportState::reporter", ""], [25, 0, 1, "_CPPv4N8nervosys11autonomylib10Kinematics19resetImplementationEv", "nervosys::autonomylib::Kinematics::resetImplementation", ""], [25, 0, 1, "_CPPv4N8nervosys11autonomylib10Kinematics7setPoseERK4Pose", "nervosys::autonomylib::Kinematics::setPose", ""], [25, 2, 2, "_CPPv4N8nervosys11autonomylib10Kinematics7setPoseERK4Pose", "nervosys::autonomylib::Kinematics::setPose::pose", ""], [25, 0, 1, "_CPPv4N8nervosys11autonomylib10Kinematics8setStateERK5State", "nervosys::autonomylib::Kinematics::setState", ""], [25, 2, 2, "_CPPv4N8nervosys11autonomylib10Kinematics8setStateERK5State", "nervosys::autonomylib::Kinematics::setState::state", ""], [25, 0, 1, "_CPPv4N8nervosys11autonomylib10Kinematics8setTwistERK5Twist", "nervosys::autonomylib::Kinematics::setTwist", ""], [25, 2, 2, "_CPPv4N8nervosys11autonomylib10Kinematics8setTwistERK5Twist", "nervosys::autonomylib::Kinematics::setTwist::twist", ""], [25, 0, 1, "_CPPv4N8nervosys11autonomylib10Kinematics6updateEv", "nervosys::autonomylib::Kinematics::update", ""], [155, 5, 1, "_CPPv4N8nervosys11autonomylib11LandedStateE", "nervosys::autonomylib::LandedState", "Values:"], [155, 6, 1, "_CPPv4N8nervosys11autonomylib11LandedState6FlyingE", "nervosys::autonomylib::LandedState::Flying", ""], [155, 6, 1, "_CPPv4N8nervosys11autonomylib11LandedState6LandedE", "nervosys::autonomylib::LandedState::Landed", ""], [26, 1, 1, "_CPPv4N8nervosys11autonomylib9LidarBaseE", "nervosys::autonomylib::LidarBase", "Subclassed by nervosys::autonomylib::LidarSimple"], [26, 0, 1, "_CPPv4N8nervosys11autonomylib9LidarBase9LidarBaseERKNSt6stringE", "nervosys::autonomylib::LidarBase::LidarBase", ""], [26, 2, 2, "_CPPv4N8nervosys11autonomylib9LidarBase9LidarBaseERKNSt6stringE", "nervosys::autonomylib::LidarBase::LidarBase::sensor_name", ""], [26, 0, 1, "_CPPv4NK8nervosys11autonomylib9LidarBase9getOutputEv", "nervosys::autonomylib::LidarBase::getOutput", ""], [26, 0, 1, "_CPPv4N8nervosys11autonomylib9LidarBase11reportStateER13StateReporter", "nervosys::autonomylib::LidarBase::reportState", ""], [26, 2, 2, "_CPPv4N8nervosys11autonomylib9LidarBase11reportStateER13StateReporter", "nervosys::autonomylib::LidarBase::reportState::reporter", ""], [26, 0, 1, "_CPPv4N8nervosys11autonomylib9LidarBase9setOutputERK9LidarData", "nervosys::autonomylib::LidarBase::setOutput", ""], [26, 2, 2, "_CPPv4N8nervosys11autonomylib9LidarBase9setOutputERK9LidarData", "nervosys::autonomylib::LidarBase::setOutput::output", ""], [27, 1, 1, "_CPPv4N8nervosys11autonomylib11LidarSimpleE", "nervosys::autonomylib::LidarSimple", "Public Functions    inline LidarSimple(const AutonomySimSettings::LidarSetting &setting = AutonomySimSettings::LidarSetting())      inline virtual void resetImplementation() override      inline virtual void update() override      inline virtual void reportState(StateReporter &reporter) override      virtual ~LidarSimple() = default      inline const LidarSimpleParams &getParams() const    Protected Functions    virtual void getPointCloud(const Pose &lidar_pose, const Pose &vehicle_pose, TTimeDelta delta_time, vector<real_T> &point_cloud, vector<int> &segmentation_cloud) = 0"], [27, 0, 1, "_CPPv4N8nervosys11autonomylib11LidarSimple11LidarSimpleERKN19AutonomySimSettings12LidarSettingE", "nervosys::autonomylib::LidarSimple::LidarSimple", ""], [27, 2, 2, "_CPPv4N8nervosys11autonomylib11LidarSimple11LidarSimpleERKN19AutonomySimSettings12LidarSettingE", "nervosys::autonomylib::LidarSimple::LidarSimple::setting", ""], [27, 0, 1, "_CPPv4NK8nervosys11autonomylib11LidarSimple9getParamsEv", "nervosys::autonomylib::LidarSimple::getParams", ""], [27, 0, 1, "_CPPv4N8nervosys11autonomylib11LidarSimple13getPointCloudERK4PoseRK4Pose10TTimeDeltaR6vectorI6real_TER6vectorIiE", "nervosys::autonomylib::LidarSimple::getPointCloud", ""], [27, 2, 2, "_CPPv4N8nervosys11autonomylib11LidarSimple13getPointCloudERK4PoseRK4Pose10TTimeDeltaR6vectorI6real_TER6vectorIiE", "nervosys::autonomylib::LidarSimple::getPointCloud::delta_time", ""], [27, 2, 2, "_CPPv4N8nervosys11autonomylib11LidarSimple13getPointCloudERK4PoseRK4Pose10TTimeDeltaR6vectorI6real_TER6vectorIiE", "nervosys::autonomylib::LidarSimple::getPointCloud::lidar_pose", ""], [27, 2, 2, "_CPPv4N8nervosys11autonomylib11LidarSimple13getPointCloudERK4PoseRK4Pose10TTimeDeltaR6vectorI6real_TER6vectorIiE", "nervosys::autonomylib::LidarSimple::getPointCloud::point_cloud", ""], [27, 2, 2, "_CPPv4N8nervosys11autonomylib11LidarSimple13getPointCloudERK4PoseRK4Pose10TTimeDeltaR6vectorI6real_TER6vectorIiE", "nervosys::autonomylib::LidarSimple::getPointCloud::segmentation_cloud", ""], [27, 2, 2, "_CPPv4N8nervosys11autonomylib11LidarSimple13getPointCloudERK4PoseRK4Pose10TTimeDeltaR6vectorI6real_TER6vectorIiE", "nervosys::autonomylib::LidarSimple::getPointCloud::vehicle_pose", ""], [27, 0, 1, "_CPPv4N8nervosys11autonomylib11LidarSimple11reportStateER13StateReporter", "nervosys::autonomylib::LidarSimple::reportState", ""], [27, 2, 2, "_CPPv4N8nervosys11autonomylib11LidarSimple11reportStateER13StateReporter", "nervosys::autonomylib::LidarSimple::reportState::reporter", ""], [27, 0, 1, "_CPPv4N8nervosys11autonomylib11LidarSimple19resetImplementationEv", "nervosys::autonomylib::LidarSimple::resetImplementation", ""], [27, 0, 1, "_CPPv4N8nervosys11autonomylib11LidarSimple6updateEv", "nervosys::autonomylib::LidarSimple::update", ""], [27, 0, 1, "_CPPv4N8nervosys11autonomylib11LidarSimpleD0Ev", "nervosys::autonomylib::LidarSimple::~LidarSimple", ""], [421, 1, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParamsE", "nervosys::autonomylib::LidarSimpleParams", "Public Functions    inline void initializeFromSettings(const AutonomySimSettings::LidarSetting &settings)    Public Members    uint number_of_channels = 16      real_T range = 10000.0f / 100      uint points_per_second = 100000      uint horizontal_rotation_frequency = 10      real_T horizontal_FOV_start = 0      real_T horizontal_FOV_end = 359      real_T vertical_FOV_upper = -15      real_T vertical_FOV_lower = -45      Pose relative_pose{Vector3r(0, 0, -1), Quaternionr::Identity()}      bool draw_debug_points = false      AutonomySimSettings::LidarSetting::DataFrame data_frame      bool external_controller = true      real_T update_frequency = 10      real_T startup_delay = 0"], [421, 3, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams10data_frameE", "nervosys::autonomylib::LidarSimpleParams::data_frame", ""], [421, 3, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams17draw_debug_pointsE", "nervosys::autonomylib::LidarSimpleParams::draw_debug_points", ""], [421, 3, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams19external_controllerE", "nervosys::autonomylib::LidarSimpleParams::external_controller", ""], [421, 3, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams18horizontal_FOV_endE", "nervosys::autonomylib::LidarSimpleParams::horizontal_FOV_end", ""], [421, 3, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams20horizontal_FOV_startE", "nervosys::autonomylib::LidarSimpleParams::horizontal_FOV_start", ""], [421, 3, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams29horizontal_rotation_frequencyE", "nervosys::autonomylib::LidarSimpleParams::horizontal_rotation_frequency", ""], [421, 0, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams22initializeFromSettingsERKN19AutonomySimSettings12LidarSettingE", "nervosys::autonomylib::LidarSimpleParams::initializeFromSettings", ""], [421, 2, 2, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams22initializeFromSettingsERKN19AutonomySimSettings12LidarSettingE", "nervosys::autonomylib::LidarSimpleParams::initializeFromSettings::settings", ""], [421, 3, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams18number_of_channelsE", "nervosys::autonomylib::LidarSimpleParams::number_of_channels", ""], [421, 3, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams17points_per_secondE", "nervosys::autonomylib::LidarSimpleParams::points_per_second", ""], [421, 3, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams5rangeE", "nervosys::autonomylib::LidarSimpleParams::range", ""], [421, 3, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams13relative_poseE", "nervosys::autonomylib::LidarSimpleParams::relative_pose", ""], [421, 3, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams13startup_delayE", "nervosys::autonomylib::LidarSimpleParams::startup_delay", ""], [421, 3, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams16update_frequencyE", "nervosys::autonomylib::LidarSimpleParams::update_frequency", ""], [421, 3, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams18vertical_FOV_lowerE", "nervosys::autonomylib::LidarSimpleParams::vertical_FOV_lower", ""], [421, 3, 1, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams18vertical_FOV_upperE", "nervosys::autonomylib::LidarSimpleParams::vertical_FOV_upper", ""], [28, 1, 1, "_CPPv4N8nervosys11autonomylib16MagnetometerBaseE", "nervosys::autonomylib::MagnetometerBase", "Subclassed by nervosys::autonomylib::MagnetometerSimple"], [28, 0, 1, "_CPPv4N8nervosys11autonomylib16MagnetometerBase16MagnetometerBaseERKNSt6stringE", "nervosys::autonomylib::MagnetometerBase::MagnetometerBase", ""], [28, 2, 2, "_CPPv4N8nervosys11autonomylib16MagnetometerBase16MagnetometerBaseERKNSt6stringE", "nervosys::autonomylib::MagnetometerBase::MagnetometerBase::sensor_name", ""], [28, 1, 1, "_CPPv4N8nervosys11autonomylib16MagnetometerBase6OutputE", "nervosys::autonomylib::MagnetometerBase::Output", "Public Members    TTimePoint time_stamp      Vector3r magnetic_field_body      vector<real_T> magnetic_field_covariance"], [28, 3, 1, "_CPPv4N8nervosys11autonomylib16MagnetometerBase6Output19magnetic_field_bodyE", "nervosys::autonomylib::MagnetometerBase::Output::magnetic_field_body", ""], [28, 3, 1, "_CPPv4N8nervosys11autonomylib16MagnetometerBase6Output25magnetic_field_covarianceE", "nervosys::autonomylib::MagnetometerBase::Output::magnetic_field_covariance", ""], [28, 3, 1, "_CPPv4N8nervosys11autonomylib16MagnetometerBase6Output10time_stampE", "nervosys::autonomylib::MagnetometerBase::Output::time_stamp", ""], [28, 0, 1, "_CPPv4NK8nervosys11autonomylib16MagnetometerBase9getOutputEv", "nervosys::autonomylib::MagnetometerBase::getOutput", ""], [28, 0, 1, "_CPPv4N8nervosys11autonomylib16MagnetometerBase11reportStateER13StateReporter", "nervosys::autonomylib::MagnetometerBase::reportState", ""], [28, 2, 2, "_CPPv4N8nervosys11autonomylib16MagnetometerBase11reportStateER13StateReporter", "nervosys::autonomylib::MagnetometerBase::reportState::reporter", ""], [28, 0, 1, "_CPPv4N8nervosys11autonomylib16MagnetometerBase9setOutputERK6Output", "nervosys::autonomylib::MagnetometerBase::setOutput", ""], [28, 2, 2, "_CPPv4N8nervosys11autonomylib16MagnetometerBase9setOutputERK6Output", "nervosys::autonomylib::MagnetometerBase::setOutput::output", ""], [29, 1, 1, "_CPPv4N8nervosys11autonomylib18MagnetometerSimpleE", "nervosys::autonomylib::MagnetometerSimple", "Public Functions    inline MagnetometerSimple(const AutonomySimSettings::MagnetometerSetting &setting = AutonomySimSettings::MagnetometerSetting())      inline virtual void resetImplementation() override      inline virtual void update() override      virtual ~MagnetometerSimple() = default"], [29, 0, 1, "_CPPv4N8nervosys11autonomylib18MagnetometerSimple18MagnetometerSimpleERKN19AutonomySimSettings19MagnetometerSettingE", "nervosys::autonomylib::MagnetometerSimple::MagnetometerSimple", ""], [29, 2, 2, "_CPPv4N8nervosys11autonomylib18MagnetometerSimple18MagnetometerSimpleERKN19AutonomySimSettings19MagnetometerSettingE", "nervosys::autonomylib::MagnetometerSimple::MagnetometerSimple::setting", ""], [29, 0, 1, "_CPPv4N8nervosys11autonomylib18MagnetometerSimple19resetImplementationEv", "nervosys::autonomylib::MagnetometerSimple::resetImplementation", ""], [29, 0, 1, "_CPPv4N8nervosys11autonomylib18MagnetometerSimple6updateEv", "nervosys::autonomylib::MagnetometerSimple::update", ""], [29, 0, 1, "_CPPv4N8nervosys11autonomylib18MagnetometerSimpleD0Ev", "nervosys::autonomylib::MagnetometerSimple::~MagnetometerSimple", ""], [423, 1, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParamsE", "nervosys::autonomylib::MagnetometerSimpleParams", "Values:"], [423, 5, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams15ReferenceSourceE", "nervosys::autonomylib::MagnetometerSimpleParams::ReferenceSource", "Values:"], [423, 6, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams15ReferenceSource24ReferenceSource_ConstantE", "nervosys::autonomylib::MagnetometerSimpleParams::ReferenceSource::ReferenceSource_Constant", ""], [423, 6, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams15ReferenceSource27ReferenceSource_DipoleModelE", "nervosys::autonomylib::MagnetometerSimpleParams::ReferenceSource::ReferenceSource_DipoleModel", ""], [423, 6, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams15ReferenceSource24ReferenceSource_ConstantE", "nervosys::autonomylib::MagnetometerSimpleParams::ReferenceSource_Constant", ""], [423, 6, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams15ReferenceSource27ReferenceSource_DipoleModelE", "nervosys::autonomylib::MagnetometerSimpleParams::ReferenceSource_DipoleModel", ""], [423, 3, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams24dynamic_reference_sourceE", "nervosys::autonomylib::MagnetometerSimpleParams::dynamic_reference_source", ""], [423, 0, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams22initializeFromSettingsERKN19AutonomySimSettings19MagnetometerSettingE", "nervosys::autonomylib::MagnetometerSimpleParams::initializeFromSettings", ""], [423, 2, 2, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams22initializeFromSettingsERKN19AutonomySimSettings19MagnetometerSettingE", "nervosys::autonomylib::MagnetometerSimpleParams::initializeFromSettings::settings", ""], [423, 3, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams10noise_biasE", "nervosys::autonomylib::MagnetometerSimpleParams::noise_bias", ""], [423, 3, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams11noise_sigmaE", "nervosys::autonomylib::MagnetometerSimpleParams::noise_sigma", ""], [423, 3, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams10ref_sourceE", "nervosys::autonomylib::MagnetometerSimpleParams::ref_source", ""], [423, 3, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams20ref_update_frequencyE", "nervosys::autonomylib::MagnetometerSimpleParams::ref_update_frequency", ""], [423, 3, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams12scale_factorE", "nervosys::autonomylib::MagnetometerSimpleParams::scale_factor", ""], [423, 3, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams13startup_delayE", "nervosys::autonomylib::MagnetometerSimpleParams::startup_delay", ""], [423, 3, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams16update_frequencyE", "nervosys::autonomylib::MagnetometerSimpleParams::update_frequency", ""], [423, 3, 1, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams14update_latencyE", "nervosys::autonomylib::MagnetometerSimpleParams::update_latency", ""], [30, 1, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApiE", "nervosys::autonomylib::MavLinkMultirotorApi", "Subclassed by nervosys::autonomylib::ArduCopterSoloApi"], [30, 1, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLogE", "nervosys::autonomylib::MavLinkMultirotorApi::MavLinkLogViewerLog", "Public Functions    inline MavLinkLogViewerLog(std::shared_ptr<mavlinkcom::MavLinkNode> proxy)      inline ~MavLinkLogViewerLog()      inline void write(const mavlinkcom::MavLinkMessage &msg, uint64_t timestamp = 0) override"], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLog19MavLinkLogViewerLogENSt10shared_ptrIN10mavlinkcom11MavLinkNodeEEE", "nervosys::autonomylib::MavLinkMultirotorApi::MavLinkLogViewerLog::MavLinkLogViewerLog", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLog19MavLinkLogViewerLogENSt10shared_ptrIN10mavlinkcom11MavLinkNodeEEE", "nervosys::autonomylib::MavLinkMultirotorApi::MavLinkLogViewerLog::MavLinkLogViewerLog::proxy", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLog5writeERKN10mavlinkcom14MavLinkMessageE8uint64_t", "nervosys::autonomylib::MavLinkMultirotorApi::MavLinkLogViewerLog::write", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLog5writeERKN10mavlinkcom14MavLinkMessageE8uint64_t", "nervosys::autonomylib::MavLinkMultirotorApi::MavLinkLogViewerLog::write::msg", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLog5writeERKN10mavlinkcom14MavLinkMessageE8uint64_t", "nervosys::autonomylib::MavLinkMultirotorApi::MavLinkLogViewerLog::write::timestamp", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLogD0Ev", "nervosys::autonomylib::MavLinkMultirotorApi::MavLinkLogViewerLog::~MavLinkLogViewerLog", ""], [30, 3, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18RotorControlsCountE", "nervosys::autonomylib::MavLinkMultirotorApi::RotorControlsCount", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi11advanceTimeEv", "nervosys::autonomylib::MavLinkMultirotorApi::advanceTime", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi9afterTaskEv", "nervosys::autonomylib::MavLinkMultirotorApi::afterTask", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi9armDisarmEb", "nervosys::autonomylib::MavLinkMultirotorApi::armDisarm", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi9armDisarmEb", "nervosys::autonomylib::MavLinkMultirotorApi::armDisarm::arm", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi10beforeTaskEv", "nervosys::autonomylib::MavLinkMultirotorApi::beforeTask", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi6canArmEv", "nervosys::autonomylib::MavLinkMultirotorApi::canArm", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi5closeEv", "nervosys::autonomylib::MavLinkMultirotorApi::close", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18closeAllConnectionEv", "nervosys::autonomylib::MavLinkMultirotorApi::closeAllConnection", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandAngleRatesThrottle", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandAngleRatesThrottle::pitch_rate", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandAngleRatesThrottle::roll_rate", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandAngleRatesThrottle::throttle", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandAngleRatesThrottle::yaw_rate", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18commandAngleRatesZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandAngleRatesZ", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18commandAngleRatesZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandAngleRatesZ::pitch_rate", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18commandAngleRatesZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandAngleRatesZ::roll_rate", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18commandAngleRatesZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandAngleRatesZ::yaw_rate", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18commandAngleRatesZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandAngleRatesZ::z", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16commandMotorPWMsEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandMotorPWMs", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16commandMotorPWMsEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandMotorPWMs::front_left_pwm", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16commandMotorPWMsEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandMotorPWMs::front_right_pwm", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16commandMotorPWMsEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandMotorPWMs::rear_left_pwm", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16commandMotorPWMsEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandMotorPWMs::rear_right_pwm", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandPosition", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandPosition::x", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandPosition::y", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandPosition::yaw_mode", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandPosition::z", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawThrottle", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawThrottle::pitch", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawThrottle::roll", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawThrottle::throttle", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawThrottle::yaw", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi20commandRollPitchYawZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawZ", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi20commandRollPitchYawZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawZ::pitch", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi20commandRollPitchYawZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawZ::roll", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi20commandRollPitchYawZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawZ::yaw", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi20commandRollPitchYawZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawZ::z", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawrateThrottle", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawrateThrottle::pitch", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawrateThrottle::roll", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawrateThrottle::throttle", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawrateThrottle::yaw_rate", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawrateZ", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawrateZ::pitch", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawrateZ::roll", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawrateZ::yaw_rate", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::MavLinkMultirotorApi::commandRollPitchYawrateZ::z", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandVelocity", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandVelocity::vx", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandVelocity::vy", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandVelocity::vz", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandVelocity::yaw_mode", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandVelocityZ", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandVelocityZ::vx", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandVelocityZ::vy", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandVelocityZ::yaw_mode", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::MavLinkMultirotorApi::commandVelocityZ::z", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi7connectEv", "nervosys::autonomylib::MavLinkMultirotorApi::connect", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14connect_threadEv", "nervosys::autonomylib::MavLinkMultirotorApi::connect_thread", ""], [30, 3, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16connection_info_E", "nervosys::autonomylib::MavLinkMultirotorApi::connection_info_", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi10disconnectEv", "nervosys::autonomylib::MavLinkMultirotorApi::disconnect", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16enableApiControlEb", "nervosys::autonomylib::MavLinkMultirotorApi::enableApiControl", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16enableApiControlEb", "nervosys::autonomylib::MavLinkMultirotorApi::enableApiControl::is_enabled", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi12getActuationEj", "nervosys::autonomylib::MavLinkMultirotorApi::getActuation", ""], [30, 2, 2, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi12getActuationEj", "nervosys::autonomylib::MavLinkMultirotorApi::getActuation::rotor_index", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi16getActuatorCountEv", "nervosys::autonomylib::MavLinkMultirotorApi::getActuatorCount", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi16getCommandPeriodEv", "nervosys::autonomylib::MavLinkMultirotorApi::getCommandPeriod", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi19getDistanceAccuracyEv", "nervosys::autonomylib::MavLinkMultirotorApi::getDistanceAccuracy", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi14getGpsLocationEv", "nervosys::autonomylib::MavLinkMultirotorApi::getGpsLocation", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi15getHomeGeoPointEv", "nervosys::autonomylib::MavLinkMultirotorApi::getHomeGeoPoint", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi22getKinematicsEstimatedEv", "nervosys::autonomylib::MavLinkMultirotorApi::getKinematicsEstimated", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi14getLandedStateEv", "nervosys::autonomylib::MavLinkMultirotorApi::getLandedState", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi12getMocapPoseEv", "nervosys::autonomylib::MavLinkMultirotorApi::getMocapPose", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi22getMultirotorApiParamsEv", "nervosys::autonomylib::MavLinkMultirotorApi::getMultirotorApiParams", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi14getOrientationEv", "nervosys::autonomylib::MavLinkMultirotorApi::getOrientation", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi11getPositionEv", "nervosys::autonomylib::MavLinkMultirotorApi::getPosition", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi10getSensorsEv", "nervosys::autonomylib::MavLinkMultirotorApi::getSensors", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi10getSimTimeEv", "nervosys::autonomylib::MavLinkMultirotorApi::getSimTime", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi17getStatusMessagesERNSt6vectorINSt6stringEEE", "nervosys::autonomylib::MavLinkMultirotorApi::getStatusMessages", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi17getStatusMessagesERNSt6vectorINSt6stringEEE", "nervosys::autonomylib::MavLinkMultirotorApi::getStatusMessages::messages", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi11getTakeoffZEv", "nervosys::autonomylib::MavLinkMultirotorApi::getTakeoffZ", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi11getVelocityEv", "nervosys::autonomylib::MavLinkMultirotorApi::getVelocity", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi6goHomeEf", "nervosys::autonomylib::MavLinkMultirotorApi::goHome", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi6goHomeEf", "nervosys::autonomylib::MavLinkMultirotorApi::goHome::timeout_sec", ""], [30, 3, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19hil_controls_mutex_E", "nervosys::autonomylib::MavLinkMultirotorApi::hil_controls_mutex_", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi5hoverEv", "nervosys::autonomylib::MavLinkMultirotorApi::hover", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi10initializeERKN19AutonomySimSettings21MavLinkConnectionInfoEPK16SensorCollectionb", "nervosys::autonomylib::MavLinkMultirotorApi::initialize", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi10initializeERKN19AutonomySimSettings21MavLinkConnectionInfoEPK16SensorCollectionb", "nervosys::autonomylib::MavLinkMultirotorApi::initialize::connection_info", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi10initializeERKN19AutonomySimSettings21MavLinkConnectionInfoEPK16SensorCollectionb", "nervosys::autonomylib::MavLinkMultirotorApi::initialize::is_simulation", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi10initializeERKN19AutonomySimSettings21MavLinkConnectionInfoEPK16SensorCollectionb", "nervosys::autonomylib::MavLinkMultirotorApi::initialize::sensors", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi19isApiControlEnabledEv", "nervosys::autonomylib::MavLinkMultirotorApi::isApiControlEnabled", ""], [30, 0, 1, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi7isReadyERNSt6stringE", "nervosys::autonomylib::MavLinkMultirotorApi::isReady", ""], [30, 2, 2, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi7isReadyERNSt6stringE", "nervosys::autonomylib::MavLinkMultirotorApi::isReady::message", ""], [30, 3, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19is_simulation_mode_E", "nervosys::autonomylib::MavLinkMultirotorApi::is_simulation_mode_", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi4landEf", "nervosys::autonomylib::MavLinkMultirotorApi::land", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi4landEf", "nervosys::autonomylib::MavLinkMultirotorApi::land::timeout_sec", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MavLinkMultirotorApi::moveToPosition", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MavLinkMultirotorApi::moveToPosition::adaptive_lookahead", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MavLinkMultirotorApi::moveToPosition::drivetrain", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MavLinkMultirotorApi::moveToPosition::lookahead", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MavLinkMultirotorApi::moveToPosition::timeout_sec", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MavLinkMultirotorApi::moveToPosition::velocity", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MavLinkMultirotorApi::moveToPosition::x", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MavLinkMultirotorApi::moveToPosition::y", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MavLinkMultirotorApi::moveToPosition::yaw_mode", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MavLinkMultirotorApi::moveToPosition::z", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi7onArmedEv", "nervosys::autonomylib::MavLinkMultirotorApi::onArmed", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi10onDisarmedEv", "nervosys::autonomylib::MavLinkMultirotorApi::onDisarmed", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19resetImplementationEv", "nervosys::autonomylib::MavLinkMultirotorApi::resetImplementation", ""], [30, 3, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15rotor_controls_E", "nervosys::autonomylib::MavLinkMultirotorApi::rotor_controls_", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi13sendTelemetryEf", "nervosys::autonomylib::MavLinkMultirotorApi::sendTelemetry", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi13sendTelemetryEf", "nervosys::autonomylib::MavLinkMultirotorApi::sendTelemetry::last_interval", ""], [30, 3, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi8sensors_E", "nervosys::autonomylib::MavLinkMultirotorApi::sensors_", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MavLinkMultirotorApi::setControllerGains", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MavLinkMultirotorApi::setControllerGains::controllerType", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MavLinkMultirotorApi::setControllerGains::kd", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MavLinkMultirotorApi::setControllerGains::ki", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MavLinkMultirotorApi::setControllerGains::kp", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi21start_telemtry_threadEv", "nervosys::autonomylib::MavLinkMultirotorApi::start_telemtry_thread", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi7takeoffEf", "nervosys::autonomylib::MavLinkMultirotorApi::takeoff", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi7takeoffEf", "nervosys::autonomylib::MavLinkMultirotorApi::takeoff::timeout_sec", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15telemtry_threadEv", "nervosys::autonomylib::MavLinkMultirotorApi::telemtry_thread", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi6updateEv", "nervosys::autonomylib::MavLinkMultirotorApi::update", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19waitForHomeLocationEf", "nervosys::autonomylib::MavLinkMultirotorApi::waitForHomeLocation", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19waitForHomeLocationEf", "nervosys::autonomylib::MavLinkMultirotorApi::waitForHomeLocation::timeout_sec", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi27waitForStableGroundPositionEf", "nervosys::autonomylib::MavLinkMultirotorApi::waitForStableGroundPosition", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi27waitForStableGroundPositionEf", "nervosys::autonomylib::MavLinkMultirotorApi::waitForStableGroundPosition::timeout_sec", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14writeTelemetryEf", "nervosys::autonomylib::MavLinkMultirotorApi::writeTelemetry", ""], [30, 2, 2, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14writeTelemetryEf", "nervosys::autonomylib::MavLinkMultirotorApi::writeTelemetry::last_interval", ""], [30, 0, 1, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApiD0Ev", "nervosys::autonomylib::MavLinkMultirotorApi::~MavLinkMultirotorApi", ""], [32, 1, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBaseE", "nervosys::autonomylib::MultirotorApiBase", "Subclassed by nervosys::autonomylib::ArduCopterApi, nervosys::autonomylib::MavLinkMultirotorApi, nervosys::autonomylib::SimpleFlightApi"], [33, 1, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18ObsStrategyChangerE", "nervosys::autonomylib::MultirotorApiBase::ObsStrategyChanger", "Public Functions    inline ObsStrategyChanger(shared_ptr<SafetyEval> safety_eval_ptr, SafetyEval::ObsAvoidanceStrategy new_startegy)      inline ~ObsStrategyChanger()"], [33, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18ObsStrategyChanger18ObsStrategyChangerE10shared_ptrI10SafetyEvalEN10SafetyEval20ObsAvoidanceStrategyE", "nervosys::autonomylib::MultirotorApiBase::ObsStrategyChanger::ObsStrategyChanger", ""], [33, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18ObsStrategyChanger18ObsStrategyChangerE10shared_ptrI10SafetyEvalEN10SafetyEval20ObsAvoidanceStrategyE", "nervosys::autonomylib::MultirotorApiBase::ObsStrategyChanger::ObsStrategyChanger::new_startegy", ""], [33, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18ObsStrategyChanger18ObsStrategyChangerE10shared_ptrI10SafetyEvalEN10SafetyEval20ObsAvoidanceStrategyE", "nervosys::autonomylib::MultirotorApiBase::ObsStrategyChanger::ObsStrategyChanger::safety_eval_ptr", ""], [33, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18ObsStrategyChangerD0Ev", "nervosys::autonomylib::MultirotorApiBase::ObsStrategyChanger::~ObsStrategyChanger", ""], [424, 1, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12PathPositionE", "nervosys::autonomylib::MultirotorApiBase::PathPosition", "Public Members    uint seg_index      float offset      Vector3r position"], [424, 3, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12PathPosition6offsetE", "nervosys::autonomylib::MultirotorApiBase::PathPosition::offset", ""], [424, 3, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12PathPosition8positionE", "nervosys::autonomylib::MultirotorApiBase::PathPosition::position", ""], [424, 3, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12PathPosition9seg_indexE", "nervosys::autonomylib::MultirotorApiBase::PathPosition::seg_index", ""], [425, 1, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegmentE", "nervosys::autonomylib::MultirotorApiBase::PathSegment", "Public Functions    inline PathSegment(const Vector3r &start, const Vector3r &end, float velocity, float path_length)    Public Members    Vector3r seg_normalized      Vector3r seg      float seg_length      float seg_velocity      float start_z      float seg_path_length"], [425, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment11PathSegmentERK8Vector3rRK8Vector3rff", "nervosys::autonomylib::MultirotorApiBase::PathSegment::PathSegment", ""], [425, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment11PathSegmentERK8Vector3rRK8Vector3rff", "nervosys::autonomylib::MultirotorApiBase::PathSegment::PathSegment::end", ""], [425, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment11PathSegmentERK8Vector3rRK8Vector3rff", "nervosys::autonomylib::MultirotorApiBase::PathSegment::PathSegment::path_length", ""], [425, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment11PathSegmentERK8Vector3rRK8Vector3rff", "nervosys::autonomylib::MultirotorApiBase::PathSegment::PathSegment::start", ""], [425, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment11PathSegmentERK8Vector3rRK8Vector3rff", "nervosys::autonomylib::MultirotorApiBase::PathSegment::PathSegment::velocity", ""], [425, 3, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment3segE", "nervosys::autonomylib::MultirotorApiBase::PathSegment::seg", ""], [425, 3, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment10seg_lengthE", "nervosys::autonomylib::MultirotorApiBase::PathSegment::seg_length", ""], [425, 3, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment14seg_normalizedE", "nervosys::autonomylib::MultirotorApiBase::PathSegment::seg_normalized", ""], [425, 3, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment15seg_path_lengthE", "nervosys::autonomylib::MultirotorApiBase::PathSegment::seg_path_length", ""], [425, 3, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment12seg_velocityE", "nervosys::autonomylib::MultirotorApiBase::PathSegment::seg_velocity", ""], [425, 3, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment7start_zE", "nervosys::autonomylib::MultirotorApiBase::PathSegment::start_z", ""], [32, 1, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCallE", "nervosys::autonomylib::MultirotorApiBase::SingleCall", "Subclassed by nervosys::autonomylib::MultirotorApiBase::SingleTaskCall"], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCall10SingleCallEP17MultirotorApiBase", "nervosys::autonomylib::MultirotorApiBase::SingleCall::SingleCall", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCall10SingleCallEP17MultirotorApiBase", "nervosys::autonomylib::MultirotorApiBase::SingleCall::SingleCall::api", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCall13getVehicleApiEv", "nervosys::autonomylib::MultirotorApiBase::SingleCall::getVehicleApi", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCall10isRootCallEv", "nervosys::autonomylib::MultirotorApiBase::SingleCall::isRootCall", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCallD0Ev", "nervosys::autonomylib::MultirotorApiBase::SingleCall::~SingleCall", ""], [32, 1, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14SingleTaskCallE", "nervosys::autonomylib::MultirotorApiBase::SingleTaskCall", "Public Functions    inline SingleTaskCall(MultirotorApiBase *api)      inline virtual ~SingleTaskCall()"], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14SingleTaskCall14SingleTaskCallEP17MultirotorApiBase", "nervosys::autonomylib::MultirotorApiBase::SingleTaskCall::SingleTaskCall", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14SingleTaskCall14SingleTaskCallEP17MultirotorApiBase", "nervosys::autonomylib::MultirotorApiBase::SingleTaskCall::SingleTaskCall::api", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14SingleTaskCallD0Ev", "nervosys::autonomylib::MultirotorApiBase::SingleTaskCall::~SingleTaskCall", ""], [32, 1, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10StatusLockE", "nervosys::autonomylib::MultirotorApiBase::StatusLock", "Public Functions    inline StatusLock(const MultirotorApiBase *api)"], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10StatusLock10StatusLockEPK17MultirotorApiBase", "nervosys::autonomylib::MultirotorApiBase::StatusLock::StatusLock", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10StatusLock10StatusLockEPK17MultirotorApiBase", "nervosys::autonomylib::MultirotorApiBase::StatusLock::StatusLock::api", ""], [32, 1, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19UnsafeMoveExceptionE", "nervosys::autonomylib::MultirotorApiBase::UnsafeMoveException", "Public Functions    inline UnsafeMoveException(const SafetyEval::EvalResult result_val, const std::string &message = \"\")    Public Members    const SafetyEval::EvalResult result"], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19UnsafeMoveException19UnsafeMoveExceptionEKN10SafetyEval10EvalResultERKNSt6stringE", "nervosys::autonomylib::MultirotorApiBase::UnsafeMoveException::UnsafeMoveException", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19UnsafeMoveException19UnsafeMoveExceptionEKN10SafetyEval10EvalResultERKNSt6stringE", "nervosys::autonomylib::MultirotorApiBase::UnsafeMoveException::UnsafeMoveException::message", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19UnsafeMoveException19UnsafeMoveExceptionEKN10SafetyEval10EvalResultERKNSt6stringE", "nervosys::autonomylib::MultirotorApiBase::UnsafeMoveException::UnsafeMoveException::result_val", ""], [32, 3, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19UnsafeMoveException6resultE", "nervosys::autonomylib::MultirotorApiBase::UnsafeMoveException::result", ""], [32, 4, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12WaitFunctionE", "nervosys::autonomylib::MultirotorApiBase::WaitFunction", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9afterTaskEv", "nervosys::autonomylib::MultirotorApiBase::afterTask", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10beforeTaskEv", "nervosys::autonomylib::MultirotorApiBase::beforeTask", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14cancelLastTaskEv", "nervosys::autonomylib::MultirotorApiBase::cancelLastTask", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25commandAngleRatesThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandAngleRatesThrottle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25commandAngleRatesThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandAngleRatesThrottle::pitch_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25commandAngleRatesThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandAngleRatesThrottle::roll_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25commandAngleRatesThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandAngleRatesThrottle::throttle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25commandAngleRatesThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandAngleRatesThrottle::yaw_rate", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18commandAngleRatesZEffff", "nervosys::autonomylib::MultirotorApiBase::commandAngleRatesZ", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18commandAngleRatesZEffff", "nervosys::autonomylib::MultirotorApiBase::commandAngleRatesZ::pitch_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18commandAngleRatesZEffff", "nervosys::autonomylib::MultirotorApiBase::commandAngleRatesZ::roll_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18commandAngleRatesZEffff", "nervosys::autonomylib::MultirotorApiBase::commandAngleRatesZ::yaw_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18commandAngleRatesZEffff", "nervosys::autonomylib::MultirotorApiBase::commandAngleRatesZ::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase16commandMotorPWMsEffff", "nervosys::autonomylib::MultirotorApiBase::commandMotorPWMs", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase16commandMotorPWMsEffff", "nervosys::autonomylib::MultirotorApiBase::commandMotorPWMs::front_left_pwm", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase16commandMotorPWMsEffff", "nervosys::autonomylib::MultirotorApiBase::commandMotorPWMs::front_right_pwm", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase16commandMotorPWMsEffff", "nervosys::autonomylib::MultirotorApiBase::commandMotorPWMs::rear_left_pwm", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase16commandMotorPWMsEffff", "nervosys::autonomylib::MultirotorApiBase::commandMotorPWMs::rear_right_pwm", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15commandPositionEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandPosition", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15commandPositionEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandPosition::x", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15commandPositionEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandPosition::y", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15commandPositionEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandPosition::yaw_mode", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15commandPositionEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandPosition::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawThrottle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawThrottle::pitch", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawThrottle::roll", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawThrottle::throttle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawThrottle::yaw", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase20commandRollPitchYawZEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawZ", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase20commandRollPitchYawZEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawZ::pitch", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase20commandRollPitchYawZEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawZ::roll", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase20commandRollPitchYawZEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawZ::yaw", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase20commandRollPitchYawZEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawZ::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawrateThrottle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawrateThrottle::pitch", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawrateThrottle::roll", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawrateThrottle::throttle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawrateThrottle::yaw_rate", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24commandRollPitchYawrateZEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawrateZ", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24commandRollPitchYawrateZEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawrateZ::pitch", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24commandRollPitchYawrateZEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawrateZ::roll", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24commandRollPitchYawrateZEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawrateZ::yaw_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24commandRollPitchYawrateZEffff", "nervosys::autonomylib::MultirotorApiBase::commandRollPitchYawrateZ::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandVelocity", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandVelocity::vx", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandVelocity::vy", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandVelocity::vz", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandVelocity::yaw_mode", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandVelocityZ", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandVelocityZ::vx", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandVelocityZ::vy", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandVelocityZ::yaw_mode", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::commandVelocityZ::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25emergencyManeuverIfUnsafeERKN10SafetyEval10EvalResultE", "nervosys::autonomylib::MultirotorApiBase::emergencyManeuverIfUnsafe", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25emergencyManeuverIfUnsafeERKN10SafetyEval10EvalResultE", "nervosys::autonomylib::MultirotorApiBase::emergencyManeuverIfUnsafe::result", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15estimateRCTrimsEfff", "nervosys::autonomylib::MultirotorApiBase::estimateRCTrims", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15estimateRCTrimsEfff", "nervosys::autonomylib::MultirotorApiBase::estimateRCTrims::maxTrim", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15estimateRCTrimsEfff", "nervosys::autonomylib::MultirotorApiBase::estimateRCTrims::minCountForTrim", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15estimateRCTrimsEfff", "nervosys::autonomylib::MultirotorApiBase::estimateRCTrims::trimduration", ""], [32, 0, 1, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase16getAutoLookaheadEffff", "nervosys::autonomylib::MultirotorApiBase::getAutoLookahead", ""], [32, 2, 2, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase16getAutoLookaheadEffff", "nervosys::autonomylib::MultirotorApiBase::getAutoLookahead::adaptive_lookahead", ""], [32, 2, 2, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase16getAutoLookaheadEffff", "nervosys::autonomylib::MultirotorApiBase::getAutoLookahead::max_factor", ""], [32, 2, 2, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase16getAutoLookaheadEffff", "nervosys::autonomylib::MultirotorApiBase::getAutoLookahead::min_factor", ""], [32, 2, 2, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase16getAutoLookaheadEffff", "nervosys::autonomylib::MultirotorApiBase::getAutoLookahead::velocity", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14getCancelTokenEv", "nervosys::autonomylib::MultirotorApiBase::getCancelToken", ""], [32, 0, 1, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase16getCommandPeriodEv", "nervosys::autonomylib::MultirotorApiBase::getCommandPeriod", ""], [32, 0, 1, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase19getDistanceAccuracyEv", "nervosys::autonomylib::MultirotorApiBase::getDistanceAccuracy", ""], [32, 0, 1, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase14getGpsLocationEv", "nervosys::autonomylib::MultirotorApiBase::getGpsLocation", ""], [32, 0, 1, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase22getKinematicsEstimatedEv", "nervosys::autonomylib::MultirotorApiBase::getKinematicsEstimated", ""], [32, 0, 1, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase14getLandedStateEv", "nervosys::autonomylib::MultirotorApiBase::getLandedState", ""], [32, 0, 1, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase22getMultirotorApiParamsEv", "nervosys::autonomylib::MultirotorApiBase::getMultirotorApiParams", ""], [32, 0, 1, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase18getMultirotorStateEv", "nervosys::autonomylib::MultirotorApiBase::getMultirotorState", ""], [32, 0, 1, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase23getObsAvoidanceVelocityEff", "nervosys::autonomylib::MultirotorApiBase::getObsAvoidanceVelocity", ""], [32, 2, 2, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase23getObsAvoidanceVelocityEff", "nervosys::autonomylib::MultirotorApiBase::getObsAvoidanceVelocity::max_obs_avoidance_vel", ""], [32, 2, 2, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase23getObsAvoidanceVelocityEff", "nervosys::autonomylib::MultirotorApiBase::getObsAvoidanceVelocity::risk_dist", ""], [32, 0, 1, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase14getOrientationEv", "nervosys::autonomylib::MultirotorApiBase::getOrientation", ""], [32, 0, 1, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase11getPositionEv", "nervosys::autonomylib::MultirotorApiBase::getPosition", ""], [32, 0, 1, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase14getRotorStatesEv", "nervosys::autonomylib::MultirotorApiBase::getRotorStates", ""], [32, 0, 1, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase11getTakeoffZEv", "nervosys::autonomylib::MultirotorApiBase::getTakeoffZ", ""], [32, 0, 1, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase11getVelocityEv", "nervosys::autonomylib::MultirotorApiBase::getVelocity", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase6goHomeEf", "nervosys::autonomylib::MultirotorApiBase::goHome", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase6goHomeEf", "nervosys::autonomylib::MultirotorApiBase::goHome::timeout_sec", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase5hoverEv", "nervosys::autonomylib::MultirotorApiBase::hover", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase4landEf", "nervosys::autonomylib::MultirotorApiBase::land", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase4landEf", "nervosys::autonomylib::MultirotorApiBase::land::timeout_sec", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByAngleRatesThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesThrottle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByAngleRatesThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesThrottle::duration", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByAngleRatesThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesThrottle::pitch_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByAngleRatesThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesThrottle::roll_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByAngleRatesThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesThrottle::throttle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByAngleRatesThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesThrottle::yaw_rate", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase32moveByAngleRatesThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesThrottleInternal", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase32moveByAngleRatesThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesThrottleInternal::pitch_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase32moveByAngleRatesThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesThrottleInternal::roll_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase32moveByAngleRatesThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesThrottleInternal::throttle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase32moveByAngleRatesThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesThrottleInternal::yaw_rate", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase17moveByAngleRatesZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesZ", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase17moveByAngleRatesZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesZ::duration", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase17moveByAngleRatesZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesZ::pitch_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase17moveByAngleRatesZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesZ::roll_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase17moveByAngleRatesZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesZ::yaw_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase17moveByAngleRatesZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesZ::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25moveByAngleRatesZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesZInternal", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25moveByAngleRatesZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesZInternal::pitch_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25moveByAngleRatesZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesZInternal::roll_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25moveByAngleRatesZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesZInternal::yaw_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25moveByAngleRatesZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByAngleRatesZInternal::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12moveByManualEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByManual", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12moveByManualEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByManual::drivetrain", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12moveByManualEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByManual::duration", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12moveByManualEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByManual::vx_max", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12moveByManualEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByManual::vy_max", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12moveByManualEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByManual::yaw_mode", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12moveByManualEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByManual::z_min", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByMotorPWMsEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByMotorPWMs", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByMotorPWMsEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByMotorPWMs::duration", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByMotorPWMsEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByMotorPWMs::front_left_pwm", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByMotorPWMsEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByMotorPWMs::front_right_pwm", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByMotorPWMsEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByMotorPWMs::rear_left_pwm", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByMotorPWMsEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByMotorPWMs::rear_right_pwm", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase8moveByRCERK6RCData", "nervosys::autonomylib::MultirotorApiBase::moveByRC", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase8moveByRCERK6RCData", "nervosys::autonomylib::MultirotorApiBase::moveByRC::rc_data", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26moveByRollPitchYawThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawThrottle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26moveByRollPitchYawThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawThrottle::duration", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26moveByRollPitchYawThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawThrottle::pitch", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26moveByRollPitchYawThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawThrottle::roll", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26moveByRollPitchYawThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawThrottle::throttle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26moveByRollPitchYawThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawThrottle::yaw", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase34moveByRollPitchYawThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawThrottleInternal", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase34moveByRollPitchYawThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawThrottleInternal::pitch", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase34moveByRollPitchYawThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawThrottleInternal::roll", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase34moveByRollPitchYawThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawThrottleInternal::throttle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase34moveByRollPitchYawThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawThrottleInternal::yaw", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19moveByRollPitchYawZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawZ", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19moveByRollPitchYawZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawZ::duration", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19moveByRollPitchYawZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawZ::pitch", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19moveByRollPitchYawZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawZ::roll", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19moveByRollPitchYawZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawZ::yaw", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19moveByRollPitchYawZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawZ::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27moveByRollPitchYawZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawZInternal", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27moveByRollPitchYawZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawZInternal::pitch", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27moveByRollPitchYawZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawZInternal::roll", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27moveByRollPitchYawZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawZInternal::yaw", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27moveByRollPitchYawZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawZInternal::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase30moveByRollPitchYawrateThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateThrottle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase30moveByRollPitchYawrateThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateThrottle::duration", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase30moveByRollPitchYawrateThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateThrottle::pitch", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase30moveByRollPitchYawrateThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateThrottle::roll", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase30moveByRollPitchYawrateThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateThrottle::throttle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase30moveByRollPitchYawrateThrottleEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateThrottle::yaw_rate", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase38moveByRollPitchYawrateThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateThrottleInternal", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase38moveByRollPitchYawrateThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateThrottleInternal::pitch", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase38moveByRollPitchYawrateThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateThrottleInternal::roll", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase38moveByRollPitchYawrateThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateThrottleInternal::throttle", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase38moveByRollPitchYawrateThrottleInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateThrottleInternal::yaw_rate", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByRollPitchYawrateZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateZ", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByRollPitchYawrateZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateZ::duration", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByRollPitchYawrateZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateZ::pitch", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByRollPitchYawrateZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateZ::roll", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByRollPitchYawrateZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateZ::yaw_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByRollPitchYawrateZEfffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateZ::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase31moveByRollPitchYawrateZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateZInternal", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase31moveByRollPitchYawrateZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateZInternal::pitch", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase31moveByRollPitchYawrateZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateZInternal::roll", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase31moveByRollPitchYawrateZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateZInternal::yaw_rate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase31moveByRollPitchYawrateZInternalEffff", "nervosys::autonomylib::MultirotorApiBase::moveByRollPitchYawrateZInternal::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveByVelocityEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocity", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveByVelocityEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocity::drivetrain", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveByVelocityEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocity::duration", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveByVelocityEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocity::vx", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveByVelocityEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocity::vy", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveByVelocityEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocity::vz", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveByVelocityEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocity::yaw_mode", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByVelocityBodyFrameEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityBodyFrame", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByVelocityBodyFrameEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityBodyFrame::drivetrain", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByVelocityBodyFrameEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityBodyFrame::duration", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByVelocityBodyFrameEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityBodyFrame::vx", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByVelocityBodyFrameEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityBodyFrame::vy", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByVelocityBodyFrameEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityBodyFrame::vz", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByVelocityBodyFrameEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityBodyFrame::yaw_mode", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase22moveByVelocityInternalEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityInternal", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase22moveByVelocityInternalEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityInternal::vx", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase22moveByVelocityInternalEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityInternal::vy", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase22moveByVelocityInternalEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityInternal::vz", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase22moveByVelocityInternalEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityInternal::yaw_mode", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByVelocityZEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZ", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByVelocityZEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZ::drivetrain", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByVelocityZEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZ::duration", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByVelocityZEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZ::vx", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByVelocityZEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZ::vy", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByVelocityZEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZ::yaw_mode", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByVelocityZEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZ::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByVelocityZBodyFrameEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZBodyFrame", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByVelocityZBodyFrameEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZBodyFrame::drivetrain", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByVelocityZBodyFrameEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZBodyFrame::duration", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByVelocityZBodyFrameEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZBodyFrame::vx", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByVelocityZBodyFrameEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZBodyFrame::vy", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByVelocityZBodyFrameEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZBodyFrame::yaw_mode", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByVelocityZBodyFrameEffff14DrivetrainTypeRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZBodyFrame::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByVelocityZInternalEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZInternal", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByVelocityZInternalEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZInternal::vx", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByVelocityZInternalEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZInternal::vy", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByVelocityZInternalEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZInternal::yaw_mode", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByVelocityZInternalEfffRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveByVelocityZInternal::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10moveOnPathERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveOnPath", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10moveOnPathERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveOnPath::adaptive_lookahead", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10moveOnPathERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveOnPath::drivetrain", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10moveOnPathERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveOnPath::lookahead", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10moveOnPathERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveOnPath::path", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10moveOnPathERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveOnPath::timeout_sec", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10moveOnPathERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveOnPath::velocity", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10moveOnPathERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveOnPath::yaw_mode", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9moveToGPSEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToGPS", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9moveToGPSEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToGPS::adaptive_lookahead", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9moveToGPSEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToGPS::altitude", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9moveToGPSEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToGPS::drivetrain", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9moveToGPSEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToGPS::latitude", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9moveToGPSEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToGPS::longitude", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9moveToGPSEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToGPS::lookahead", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9moveToGPSEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToGPS::timeout_sec", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9moveToGPSEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToGPS::velocity", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9moveToGPSEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToGPS::yaw_mode", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToPosition", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToPosition::adaptive_lookahead", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToPosition::drivetrain", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToPosition::lookahead", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToPosition::timeout_sec", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToPosition::velocity", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToPosition::x", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToPosition::y", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToPosition::yaw_mode", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveToPositionEfffff14DrivetrainTypeRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToPosition::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase22moveToPositionInternalERK8Vector3rRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveToPositionInternal", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase22moveToPositionInternalERK8Vector3rRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveToPositionInternal::dest", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase22moveToPositionInternalERK8Vector3rRK7YawMode", "nervosys::autonomylib::MultirotorApiBase::moveToPositionInternal::yaw_mode", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase7moveToZEfffRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToZ", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase7moveToZEfffRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToZ::adaptive_lookahead", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase7moveToZEfffRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToZ::lookahead", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase7moveToZEfffRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToZ::timeout_sec", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase7moveToZEfffRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToZ::velocity", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase7moveToZEfffRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToZ::yaw_mode", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase7moveToZEfffRK7YawModeff", "nervosys::autonomylib::MultirotorApiBase::moveToZ::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19resetImplementationEv", "nervosys::autonomylib::MultirotorApiBase::resetImplementation", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15rotateByYawRateEff", "nervosys::autonomylib::MultirotorApiBase::rotateByYawRate", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15rotateByYawRateEff", "nervosys::autonomylib::MultirotorApiBase::rotateByYawRate::duration", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15rotateByYawRateEff", "nervosys::autonomylib::MultirotorApiBase::rotateByYawRate::yaw_rate", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11rotateToYawEfff", "nervosys::autonomylib::MultirotorApiBase::rotateToYaw", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11rotateToYawEfff", "nervosys::autonomylib::MultirotorApiBase::rotateToYaw::margin", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11rotateToYawEfff", "nervosys::autonomylib::MultirotorApiBase::rotateToYaw::timeout_sec", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11rotateToYawEfff", "nervosys::autonomylib::MultirotorApiBase::rotateToYaw::yaw", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase22safetyCheckDestinationERK8Vector3r", "nervosys::autonomylib::MultirotorApiBase::safetyCheckDestination", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase22safetyCheckDestinationERK8Vector3r", "nervosys::autonomylib::MultirotorApiBase::safetyCheckDestination::dest_loc", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19safetyCheckVelocityERK8Vector3r", "nervosys::autonomylib::MultirotorApiBase::safetyCheckVelocity", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19safetyCheckVelocityERK8Vector3r", "nervosys::autonomylib::MultirotorApiBase::safetyCheckVelocity::velocity", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase20safetyCheckVelocityZEfff", "nervosys::autonomylib::MultirotorApiBase::safetyCheckVelocityZ", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase20safetyCheckVelocityZEfff", "nervosys::autonomylib::MultirotorApiBase::safetyCheckVelocityZ::vx", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase20safetyCheckVelocityZEfff", "nervosys::autonomylib::MultirotorApiBase::safetyCheckVelocityZ::vy", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase20safetyCheckVelocityZEfff", "nervosys::autonomylib::MultirotorApiBase::safetyCheckVelocityZ::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase28setAngleLevelControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setAngleLevelControllerGains", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase28setAngleLevelControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setAngleLevelControllerGains::kd", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase28setAngleLevelControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setAngleLevelControllerGains::ki", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase28setAngleLevelControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setAngleLevelControllerGains::kp", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27setAngleRateControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setAngleRateControllerGains", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27setAngleRateControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setAngleRateControllerGains::kd", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27setAngleRateControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setAngleRateControllerGains::ki", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27setAngleRateControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setAngleRateControllerGains::kp", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setControllerGains", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setControllerGains::controllerType", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setControllerGains::kd", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setControllerGains::ki", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setControllerGains::kp", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26setPositionControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setPositionControllerGains", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26setPositionControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setPositionControllerGains::kd", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26setPositionControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setPositionControllerGains::ki", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26setPositionControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setPositionControllerGains::kp", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14setRotorStatesERK11RotorStates", "nervosys::autonomylib::MultirotorApiBase::setRotorStates", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14setRotorStatesERK11RotorStates", "nervosys::autonomylib::MultirotorApiBase::setRotorStates::rotor_states", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfff", "nervosys::autonomylib::MultirotorApiBase::setSafety", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfff", "nervosys::autonomylib::MultirotorApiBase::setSafety::enable_reasons", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfff", "nervosys::autonomylib::MultirotorApiBase::setSafety::max_z", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfff", "nervosys::autonomylib::MultirotorApiBase::setSafety::min_z", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfff", "nervosys::autonomylib::MultirotorApiBase::setSafety::obs_avoidance_vel", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfff", "nervosys::autonomylib::MultirotorApiBase::setSafety::obs_clearance", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfff", "nervosys::autonomylib::MultirotorApiBase::setSafety::obs_startegy", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfff", "nervosys::autonomylib::MultirotorApiBase::setSafety::origin", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfff", "nervosys::autonomylib::MultirotorApiBase::setSafety::xy_length", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase13setSafetyEvalEK10shared_ptrI10SafetyEvalE", "nervosys::autonomylib::MultirotorApiBase::setSafetyEval", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase13setSafetyEvalEK10shared_ptrI10SafetyEvalE", "nervosys::autonomylib::MultirotorApiBase::setSafetyEval::safety_eval_ptr", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23setSimulatedGroundTruthEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::MultirotorApiBase::setSimulatedGroundTruth", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23setSimulatedGroundTruthEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::MultirotorApiBase::setSimulatedGroundTruth::environment", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23setSimulatedGroundTruthEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::MultirotorApiBase::setSimulatedGroundTruth::kinematics", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26setVelocityControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setVelocityControllerGains", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26setVelocityControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setVelocityControllerGains::kd", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26setVelocityControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setVelocityControllerGains::ki", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26setVelocityControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::MultirotorApiBase::setVelocityControllerGains::kp", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase7takeoffEf", "nervosys::autonomylib::MultirotorApiBase::takeoff", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase7takeoffEf", "nervosys::autonomylib::MultirotorApiBase::takeoff::timeout_sec", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15waitForFunctionE12WaitFunctionf", "nervosys::autonomylib::MultirotorApiBase::waitForFunction", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15waitForFunctionE12WaitFunctionf", "nervosys::autonomylib::MultirotorApiBase::waitForFunction::function", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15waitForFunctionE12WaitFunctionf", "nervosys::autonomylib::MultirotorApiBase::waitForFunction::max_wait", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase8waitForZEfff", "nervosys::autonomylib::MultirotorApiBase::waitForZ", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase8waitForZEfff", "nervosys::autonomylib::MultirotorApiBase::waitForZ::margin", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase8waitForZEfff", "nervosys::autonomylib::MultirotorApiBase::waitForZ::timeout_sec", ""], [32, 2, 2, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase8waitForZEfff", "nervosys::autonomylib::MultirotorApiBase::waitForZ::z", ""], [32, 0, 1, "_CPPv4N8nervosys11autonomylib17MultirotorApiBaseD0Ev", "nervosys::autonomylib::MultirotorApiBase::~MultirotorApiBase", ""], [427, 1, 1, "_CPPv4N8nervosys11autonomylib19MultirotorApiParamsE", "nervosys::autonomylib::MultirotorApiParams", "Public Functions    inline MultirotorApiParams()    Public Members    float vel_to_breaking_dist = 0.5f      float min_breaking_dist = 1      float max_breaking_dist = 3      float breaking_vel = 1.0f      float min_vel_for_breaking = 3      float distance_accuracy = 0.1f      float obs_clearance = 2      int obs_window = 0"], [427, 0, 1, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams19MultirotorApiParamsEv", "nervosys::autonomylib::MultirotorApiParams::MultirotorApiParams", ""], [427, 3, 1, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams12breaking_velE", "nervosys::autonomylib::MultirotorApiParams::breaking_vel", ""], [427, 3, 1, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams17distance_accuracyE", "nervosys::autonomylib::MultirotorApiParams::distance_accuracy", ""], [427, 3, 1, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams17max_breaking_distE", "nervosys::autonomylib::MultirotorApiParams::max_breaking_dist", ""], [427, 3, 1, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams17min_breaking_distE", "nervosys::autonomylib::MultirotorApiParams::min_breaking_dist", ""], [427, 3, 1, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams20min_vel_for_breakingE", "nervosys::autonomylib::MultirotorApiParams::min_vel_for_breaking", ""], [427, 3, 1, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams13obs_clearanceE", "nervosys::autonomylib::MultirotorApiParams::obs_clearance", ""], [427, 3, 1, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams10obs_windowE", "nervosys::autonomylib::MultirotorApiParams::obs_window", ""], [427, 3, 1, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams20vel_to_breaking_distE", "nervosys::autonomylib::MultirotorApiParams::vel_to_breaking_dist", ""], [37, 1, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParamsE", "nervosys::autonomylib::MultirotorParams", "Subclassed by nervosys::autonomylib::ArduCopterParams, nervosys::autonomylib::ArduCopterSoloParams, nervosys::autonomylib::Px4MultirotorParams, nervosys::autonomylib::SimpleFlightQuadXParams"], [37, 1, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams6ParamsE", "nervosys::autonomylib::MultirotorParams::Params", "Public Members    uint rotor_count      vector<RotorPose> rotor_poses      real_T mass      Matrix3x3r inertia      Vector3r body_box      real_T linear_drag_coefficient = 1.3f / 4.0f      real_T angular_drag_coefficient = linear_drag_coefficient      real_T restitution = 0.55f      real_T friction = 0.5f      RotorParams rotor_params"], [37, 3, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params24angular_drag_coefficientE", "nervosys::autonomylib::MultirotorParams::Params::angular_drag_coefficient", ""], [37, 3, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params8body_boxE", "nervosys::autonomylib::MultirotorParams::Params::body_box", ""], [37, 3, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params8frictionE", "nervosys::autonomylib::MultirotorParams::Params::friction", ""], [37, 3, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params7inertiaE", "nervosys::autonomylib::MultirotorParams::Params::inertia", ""], [37, 3, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params23linear_drag_coefficientE", "nervosys::autonomylib::MultirotorParams::Params::linear_drag_coefficient", ""], [37, 3, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params4massE", "nervosys::autonomylib::MultirotorParams::Params::mass", ""], [37, 3, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params11restitutionE", "nervosys::autonomylib::MultirotorParams::Params::restitution", ""], [37, 3, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params11rotor_countE", "nervosys::autonomylib::MultirotorParams::Params::rotor_count", ""], [37, 3, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params12rotor_paramsE", "nervosys::autonomylib::MultirotorParams::Params::rotor_params", ""], [37, 3, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params11rotor_posesE", "nervosys::autonomylib::MultirotorParams::Params::rotor_poses", ""], [37, 1, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPoseE", "nervosys::autonomylib::MultirotorParams::RotorPose", "Public Functions    inline RotorPose()      inline RotorPose(const Vector3r &position_val, const Vector3r &normal_val, RotorTurningDirection direction_val)    Public Members    Vector3r position      Vector3r normal      RotorTurningDirection direction"], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose9RotorPoseERK8Vector3rRK8Vector3r21RotorTurningDirection", "nervosys::autonomylib::MultirotorParams::RotorPose::RotorPose", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose9RotorPoseEv", "nervosys::autonomylib::MultirotorParams::RotorPose::RotorPose", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose9RotorPoseERK8Vector3rRK8Vector3r21RotorTurningDirection", "nervosys::autonomylib::MultirotorParams::RotorPose::RotorPose::direction_val", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose9RotorPoseERK8Vector3rRK8Vector3r21RotorTurningDirection", "nervosys::autonomylib::MultirotorParams::RotorPose::RotorPose::normal_val", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose9RotorPoseERK8Vector3rRK8Vector3r21RotorTurningDirection", "nervosys::autonomylib::MultirotorParams::RotorPose::RotorPose::position_val", ""], [37, 3, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose9directionE", "nervosys::autonomylib::MultirotorParams::RotorPose::direction", ""], [37, 3, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose6normalE", "nervosys::autonomylib::MultirotorParams::RotorPose::normal", ""], [37, 3, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose8positionE", "nervosys::autonomylib::MultirotorParams::RotorPose::position", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams22addSensorsFromSettingsEPKN19AutonomySimSettings14VehicleSettingE", "nervosys::autonomylib::MultirotorParams::addSensorsFromSettings", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams22addSensorsFromSettingsEPKN19AutonomySimSettings14VehicleSettingE", "nervosys::autonomylib::MultirotorParams::addSensorsFromSettings::vehicle_setting", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams20computeInertiaMatrixER10Matrix3x3rRK8Vector3rRK6vectorI9RotorPoseE6real_T6real_T", "nervosys::autonomylib::MultirotorParams::computeInertiaMatrix", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20computeInertiaMatrixER10Matrix3x3rRK8Vector3rRK6vectorI9RotorPoseE6real_T6real_T", "nervosys::autonomylib::MultirotorParams::computeInertiaMatrix::body_box", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20computeInertiaMatrixER10Matrix3x3rRK8Vector3rRK6vectorI9RotorPoseE6real_T6real_T", "nervosys::autonomylib::MultirotorParams::computeInertiaMatrix::box_mass", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20computeInertiaMatrixER10Matrix3x3rRK8Vector3rRK6vectorI9RotorPoseE6real_T6real_T", "nervosys::autonomylib::MultirotorParams::computeInertiaMatrix::inertia", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20computeInertiaMatrixER10Matrix3x3rRK8Vector3rRK6vectorI9RotorPoseE6real_T6real_T", "nervosys::autonomylib::MultirotorParams::computeInertiaMatrix::motor_assembly_weight", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20computeInertiaMatrixER10Matrix3x3rRK8Vector3rRK6vectorI9RotorPoseE6real_T6real_T", "nervosys::autonomylib::MultirotorParams::computeInertiaMatrix::rotor_poses", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams19createMultirotorApiEv", "nervosys::autonomylib::MultirotorParams::createMultirotorApi", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams9getParamsEv", "nervosys::autonomylib::MultirotorParams::getParams", ""], [37, 0, 1, "_CPPv4NK8nervosys11autonomylib16MultirotorParams9getParamsEv", "nervosys::autonomylib::MultirotorParams::getParams", ""], [37, 0, 1, "_CPPv4NK8nervosys11autonomylib16MultirotorParams16getSensorFactoryEv", "nervosys::autonomylib::MultirotorParams::getSensorFactory", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams10getSensorsEv", "nervosys::autonomylib::MultirotorParams::getSensors", ""], [37, 0, 1, "_CPPv4NK8nervosys11autonomylib16MultirotorParams10getSensorsEv", "nervosys::autonomylib::MultirotorParams::getSensors", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams10initializeEPKN19AutonomySimSettings14VehicleSettingE", "nervosys::autonomylib::MultirotorParams::initialize", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams10initializeEPKN19AutonomySimSettings14VehicleSettingE", "nervosys::autonomylib::MultirotorParams::initialize::vehicle_setting", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams19initializeRotorHexXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorHexX", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams19initializeRotorHexXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorHexX::arm_lengths", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams19initializeRotorHexXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorHexX::rotor_count", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams19initializeRotorHexXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorHexX::rotor_poses", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams19initializeRotorHexXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorHexX::rotor_z", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams20initializeRotorOctoXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorOctoX", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20initializeRotorOctoXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorOctoX::arm_lengths", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20initializeRotorOctoXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorOctoX::rotor_count", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20initializeRotorOctoXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorOctoX::rotor_poses", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20initializeRotorOctoXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorOctoX::rotor_z", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams20initializeRotorQuadXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorQuadX", "The rotor_z is the offset of each motor upwards relative to the center of mass (in meters)."], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20initializeRotorQuadXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorQuadX::arm_lengths", "The rotor_z is the offset of each motor upwards relative to the center of mass (in meters)."], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20initializeRotorQuadXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorQuadX::rotor_count", "The rotor_z is the offset of each motor upwards relative to the center of mass (in meters)."], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20initializeRotorQuadXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorQuadX::rotor_poses", "The rotor_z is the offset of each motor upwards relative to the center of mass (in meters)."], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20initializeRotorQuadXER6vectorI9RotorPoseE4uintA_6real_T6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotorQuadX::rotor_z", "The rotor_z is the offset of each motor upwards relative to the center of mass (in meters)."], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams16initializeRotorsER6vectorI9RotorPoseE4uintA_6real_TA_6real_TA_21RotorTurningDirection6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotors", "Initialize the rotor_poses given the rotor_count, the arm lengths and the arm angles (relative to forwards vector). Also provide the direction you want to spin each rotor and the z-offset of the rotors relative to the center of gravity."], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams16initializeRotorsER6vectorI9RotorPoseE4uintA_6real_TA_6real_TA_21RotorTurningDirection6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotors::arm_angles", "Initialize the rotor_poses given the rotor_count, the arm lengths and the arm angles (relative to forwards vector). Also provide the direction you want to spin each rotor and the z-offset of the rotors relative to the center of gravity."], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams16initializeRotorsER6vectorI9RotorPoseE4uintA_6real_TA_6real_TA_21RotorTurningDirection6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotors::arm_lengths", "Initialize the rotor_poses given the rotor_count, the arm lengths and the arm angles (relative to forwards vector). Also provide the direction you want to spin each rotor and the z-offset of the rotors relative to the center of gravity."], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams16initializeRotorsER6vectorI9RotorPoseE4uintA_6real_TA_6real_TA_21RotorTurningDirection6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotors::rotor_count", "Initialize the rotor_poses given the rotor_count, the arm lengths and the arm angles (relative to forwards vector). Also provide the direction you want to spin each rotor and the z-offset of the rotors relative to the center of gravity."], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams16initializeRotorsER6vectorI9RotorPoseE4uintA_6real_TA_6real_TA_21RotorTurningDirection6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotors::rotor_directions", "Initialize the rotor_poses given the rotor_count, the arm lengths and the arm angles (relative to forwards vector). Also provide the direction you want to spin each rotor and the z-offset of the rotors relative to the center of gravity."], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams16initializeRotorsER6vectorI9RotorPoseE4uintA_6real_TA_6real_TA_21RotorTurningDirection6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotors::rotor_poses", "Initialize the rotor_poses given the rotor_count, the arm lengths and the arm angles (relative to forwards vector). Also provide the direction you want to spin each rotor and the z-offset of the rotors relative to the center of gravity."], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams16initializeRotorsER6vectorI9RotorPoseE4uintA_6real_TA_6real_TA_21RotorTurningDirection6real_T", "nervosys::autonomylib::MultirotorParams::initializeRotors::rotor_z", "Initialize the rotor_poses given the rotor_count, the arm lengths and the arm angles (relative to forwards vector). Also provide the direction you want to spin each rotor and the z-offset of the rotors relative to the center of gravity."], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams20setupFrameBlacksheepER6Params", "nervosys::autonomylib::MultirotorParams::setupFrameBlacksheep", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20setupFrameBlacksheepER6Params", "nervosys::autonomylib::MultirotorParams::setupFrameBlacksheep::params", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams20setupFrameFlamewheelER6Params", "nervosys::autonomylib::MultirotorParams::setupFrameFlamewheel", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20setupFrameFlamewheelER6Params", "nervosys::autonomylib::MultirotorParams::setupFrameFlamewheel::params", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams23setupFrameFlamewheelFLAER6Params", "nervosys::autonomylib::MultirotorParams::setupFrameFlamewheelFLA", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams23setupFrameFlamewheelFLAER6Params", "nervosys::autonomylib::MultirotorParams::setupFrameFlamewheelFLA::params", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams20setupFrameGenericHexER6Params", "nervosys::autonomylib::MultirotorParams::setupFrameGenericHex", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams20setupFrameGenericHexER6Params", "nervosys::autonomylib::MultirotorParams::setupFrameGenericHex::params", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams21setupFrameGenericOctoER6Params", "nervosys::autonomylib::MultirotorParams::setupFrameGenericOcto", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams21setupFrameGenericOctoER6Params", "nervosys::autonomylib::MultirotorParams::setupFrameGenericOcto::params", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams21setupFrameGenericQuadER6Params", "nervosys::autonomylib::MultirotorParams::setupFrameGenericQuad", ""], [37, 2, 2, "_CPPv4N8nervosys11autonomylib16MultirotorParams21setupFrameGenericQuadER6Params", "nervosys::autonomylib::MultirotorParams::setupFrameGenericQuad::params", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParams11setupParamsEv", "nervosys::autonomylib::MultirotorParams::setupParams", ""], [37, 0, 1, "_CPPv4N8nervosys11autonomylib16MultirotorParamsD0Ev", "nervosys::autonomylib::MultirotorParams::~MultirotorParams", ""], [38, 1, 1, "_CPPv4N8nervosys11autonomylib23MultirotorParamsFactoryE", "nervosys::autonomylib::MultirotorParamsFactory", "Public Static Functions    static inline std::unique_ptr<MultirotorParams> createConfig(const AutonomySimSettings::VehicleSetting *vehicle_setting, std::shared_ptr<const SensorFactory> sensor_factory)"], [38, 0, 1, "_CPPv4N8nervosys11autonomylib23MultirotorParamsFactory12createConfigEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::MultirotorParamsFactory::createConfig", ""], [38, 2, 2, "_CPPv4N8nervosys11autonomylib23MultirotorParamsFactory12createConfigEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::MultirotorParamsFactory::createConfig::sensor_factory", ""], [38, 2, 2, "_CPPv4N8nervosys11autonomylib23MultirotorParamsFactory12createConfigEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::MultirotorParamsFactory::createConfig::vehicle_setting", ""], [39, 1, 1, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBodyE", "nervosys::autonomylib::MultirotorPhysicsBody", "Update kinematics without a state"], [39, 0, 1, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody21MultirotorPhysicsBodyEP16MultirotorParamsP14VehicleApiBaseP10KinematicsP11Environment", "nervosys::autonomylib::MultirotorPhysicsBody::MultirotorPhysicsBody", ""], [39, 2, 2, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody21MultirotorPhysicsBodyEP16MultirotorParamsP14VehicleApiBaseP10KinematicsP11Environment", "nervosys::autonomylib::MultirotorPhysicsBody::MultirotorPhysicsBody::environment", ""], [39, 2, 2, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody21MultirotorPhysicsBodyEP16MultirotorParamsP14VehicleApiBaseP10KinematicsP11Environment", "nervosys::autonomylib::MultirotorPhysicsBody::MultirotorPhysicsBody::kinematics", ""], [39, 2, 2, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody21MultirotorPhysicsBodyEP16MultirotorParamsP14VehicleApiBaseP10KinematicsP11Environment", "nervosys::autonomylib::MultirotorPhysicsBody::MultirotorPhysicsBody::params", ""], [39, 2, 2, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody21MultirotorPhysicsBodyEP16MultirotorParamsP14VehicleApiBaseP10KinematicsP11Environment", "nervosys::autonomylib::MultirotorPhysicsBody::MultirotorPhysicsBody::vehicle_api", ""], [39, 0, 1, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody15dragVertexCountEv", "nervosys::autonomylib::MultirotorPhysicsBody::dragVertexCount", ""], [39, 0, 1, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody13getDragVertexE4uint", "nervosys::autonomylib::MultirotorPhysicsBody::getDragVertex", ""], [39, 0, 1, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody13getDragVertexE4uint", "nervosys::autonomylib::MultirotorPhysicsBody::getDragVertex", ""], [39, 2, 2, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody13getDragVertexE4uint", "nervosys::autonomylib::MultirotorPhysicsBody::getDragVertex::index", ""], [39, 2, 2, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody13getDragVertexE4uint", "nervosys::autonomylib::MultirotorPhysicsBody::getDragVertex::index", ""], [39, 0, 1, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody11getFrictionEv", "nervosys::autonomylib::MultirotorPhysicsBody::getFriction", ""], [39, 0, 1, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody14getRestitutionEv", "nervosys::autonomylib::MultirotorPhysicsBody::getRestitution", ""], [39, 0, 1, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody14getRotorOutputE4uint", "nervosys::autonomylib::MultirotorPhysicsBody::getRotorOutput", ""], [39, 2, 2, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody14getRotorOutputE4uint", "nervosys::autonomylib::MultirotorPhysicsBody::getRotorOutput::rotor_index", ""], [39, 0, 1, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody10getSensorsEv", "nervosys::autonomylib::MultirotorPhysicsBody::getSensors", ""], [39, 0, 1, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody15getWrenchVertexE4uint", "nervosys::autonomylib::MultirotorPhysicsBody::getWrenchVertex", ""], [39, 0, 1, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody15getWrenchVertexE4uint", "nervosys::autonomylib::MultirotorPhysicsBody::getWrenchVertex", ""], [39, 2, 2, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody15getWrenchVertexE4uint", "nervosys::autonomylib::MultirotorPhysicsBody::getWrenchVertex::index", ""], [39, 2, 2, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody15getWrenchVertexE4uint", "nervosys::autonomylib::MultirotorPhysicsBody::getWrenchVertex::index", ""], [39, 0, 1, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody11reportStateER13StateReporter", "nervosys::autonomylib::MultirotorPhysicsBody::reportState", ""], [39, 2, 2, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody11reportStateER13StateReporter", "nervosys::autonomylib::MultirotorPhysicsBody::reportState::reporter", ""], [39, 0, 1, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody19resetImplementationEv", "nervosys::autonomylib::MultirotorPhysicsBody::resetImplementation", ""], [39, 0, 1, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody6updateEv", "nervosys::autonomylib::MultirotorPhysicsBody::update", ""], [39, 0, 1, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody16updateKinematicsERKN10Kinematics5StateE", "nervosys::autonomylib::MultirotorPhysicsBody::updateKinematics", ""], [39, 0, 1, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody16updateKinematicsEv", "nervosys::autonomylib::MultirotorPhysicsBody::updateKinematics", "Update kinematics without a state"], [39, 2, 2, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody16updateKinematicsERKN10Kinematics5StateE", "nervosys::autonomylib::MultirotorPhysicsBody::updateKinematics::kinematics", ""], [39, 0, 1, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody26updateSensorsAndControllerEv", "nervosys::autonomylib::MultirotorPhysicsBody::updateSensorsAndController", ""], [39, 0, 1, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody17wrenchVertexCountEv", "nervosys::autonomylib::MultirotorPhysicsBody::wrenchVertexCount", ""], [39, 0, 1, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBodyD0Ev", "nervosys::autonomylib::MultirotorPhysicsBody::~MultirotorPhysicsBody", ""], [486, 4, 1, "_CPPv4N8nervosys11autonomylib24MultirotorRpcLibAdaptorsE", "nervosys::autonomylib::MultirotorRpcLibAdaptors", ""], [40, 1, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClientE", "nervosys::autonomylib::MultirotorRpcLibClient", "Public Functions    MultirotorRpcLibClient(const string &ip_address = \"localhost\", uint16_t port = RpcLibPort, float timeout_sec = 60)      MultirotorRpcLibClient *takeoffAsync(float timeout_sec = 20, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *landAsync(float timeout_sec = 60, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *goHomeAsync(float timeout_sec = Utils::max<float>(), const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveToGPSAsync(float latitude, float longitude, float altitude, float velocity, float timeout_sec = Utils::max<float>(), DrivetrainType drivetrain = DrivetrainType::MaxDegreeOfFreedom, const YawMode &yaw_mode = YawMode(), float lookahead = -1, float adaptive_lookahead = 1, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveByVelocityBodyFrameAsync(float vx, float vy, float vz, float duration, DrivetrainType drivetrain = DrivetrainType::MaxDegreeOfFreedom, const YawMode &yaw_mode = YawMode(), const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveByVelocityZBodyFrameAsync(float vx, float vy, float z, float duration, DrivetrainType drivetrain = DrivetrainType::MaxDegreeOfFreedom, const YawMode &yaw_mode = YawMode(), const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveByMotorPWMsAsync(float front_right_pwm, float rear_left_pwm, float front_left_pwm, float rear_right_pwm, float duration, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveByRollPitchYawZAsync(float roll, float pitch, float yaw, float z, float duration, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveByRollPitchYawThrottleAsync(float roll, float pitch, float yaw, float throttle, float duration, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveByRollPitchYawrateThrottleAsync(float roll, float pitch, float yaw_rate, float throttle, float duration, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveByRollPitchYawrateZAsync(float roll, float pitch, float yaw_rate, float z, float duration, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveByAngleRatesZAsync(float roll_rate, float pitch_rate, float yaw_rate, float z, float duration, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveByAngleRatesThrottleAsync(float roll_rate, float pitch_rate, float yaw_rate, float throttle, float duration, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveByVelocityAsync(float vx, float vy, float vz, float duration, DrivetrainType drivetrain = DrivetrainType::MaxDegreeOfFreedom, const YawMode &yaw_mode = YawMode(), const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveByVelocityZAsync(float vx, float vy, float z, float duration, DrivetrainType drivetrain = DrivetrainType::MaxDegreeOfFreedom, const YawMode &yaw_mode = YawMode(), const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveOnPathAsync(const vector<Vector3r> &path, float velocity, float timeout_sec = Utils::max<float>(), DrivetrainType drivetrain = DrivetrainType::MaxDegreeOfFreedom, const YawMode &yaw_mode = YawMode(), float lookahead = -1, float adaptive_lookahead = 1, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveToPositionAsync(float x, float y, float z, float velocity, float timeout_sec = Utils::max<float>(), DrivetrainType drivetrain = DrivetrainType::MaxDegreeOfFreedom, const YawMode &yaw_mode = YawMode(), float lookahead = -1, float adaptive_lookahead = 1, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveToZAsync(float z, float velocity, float timeout_sec = Utils::max<float>(), const YawMode &yaw_mode = YawMode(), float lookahead = -1, float adaptive_lookahead = 1, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *moveByManualAsync(float vx_max, float vy_max, float z_min, float duration, DrivetrainType drivetrain = DrivetrainType::MaxDegreeOfFreedom, const YawMode &yaw_mode = YawMode(), const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *rotateToYawAsync(float yaw, float timeout_sec = Utils::max<float>(), float margin = 5, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *rotateByYawRateAsync(float yaw_rate, float duration, const std::string &vehicle_name = \"\")      MultirotorRpcLibClient *hoverAsync(const std::string &vehicle_name = \"\")      void setAngleLevelControllerGains(const vector<float> &kp, const vector<float> &ki, const vector<float> &kd, const std::string &vehicle_name = \"\")      void setAngleRateControllerGains(const vector<float> &kp, const vector<float> &ki, const vector<float> &kd, const std::string &vehicle_name = \"\")      void setVelocityControllerGains(const vector<float> &kp, const vector<float> &ki, const vector<float> &kd, const std::string &vehicle_name = \"\")      void setPositionControllerGains(const vector<float> &kp, const vector<float> &ki, const vector<float> &kd, const std::string &vehicle_name = \"\")      void moveByRC(const RCData &rc_data, const std::string &vehicle_name = \"\")      MultirotorState getMultirotorState(const std::string &vehicle_name = \"\")      RotorStates getRotorStates(const std::string &vehicle_name = \"\")      bool setSafety(SafetyEval::SafetyViolationType enable_reasons, float obs_clearance, SafetyEval::ObsAvoidanceStrategy obs_startegy, float obs_avoidance_vel, const Vector3r &origin, float xy_length, float max_z, float min_z, const std::string &vehicle_name = \"\")      virtual MultirotorRpcLibClient *waitOnLastTask(bool *task_result = nullptr, float timeout_sec = Utils::nan<float>()) override      virtual ~MultirotorRpcLibClient()      struct impl  Public Members    std::future<clmdep_msgpack::object_handle> last_future"], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient22MultirotorRpcLibClientERK6string8uint16_tf", "nervosys::autonomylib::MultirotorRpcLibClient::MultirotorRpcLibClient", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient22MultirotorRpcLibClientERK6string8uint16_tf", "nervosys::autonomylib::MultirotorRpcLibClient::MultirotorRpcLibClient::ip_address", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient22MultirotorRpcLibClientERK6string8uint16_tf", "nervosys::autonomylib::MultirotorRpcLibClient::MultirotorRpcLibClient::port", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient22MultirotorRpcLibClientERK6string8uint16_tf", "nervosys::autonomylib::MultirotorRpcLibClient::MultirotorRpcLibClient::timeout_sec", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient18getMultirotorStateERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::getMultirotorState", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient18getMultirotorStateERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::getMultirotorState::vehicle_name", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14getRotorStatesERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::getRotorStates", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14getRotorStatesERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::getRotorStates::vehicle_name", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient11goHomeAsyncEfRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::goHomeAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient11goHomeAsyncEfRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::goHomeAsync::timeout_sec", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient11goHomeAsyncEfRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::goHomeAsync::vehicle_name", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient10hoverAsyncERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::hoverAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient10hoverAsyncERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::hoverAsync::vehicle_name", ""], [40, 1, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient4implE", "nervosys::autonomylib::MultirotorRpcLibClient::impl", "Public Members    std::future<clmdep_msgpack::object_handle> last_future"], [40, 3, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient4impl11last_futureE", "nervosys::autonomylib::MultirotorRpcLibClient::impl::last_future", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9landAsyncEfRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::landAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9landAsyncEfRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::landAsync::timeout_sec", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9landAsyncEfRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::landAsync::vehicle_name", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByAngleRatesThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByAngleRatesThrottleAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByAngleRatesThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByAngleRatesThrottleAsync::duration", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByAngleRatesThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByAngleRatesThrottleAsync::pitch_rate", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByAngleRatesThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByAngleRatesThrottleAsync::roll_rate", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByAngleRatesThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByAngleRatesThrottleAsync::throttle", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByAngleRatesThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByAngleRatesThrottleAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByAngleRatesThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByAngleRatesThrottleAsync::yaw_rate", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient22moveByAngleRatesZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByAngleRatesZAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient22moveByAngleRatesZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByAngleRatesZAsync::duration", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient22moveByAngleRatesZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByAngleRatesZAsync::pitch_rate", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient22moveByAngleRatesZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByAngleRatesZAsync::roll_rate", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient22moveByAngleRatesZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByAngleRatesZAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient22moveByAngleRatesZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByAngleRatesZAsync::yaw_rate", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient22moveByAngleRatesZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByAngleRatesZAsync::z", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient17moveByManualAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByManualAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient17moveByManualAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByManualAsync::drivetrain", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient17moveByManualAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByManualAsync::duration", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient17moveByManualAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByManualAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient17moveByManualAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByManualAsync::vx_max", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient17moveByManualAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByManualAsync::vy_max", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient17moveByManualAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByManualAsync::yaw_mode", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient17moveByManualAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByManualAsync::z_min", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByMotorPWMsAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByMotorPWMsAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByMotorPWMsAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByMotorPWMsAsync::duration", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByMotorPWMsAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByMotorPWMsAsync::front_left_pwm", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByMotorPWMsAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByMotorPWMsAsync::front_right_pwm", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByMotorPWMsAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByMotorPWMsAsync::rear_left_pwm", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByMotorPWMsAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByMotorPWMsAsync::rear_right_pwm", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByMotorPWMsAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByMotorPWMsAsync::vehicle_name", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient8moveByRCERK6RCDataRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRC", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient8moveByRCERK6RCDataRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRC::rc_data", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient8moveByRCERK6RCDataRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRC::vehicle_name", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient31moveByRollPitchYawThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawThrottleAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient31moveByRollPitchYawThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawThrottleAsync::duration", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient31moveByRollPitchYawThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawThrottleAsync::pitch", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient31moveByRollPitchYawThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawThrottleAsync::roll", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient31moveByRollPitchYawThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawThrottleAsync::throttle", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient31moveByRollPitchYawThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawThrottleAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient31moveByRollPitchYawThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawThrottleAsync::yaw", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient24moveByRollPitchYawZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawZAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient24moveByRollPitchYawZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawZAsync::duration", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient24moveByRollPitchYawZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawZAsync::pitch", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient24moveByRollPitchYawZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawZAsync::roll", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient24moveByRollPitchYawZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawZAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient24moveByRollPitchYawZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawZAsync::yaw", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient24moveByRollPitchYawZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawZAsync::z", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient35moveByRollPitchYawrateThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawrateThrottleAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient35moveByRollPitchYawrateThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawrateThrottleAsync::duration", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient35moveByRollPitchYawrateThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawrateThrottleAsync::pitch", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient35moveByRollPitchYawrateThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawrateThrottleAsync::roll", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient35moveByRollPitchYawrateThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawrateThrottleAsync::throttle", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient35moveByRollPitchYawrateThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawrateThrottleAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient35moveByRollPitchYawrateThrottleAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawrateThrottleAsync::yaw_rate", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByRollPitchYawrateZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawrateZAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByRollPitchYawrateZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawrateZAsync::duration", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByRollPitchYawrateZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawrateZAsync::pitch", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByRollPitchYawrateZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawrateZAsync::roll", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByRollPitchYawrateZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawrateZAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByRollPitchYawrateZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawrateZAsync::yaw_rate", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByRollPitchYawrateZAsyncEfffffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByRollPitchYawrateZAsync::z", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveByVelocityAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveByVelocityAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityAsync::drivetrain", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveByVelocityAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityAsync::duration", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveByVelocityAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveByVelocityAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityAsync::vx", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveByVelocityAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityAsync::vy", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveByVelocityAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityAsync::vz", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveByVelocityAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityAsync::yaw_mode", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByVelocityBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityBodyFrameAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByVelocityBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityBodyFrameAsync::drivetrain", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByVelocityBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityBodyFrameAsync::duration", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByVelocityBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityBodyFrameAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByVelocityBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityBodyFrameAsync::vx", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByVelocityBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityBodyFrameAsync::vy", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByVelocityBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityBodyFrameAsync::vz", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByVelocityBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityBodyFrameAsync::yaw_mode", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByVelocityZAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByVelocityZAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZAsync::drivetrain", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByVelocityZAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZAsync::duration", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByVelocityZAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByVelocityZAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZAsync::vx", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByVelocityZAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZAsync::vy", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByVelocityZAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZAsync::yaw_mode", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByVelocityZAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZAsync::z", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByVelocityZBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZBodyFrameAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByVelocityZBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZBodyFrameAsync::drivetrain", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByVelocityZBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZBodyFrameAsync::duration", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByVelocityZBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZBodyFrameAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByVelocityZBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZBodyFrameAsync::vx", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByVelocityZBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZBodyFrameAsync::vy", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByVelocityZBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZBodyFrameAsync::yaw_mode", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByVelocityZBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveByVelocityZBodyFrameAsync::z", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient15moveOnPathAsyncERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveOnPathAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient15moveOnPathAsyncERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveOnPathAsync::adaptive_lookahead", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient15moveOnPathAsyncERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveOnPathAsync::drivetrain", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient15moveOnPathAsyncERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveOnPathAsync::lookahead", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient15moveOnPathAsyncERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveOnPathAsync::path", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient15moveOnPathAsyncERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveOnPathAsync::timeout_sec", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient15moveOnPathAsyncERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveOnPathAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient15moveOnPathAsyncERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveOnPathAsync::velocity", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient15moveOnPathAsyncERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveOnPathAsync::yaw_mode", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14moveToGPSAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToGPSAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14moveToGPSAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToGPSAsync::adaptive_lookahead", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14moveToGPSAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToGPSAsync::altitude", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14moveToGPSAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToGPSAsync::drivetrain", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14moveToGPSAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToGPSAsync::latitude", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14moveToGPSAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToGPSAsync::longitude", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14moveToGPSAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToGPSAsync::lookahead", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14moveToGPSAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToGPSAsync::timeout_sec", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14moveToGPSAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToGPSAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14moveToGPSAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToGPSAsync::velocity", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14moveToGPSAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToGPSAsync::yaw_mode", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveToPositionAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToPositionAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveToPositionAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToPositionAsync::adaptive_lookahead", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveToPositionAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToPositionAsync::drivetrain", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveToPositionAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToPositionAsync::lookahead", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveToPositionAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToPositionAsync::timeout_sec", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveToPositionAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToPositionAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveToPositionAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToPositionAsync::velocity", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveToPositionAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToPositionAsync::x", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveToPositionAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToPositionAsync::y", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveToPositionAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToPositionAsync::yaw_mode", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveToPositionAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToPositionAsync::z", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient12moveToZAsyncEfffRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToZAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient12moveToZAsyncEfffRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToZAsync::adaptive_lookahead", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient12moveToZAsyncEfffRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToZAsync::lookahead", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient12moveToZAsyncEfffRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToZAsync::timeout_sec", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient12moveToZAsyncEfffRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToZAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient12moveToZAsyncEfffRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToZAsync::velocity", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient12moveToZAsyncEfffRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToZAsync::yaw_mode", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient12moveToZAsyncEfffRK7YawModeffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::moveToZAsync::z", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20rotateByYawRateAsyncEffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::rotateByYawRateAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20rotateByYawRateAsyncEffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::rotateByYawRateAsync::duration", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20rotateByYawRateAsyncEffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::rotateByYawRateAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20rotateByYawRateAsyncEffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::rotateByYawRateAsync::yaw_rate", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient16rotateToYawAsyncEfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::rotateToYawAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient16rotateToYawAsyncEfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::rotateToYawAsync::margin", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient16rotateToYawAsyncEfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::rotateToYawAsync::timeout_sec", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient16rotateToYawAsyncEfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::rotateToYawAsync::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient16rotateToYawAsyncEfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::rotateToYawAsync::yaw", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28setAngleLevelControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setAngleLevelControllerGains", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28setAngleLevelControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setAngleLevelControllerGains::kd", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28setAngleLevelControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setAngleLevelControllerGains::ki", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28setAngleLevelControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setAngleLevelControllerGains::kp", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28setAngleLevelControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setAngleLevelControllerGains::vehicle_name", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient27setAngleRateControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setAngleRateControllerGains", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient27setAngleRateControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setAngleRateControllerGains::kd", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient27setAngleRateControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setAngleRateControllerGains::ki", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient27setAngleRateControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setAngleRateControllerGains::kp", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient27setAngleRateControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setAngleRateControllerGains::vehicle_name", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient26setPositionControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setPositionControllerGains", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient26setPositionControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setPositionControllerGains::kd", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient26setPositionControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setPositionControllerGains::ki", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient26setPositionControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setPositionControllerGains::kp", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient26setPositionControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setPositionControllerGains::vehicle_name", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setSafety", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setSafety::enable_reasons", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setSafety::max_z", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setSafety::min_z", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setSafety::obs_avoidance_vel", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setSafety::obs_clearance", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setSafety::obs_startegy", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setSafety::origin", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setSafety::vehicle_name", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfffRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setSafety::xy_length", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient26setVelocityControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setVelocityControllerGains", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient26setVelocityControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setVelocityControllerGains::kd", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient26setVelocityControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setVelocityControllerGains::ki", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient26setVelocityControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setVelocityControllerGains::kp", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient26setVelocityControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::setVelocityControllerGains::vehicle_name", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient12takeoffAsyncEfRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::takeoffAsync", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient12takeoffAsyncEfRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::takeoffAsync::timeout_sec", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient12takeoffAsyncEfRKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibClient::takeoffAsync::vehicle_name", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14waitOnLastTaskEPbf", "nervosys::autonomylib::MultirotorRpcLibClient::waitOnLastTask", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14waitOnLastTaskEPbf", "nervosys::autonomylib::MultirotorRpcLibClient::waitOnLastTask::task_result", ""], [40, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14waitOnLastTaskEPbf", "nervosys::autonomylib::MultirotorRpcLibClient::waitOnLastTask::timeout_sec", ""], [40, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClientD0Ev", "nervosys::autonomylib::MultirotorRpcLibClient::~MultirotorRpcLibClient", ""], [41, 1, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibServerE", "nervosys::autonomylib::MultirotorRpcLibServer", "Public Functions    MultirotorRpcLibServer(ApiProvider *api_provider, string server_address, uint16_t port = RpcLibPort)      virtual ~MultirotorRpcLibServer()    Protected Functions    inline virtual MultirotorApiBase *getVehicleApi(const std::string &vehicle_name) override"], [41, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibServer22MultirotorRpcLibServerEP11ApiProvider6string8uint16_t", "nervosys::autonomylib::MultirotorRpcLibServer::MultirotorRpcLibServer", ""], [41, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibServer22MultirotorRpcLibServerEP11ApiProvider6string8uint16_t", "nervosys::autonomylib::MultirotorRpcLibServer::MultirotorRpcLibServer::api_provider", ""], [41, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibServer22MultirotorRpcLibServerEP11ApiProvider6string8uint16_t", "nervosys::autonomylib::MultirotorRpcLibServer::MultirotorRpcLibServer::port", ""], [41, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibServer22MultirotorRpcLibServerEP11ApiProvider6string8uint16_t", "nervosys::autonomylib::MultirotorRpcLibServer::MultirotorRpcLibServer::server_address", ""], [41, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibServer13getVehicleApiERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibServer::getVehicleApi", ""], [41, 2, 2, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibServer13getVehicleApiERKNSt6stringE", "nervosys::autonomylib::MultirotorRpcLibServer::getVehicleApi::vehicle_name", ""], [41, 0, 1, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibServerD0Ev", "nervosys::autonomylib::MultirotorRpcLibServer::~MultirotorRpcLibServer", ""], [431, 1, 1, "_CPPv4N8nervosys11autonomylib15MultirotorStateE", "nervosys::autonomylib::MultirotorState", "Public Functions    inline MultirotorState()      inline MultirotorState(const CollisionInfo &collision_val, const Kinematics::State &kinematics_estimated_val, const GeoPoint &gps_location_val, uint64_t timestamp_val, LandedState landed_state_val, const RCData &rc_data_val, bool ready_val, const std::string &message, bool can_arm_val)      inline const Vector3r &getPosition() const      inline const Quaternionr &getOrientation() const    Public Members    CollisionInfo collision      Kinematics::State kinematics_estimated      GeoPoint gps_location      uint64_t timestamp      LandedState landed_state      RCData rc_data      bool ready      std::string ready_message      bool can_arm"], [431, 0, 1, "_CPPv4N8nervosys11autonomylib15MultirotorState15MultirotorStateERK13CollisionInfoRKN10Kinematics5StateERK8GeoPoint8uint64_t11LandedStateRK6RCDatabRKNSt6stringEb", "nervosys::autonomylib::MultirotorState::MultirotorState", ""], [431, 0, 1, "_CPPv4N8nervosys11autonomylib15MultirotorState15MultirotorStateEv", "nervosys::autonomylib::MultirotorState::MultirotorState", ""], [431, 2, 2, "_CPPv4N8nervosys11autonomylib15MultirotorState15MultirotorStateERK13CollisionInfoRKN10Kinematics5StateERK8GeoPoint8uint64_t11LandedStateRK6RCDatabRKNSt6stringEb", "nervosys::autonomylib::MultirotorState::MultirotorState::can_arm_val", ""], [431, 2, 2, "_CPPv4N8nervosys11autonomylib15MultirotorState15MultirotorStateERK13CollisionInfoRKN10Kinematics5StateERK8GeoPoint8uint64_t11LandedStateRK6RCDatabRKNSt6stringEb", "nervosys::autonomylib::MultirotorState::MultirotorState::collision_val", ""], [431, 2, 2, "_CPPv4N8nervosys11autonomylib15MultirotorState15MultirotorStateERK13CollisionInfoRKN10Kinematics5StateERK8GeoPoint8uint64_t11LandedStateRK6RCDatabRKNSt6stringEb", "nervosys::autonomylib::MultirotorState::MultirotorState::gps_location_val", ""], [431, 2, 2, "_CPPv4N8nervosys11autonomylib15MultirotorState15MultirotorStateERK13CollisionInfoRKN10Kinematics5StateERK8GeoPoint8uint64_t11LandedStateRK6RCDatabRKNSt6stringEb", "nervosys::autonomylib::MultirotorState::MultirotorState::kinematics_estimated_val", ""], [431, 2, 2, "_CPPv4N8nervosys11autonomylib15MultirotorState15MultirotorStateERK13CollisionInfoRKN10Kinematics5StateERK8GeoPoint8uint64_t11LandedStateRK6RCDatabRKNSt6stringEb", "nervosys::autonomylib::MultirotorState::MultirotorState::landed_state_val", ""], [431, 2, 2, "_CPPv4N8nervosys11autonomylib15MultirotorState15MultirotorStateERK13CollisionInfoRKN10Kinematics5StateERK8GeoPoint8uint64_t11LandedStateRK6RCDatabRKNSt6stringEb", "nervosys::autonomylib::MultirotorState::MultirotorState::message", ""], [431, 2, 2, "_CPPv4N8nervosys11autonomylib15MultirotorState15MultirotorStateERK13CollisionInfoRKN10Kinematics5StateERK8GeoPoint8uint64_t11LandedStateRK6RCDatabRKNSt6stringEb", "nervosys::autonomylib::MultirotorState::MultirotorState::rc_data_val", ""], [431, 2, 2, "_CPPv4N8nervosys11autonomylib15MultirotorState15MultirotorStateERK13CollisionInfoRKN10Kinematics5StateERK8GeoPoint8uint64_t11LandedStateRK6RCDatabRKNSt6stringEb", "nervosys::autonomylib::MultirotorState::MultirotorState::ready_val", ""], [431, 2, 2, "_CPPv4N8nervosys11autonomylib15MultirotorState15MultirotorStateERK13CollisionInfoRKN10Kinematics5StateERK8GeoPoint8uint64_t11LandedStateRK6RCDatabRKNSt6stringEb", "nervosys::autonomylib::MultirotorState::MultirotorState::timestamp_val", ""], [431, 3, 1, "_CPPv4N8nervosys11autonomylib15MultirotorState7can_armE", "nervosys::autonomylib::MultirotorState::can_arm", ""], [431, 3, 1, "_CPPv4N8nervosys11autonomylib15MultirotorState9collisionE", "nervosys::autonomylib::MultirotorState::collision", ""], [431, 0, 1, "_CPPv4NK8nervosys11autonomylib15MultirotorState14getOrientationEv", "nervosys::autonomylib::MultirotorState::getOrientation", ""], [431, 0, 1, "_CPPv4NK8nervosys11autonomylib15MultirotorState11getPositionEv", "nervosys::autonomylib::MultirotorState::getPosition", ""], [431, 3, 1, "_CPPv4N8nervosys11autonomylib15MultirotorState12gps_locationE", "nervosys::autonomylib::MultirotorState::gps_location", ""], [431, 3, 1, "_CPPv4N8nervosys11autonomylib15MultirotorState20kinematics_estimatedE", "nervosys::autonomylib::MultirotorState::kinematics_estimated", ""], [431, 3, 1, "_CPPv4N8nervosys11autonomylib15MultirotorState12landed_stateE", "nervosys::autonomylib::MultirotorState::landed_state", ""], [431, 3, 1, "_CPPv4N8nervosys11autonomylib15MultirotorState7rc_dataE", "nervosys::autonomylib::MultirotorState::rc_data", ""], [431, 3, 1, "_CPPv4N8nervosys11autonomylib15MultirotorState5readyE", "nervosys::autonomylib::MultirotorState::ready", ""], [431, 3, 1, "_CPPv4N8nervosys11autonomylib15MultirotorState13ready_messageE", "nervosys::autonomylib::MultirotorState::ready_message", ""], [431, 3, 1, "_CPPv4N8nervosys11autonomylib15MultirotorState9timestampE", "nervosys::autonomylib::MultirotorState::timestamp", ""], [42, 1, 1, "_CPPv4N8nervosys11autonomylib11ObstacleMapE", "nervosys::autonomylib::ObstacleMap", "Public Functions    ObstacleInfo hasObstacle_(int from_tick, int to_tick) const      ObstacleMap(int ticks, bool odd_blindspots = false)      void update(float distance, int tick, int window, float confidence)      void update(float distances[], float confidences[])      void setBlindspot(int tick, bool blindspot)      ObstacleInfo hasObstacle(int from_tick, int to_tick)      ObstacleInfo getClosestObstacle()      int getTicks() const      int angleToTick(float angle_rad) const      float tickToAngleStart(int tick) const      float tickToAngleEnd(int tick) const      float tickToAngleMid(int tick) const      struct ObstacleInfo  Public Functions    inline string toString() const    Public Members    int tick      float distance      float confidence"], [42, 1, 1, "_CPPv4N8nervosys11autonomylib11ObstacleMap12ObstacleInfoE", "nervosys::autonomylib::ObstacleMap::ObstacleInfo", "Public Functions    inline string toString() const    Public Members    int tick      float distance      float confidence"], [42, 3, 1, "_CPPv4N8nervosys11autonomylib11ObstacleMap12ObstacleInfo10confidenceE", "nervosys::autonomylib::ObstacleMap::ObstacleInfo::confidence", ""], [42, 3, 1, "_CPPv4N8nervosys11autonomylib11ObstacleMap12ObstacleInfo8distanceE", "nervosys::autonomylib::ObstacleMap::ObstacleInfo::distance", ""], [42, 3, 1, "_CPPv4N8nervosys11autonomylib11ObstacleMap12ObstacleInfo4tickE", "nervosys::autonomylib::ObstacleMap::ObstacleInfo::tick", ""], [42, 0, 1, "_CPPv4NK8nervosys11autonomylib11ObstacleMap12ObstacleInfo8toStringEv", "nervosys::autonomylib::ObstacleMap::ObstacleInfo::toString", ""], [42, 0, 1, "_CPPv4N8nervosys11autonomylib11ObstacleMap11ObstacleMapEib", "nervosys::autonomylib::ObstacleMap::ObstacleMap", ""], [42, 2, 2, "_CPPv4N8nervosys11autonomylib11ObstacleMap11ObstacleMapEib", "nervosys::autonomylib::ObstacleMap::ObstacleMap::odd_blindspots", ""], [42, 2, 2, "_CPPv4N8nervosys11autonomylib11ObstacleMap11ObstacleMapEib", "nervosys::autonomylib::ObstacleMap::ObstacleMap::ticks", ""], [42, 0, 1, "_CPPv4NK8nervosys11autonomylib11ObstacleMap11angleToTickEf", "nervosys::autonomylib::ObstacleMap::angleToTick", ""], [42, 2, 2, "_CPPv4NK8nervosys11autonomylib11ObstacleMap11angleToTickEf", "nervosys::autonomylib::ObstacleMap::angleToTick::angle_rad", ""], [42, 0, 1, "_CPPv4N8nervosys11autonomylib11ObstacleMap18getClosestObstacleEv", "nervosys::autonomylib::ObstacleMap::getClosestObstacle", ""], [42, 0, 1, "_CPPv4NK8nervosys11autonomylib11ObstacleMap8getTicksEv", "nervosys::autonomylib::ObstacleMap::getTicks", ""], [42, 0, 1, "_CPPv4N8nervosys11autonomylib11ObstacleMap11hasObstacleEii", "nervosys::autonomylib::ObstacleMap::hasObstacle", ""], [42, 2, 2, "_CPPv4N8nervosys11autonomylib11ObstacleMap11hasObstacleEii", "nervosys::autonomylib::ObstacleMap::hasObstacle::from_tick", ""], [42, 2, 2, "_CPPv4N8nervosys11autonomylib11ObstacleMap11hasObstacleEii", "nervosys::autonomylib::ObstacleMap::hasObstacle::to_tick", ""], [42, 0, 1, "_CPPv4NK8nervosys11autonomylib11ObstacleMap12hasObstacle_Eii", "nervosys::autonomylib::ObstacleMap::hasObstacle_", ""], [42, 2, 2, "_CPPv4NK8nervosys11autonomylib11ObstacleMap12hasObstacle_Eii", "nervosys::autonomylib::ObstacleMap::hasObstacle_::from_tick", ""], [42, 2, 2, "_CPPv4NK8nervosys11autonomylib11ObstacleMap12hasObstacle_Eii", "nervosys::autonomylib::ObstacleMap::hasObstacle_::to_tick", ""], [42, 0, 1, "_CPPv4N8nervosys11autonomylib11ObstacleMap12setBlindspotEib", "nervosys::autonomylib::ObstacleMap::setBlindspot", ""], [42, 2, 2, "_CPPv4N8nervosys11autonomylib11ObstacleMap12setBlindspotEib", "nervosys::autonomylib::ObstacleMap::setBlindspot::blindspot", ""], [42, 2, 2, "_CPPv4N8nervosys11autonomylib11ObstacleMap12setBlindspotEib", "nervosys::autonomylib::ObstacleMap::setBlindspot::tick", ""], [42, 0, 1, "_CPPv4NK8nervosys11autonomylib11ObstacleMap14tickToAngleEndEi", "nervosys::autonomylib::ObstacleMap::tickToAngleEnd", ""], [42, 2, 2, "_CPPv4NK8nervosys11autonomylib11ObstacleMap14tickToAngleEndEi", "nervosys::autonomylib::ObstacleMap::tickToAngleEnd::tick", ""], [42, 0, 1, "_CPPv4NK8nervosys11autonomylib11ObstacleMap14tickToAngleMidEi", "nervosys::autonomylib::ObstacleMap::tickToAngleMid", ""], [42, 2, 2, "_CPPv4NK8nervosys11autonomylib11ObstacleMap14tickToAngleMidEi", "nervosys::autonomylib::ObstacleMap::tickToAngleMid::tick", ""], [42, 0, 1, "_CPPv4NK8nervosys11autonomylib11ObstacleMap16tickToAngleStartEi", "nervosys::autonomylib::ObstacleMap::tickToAngleStart", ""], [42, 2, 2, "_CPPv4NK8nervosys11autonomylib11ObstacleMap16tickToAngleStartEi", "nervosys::autonomylib::ObstacleMap::tickToAngleStart::tick", ""], [42, 0, 1, "_CPPv4N8nervosys11autonomylib11ObstacleMap6updateEA_fA_f", "nervosys::autonomylib::ObstacleMap::update", ""], [42, 0, 1, "_CPPv4N8nervosys11autonomylib11ObstacleMap6updateEfiif", "nervosys::autonomylib::ObstacleMap::update", ""], [42, 2, 2, "_CPPv4N8nervosys11autonomylib11ObstacleMap6updateEfiif", "nervosys::autonomylib::ObstacleMap::update::confidence", ""], [42, 2, 2, "_CPPv4N8nervosys11autonomylib11ObstacleMap6updateEA_fA_f", "nervosys::autonomylib::ObstacleMap::update::confidences", ""], [42, 2, 2, "_CPPv4N8nervosys11autonomylib11ObstacleMap6updateEfiif", "nervosys::autonomylib::ObstacleMap::update::distance", ""], [42, 2, 2, "_CPPv4N8nervosys11autonomylib11ObstacleMap6updateEA_fA_f", "nervosys::autonomylib::ObstacleMap::update::distances", ""], [42, 2, 2, "_CPPv4N8nervosys11autonomylib11ObstacleMap6updateEfiif", "nervosys::autonomylib::ObstacleMap::update::tick", ""], [42, 2, 2, "_CPPv4N8nervosys11autonomylib11ObstacleMap6updateEfiif", "nervosys::autonomylib::ObstacleMap::update::window", ""], [43, 1, 1, "_CPPv4N8nervosys11autonomylib11PhysXCarApiE", "nervosys::autonomylib::PhysXCarApi", "Public Functions    inline PhysXCarApi(const AutonomySimSettings::VehicleSetting *vehicle_setting, std::shared_ptr<SensorFactory> sensor_factory, const Kinematics::State &state, const Environment &environment)      inline ~PhysXCarApi()      inline virtual void update() override      inline virtual const SensorCollection &getSensors() const override      inline virtual void enableApiControl(bool is_enabled) override      inline virtual bool isApiControlEnabled() const override      inline virtual GeoPoint getHomeGeoPoint() const override      inline virtual bool armDisarm(bool arm) override      inline virtual void setCarControls(const CarControls &controls) override      inline virtual void updateCarState(const CarState &car_state) override      inline virtual const CarState &getCarState() const override      inline virtual const CarControls &getCarControls() const override    Protected Functions    inline virtual void resetImplementation() override"], [43, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysXCarApi11PhysXCarApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::PhysXCarApi::PhysXCarApi", ""], [43, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysXCarApi11PhysXCarApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::PhysXCarApi::PhysXCarApi::environment", ""], [43, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysXCarApi11PhysXCarApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::PhysXCarApi::PhysXCarApi::sensor_factory", ""], [43, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysXCarApi11PhysXCarApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::PhysXCarApi::PhysXCarApi::state", ""], [43, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysXCarApi11PhysXCarApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment", "nervosys::autonomylib::PhysXCarApi::PhysXCarApi::vehicle_setting", ""], [43, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysXCarApi9armDisarmEb", "nervosys::autonomylib::PhysXCarApi::armDisarm", ""], [43, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysXCarApi9armDisarmEb", "nervosys::autonomylib::PhysXCarApi::armDisarm::arm", ""], [43, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysXCarApi16enableApiControlEb", "nervosys::autonomylib::PhysXCarApi::enableApiControl", ""], [43, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysXCarApi16enableApiControlEb", "nervosys::autonomylib::PhysXCarApi::enableApiControl::is_enabled", ""], [43, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysXCarApi14getCarControlsEv", "nervosys::autonomylib::PhysXCarApi::getCarControls", ""], [43, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysXCarApi11getCarStateEv", "nervosys::autonomylib::PhysXCarApi::getCarState", ""], [43, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysXCarApi15getHomeGeoPointEv", "nervosys::autonomylib::PhysXCarApi::getHomeGeoPoint", ""], [43, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysXCarApi10getSensorsEv", "nervosys::autonomylib::PhysXCarApi::getSensors", ""], [43, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysXCarApi19isApiControlEnabledEv", "nervosys::autonomylib::PhysXCarApi::isApiControlEnabled", ""], [43, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysXCarApi19resetImplementationEv", "nervosys::autonomylib::PhysXCarApi::resetImplementation", ""], [43, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysXCarApi14setCarControlsERK11CarControls", "nervosys::autonomylib::PhysXCarApi::setCarControls", ""], [43, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysXCarApi14setCarControlsERK11CarControls", "nervosys::autonomylib::PhysXCarApi::setCarControls::controls", ""], [43, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysXCarApi6updateEv", "nervosys::autonomylib::PhysXCarApi::update", ""], [43, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysXCarApi14updateCarStateERK8CarState", "nervosys::autonomylib::PhysXCarApi::updateCarState", ""], [43, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysXCarApi14updateCarStateERK8CarState", "nervosys::autonomylib::PhysXCarApi::updateCarState::car_state", ""], [43, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysXCarApiD0Ev", "nervosys::autonomylib::PhysXCarApi::~PhysXCarApi", ""], [44, 1, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBodyE", "nervosys::autonomylib::PhysicsBody", "Subclassed by nervosys::autonomylib::DebugPhysicsBody, nervosys::autonomylib::MultirotorPhysicsBody"], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody11PhysicsBodyE6real_TRK10Matrix3x3rP10KinematicsP11Environment", "nervosys::autonomylib::PhysicsBody::PhysicsBody", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody11PhysicsBodyEv", "nervosys::autonomylib::PhysicsBody::PhysicsBody", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody11PhysicsBodyE6real_TRK10Matrix3x3rP10KinematicsP11Environment", "nervosys::autonomylib::PhysicsBody::PhysicsBody::environment", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody11PhysicsBodyE6real_TRK10Matrix3x3rP10KinematicsP11Environment", "nervosys::autonomylib::PhysicsBody::PhysicsBody::inertia", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody11PhysicsBodyE6real_TRK10Matrix3x3rP10KinematicsP11Environment", "nervosys::autonomylib::PhysicsBody::PhysicsBody::kinematics", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody11PhysicsBodyE6real_TRK10Matrix3x3rP10KinematicsP11Environment", "nervosys::autonomylib::PhysicsBody::PhysicsBody::mass", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody15dragVertexCountEv", "nervosys::autonomylib::PhysicsBody::dragVertexCount", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody16getCollisionInfoEv", "nervosys::autonomylib::PhysicsBody::getCollisionInfo", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody24getCollisionResponseInfoEv", "nervosys::autonomylib::PhysicsBody::getCollisionResponseInfo", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody24getCollisionResponseInfoEv", "nervosys::autonomylib::PhysicsBody::getCollisionResponseInfo", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody13getDragVertexE4uint", "nervosys::autonomylib::PhysicsBody::getDragVertex", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody13getDragVertexE4uint", "nervosys::autonomylib::PhysicsBody::getDragVertex", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody13getDragVertexE4uint", "nervosys::autonomylib::PhysicsBody::getDragVertex::index", ""], [44, 2, 2, "_CPPv4NK8nervosys11autonomylib11PhysicsBody13getDragVertexE4uint", "nervosys::autonomylib::PhysicsBody::getDragVertex::index", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody14getEnvironmentEv", "nervosys::autonomylib::PhysicsBody::getEnvironment", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody14getEnvironmentEv", "nervosys::autonomylib::PhysicsBody::getEnvironment", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody11getFrictionEv", "nervosys::autonomylib::PhysicsBody::getFriction", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody10getInertiaEv", "nervosys::autonomylib::PhysicsBody::getInertia", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody13getInertiaInvEv", "nervosys::autonomylib::PhysicsBody::getInertiaInv", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody20getInitialKinematicsEv", "nervosys::autonomylib::PhysicsBody::getInitialKinematics", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody13getKinematicsEv", "nervosys::autonomylib::PhysicsBody::getKinematics", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody7getMassEv", "nervosys::autonomylib::PhysicsBody::getMass", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody10getMassInvEv", "nervosys::autonomylib::PhysicsBody::getMassInv", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody14getPhysicsBodyEv", "nervosys::autonomylib::PhysicsBody::getPhysicsBody", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody7getPoseEv", "nervosys::autonomylib::PhysicsBody::getPose", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody14getRestitutionEv", "nervosys::autonomylib::PhysicsBody::getRestitution", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody8getTwistEv", "nervosys::autonomylib::PhysicsBody::getTwist", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody9getWrenchEv", "nervosys::autonomylib::PhysicsBody::getWrench", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody15getWrenchVertexE4uint", "nervosys::autonomylib::PhysicsBody::getWrenchVertex", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody15getWrenchVertexE4uint", "nervosys::autonomylib::PhysicsBody::getWrenchVertex", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody15getWrenchVertexE4uint", "nervosys::autonomylib::PhysicsBody::getWrenchVertex::index", ""], [44, 2, 2, "_CPPv4NK8nervosys11autonomylib11PhysicsBody15getWrenchVertexE4uint", "nervosys::autonomylib::PhysicsBody::getWrenchVertex::index", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody14hasEnvironmentEv", "nervosys::autonomylib::PhysicsBody::hasEnvironment", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody10initializeE6real_TRK10Matrix3x3rP10KinematicsP11Environment", "nervosys::autonomylib::PhysicsBody::initialize", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody10initializeE6real_TRK10Matrix3x3rP10KinematicsP11Environment", "nervosys::autonomylib::PhysicsBody::initialize::environment", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody10initializeE6real_TRK10Matrix3x3rP10KinematicsP11Environment", "nervosys::autonomylib::PhysicsBody::initialize::inertia", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody10initializeE6real_TRK10Matrix3x3rP10KinematicsP11Environment", "nervosys::autonomylib::PhysicsBody::initialize::kinematics", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody10initializeE6real_TRK10Matrix3x3rP10KinematicsP11Environment", "nervosys::autonomylib::PhysicsBody::initialize::mass", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody10isGroundedEv", "nervosys::autonomylib::PhysicsBody::isGrounded", ""], [44, 3, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody20last_kinematics_timeE", "nervosys::autonomylib::PhysicsBody::last_kinematics_time", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody4lockEv", "nervosys::autonomylib::PhysicsBody::lock", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody11reportStateER13StateReporter", "nervosys::autonomylib::PhysicsBody::reportState", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody11reportStateER13StateReporter", "nervosys::autonomylib::PhysicsBody::reportState::reporter", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody19resetImplementationEv", "nervosys::autonomylib::PhysicsBody::resetImplementation", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody16setCollisionInfoERK13CollisionInfo", "nervosys::autonomylib::PhysicsBody::setCollisionInfo", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody16setCollisionInfoERK13CollisionInfo", "nervosys::autonomylib::PhysicsBody::setCollisionInfo::collision_info", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody11setGroundedEb", "nervosys::autonomylib::PhysicsBody::setGrounded", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody11setGroundedEb", "nervosys::autonomylib::PhysicsBody::setGrounded::grounded", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody7setPoseERK4Pose", "nervosys::autonomylib::PhysicsBody::setPose", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody7setPoseERK4Pose", "nervosys::autonomylib::PhysicsBody::setPose::pose", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody8setTwistERK5Twist", "nervosys::autonomylib::PhysicsBody::setTwist", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody8setTwistERK5Twist", "nervosys::autonomylib::PhysicsBody::setTwist::twist", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody9setWrenchERK6Wrench", "nervosys::autonomylib::PhysicsBody::setWrench", ""], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody9setWrenchERK6Wrench", "nervosys::autonomylib::PhysicsBody::setWrench::wrench", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody6unlockEv", "nervosys::autonomylib::PhysicsBody::unlock", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody6updateEv", "nervosys::autonomylib::PhysicsBody::update", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody16updateKinematicsERKN10Kinematics5StateE", "nervosys::autonomylib::PhysicsBody::updateKinematics", ""], [44, 0, 1, "_CPPv4N8nervosys11autonomylib11PhysicsBody16updateKinematicsEv", "nervosys::autonomylib::PhysicsBody::updateKinematics", "Update kinematics without a state"], [44, 2, 2, "_CPPv4N8nervosys11autonomylib11PhysicsBody16updateKinematicsERKN10Kinematics5StateE", "nervosys::autonomylib::PhysicsBody::updateKinematics::state", ""], [44, 0, 1, "_CPPv4NK8nervosys11autonomylib11PhysicsBody17wrenchVertexCountEv", "nervosys::autonomylib::PhysicsBody::wrenchVertexCount", ""], [45, 1, 1, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertexE", "nervosys::autonomylib::PhysicsBodyVertex", "Subclassed by nervosys::autonomylib::RotorActuator"], [45, 0, 1, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex17PhysicsBodyVertexERK8Vector3rRK8Vector3r6real_T", "nervosys::autonomylib::PhysicsBodyVertex::PhysicsBodyVertex", ""], [45, 0, 1, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex17PhysicsBodyVertexEv", "nervosys::autonomylib::PhysicsBodyVertex::PhysicsBodyVertex", ""], [45, 2, 2, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex17PhysicsBodyVertexERK8Vector3rRK8Vector3r6real_T", "nervosys::autonomylib::PhysicsBodyVertex::PhysicsBodyVertex::drag_factor", ""], [45, 2, 2, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex17PhysicsBodyVertexERK8Vector3rRK8Vector3r6real_T", "nervosys::autonomylib::PhysicsBodyVertex::PhysicsBodyVertex::normal", ""], [45, 2, 2, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex17PhysicsBodyVertexERK8Vector3rRK8Vector3r6real_T", "nervosys::autonomylib::PhysicsBodyVertex::PhysicsBodyVertex::position", ""], [45, 0, 1, "_CPPv4NK8nervosys11autonomylib17PhysicsBodyVertex13getDragFactorEv", "nervosys::autonomylib::PhysicsBodyVertex::getDragFactor", ""], [45, 0, 1, "_CPPv4NK8nervosys11autonomylib17PhysicsBodyVertex9getNormalEv", "nervosys::autonomylib::PhysicsBodyVertex::getNormal", ""], [45, 0, 1, "_CPPv4NK8nervosys11autonomylib17PhysicsBodyVertex11getPositionEv", "nervosys::autonomylib::PhysicsBodyVertex::getPosition", ""], [45, 0, 1, "_CPPv4NK8nervosys11autonomylib17PhysicsBodyVertex9getWrenchEv", "nervosys::autonomylib::PhysicsBodyVertex::getWrench", ""], [45, 0, 1, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex10initializeERK8Vector3rRK8Vector3r6real_T", "nervosys::autonomylib::PhysicsBodyVertex::initialize", ""], [45, 2, 2, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex10initializeERK8Vector3rRK8Vector3r6real_T", "nervosys::autonomylib::PhysicsBodyVertex::initialize::drag_factor", ""], [45, 2, 2, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex10initializeERK8Vector3rRK8Vector3r6real_T", "nervosys::autonomylib::PhysicsBodyVertex::initialize::normal", ""], [45, 2, 2, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex10initializeERK8Vector3rRK8Vector3r6real_T", "nervosys::autonomylib::PhysicsBodyVertex::initialize::position", ""], [45, 0, 1, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex19resetImplementationEv", "nervosys::autonomylib::PhysicsBodyVertex::resetImplementation", ""], [45, 0, 1, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex13setDragFactorE6real_T", "nervosys::autonomylib::PhysicsBodyVertex::setDragFactor", ""], [45, 2, 2, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex13setDragFactorE6real_T", "nervosys::autonomylib::PhysicsBodyVertex::setDragFactor::val", ""], [45, 0, 1, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex9setNormalERK8Vector3r", "nervosys::autonomylib::PhysicsBodyVertex::setNormal", ""], [45, 2, 2, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex9setNormalERK8Vector3r", "nervosys::autonomylib::PhysicsBodyVertex::setNormal::normal", ""], [45, 0, 1, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex11setPositionERK8Vector3r", "nervosys::autonomylib::PhysicsBodyVertex::setPosition", ""], [45, 2, 2, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex11setPositionERK8Vector3r", "nervosys::autonomylib::PhysicsBodyVertex::setPosition::position", ""], [45, 0, 1, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex9setWrenchER6Wrench", "nervosys::autonomylib::PhysicsBodyVertex::setWrench", ""], [45, 2, 2, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex9setWrenchER6Wrench", "nervosys::autonomylib::PhysicsBodyVertex::setWrench::wrench", ""], [45, 0, 1, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex6updateEv", "nervosys::autonomylib::PhysicsBodyVertex::update", ""], [46, 1, 1, "_CPPv4N8nervosys11autonomylib17PhysicsEngineBaseE", "nervosys::autonomylib::PhysicsEngineBase", "Subclassed by nervosys::autonomylib::ExternalPhysicsEngine, nervosys::autonomylib::FastPhysicsEngine"], [46, 0, 1, "_CPPv4N8nervosys11autonomylib17PhysicsEngineBase11reportStateER13StateReporter", "nervosys::autonomylib::PhysicsEngineBase::reportState", ""], [46, 2, 2, "_CPPv4N8nervosys11autonomylib17PhysicsEngineBase11reportStateER13StateReporter", "nervosys::autonomylib::PhysicsEngineBase::reportState::reporter", ""], [46, 0, 1, "_CPPv4N8nervosys11autonomylib17PhysicsEngineBase11setExtForceERK8Vector3r", "nervosys::autonomylib::PhysicsEngineBase::setExtForce", ""], [46, 2, 2, "_CPPv4N8nervosys11autonomylib17PhysicsEngineBase11setExtForceERK8Vector3r", "nervosys::autonomylib::PhysicsEngineBase::setExtForce::ext_force", ""], [46, 0, 1, "_CPPv4N8nervosys11autonomylib17PhysicsEngineBase7setWindERK8Vector3r", "nervosys::autonomylib::PhysicsEngineBase::setWind", ""], [46, 2, 2, "_CPPv4N8nervosys11autonomylib17PhysicsEngineBase7setWindERK8Vector3r", "nervosys::autonomylib::PhysicsEngineBase::setWind::wind", ""], [46, 0, 1, "_CPPv4N8nervosys11autonomylib17PhysicsEngineBase6updateEv", "nervosys::autonomylib::PhysicsEngineBase::update", ""], [47, 1, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorldE", "nervosys::autonomylib::PhysicsWorld", "Public Functions    inline PhysicsWorld(std::unique_ptr<PhysicsEngineBase> physics_engine, const std::vector<UpdatableObject*> &bodies, uint64_t update_period_nanos = 3000000LL, bool state_reporter_enabled = false, bool start_async_updator = true)      inline void lock()      inline void unlock()      inline void reset()      inline void addBody(UpdatableObject *body)      inline uint64_t getUpdatePeriodNanos() const      inline void startAsyncUpdator()      inline void stopAsyncUpdator()      inline void enableStateReport(bool is_enabled)      inline void updateStateReport()      inline std::string getDebugReport()      inline void pause(bool is_paused)      inline bool isPaused() const      inline void continueForTime(double seconds)      inline void continueForFrames(uint32_t frames)      inline void setFrameNumber(uint32_t frameNumber)      inline void resetImplementation() override"], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld12PhysicsWorldENSt10unique_ptrI17PhysicsEngineBaseEERKNSt6vectorIP15UpdatableObjectEE8uint64_tbb", "nervosys::autonomylib::PhysicsWorld::PhysicsWorld", ""], [47, 2, 2, "_CPPv4N8nervosys11autonomylib12PhysicsWorld12PhysicsWorldENSt10unique_ptrI17PhysicsEngineBaseEERKNSt6vectorIP15UpdatableObjectEE8uint64_tbb", "nervosys::autonomylib::PhysicsWorld::PhysicsWorld::bodies", ""], [47, 2, 2, "_CPPv4N8nervosys11autonomylib12PhysicsWorld12PhysicsWorldENSt10unique_ptrI17PhysicsEngineBaseEERKNSt6vectorIP15UpdatableObjectEE8uint64_tbb", "nervosys::autonomylib::PhysicsWorld::PhysicsWorld::physics_engine", ""], [47, 2, 2, "_CPPv4N8nervosys11autonomylib12PhysicsWorld12PhysicsWorldENSt10unique_ptrI17PhysicsEngineBaseEERKNSt6vectorIP15UpdatableObjectEE8uint64_tbb", "nervosys::autonomylib::PhysicsWorld::PhysicsWorld::start_async_updator", ""], [47, 2, 2, "_CPPv4N8nervosys11autonomylib12PhysicsWorld12PhysicsWorldENSt10unique_ptrI17PhysicsEngineBaseEERKNSt6vectorIP15UpdatableObjectEE8uint64_tbb", "nervosys::autonomylib::PhysicsWorld::PhysicsWorld::state_reporter_enabled", ""], [47, 2, 2, "_CPPv4N8nervosys11autonomylib12PhysicsWorld12PhysicsWorldENSt10unique_ptrI17PhysicsEngineBaseEERKNSt6vectorIP15UpdatableObjectEE8uint64_tbb", "nervosys::autonomylib::PhysicsWorld::PhysicsWorld::update_period_nanos", ""], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld7addBodyEP15UpdatableObject", "nervosys::autonomylib::PhysicsWorld::addBody", ""], [47, 2, 2, "_CPPv4N8nervosys11autonomylib12PhysicsWorld7addBodyEP15UpdatableObject", "nervosys::autonomylib::PhysicsWorld::addBody::body", ""], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld17continueForFramesE8uint32_t", "nervosys::autonomylib::PhysicsWorld::continueForFrames", ""], [47, 2, 2, "_CPPv4N8nervosys11autonomylib12PhysicsWorld17continueForFramesE8uint32_t", "nervosys::autonomylib::PhysicsWorld::continueForFrames::frames", ""], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld15continueForTimeEd", "nervosys::autonomylib::PhysicsWorld::continueForTime", ""], [47, 2, 2, "_CPPv4N8nervosys11autonomylib12PhysicsWorld15continueForTimeEd", "nervosys::autonomylib::PhysicsWorld::continueForTime::seconds", ""], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld17enableStateReportEb", "nervosys::autonomylib::PhysicsWorld::enableStateReport", ""], [47, 2, 2, "_CPPv4N8nervosys11autonomylib12PhysicsWorld17enableStateReportEb", "nervosys::autonomylib::PhysicsWorld::enableStateReport::is_enabled", ""], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld14getDebugReportEv", "nervosys::autonomylib::PhysicsWorld::getDebugReport", ""], [47, 0, 1, "_CPPv4NK8nervosys11autonomylib12PhysicsWorld20getUpdatePeriodNanosEv", "nervosys::autonomylib::PhysicsWorld::getUpdatePeriodNanos", ""], [47, 0, 1, "_CPPv4NK8nervosys11autonomylib12PhysicsWorld8isPausedEv", "nervosys::autonomylib::PhysicsWorld::isPaused", ""], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld4lockEv", "nervosys::autonomylib::PhysicsWorld::lock", ""], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld5pauseEb", "nervosys::autonomylib::PhysicsWorld::pause", ""], [47, 2, 2, "_CPPv4N8nervosys11autonomylib12PhysicsWorld5pauseEb", "nervosys::autonomylib::PhysicsWorld::pause::is_paused", ""], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld5resetEv", "nervosys::autonomylib::PhysicsWorld::reset", ""], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld19resetImplementationEv", "nervosys::autonomylib::PhysicsWorld::resetImplementation", ""], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld14setFrameNumberE8uint32_t", "nervosys::autonomylib::PhysicsWorld::setFrameNumber", ""], [47, 2, 2, "_CPPv4N8nervosys11autonomylib12PhysicsWorld14setFrameNumberE8uint32_t", "nervosys::autonomylib::PhysicsWorld::setFrameNumber::frameNumber", ""], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld17startAsyncUpdatorEv", "nervosys::autonomylib::PhysicsWorld::startAsyncUpdator", ""], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld16stopAsyncUpdatorEv", "nervosys::autonomylib::PhysicsWorld::stopAsyncUpdator", ""], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld6unlockEv", "nervosys::autonomylib::PhysicsWorld::unlock", ""], [47, 0, 1, "_CPPv4N8nervosys11autonomylib12PhysicsWorld17updateStateReportEv", "nervosys::autonomylib::PhysicsWorld::updateStateReport", ""], [48, 1, 1, "_CPPv4N8nervosys11autonomylib19Px4MultirotorParamsE", "nervosys::autonomylib::Px4MultirotorParams", "Public Functions    inline Px4MultirotorParams(const AutonomySimSettings::MavLinkVehicleSetting &vehicle_setting, std::shared_ptr<const SensorFactory> sensor_factory)      virtual ~Px4MultirotorParams() = default      inline virtual std::unique_ptr<MultirotorApiBase> createMultirotorApi() override      inline virtual void setupParams() override    Protected Functions    inline virtual const SensorFactory *getSensorFactory() const override"], [48, 0, 1, "_CPPv4N8nervosys11autonomylib19Px4MultirotorParams19Px4MultirotorParamsERKN19AutonomySimSettings21MavLinkVehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::Px4MultirotorParams::Px4MultirotorParams", ""], [48, 2, 2, "_CPPv4N8nervosys11autonomylib19Px4MultirotorParams19Px4MultirotorParamsERKN19AutonomySimSettings21MavLinkVehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::Px4MultirotorParams::Px4MultirotorParams::sensor_factory", ""], [48, 2, 2, "_CPPv4N8nervosys11autonomylib19Px4MultirotorParams19Px4MultirotorParamsERKN19AutonomySimSettings21MavLinkVehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::Px4MultirotorParams::Px4MultirotorParams::vehicle_setting", ""], [48, 0, 1, "_CPPv4N8nervosys11autonomylib19Px4MultirotorParams19createMultirotorApiEv", "nervosys::autonomylib::Px4MultirotorParams::createMultirotorApi", ""], [48, 0, 1, "_CPPv4NK8nervosys11autonomylib19Px4MultirotorParams16getSensorFactoryEv", "nervosys::autonomylib::Px4MultirotorParams::getSensorFactory", ""], [48, 0, 1, "_CPPv4N8nervosys11autonomylib19Px4MultirotorParams11setupParamsEv", "nervosys::autonomylib::Px4MultirotorParams::setupParams", ""], [48, 0, 1, "_CPPv4N8nervosys11autonomylib19Px4MultirotorParamsD0Ev", "nervosys::autonomylib::Px4MultirotorParams::~Px4MultirotorParams", ""], [49, 1, 1, "_CPPv4N8nervosys11autonomylib13RotorActuatorE", "nervosys::autonomylib::RotorActuator", "Public Functions    inline RotorActuator()      inline RotorActuator(const Vector3r &position, const Vector3r &normal, RotorTurningDirection turning_direction, const RotorParams &params, const Environment *environment, uint id = -1)      inline void initialize(const Vector3r &position, const Vector3r &normal, RotorTurningDirection turning_direction, const RotorParams &params, const Environment *environment, uint id = -1)      inline void setControlSignal(real_T control_signal)      inline Output getOutput() const      inline virtual void resetImplementation() override      inline virtual void update() override      inline virtual void reportState(StateReporter &reporter) override    Protected Functions    inline virtual void setWrench(Wrench &wrench) override      struct Output  Public Members    real_T thrust      real_T torque_scaler      real_T speed      RotorTurningDirection turning_direction      real_T control_signal_filtered      real_T control_signal_input"], [49, 1, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator6OutputE", "nervosys::autonomylib::RotorActuator::Output", "Public Members    real_T thrust      real_T torque_scaler      real_T speed      RotorTurningDirection turning_direction      real_T control_signal_filtered      real_T control_signal_input"], [49, 3, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output23control_signal_filteredE", "nervosys::autonomylib::RotorActuator::Output::control_signal_filtered", ""], [49, 3, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output20control_signal_inputE", "nervosys::autonomylib::RotorActuator::Output::control_signal_input", ""], [49, 3, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output5speedE", "nervosys::autonomylib::RotorActuator::Output::speed", ""], [49, 3, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output6thrustE", "nervosys::autonomylib::RotorActuator::Output::thrust", ""], [49, 3, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output13torque_scalerE", "nervosys::autonomylib::RotorActuator::Output::torque_scaler", ""], [49, 3, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output17turning_directionE", "nervosys::autonomylib::RotorActuator::Output::turning_direction", ""], [49, 0, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator13RotorActuatorERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint", "nervosys::autonomylib::RotorActuator::RotorActuator", ""], [49, 0, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator13RotorActuatorEv", "nervosys::autonomylib::RotorActuator::RotorActuator", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator13RotorActuatorERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint", "nervosys::autonomylib::RotorActuator::RotorActuator::environment", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator13RotorActuatorERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint", "nervosys::autonomylib::RotorActuator::RotorActuator::id", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator13RotorActuatorERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint", "nervosys::autonomylib::RotorActuator::RotorActuator::normal", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator13RotorActuatorERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint", "nervosys::autonomylib::RotorActuator::RotorActuator::params", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator13RotorActuatorERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint", "nervosys::autonomylib::RotorActuator::RotorActuator::position", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator13RotorActuatorERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint", "nervosys::autonomylib::RotorActuator::RotorActuator::turning_direction", ""], [49, 0, 1, "_CPPv4NK8nervosys11autonomylib13RotorActuator9getOutputEv", "nervosys::autonomylib::RotorActuator::getOutput", ""], [49, 0, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator10initializeERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint", "nervosys::autonomylib::RotorActuator::initialize", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator10initializeERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint", "nervosys::autonomylib::RotorActuator::initialize::environment", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator10initializeERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint", "nervosys::autonomylib::RotorActuator::initialize::id", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator10initializeERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint", "nervosys::autonomylib::RotorActuator::initialize::normal", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator10initializeERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint", "nervosys::autonomylib::RotorActuator::initialize::params", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator10initializeERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint", "nervosys::autonomylib::RotorActuator::initialize::position", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator10initializeERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint", "nervosys::autonomylib::RotorActuator::initialize::turning_direction", ""], [49, 0, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator11reportStateER13StateReporter", "nervosys::autonomylib::RotorActuator::reportState", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator11reportStateER13StateReporter", "nervosys::autonomylib::RotorActuator::reportState::reporter", ""], [49, 0, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator19resetImplementationEv", "nervosys::autonomylib::RotorActuator::resetImplementation", ""], [49, 0, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator16setControlSignalE6real_T", "nervosys::autonomylib::RotorActuator::setControlSignal", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator16setControlSignalE6real_T", "nervosys::autonomylib::RotorActuator::setControlSignal::control_signal", ""], [49, 0, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator9setWrenchER6Wrench", "nervosys::autonomylib::RotorActuator::setWrench", ""], [49, 2, 2, "_CPPv4N8nervosys11autonomylib13RotorActuator9setWrenchER6Wrench", "nervosys::autonomylib::RotorActuator::setWrench::wrench", ""], [49, 0, 1, "_CPPv4N8nervosys11autonomylib13RotorActuator6updateEv", "nervosys::autonomylib::RotorActuator::update", ""], [434, 1, 1, "_CPPv4N8nervosys11autonomylib15RotorParametersE", "nervosys::autonomylib::RotorParameters", "Public Functions    inline RotorParameters()      inline RotorParameters(const real_T &thrust_val, const real_T &torque_scaler_val, const real_T &speed_val)      inline void update(const real_T &thrust_val, const real_T &torque_scaler_val, const real_T &speed_val)    Public Members    real_T thrust = 0      real_T torque_scaler = 0      real_T speed = 0"], [434, 0, 1, "_CPPv4N8nervosys11autonomylib15RotorParameters15RotorParametersERK6real_TRK6real_TRK6real_T", "nervosys::autonomylib::RotorParameters::RotorParameters", ""], [434, 0, 1, "_CPPv4N8nervosys11autonomylib15RotorParameters15RotorParametersEv", "nervosys::autonomylib::RotorParameters::RotorParameters", ""], [434, 2, 2, "_CPPv4N8nervosys11autonomylib15RotorParameters15RotorParametersERK6real_TRK6real_TRK6real_T", "nervosys::autonomylib::RotorParameters::RotorParameters::speed_val", ""], [434, 2, 2, "_CPPv4N8nervosys11autonomylib15RotorParameters15RotorParametersERK6real_TRK6real_TRK6real_T", "nervosys::autonomylib::RotorParameters::RotorParameters::thrust_val", ""], [434, 2, 2, "_CPPv4N8nervosys11autonomylib15RotorParameters15RotorParametersERK6real_TRK6real_TRK6real_T", "nervosys::autonomylib::RotorParameters::RotorParameters::torque_scaler_val", ""], [434, 3, 1, "_CPPv4N8nervosys11autonomylib15RotorParameters5speedE", "nervosys::autonomylib::RotorParameters::speed", ""], [434, 3, 1, "_CPPv4N8nervosys11autonomylib15RotorParameters6thrustE", "nervosys::autonomylib::RotorParameters::thrust", ""], [434, 3, 1, "_CPPv4N8nervosys11autonomylib15RotorParameters13torque_scalerE", "nervosys::autonomylib::RotorParameters::torque_scaler", ""], [434, 0, 1, "_CPPv4N8nervosys11autonomylib15RotorParameters6updateERK6real_TRK6real_TRK6real_T", "nervosys::autonomylib::RotorParameters::update", ""], [434, 2, 2, "_CPPv4N8nervosys11autonomylib15RotorParameters6updateERK6real_TRK6real_TRK6real_T", "nervosys::autonomylib::RotorParameters::update::speed_val", ""], [434, 2, 2, "_CPPv4N8nervosys11autonomylib15RotorParameters6updateERK6real_TRK6real_TRK6real_T", "nervosys::autonomylib::RotorParameters::update::thrust_val", ""], [434, 2, 2, "_CPPv4N8nervosys11autonomylib15RotorParameters6updateERK6real_TRK6real_TRK6real_T", "nervosys::autonomylib::RotorParameters::update::torque_scaler_val", ""], [435, 1, 1, "_CPPv4N8nervosys11autonomylib11RotorParamsE", "nervosys::autonomylib::RotorParams", "Public Functions    inline void calculateMaxThrust()    Public Members    real_T C_T = 0.109919f      real_T C_P = 0.040164f      real_T air_density = 1.225f      real_T max_rpm = 6396.667f      real_T propeller_diameter = 0.2286f      real_T propeller_height = 1 / 100.0f      real_T control_signal_filter_tc = 0.005f      real_T revolutions_per_second      real_T max_speed      real_T max_speed_square      real_T max_thrust = 4.179446268f      real_T max_torque = 0.055562f"], [435, 3, 1, "_CPPv4N8nervosys11autonomylib11RotorParams3C_PE", "nervosys::autonomylib::RotorParams::C_P", ""], [435, 3, 1, "_CPPv4N8nervosys11autonomylib11RotorParams3C_TE", "nervosys::autonomylib::RotorParams::C_T", ""], [435, 3, 1, "_CPPv4N8nervosys11autonomylib11RotorParams11air_densityE", "nervosys::autonomylib::RotorParams::air_density", ""], [435, 0, 1, "_CPPv4N8nervosys11autonomylib11RotorParams18calculateMaxThrustEv", "nervosys::autonomylib::RotorParams::calculateMaxThrust", ""], [435, 3, 1, "_CPPv4N8nervosys11autonomylib11RotorParams24control_signal_filter_tcE", "nervosys::autonomylib::RotorParams::control_signal_filter_tc", ""], [435, 3, 1, "_CPPv4N8nervosys11autonomylib11RotorParams7max_rpmE", "nervosys::autonomylib::RotorParams::max_rpm", ""], [435, 3, 1, "_CPPv4N8nervosys11autonomylib11RotorParams9max_speedE", "nervosys::autonomylib::RotorParams::max_speed", ""], [435, 3, 1, "_CPPv4N8nervosys11autonomylib11RotorParams16max_speed_squareE", "nervosys::autonomylib::RotorParams::max_speed_square", ""], [435, 3, 1, "_CPPv4N8nervosys11autonomylib11RotorParams10max_thrustE", "nervosys::autonomylib::RotorParams::max_thrust", ""], [435, 3, 1, "_CPPv4N8nervosys11autonomylib11RotorParams10max_torqueE", "nervosys::autonomylib::RotorParams::max_torque", ""], [435, 3, 1, "_CPPv4N8nervosys11autonomylib11RotorParams18propeller_diameterE", "nervosys::autonomylib::RotorParams::propeller_diameter", ""], [435, 3, 1, "_CPPv4N8nervosys11autonomylib11RotorParams16propeller_heightE", "nervosys::autonomylib::RotorParams::propeller_height", ""], [435, 3, 1, "_CPPv4N8nervosys11autonomylib11RotorParams22revolutions_per_secondE", "nervosys::autonomylib::RotorParams::revolutions_per_second", ""], [436, 1, 1, "_CPPv4N8nervosys11autonomylib11RotorStatesE", "nervosys::autonomylib::RotorStates", "Public Functions    inline RotorStates()      inline RotorStates(const std::vector<RotorParameters> &rotors_val, uint64_t timestamp_val)    Public Members    std::vector<RotorParameters> rotors      uint64_t timestamp"], [436, 0, 1, "_CPPv4N8nervosys11autonomylib11RotorStates11RotorStatesERKNSt6vectorI15RotorParametersEE8uint64_t", "nervosys::autonomylib::RotorStates::RotorStates", ""], [436, 0, 1, "_CPPv4N8nervosys11autonomylib11RotorStates11RotorStatesEv", "nervosys::autonomylib::RotorStates::RotorStates", ""], [436, 2, 2, "_CPPv4N8nervosys11autonomylib11RotorStates11RotorStatesERKNSt6vectorI15RotorParametersEE8uint64_t", "nervosys::autonomylib::RotorStates::RotorStates::rotors_val", ""], [436, 2, 2, "_CPPv4N8nervosys11autonomylib11RotorStates11RotorStatesERKNSt6vectorI15RotorParametersEE8uint64_t", "nervosys::autonomylib::RotorStates::RotorStates::timestamp_val", ""], [436, 3, 1, "_CPPv4N8nervosys11autonomylib11RotorStates6rotorsE", "nervosys::autonomylib::RotorStates::rotors", ""], [436, 3, 1, "_CPPv4N8nervosys11autonomylib11RotorStates9timestampE", "nervosys::autonomylib::RotorStates::timestamp", ""], [156, 5, 1, "_CPPv4N8nervosys11autonomylib21RotorTurningDirectionE", "nervosys::autonomylib::RotorTurningDirection", "Values:"], [156, 6, 1, "_CPPv4N8nervosys11autonomylib21RotorTurningDirection24RotorTurningDirectionCCWE", "nervosys::autonomylib::RotorTurningDirection::RotorTurningDirectionCCW", ""], [156, 6, 1, "_CPPv4N8nervosys11autonomylib21RotorTurningDirection23RotorTurningDirectionCWE", "nervosys::autonomylib::RotorTurningDirection::RotorTurningDirectionCW", ""], [484, 4, 1, "_CPPv4N8nervosys11autonomylib18RpcLibAdaptorsBaseE", "nervosys::autonomylib::RpcLibAdaptorsBase", ""], [50, 1, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBaseE", "nervosys::autonomylib::RpcLibClientBase", "Subclassed by nervosys::autonomylib::CarRpcLibClient, nervosys::autonomylib::MultirotorRpcLibClient"], [50, 5, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15ConnectionStateE", "nervosys::autonomylib::RpcLibClientBase::ConnectionState", "Values:"], [50, 6, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15ConnectionState9ConnectedE", "nervosys::autonomylib::RpcLibClientBase::ConnectionState::Connected", ""], [50, 6, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15ConnectionState12DisconnectedE", "nervosys::autonomylib::RpcLibClientBase::ConnectionState::Disconnected", ""], [50, 6, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15ConnectionState7InitialE", "nervosys::autonomylib::RpcLibClientBase::ConnectionState::Initial", ""], [50, 6, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15ConnectionState5ResetE", "nervosys::autonomylib::RpcLibClientBase::ConnectionState::Reset", ""], [50, 6, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15ConnectionState7UnknownE", "nervosys::autonomylib::RpcLibClientBase::ConnectionState::Unknown", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16RpcLibClientBaseERK6string8uint16_tf", "nervosys::autonomylib::RpcLibClientBase::RpcLibClientBase", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16RpcLibClientBaseERK6string8uint16_tf", "nervosys::autonomylib::RpcLibClientBase::RpcLibClientBase::ip_address", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16RpcLibClientBaseERK6string8uint16_tf", "nervosys::autonomylib::RpcLibClientBase::RpcLibClientBase::port", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16RpcLibClientBaseERK6string8uint16_tf", "nervosys::autonomylib::RpcLibClientBase::RpcLibClientBase::timeout_sec", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase9armDisarmEbRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::armDisarm", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase9armDisarmEbRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::armDisarm::arm", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase9armDisarmEbRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::armDisarm::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14cancelLastTaskERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::cancelLastTask", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14cancelLastTaskERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::cancelLastTask::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17confirmConnectionEv", "nervosys::autonomylib::RpcLibClientBase::confirmConnection", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16enableApiControlEbRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::enableApiControl", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16enableApiControlEbRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::enableApiControl::is_enabled", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16enableApiControlEbRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::enableApiControl::vehicle_name", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16getBarometerDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getBarometerData", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16getBarometerDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getBarometerData::barometer_name", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16getBarometerDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getBarometerData::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase9getClientEv", "nervosys::autonomylib::RpcLibClientBase::getClient", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase9getClientEv", "nervosys::autonomylib::RpcLibClientBase::getClient", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16getClientVersionEv", "nervosys::autonomylib::RpcLibClientBase::getClientVersion", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18getConnectionStateEv", "nervosys::autonomylib::RpcLibClientBase::getConnectionState", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase21getDistanceSensorDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getDistanceSensorData", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase21getDistanceSensorDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getDistanceSensorData::distance_sensor_name", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase21getDistanceSensorDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getDistanceSensorData::vehicle_name", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase10getGpsDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getGpsData", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase10getGpsDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getGpsData::gps_name", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase10getGpsDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getGpsData::vehicle_name", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase15getHomeGeoPointERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getHomeGeoPoint", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase15getHomeGeoPointERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getHomeGeoPoint::vehicle_name", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase10getImuDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getImuData", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase10getImuDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getImuData::imu_name", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase10getImuDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getImuData::vehicle_name", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase12getLidarDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getLidarData", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase12getLidarDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getLidarData::lidar_name", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase12getLidarDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getLidarData::vehicle_name", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase19getMagnetometerDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getMagnetometerData", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase19getMagnetometerDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getMagnetometerData::magnetometer_name", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase19getMagnetometerDataERKNSt6stringERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::getMagnetometerData::vehicle_name", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase27getMinRequiredClientVersionEv", "nervosys::autonomylib::RpcLibClientBase::getMinRequiredClientVersion", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase27getMinRequiredServerVersionEv", "nervosys::autonomylib::RpcLibClientBase::getMinRequiredServerVersion", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16getServerVersionEv", "nervosys::autonomylib::RpcLibClientBase::getServerVersion", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase17getSettingsStringEv", "nervosys::autonomylib::RpcLibClientBase::getSettingsString", ""], [50, 1, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase4implE", "nervosys::autonomylib::RpcLibClientBase::impl", "Public Functions    inline impl(const string &ip_address, uint16_t port, float timeout_sec)    Public Members    rpc::client client"], [50, 3, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase4impl6clientE", "nervosys::autonomylib::RpcLibClientBase::impl::client", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase4impl4implERK6string8uint16_tf", "nervosys::autonomylib::RpcLibClientBase::impl::impl", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase4impl4implERK6string8uint16_tf", "nervosys::autonomylib::RpcLibClientBase::impl::impl::ip_address", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase4impl4implERK6string8uint16_tf", "nervosys::autonomylib::RpcLibClientBase::impl::impl::port", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase4impl4implERK6string8uint16_tf", "nervosys::autonomylib::RpcLibClientBase::impl::impl::timeout_sec", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase19isApiControlEnabledERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::isApiControlEnabled", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase19isApiControlEnabledERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::isApiControlEnabled::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase11isRecordingEv", "nervosys::autonomylib::RpcLibClientBase::isRecording", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase12listVehiclesEv", "nervosys::autonomylib::RpcLibClientBase::listVehicles", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase4pingEv", "nervosys::autonomylib::RpcLibClientBase::ping", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase5resetEv", "nervosys::autonomylib::RpcLibClientBase::reset", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase29simAddDetectionFilterMeshNameERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simAddDetectionFilterMeshName", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase29simAddDetectionFilterMeshNameERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simAddDetectionFilterMeshName::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase29simAddDetectionFilterMeshNameERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simAddDetectionFilterMeshName::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase29simAddDetectionFilterMeshNameERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simAddDetectionFilterMeshName::mesh_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase29simAddDetectionFilterMeshNameERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simAddDetectionFilterMeshName::type", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase29simAddDetectionFilterMeshNameERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simAddDetectionFilterMeshName::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simAddVehicleERKNSt6stringERKNSt6stringERK4PoseRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simAddVehicle", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simAddVehicleERKNSt6stringERKNSt6stringERK4PoseRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simAddVehicle::pawn_path", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simAddVehicleERKNSt6stringERKNSt6stringERK4PoseRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simAddVehicle::pose", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simAddVehicleERKNSt6stringERKNSt6stringERK4PoseRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simAddVehicle::vehicle_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simAddVehicleERKNSt6stringERKNSt6stringERK4PoseRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simAddVehicle::vehicle_type", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simClearDetectionMeshNamesERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simClearDetectionMeshNames", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simClearDetectionMeshNamesERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simClearDetectionMeshNames::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simClearDetectionMeshNamesERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simClearDetectionMeshNames::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simClearDetectionMeshNamesERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simClearDetectionMeshNames::type", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simClearDetectionMeshNamesERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simClearDetectionMeshNames::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simContinueForFramesE8uint32_t", "nervosys::autonomylib::RpcLibClientBase::simContinueForFrames", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simContinueForFramesE8uint32_t", "nervosys::autonomylib::RpcLibClientBase::simContinueForFrames::frames", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simContinueForTimeEd", "nervosys::autonomylib::RpcLibClientBase::simContinueForTime", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simContinueForTimeEd", "nervosys::autonomylib::RpcLibClientBase::simContinueForTime::seconds", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simCreateVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simCreateVoxelGrid", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simCreateVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simCreateVoxelGrid::output_file", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simCreateVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simCreateVoxelGrid::position", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simCreateVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simCreateVoxelGrid::res", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simCreateVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simCreateVoxelGrid::x_size", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simCreateVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simCreateVoxelGrid::y_size", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simCreateVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simCreateVoxelGrid::z_size", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simDestroyObjectERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simDestroyObject", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simDestroyObjectERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simDestroyObject::object_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simEnableFocusPlaneEKbRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simEnableFocusPlane", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simEnableFocusPlaneEKbRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simEnableFocusPlane::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simEnableFocusPlaneEKbRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simEnableFocusPlane::enable", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simEnableFocusPlaneEKbRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simEnableFocusPlane::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simEnableFocusPlaneEKbRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simEnableFocusPlane::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simEnableManualFocusEKbRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simEnableManualFocus", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simEnableManualFocusEKbRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simEnableManualFocus::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simEnableManualFocusEKbRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simEnableManualFocus::enable", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simEnableManualFocusEKbRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simEnableManualFocus::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simEnableManualFocusEKbRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simEnableManualFocus::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simEnableWeatherEb", "nervosys::autonomylib::RpcLibClientBase::simEnableWeather", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simEnableWeatherEb", "nervosys::autonomylib::RpcLibClientBase::simEnableWeather::enable", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase25simFlushPersistentMarkersEv", "nervosys::autonomylib::RpcLibClientBase::simFlushPersistentMarkers", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16simGetCameraInfoERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetCameraInfo", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16simGetCameraInfoERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetCameraInfo::camera_name", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16simGetCameraInfoERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetCameraInfo::external", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16simGetCameraInfoERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetCameraInfo::vehicle_name", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase19simGetCollisionInfoERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simGetCollisionInfo", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase19simGetCollisionInfoERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simGetCollisionInfo::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simGetCurrentFieldOfViewERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetCurrentFieldOfView", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simGetCurrentFieldOfViewERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetCurrentFieldOfView::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simGetCurrentFieldOfViewERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetCurrentFieldOfView::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simGetCurrentFieldOfViewERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetCurrentFieldOfView::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simGetDetectionsERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetDetections", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simGetDetectionsERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetDetections::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simGetDetectionsERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetDetections::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simGetDetectionsERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetDetections::image_type", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simGetDetectionsERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetDetections::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simGetDistortionParamsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetDistortionParams", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simGetDistortionParamsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetDistortionParams::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simGetDistortionParamsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetDistortionParams::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simGetDistortionParamsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetDistortionParams::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simGetFilmbackSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFilmbackSettings", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simGetFilmbackSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFilmbackSettings::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simGetFilmbackSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFilmbackSettings::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simGetFilmbackSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFilmbackSettings::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simGetFocalLengthERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFocalLength", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simGetFocalLengthERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFocalLength::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simGetFocalLengthERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFocalLength::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simGetFocalLengthERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFocalLength::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simGetFocusApertureERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFocusAperture", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simGetFocusApertureERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFocusAperture::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simGetFocusApertureERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFocusAperture::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simGetFocusApertureERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFocusAperture::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simGetFocusDistanceERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFocusDistance", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simGetFocusDistanceERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFocusDistance::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simGetFocusDistanceERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFocusDistance::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simGetFocusDistanceERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetFocusDistance::vehicle_name", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase28simGetGroundTruthEnvironmentERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simGetGroundTruthEnvironment", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase28simGetGroundTruthEnvironmentERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simGetGroundTruthEnvironment::vehicle_name", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase27simGetGroundTruthKinematicsERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simGetGroundTruthKinematics", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase27simGetGroundTruthKinematicsERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simGetGroundTruthKinematics::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase11simGetImageERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetImage", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase11simGetImageERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetImage::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase11simGetImageERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetImage::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase11simGetImageERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetImage::type", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase11simGetImageERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetImage::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase12simGetImagesE6vectorIN16ImageCaptureBase12ImageRequestEERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetImages", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase12simGetImagesE6vectorIN16ImageCaptureBase12ImageRequestEERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetImages::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase12simGetImagesE6vectorIN16ImageCaptureBase12ImageRequestEERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetImages::request", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase12simGetImagesE6vectorIN16ImageCaptureBase12ImageRequestEERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetImages::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simGetLensSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetLensSettings", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simGetLensSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetLensSettings::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simGetLensSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetLensSettings::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simGetLensSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetLensSettings::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase31simGetMeshPositionVertexBuffersEv", "nervosys::autonomylib::RpcLibClientBase::simGetMeshPositionVertexBuffers", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16simGetObjectPoseERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simGetObjectPose", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16simGetObjectPoseERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simGetObjectPose::object_name", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase17simGetObjectScaleERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simGetObjectScale", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase17simGetObjectScaleERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simGetObjectScale::object_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase28simGetPresetFilmbackSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetPresetFilmbackSettings", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase28simGetPresetFilmbackSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetPresetFilmbackSettings::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase28simGetPresetFilmbackSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetPresetFilmbackSettings::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase28simGetPresetFilmbackSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetPresetFilmbackSettings::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simGetPresetLensSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetPresetLensSettings", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simGetPresetLensSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetPresetLensSettings::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simGetPresetLensSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetPresetLensSettings::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simGetPresetLensSettingsERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simGetPresetLensSettings::vehicle_name", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase26simGetSegmentationObjectIDERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simGetSegmentationObjectID", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase26simGetSegmentationObjectIDERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simGetSegmentationObjectID::mesh_name", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase17simGetVehiclePoseERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simGetVehiclePose", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase17simGetVehiclePoseERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simGetVehiclePose::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simGetWorldExtentsEv", "nervosys::autonomylib::RpcLibClientBase::simGetWorldExtents", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase11simIsPausedEv", "nervosys::autonomylib::RpcLibClientBase::simIsPaused", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase13simListAssetsEv", "nervosys::autonomylib::RpcLibClientBase::simListAssets", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase19simListSceneObjectsERK6string", "nervosys::autonomylib::RpcLibClientBase::simListSceneObjects", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase19simListSceneObjectsERK6string", "nervosys::autonomylib::RpcLibClientBase::simListSceneObjects::name_regex", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase12simLoadLevelERK6string", "nervosys::autonomylib::RpcLibClientBase::simLoadLevel", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase12simLoadLevelERK6string", "nervosys::autonomylib::RpcLibClientBase::simLoadLevel::level_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase8simPauseEb", "nervosys::autonomylib::RpcLibClientBase::simPause", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase8simPauseEb", "nervosys::autonomylib::RpcLibClientBase::simPause::is_paused", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::RpcLibClientBase::simPlotArrows", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::RpcLibClientBase::simPlotArrows::arrow_size", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::RpcLibClientBase::simPlotArrows::color_rgba", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::RpcLibClientBase::simPlotArrows::duration", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::RpcLibClientBase::simPlotArrows::is_persistent", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::RpcLibClientBase::simPlotArrows::points_end", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::RpcLibClientBase::simPlotArrows::points_start", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::RpcLibClientBase::simPlotArrows::thickness", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simPlotLineListERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotLineList", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simPlotLineListERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotLineList::color_rgba", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simPlotLineListERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotLineList::duration", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simPlotLineListERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotLineList::is_persistent", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simPlotLineListERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotLineList::points", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simPlotLineListERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotLineList::thickness", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simPlotLineStripERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotLineStrip", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simPlotLineStripERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotLineStrip::color_rgba", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simPlotLineStripERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotLineStrip::duration", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simPlotLineStripERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotLineStrip::is_persistent", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simPlotLineStripERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotLineStrip::points", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simPlotLineStripERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotLineStrip::thickness", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotPointsERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotPoints", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotPointsERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotPoints::color_rgba", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotPointsERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotPoints::duration", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotPointsERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotPoints::is_persistent", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotPointsERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotPoints::points", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotPointsERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::RpcLibClientBase::simPlotPoints::size", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14simPlotStringsERK6vectorINSt6stringEERK6vectorI8Vector3rEfRK6vectorIfEf", "nervosys::autonomylib::RpcLibClientBase::simPlotStrings", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14simPlotStringsERK6vectorINSt6stringEERK6vectorI8Vector3rEfRK6vectorIfEf", "nervosys::autonomylib::RpcLibClientBase::simPlotStrings::color_rgba", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14simPlotStringsERK6vectorINSt6stringEERK6vectorI8Vector3rEfRK6vectorIfEf", "nervosys::autonomylib::RpcLibClientBase::simPlotStrings::duration", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14simPlotStringsERK6vectorINSt6stringEERK6vectorI8Vector3rEfRK6vectorIfEf", "nervosys::autonomylib::RpcLibClientBase::simPlotStrings::positions", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14simPlotStringsERK6vectorINSt6stringEERK6vectorI8Vector3rEfRK6vectorIfEf", "nervosys::autonomylib::RpcLibClientBase::simPlotStrings::scale", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14simPlotStringsERK6vectorINSt6stringEERK6vectorI8Vector3rEfRK6vectorIfEf", "nervosys::autonomylib::RpcLibClientBase::simPlotStrings::strings", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simPlotTransformsERK6vectorI4PoseEfffb", "nervosys::autonomylib::RpcLibClientBase::simPlotTransforms", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simPlotTransformsERK6vectorI4PoseEfffb", "nervosys::autonomylib::RpcLibClientBase::simPlotTransforms::duration", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simPlotTransformsERK6vectorI4PoseEfffb", "nervosys::autonomylib::RpcLibClientBase::simPlotTransforms::is_persistent", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simPlotTransformsERK6vectorI4PoseEfffb", "nervosys::autonomylib::RpcLibClientBase::simPlotTransforms::poses", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simPlotTransformsERK6vectorI4PoseEfffb", "nervosys::autonomylib::RpcLibClientBase::simPlotTransforms::scale", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simPlotTransformsERK6vectorI4PoseEfffb", "nervosys::autonomylib::RpcLibClientBase::simPlotTransforms::thickness", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::RpcLibClientBase::simPlotTransformsWithNames", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::RpcLibClientBase::simPlotTransformsWithNames::duration", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::RpcLibClientBase::simPlotTransformsWithNames::names", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::RpcLibClientBase::simPlotTransformsWithNames::poses", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::RpcLibClientBase::simPlotTransformsWithNames::text_color_rgba", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::RpcLibClientBase::simPlotTransformsWithNames::text_scale", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::RpcLibClientBase::simPlotTransformsWithNames::tf_scale", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::RpcLibClientBase::simPlotTransformsWithNames::tf_thickness", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simPrintLogMessageERKNSt6stringENSt6stringEh", "nervosys::autonomylib::RpcLibClientBase::simPrintLogMessage", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simPrintLogMessageERKNSt6stringENSt6stringEh", "nervosys::autonomylib::RpcLibClientBase::simPrintLogMessage::message", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simPrintLogMessageERKNSt6stringENSt6stringEh", "nervosys::autonomylib::RpcLibClientBase::simPrintLogMessage::message_param", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simPrintLogMessageERKNSt6stringENSt6stringEh", "nervosys::autonomylib::RpcLibClientBase::simPrintLogMessage::severity", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simRunConsoleCommandERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simRunConsoleCommand", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simRunConsoleCommandERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simRunConsoleCommand::command", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetCameraFovERKNSt6stringEfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetCameraFov", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetCameraFovERKNSt6stringEfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetCameraFov::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetCameraFovERKNSt6stringEfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetCameraFov::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetCameraFovERKNSt6stringEfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetCameraFov::fov_degrees", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetCameraFovERKNSt6stringEfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetCameraFov::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetCameraPoseERKNSt6stringERK4PoseRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetCameraPose", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetCameraPoseERKNSt6stringERK4PoseRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetCameraPose::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetCameraPoseERKNSt6stringERK4PoseRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetCameraPose::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetCameraPoseERKNSt6stringERK4PoseRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetCameraPose::pose", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetCameraPoseERKNSt6stringERK4PoseRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetCameraPose::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase27simSetDetectionFilterRadiusERKNSt6stringEN16ImageCaptureBase9ImageTypeEKfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetDetectionFilterRadius", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase27simSetDetectionFilterRadiusERKNSt6stringEN16ImageCaptureBase9ImageTypeEKfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetDetectionFilterRadius::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase27simSetDetectionFilterRadiusERKNSt6stringEN16ImageCaptureBase9ImageTypeEKfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetDetectionFilterRadius::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase27simSetDetectionFilterRadiusERKNSt6stringEN16ImageCaptureBase9ImageTypeEKfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetDetectionFilterRadius::radius_cm", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase27simSetDetectionFilterRadiusERKNSt6stringEN16ImageCaptureBase9ImageTypeEKfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetDetectionFilterRadius::type", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase27simSetDetectionFilterRadiusERKNSt6stringEN16ImageCaptureBase9ImageTypeEKfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetDetectionFilterRadius::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase21simSetDistortionParamERKNSt6stringERKNSt6stringEfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetDistortionParam", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase21simSetDistortionParamERKNSt6stringERKNSt6stringEfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetDistortionParam::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase21simSetDistortionParamERKNSt6stringERKNSt6stringEfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetDistortionParam::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase21simSetDistortionParamERKNSt6stringERKNSt6stringEfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetDistortionParam::param_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase21simSetDistortionParamERKNSt6stringERKNSt6stringEfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetDistortionParam::value", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase21simSetDistortionParamERKNSt6stringERKNSt6stringEfRKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetDistortionParam::vehicle_name", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase14simSetExtForceERK8Vector3r", "nervosys::autonomylib::RpcLibClientBase::simSetExtForce", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase14simSetExtForceERK8Vector3r", "nervosys::autonomylib::RpcLibClientBase::simSetExtForce::ext_force", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simSetFilmbackSettingsEKfKfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFilmbackSettings", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simSetFilmbackSettingsEKfKfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFilmbackSettings::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simSetFilmbackSettingsEKfKfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFilmbackSettings::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simSetFilmbackSettingsEKfKfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFilmbackSettings::sensor_heigth", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simSetFilmbackSettingsEKfKfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFilmbackSettings::sensor_width", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simSetFilmbackSettingsEKfKfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFilmbackSettings::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetFocalLengthEfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocalLength", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetFocalLengthEfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocalLength::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetFocalLengthEfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocalLength::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetFocalLengthEfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocalLength::focal_length", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetFocalLengthEfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocalLength::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simSetFocusApertureEKfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocusAperture", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simSetFocusApertureEKfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocusAperture::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simSetFocusApertureEKfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocusAperture::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simSetFocusApertureEKfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocusAperture::focus_aperture", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simSetFocusApertureEKfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocusAperture::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simSetFocusDistanceEfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocusDistance", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simSetFocusDistanceEfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocusDistance::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simSetFocusDistanceEfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocusDistance::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simSetFocusDistanceEfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocusDistance::focus_distance", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simSetFocusDistanceEfRKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetFocusDistance::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetKinematicsERKN10Kinematics5StateEbRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simSetKinematics", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetKinematicsERKN10Kinematics5StateEbRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simSetKinematics::ignore_collision", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetKinematicsERKN10Kinematics5StateEbRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simSetKinematics::state", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetKinematicsERKN10Kinematics5StateEbRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simSetKinematics::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simSetObjectMaterialERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::RpcLibClientBase::simSetObjectMaterial", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simSetObjectMaterialERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::RpcLibClientBase::simSetObjectMaterial::component_id", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simSetObjectMaterialERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::RpcLibClientBase::simSetObjectMaterial::material_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simSetObjectMaterialERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::RpcLibClientBase::simSetObjectMaterial::object_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase31simSetObjectMaterialFromTextureERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::RpcLibClientBase::simSetObjectMaterialFromTexture", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase31simSetObjectMaterialFromTextureERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::RpcLibClientBase::simSetObjectMaterialFromTexture::component_id", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase31simSetObjectMaterialFromTextureERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::RpcLibClientBase::simSetObjectMaterialFromTexture::object_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase31simSetObjectMaterialFromTextureERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::RpcLibClientBase::simSetObjectMaterialFromTexture::texture_path", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetObjectPoseERKNSt6stringERK4Poseb", "nervosys::autonomylib::RpcLibClientBase::simSetObjectPose", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetObjectPoseERKNSt6stringERK4Poseb", "nervosys::autonomylib::RpcLibClientBase::simSetObjectPose::object_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetObjectPoseERKNSt6stringERK4Poseb", "nervosys::autonomylib::RpcLibClientBase::simSetObjectPose::pose", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetObjectPoseERKNSt6stringERK4Poseb", "nervosys::autonomylib::RpcLibClientBase::simSetObjectPose::teleport", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetObjectScaleERKNSt6stringERK8Vector3r", "nervosys::autonomylib::RpcLibClientBase::simSetObjectScale", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetObjectScaleERKNSt6stringERK8Vector3r", "nervosys::autonomylib::RpcLibClientBase::simSetObjectScale::object_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetObjectScaleERKNSt6stringERK8Vector3r", "nervosys::autonomylib::RpcLibClientBase::simSetObjectScale::scale", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase28simSetPresetFilmbackSettingsERKNSt6stringERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetPresetFilmbackSettings", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase28simSetPresetFilmbackSettingsERKNSt6stringERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetPresetFilmbackSettings::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase28simSetPresetFilmbackSettingsERKNSt6stringERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetPresetFilmbackSettings::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase28simSetPresetFilmbackSettingsERKNSt6stringERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetPresetFilmbackSettings::preset_filmback_settings", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase28simSetPresetFilmbackSettingsERKNSt6stringERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetPresetFilmbackSettings::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simSetPresetLensSettingsERKNSt6stringERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetPresetLensSettings", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simSetPresetLensSettingsERKNSt6stringERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetPresetLensSettings::camera_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simSetPresetLensSettingsERKNSt6stringERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetPresetLensSettings::external", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simSetPresetLensSettingsERKNSt6stringERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetPresetLensSettings::preset_lens_settings", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simSetPresetLensSettingsERKNSt6stringERKNSt6stringERKNSt6stringEb", "nervosys::autonomylib::RpcLibClientBase::simSetPresetLensSettings::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simSetSegmentationObjectIDERKNSt6stringEib", "nervosys::autonomylib::RpcLibClientBase::simSetSegmentationObjectID", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simSetSegmentationObjectIDERKNSt6stringEib", "nervosys::autonomylib::RpcLibClientBase::simSetSegmentationObjectID::is_name_regex", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simSetSegmentationObjectIDERKNSt6stringEib", "nervosys::autonomylib::RpcLibClientBase::simSetSegmentationObjectID::mesh_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simSetSegmentationObjectIDERKNSt6stringEib", "nervosys::autonomylib::RpcLibClientBase::simSetSegmentationObjectID::object_id", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetTimeOfDayEbRK6stringbffb", "nervosys::autonomylib::RpcLibClientBase::simSetTimeOfDay", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetTimeOfDayEbRK6stringbffb", "nervosys::autonomylib::RpcLibClientBase::simSetTimeOfDay::celestial_clock_speed", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetTimeOfDayEbRK6stringbffb", "nervosys::autonomylib::RpcLibClientBase::simSetTimeOfDay::is_enabled", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetTimeOfDayEbRK6stringbffb", "nervosys::autonomylib::RpcLibClientBase::simSetTimeOfDay::is_start_datetime_dst", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetTimeOfDayEbRK6stringbffb", "nervosys::autonomylib::RpcLibClientBase::simSetTimeOfDay::move_sun", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetTimeOfDayEbRK6stringbffb", "nervosys::autonomylib::RpcLibClientBase::simSetTimeOfDay::start_datetime", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetTimeOfDayEbRK6stringbffb", "nervosys::autonomylib::RpcLibClientBase::simSetTimeOfDay::update_interval_secs", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetTraceLineERKNSt6vectorIfEEfRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simSetTraceLine", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetTraceLineERKNSt6vectorIfEEfRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simSetTraceLine::color_rgba", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetTraceLineERKNSt6vectorIfEEfRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simSetTraceLine::thickness", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetTraceLineERKNSt6vectorIfEEfRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simSetTraceLine::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetVehiclePoseERK4PosebRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simSetVehiclePose", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetVehiclePoseERK4PosebRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simSetVehiclePose::ignore_collision", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetVehiclePoseERK4PosebRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simSetVehiclePose::pose", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetVehiclePoseERK4PosebRKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simSetVehiclePose::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simSetWeatherParameterEN15WorldSimApiBase16WeatherParameterEf", "nervosys::autonomylib::RpcLibClientBase::simSetWeatherParameter", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simSetWeatherParameterEN15WorldSimApiBase16WeatherParameterEf", "nervosys::autonomylib::RpcLibClientBase::simSetWeatherParameter::param", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simSetWeatherParameterEN15WorldSimApiBase16WeatherParameterEf", "nervosys::autonomylib::RpcLibClientBase::simSetWeatherParameter::val", ""], [50, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase10simSetWindERK8Vector3r", "nervosys::autonomylib::RpcLibClientBase::simSetWind", ""], [50, 2, 2, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase10simSetWindERK8Vector3r", "nervosys::autonomylib::RpcLibClientBase::simSetWind::wind", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14simSpawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rb", "nervosys::autonomylib::RpcLibClientBase::simSpawnObject", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14simSpawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rb", "nervosys::autonomylib::RpcLibClientBase::simSpawnObject::load_component", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14simSpawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rb", "nervosys::autonomylib::RpcLibClientBase::simSpawnObject::object_name", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14simSpawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rb", "nervosys::autonomylib::RpcLibClientBase::simSpawnObject::physics_enabled", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14simSpawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rb", "nervosys::autonomylib::RpcLibClientBase::simSpawnObject::pose", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14simSpawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rb", "nervosys::autonomylib::RpcLibClientBase::simSpawnObject::scale", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSwapTexturesERKNSt6stringEiii", "nervosys::autonomylib::RpcLibClientBase::simSwapTextures", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSwapTexturesERKNSt6stringEiii", "nervosys::autonomylib::RpcLibClientBase::simSwapTextures::component_id", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSwapTexturesERKNSt6stringEiii", "nervosys::autonomylib::RpcLibClientBase::simSwapTextures::material_id", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSwapTexturesERKNSt6stringEiii", "nervosys::autonomylib::RpcLibClientBase::simSwapTextures::tags", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSwapTexturesERKNSt6stringEiii", "nervosys::autonomylib::RpcLibClientBase::simSwapTextures::tex_id", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase31simTestLineOfSightBetweenPointsERKN8nervosys11autonomylib8GeoPointERKN8nervosys11autonomylib8GeoPointE", "nervosys::autonomylib::RpcLibClientBase::simTestLineOfSightBetweenPoints", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase31simTestLineOfSightBetweenPointsERKN8nervosys11autonomylib8GeoPointERKN8nervosys11autonomylib8GeoPointE", "nervosys::autonomylib::RpcLibClientBase::simTestLineOfSightBetweenPoints::point1", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase31simTestLineOfSightBetweenPointsERKN8nervosys11autonomylib8GeoPointERKN8nervosys11autonomylib8GeoPointE", "nervosys::autonomylib::RpcLibClientBase::simTestLineOfSightBetweenPoints::point2", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase25simTestLineOfSightToPointERKN8nervosys11autonomylib8GeoPointERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simTestLineOfSightToPoint", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase25simTestLineOfSightToPointERKN8nervosys11autonomylib8GeoPointERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simTestLineOfSightToPoint::point", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase25simTestLineOfSightToPointERKN8nervosys11autonomylib8GeoPointERKNSt6stringE", "nervosys::autonomylib::RpcLibClientBase::simTestLineOfSightToPoint::vehicle_name", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14startRecordingEv", "nervosys::autonomylib::RpcLibClientBase::startRecording", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13stopRecordingEv", "nervosys::autonomylib::RpcLibClientBase::stopRecording", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14waitOnLastTaskEPbf", "nervosys::autonomylib::RpcLibClientBase::waitOnLastTask", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14waitOnLastTaskEPbf", "nervosys::autonomylib::RpcLibClientBase::waitOnLastTask::task_result", ""], [50, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14waitOnLastTaskEPbf", "nervosys::autonomylib::RpcLibClientBase::waitOnLastTask::timeout_sec", ""], [50, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibClientBaseD0Ev", "nervosys::autonomylib::RpcLibClientBase::~RpcLibClientBase", ""], [51, 1, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBaseE", "nervosys::autonomylib::RpcLibServerBase", "Subclassed by nervosys::autonomylib::CarRpcLibServer, nervosys::autonomylib::MultirotorRpcLibServer"], [51, 1, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase15ApiNotSupportedE", "nervosys::autonomylib::RpcLibServerBase::ApiNotSupported", "Public Functions    inline ApiNotSupported(const std::string &message)"], [51, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase15ApiNotSupported15ApiNotSupportedERKNSt6stringE", "nervosys::autonomylib::RpcLibServerBase::ApiNotSupported::ApiNotSupported", ""], [51, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase15ApiNotSupported15ApiNotSupportedERKNSt6stringE", "nervosys::autonomylib::RpcLibServerBase::ApiNotSupported::ApiNotSupported::message", ""], [51, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase16RpcLibServerBaseEP11ApiProviderRKNSt6stringE8uint16_t", "nervosys::autonomylib::RpcLibServerBase::RpcLibServerBase", ""], [51, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase16RpcLibServerBaseEP11ApiProviderRKNSt6stringE8uint16_t", "nervosys::autonomylib::RpcLibServerBase::RpcLibServerBase::api_provider", ""], [51, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase16RpcLibServerBaseEP11ApiProviderRKNSt6stringE8uint16_t", "nervosys::autonomylib::RpcLibServerBase::RpcLibServerBase::port", ""], [51, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase16RpcLibServerBaseEP11ApiProviderRKNSt6stringE8uint16_t", "nervosys::autonomylib::RpcLibServerBase::RpcLibServerBase::server_address", ""], [51, 0, 1, "_CPPv4NK8nervosys11autonomylib16RpcLibServerBase9getServerEv", "nervosys::autonomylib::RpcLibServerBase::getServer", ""], [51, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase13getVehicleApiERKNSt6stringE", "nervosys::autonomylib::RpcLibServerBase::getVehicleApi", ""], [51, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase13getVehicleApiERKNSt6stringE", "nervosys::autonomylib::RpcLibServerBase::getVehicleApi::vehicle_name", ""], [51, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase16getVehicleSimApiERKNSt6stringE", "nervosys::autonomylib::RpcLibServerBase::getVehicleSimApi", ""], [51, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase16getVehicleSimApiERKNSt6stringE", "nervosys::autonomylib::RpcLibServerBase::getVehicleSimApi::vehicle_name", ""], [51, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase14getWorldSimApiEv", "nervosys::autonomylib::RpcLibServerBase::getWorldSimApi", ""], [51, 1, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4implE", "nervosys::autonomylib::RpcLibServerBase::impl", "Public Functions    inline impl(string server_address, uint16_t port)      inline impl(uint16_t port)      inline ~impl()      inline void stop()      inline void run(bool block, std::size_t thread_count)    Public Members    rpc::server server      bool is_async_ = false"], [51, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl4implE6string8uint16_t", "nervosys::autonomylib::RpcLibServerBase::impl::impl", ""], [51, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl4implE8uint16_t", "nervosys::autonomylib::RpcLibServerBase::impl::impl", ""], [51, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl4implE6string8uint16_t", "nervosys::autonomylib::RpcLibServerBase::impl::impl::port", ""], [51, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl4implE8uint16_t", "nervosys::autonomylib::RpcLibServerBase::impl::impl::port", ""], [51, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl4implE6string8uint16_t", "nervosys::autonomylib::RpcLibServerBase::impl::impl::server_address", ""], [51, 3, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl9is_async_E", "nervosys::autonomylib::RpcLibServerBase::impl::is_async_", ""], [51, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl3runEbNSt6size_tE", "nervosys::autonomylib::RpcLibServerBase::impl::run", ""], [51, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl3runEbNSt6size_tE", "nervosys::autonomylib::RpcLibServerBase::impl::run::block", ""], [51, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl3runEbNSt6size_tE", "nervosys::autonomylib::RpcLibServerBase::impl::run::thread_count", ""], [51, 3, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl6serverE", "nervosys::autonomylib::RpcLibServerBase::impl::server", ""], [51, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl4stopEv", "nervosys::autonomylib::RpcLibServerBase::impl::stop", ""], [51, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4implD0Ev", "nervosys::autonomylib::RpcLibServerBase::impl::~impl", ""], [51, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase5startEbNSt6size_tE", "nervosys::autonomylib::RpcLibServerBase::start", ""], [51, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase5startEbNSt6size_tE", "nervosys::autonomylib::RpcLibServerBase::start::block", ""], [51, 2, 2, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase5startEbNSt6size_tE", "nervosys::autonomylib::RpcLibServerBase::start::thread_count", ""], [51, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4stopEv", "nervosys::autonomylib::RpcLibServerBase::stop", ""], [51, 0, 1, "_CPPv4N8nervosys11autonomylib16RpcLibServerBaseD0Ev", "nervosys::autonomylib::RpcLibServerBase::~RpcLibServerBase", ""], [53, 1, 1, "_CPPv4N8nervosys11autonomylib10SafetyEvalE", "nervosys::autonomylib::SafetyEval", "Values:"], [53, 1, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResultE", "nervosys::autonomylib::SafetyEval::EvalResult", "Public Functions    inline EvalResult()      inline string toString() const    Public Members    bool is_safe      SafetyViolationType reason      ObstacleMap::ObstacleInfo cur_obs      ObstacleMap::ObstacleInfo dest_obs      ObstacleMap::ObstacleInfo suggested_obs      Vector3r cur_pos      Vector3r dest_pos      Vector3r cur_dest_body      string message      Vector3r suggested_vec      float cur_risk_dist      float dest_risk_dist"], [53, 0, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult10EvalResultEv", "nervosys::autonomylib::SafetyEval::EvalResult::EvalResult", ""], [53, 3, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult13cur_dest_bodyE", "nervosys::autonomylib::SafetyEval::EvalResult::cur_dest_body", ""], [53, 3, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult7cur_obsE", "nervosys::autonomylib::SafetyEval::EvalResult::cur_obs", ""], [53, 3, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult7cur_posE", "nervosys::autonomylib::SafetyEval::EvalResult::cur_pos", ""], [53, 3, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult13cur_risk_distE", "nervosys::autonomylib::SafetyEval::EvalResult::cur_risk_dist", ""], [53, 3, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult8dest_obsE", "nervosys::autonomylib::SafetyEval::EvalResult::dest_obs", ""], [53, 3, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult8dest_posE", "nervosys::autonomylib::SafetyEval::EvalResult::dest_pos", ""], [53, 3, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult14dest_risk_distE", "nervosys::autonomylib::SafetyEval::EvalResult::dest_risk_dist", ""], [53, 3, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult7is_safeE", "nervosys::autonomylib::SafetyEval::EvalResult::is_safe", ""], [53, 3, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult7messageE", "nervosys::autonomylib::SafetyEval::EvalResult::message", ""], [53, 3, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult6reasonE", "nervosys::autonomylib::SafetyEval::EvalResult::reason", ""], [53, 3, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult13suggested_obsE", "nervosys::autonomylib::SafetyEval::EvalResult::suggested_obs", ""], [53, 3, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult13suggested_vecE", "nervosys::autonomylib::SafetyEval::EvalResult::suggested_vec", ""], [53, 0, 1, "_CPPv4NK8nervosys11autonomylib10SafetyEval10EvalResult8toStringEv", "nervosys::autonomylib::SafetyEval::EvalResult::toString", ""], [53, 5, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval20ObsAvoidanceStrategyE", "nervosys::autonomylib::SafetyEval::ObsAvoidanceStrategy", "Values:"], [53, 6, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval20ObsAvoidanceStrategy11ClosestMoveE", "nervosys::autonomylib::SafetyEval::ObsAvoidanceStrategy::ClosestMove", ""], [53, 6, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval20ObsAvoidanceStrategy12OppositeMoveE", "nervosys::autonomylib::SafetyEval::ObsAvoidanceStrategy::OppositeMove", ""], [53, 6, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval20ObsAvoidanceStrategy14RaiseExceptionE", "nervosys::autonomylib::SafetyEval::ObsAvoidanceStrategy::RaiseException", ""], [53, 0, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval10SafetyEvalE19MultirotorApiParams10shared_ptrI9IGeoFenceE10shared_ptrI11ObstacleMapE", "nervosys::autonomylib::SafetyEval::SafetyEval", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval10SafetyEvalE19MultirotorApiParams10shared_ptrI9IGeoFenceE10shared_ptrI11ObstacleMapE", "nervosys::autonomylib::SafetyEval::SafetyEval::fence_ptr", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval10SafetyEvalE19MultirotorApiParams10shared_ptrI9IGeoFenceE10shared_ptrI11ObstacleMapE", "nervosys::autonomylib::SafetyEval::SafetyEval::obs_xy", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval10SafetyEvalE19MultirotorApiParams10shared_ptrI9IGeoFenceE10shared_ptrI11ObstacleMapE", "nervosys::autonomylib::SafetyEval::SafetyEval::vehicle_params", ""], [53, 4, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval19SafetyViolationTypeE", "nervosys::autonomylib::SafetyEval::SafetyViolationType", ""], [53, 5, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval20SafetyViolationType_E", "nervosys::autonomylib::SafetyEval::SafetyViolationType_", "Values:"], [53, 6, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval20SafetyViolationType_3AllE", "nervosys::autonomylib::SafetyEval::SafetyViolationType_::All", ""], [53, 6, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval20SafetyViolationType_8GeoFenceE", "nervosys::autonomylib::SafetyEval::SafetyViolationType_::GeoFence", ""], [53, 6, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval20SafetyViolationType_17NoSafetyViolationE", "nervosys::autonomylib::SafetyEval::SafetyViolationType_::NoSafetyViolation", ""], [53, 6, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval20SafetyViolationType_8ObstacleE", "nervosys::autonomylib::SafetyEval::SafetyViolationType_::Obstacle", ""], [53, 6, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval20SafetyViolationType_13VelocityLimitE", "nervosys::autonomylib::SafetyEval::SafetyViolationType_::VelocityLimit", ""], [53, 0, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval23getObsAvoidanceStrategyEv", "nervosys::autonomylib::SafetyEval::getObsAvoidanceStrategy", ""], [53, 0, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval17isSafeDestinationERK8Vector3rRK8Vector3rRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafeDestination", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval17isSafeDestinationERK8Vector3rRK8Vector3rRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafeDestination::cur_pos", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval17isSafeDestinationERK8Vector3rRK8Vector3rRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafeDestination::dest", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval17isSafeDestinationERK8Vector3rRK8Vector3rRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafeDestination::quaternion", ""], [53, 0, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval14isSafePositionERK8Vector3rRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafePosition", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval14isSafePositionERK8Vector3rRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafePosition::cur_pos", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval14isSafePositionERK8Vector3rRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafePosition::quaternion", ""], [53, 0, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval14isSafeVelocityERK8Vector3rRK8Vector3rRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafeVelocity", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval14isSafeVelocityERK8Vector3rRK8Vector3rRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafeVelocity::cur_pos", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval14isSafeVelocityERK8Vector3rRK8Vector3rRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafeVelocity::quaternion", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval14isSafeVelocityERK8Vector3rRK8Vector3rRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafeVelocity::velocity", ""], [53, 0, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval15isSafeVelocityZERK8Vector3rfffRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafeVelocityZ", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval15isSafeVelocityZERK8Vector3rfffRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafeVelocityZ::cur_pos", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval15isSafeVelocityZERK8Vector3rfffRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafeVelocityZ::quaternion", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval15isSafeVelocityZERK8Vector3rfffRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafeVelocityZ::vx", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval15isSafeVelocityZERK8Vector3rfffRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafeVelocityZ::vy", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval15isSafeVelocityZERK8Vector3rfffRK11Quaternionr", "nervosys::autonomylib::SafetyEval::isSafeVelocityZ::z", ""], [53, 0, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval23setObsAvoidanceStrategyEN10SafetyEval20ObsAvoidanceStrategyE", "nervosys::autonomylib::SafetyEval::setObsAvoidanceStrategy", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval23setObsAvoidanceStrategyEN10SafetyEval20ObsAvoidanceStrategyE", "nervosys::autonomylib::SafetyEval::setObsAvoidanceStrategy::obs_strategy", ""], [53, 0, 1, "_CPPv4N8nervosys11autonomylib10SafetyEval9setSafetyE19SafetyViolationTypefN10SafetyEval20ObsAvoidanceStrategyERK8Vector3rfff", "nervosys::autonomylib::SafetyEval::setSafety", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval9setSafetyE19SafetyViolationTypefN10SafetyEval20ObsAvoidanceStrategyERK8Vector3rfff", "nervosys::autonomylib::SafetyEval::setSafety::enable_reasons", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval9setSafetyE19SafetyViolationTypefN10SafetyEval20ObsAvoidanceStrategyERK8Vector3rfff", "nervosys::autonomylib::SafetyEval::setSafety::max_z", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval9setSafetyE19SafetyViolationTypefN10SafetyEval20ObsAvoidanceStrategyERK8Vector3rfff", "nervosys::autonomylib::SafetyEval::setSafety::min_z", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval9setSafetyE19SafetyViolationTypefN10SafetyEval20ObsAvoidanceStrategyERK8Vector3rfff", "nervosys::autonomylib::SafetyEval::setSafety::obs_clearance", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval9setSafetyE19SafetyViolationTypefN10SafetyEval20ObsAvoidanceStrategyERK8Vector3rfff", "nervosys::autonomylib::SafetyEval::setSafety::obs_strategy", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval9setSafetyE19SafetyViolationTypefN10SafetyEval20ObsAvoidanceStrategyERK8Vector3rfff", "nervosys::autonomylib::SafetyEval::setSafety::origin", ""], [53, 2, 2, "_CPPv4N8nervosys11autonomylib10SafetyEval9setSafetyE19SafetyViolationTypefN10SafetyEval20ObsAvoidanceStrategyERK8Vector3rfff", "nervosys::autonomylib::SafetyEval::setSafety::xy_length", ""], [54, 1, 1, "_CPPv4N8nervosys11autonomylib10SensorBaseE", "nervosys::autonomylib::SensorBase", "Subclassed by nervosys::autonomylib::BarometerBase, nervosys::autonomylib::DistanceBase, nervosys::autonomylib::GpsBase, nervosys::autonomylib::LidarBase, nervosys::autonomylib::MagnetometerBase"], [54, 1, 1, "_CPPv4N8nervosys11autonomylib10SensorBase11GroundTruthE", "nervosys::autonomylib::SensorBase::GroundTruth", "Public Members    const Kinematics::State *kinematics      const Environment *environment"], [54, 3, 1, "_CPPv4N8nervosys11autonomylib10SensorBase11GroundTruth11environmentE", "nervosys::autonomylib::SensorBase::GroundTruth::environment", ""], [54, 3, 1, "_CPPv4N8nervosys11autonomylib10SensorBase11GroundTruth10kinematicsE", "nervosys::autonomylib::SensorBase::GroundTruth::kinematics", ""], [54, 0, 1, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorBaseERKNSt6stringE", "nervosys::autonomylib::SensorBase::SensorBase", ""], [54, 2, 2, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorBaseERKNSt6stringE", "nervosys::autonomylib::SensorBase::SensorBase::sensor_name", ""], [54, 5, 1, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorTypeE", "nervosys::autonomylib::SensorBase::SensorType", "Values:"], [54, 6, 1, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorType9BarometerE", "nervosys::autonomylib::SensorBase::SensorType::Barometer", ""], [54, 6, 1, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorType8DistanceE", "nervosys::autonomylib::SensorBase::SensorType::Distance", ""], [54, 6, 1, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorType3GpsE", "nervosys::autonomylib::SensorBase::SensorType::Gps", ""], [54, 6, 1, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorType3ImuE", "nervosys::autonomylib::SensorBase::SensorType::Imu", ""], [54, 6, 1, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorType5LidarE", "nervosys::autonomylib::SensorBase::SensorType::Lidar", ""], [54, 6, 1, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorType12MagnetometerE", "nervosys::autonomylib::SensorBase::SensorType::Magnetometer", ""], [54, 0, 1, "_CPPv4NK8nervosys11autonomylib10SensorBase14getGroundTruthEv", "nervosys::autonomylib::SensorBase::getGroundTruth", ""], [54, 0, 1, "_CPPv4NK8nervosys11autonomylib10SensorBase7getNameEv", "nervosys::autonomylib::SensorBase::getName", ""], [54, 0, 1, "_CPPv4N8nervosys11autonomylib10SensorBase10initializeEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::SensorBase::initialize", ""], [54, 2, 2, "_CPPv4N8nervosys11autonomylib10SensorBase10initializeEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::SensorBase::initialize::environment", ""], [54, 2, 2, "_CPPv4N8nervosys11autonomylib10SensorBase10initializeEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::SensorBase::initialize::kinematics", ""], [54, 0, 1, "_CPPv4N8nervosys11autonomylib10SensorBaseD0Ev", "nervosys::autonomylib::SensorBase::~SensorBase", ""], [55, 1, 1, "_CPPv4N8nervosys11autonomylib16SensorCollectionE", "nervosys::autonomylib::SensorCollection", "Public Types    typedef SensorBase *SensorBasePtr    Public Functions    inline void insert(SensorBasePtr sensor, SensorBase::SensorType type)      inline const SensorBase *getByType(SensorBase::SensorType type, uint index = 0) const      inline uint size(SensorBase::SensorType type) const      inline void initialize(const Kinematics::State *kinematics, const Environment *environment)      inline void clear()      inline virtual void resetImplementation() override      inline virtual void update() override      inline virtual void reportState(StateReporter &reporter) override"], [55, 4, 1, "_CPPv4N8nervosys11autonomylib16SensorCollection13SensorBasePtrE", "nervosys::autonomylib::SensorCollection::SensorBasePtr", ""], [55, 0, 1, "_CPPv4N8nervosys11autonomylib16SensorCollection5clearEv", "nervosys::autonomylib::SensorCollection::clear", ""], [55, 0, 1, "_CPPv4NK8nervosys11autonomylib16SensorCollection9getByTypeEN10SensorBase10SensorTypeE4uint", "nervosys::autonomylib::SensorCollection::getByType", ""], [55, 2, 2, "_CPPv4NK8nervosys11autonomylib16SensorCollection9getByTypeEN10SensorBase10SensorTypeE4uint", "nervosys::autonomylib::SensorCollection::getByType::index", ""], [55, 2, 2, "_CPPv4NK8nervosys11autonomylib16SensorCollection9getByTypeEN10SensorBase10SensorTypeE4uint", "nervosys::autonomylib::SensorCollection::getByType::type", ""], [55, 0, 1, "_CPPv4N8nervosys11autonomylib16SensorCollection10initializeEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::SensorCollection::initialize", ""], [55, 2, 2, "_CPPv4N8nervosys11autonomylib16SensorCollection10initializeEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::SensorCollection::initialize::environment", ""], [55, 2, 2, "_CPPv4N8nervosys11autonomylib16SensorCollection10initializeEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::SensorCollection::initialize::kinematics", ""], [55, 0, 1, "_CPPv4N8nervosys11autonomylib16SensorCollection6insertE13SensorBasePtrN10SensorBase10SensorTypeE", "nervosys::autonomylib::SensorCollection::insert", ""], [55, 2, 2, "_CPPv4N8nervosys11autonomylib16SensorCollection6insertE13SensorBasePtrN10SensorBase10SensorTypeE", "nervosys::autonomylib::SensorCollection::insert::sensor", ""], [55, 2, 2, "_CPPv4N8nervosys11autonomylib16SensorCollection6insertE13SensorBasePtrN10SensorBase10SensorTypeE", "nervosys::autonomylib::SensorCollection::insert::type", ""], [55, 0, 1, "_CPPv4N8nervosys11autonomylib16SensorCollection11reportStateER13StateReporter", "nervosys::autonomylib::SensorCollection::reportState", ""], [55, 2, 2, "_CPPv4N8nervosys11autonomylib16SensorCollection11reportStateER13StateReporter", "nervosys::autonomylib::SensorCollection::reportState::reporter", ""], [55, 0, 1, "_CPPv4N8nervosys11autonomylib16SensorCollection19resetImplementationEv", "nervosys::autonomylib::SensorCollection::resetImplementation", ""], [55, 0, 1, "_CPPv4NK8nervosys11autonomylib16SensorCollection4sizeEN10SensorBase10SensorTypeE", "nervosys::autonomylib::SensorCollection::size", ""], [55, 2, 2, "_CPPv4NK8nervosys11autonomylib16SensorCollection4sizeEN10SensorBase10SensorTypeE", "nervosys::autonomylib::SensorCollection::size::type", ""], [55, 0, 1, "_CPPv4N8nervosys11autonomylib16SensorCollection6updateEv", "nervosys::autonomylib::SensorCollection::update", ""], [56, 1, 1, "_CPPv4N8nervosys11autonomylib13SensorFactoryE", "nervosys::autonomylib::SensorFactory", "Public Functions    inline virtual std::shared_ptr<SensorBase> createSensorFromSettings(const AutonomySimSettings::SensorSetting *sensor_setting) const      inline virtual void createSensorsFromSettings(const std::map<std::string, std::shared_ptr<AutonomySimSettings::SensorSetting>> &sensors_settings, SensorCollection &sensors, vector<shared_ptr<SensorBase>> &sensor_storage) const      virtual ~SensorFactory() = default"], [56, 0, 1, "_CPPv4NK8nervosys11autonomylib13SensorFactory24createSensorFromSettingsEPKN19AutonomySimSettings13SensorSettingE", "nervosys::autonomylib::SensorFactory::createSensorFromSettings", ""], [56, 2, 2, "_CPPv4NK8nervosys11autonomylib13SensorFactory24createSensorFromSettingsEPKN19AutonomySimSettings13SensorSettingE", "nervosys::autonomylib::SensorFactory::createSensorFromSettings::sensor_setting", ""], [56, 0, 1, "_CPPv4NK8nervosys11autonomylib13SensorFactory25createSensorsFromSettingsERKNSt3mapINSt6stringENSt10shared_ptrIN19AutonomySimSettings13SensorSettingEEEEER16SensorCollectionR6vectorI10shared_ptrI10SensorBaseEE", "nervosys::autonomylib::SensorFactory::createSensorsFromSettings", ""], [56, 2, 2, "_CPPv4NK8nervosys11autonomylib13SensorFactory25createSensorsFromSettingsERKNSt3mapINSt6stringENSt10shared_ptrIN19AutonomySimSettings13SensorSettingEEEEER16SensorCollectionR6vectorI10shared_ptrI10SensorBaseEE", "nervosys::autonomylib::SensorFactory::createSensorsFromSettings::sensor_storage", ""], [56, 2, 2, "_CPPv4NK8nervosys11autonomylib13SensorFactory25createSensorsFromSettingsERKNSt3mapINSt6stringENSt10shared_ptrIN19AutonomySimSettings13SensorSettingEEEEER16SensorCollectionR6vectorI10shared_ptrI10SensorBaseEE", "nervosys::autonomylib::SensorFactory::createSensorsFromSettings::sensors", ""], [56, 2, 2, "_CPPv4NK8nervosys11autonomylib13SensorFactory25createSensorsFromSettingsERKNSt3mapINSt6stringENSt10shared_ptrIN19AutonomySimSettings13SensorSettingEEEEER16SensorCollectionR6vectorI10shared_ptrI10SensorBaseEE", "nervosys::autonomylib::SensorFactory::createSensorsFromSettings::sensors_settings", ""], [56, 0, 1, "_CPPv4N8nervosys11autonomylib13SensorFactoryD0Ev", "nervosys::autonomylib::SensorFactory::~SensorFactory", ""], [57, 1, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApiE", "nervosys::autonomylib::SimpleFlightApi", "Public Functions    inline SimpleFlightApi(const MultirotorParams *vehicle_params, const AutonomySimSettings::VehicleSetting *vehicle_setting)      inline virtual void resetImplementation() override      inline virtual void update() override      inline virtual bool isApiControlEnabled() const override      inline virtual void enableApiControl(bool is_enabled) override      inline virtual bool armDisarm(bool arm) override      inline virtual GeoPoint getHomeGeoPoint() const override      inline virtual void getStatusMessages(std::vector<std::string> &messages) override      inline virtual const SensorCollection &getSensors() const override      inline virtual real_T getActuation(unsigned int rotor_index) const override      inline virtual size_t getActuatorCount() const override      inline virtual void moveByRC(const RCData &rc_data) override      inline virtual void setSimulatedGroundTruth(const Kinematics::State *kinematics, const Environment *environment) override      inline virtual bool setRCData(const RCData &rc_data) override    Protected Functions    inline virtual Kinematics::State getKinematicsEstimated() const override      inline virtual Vector3r getPosition() const override      inline virtual Vector3r getVelocity() const override      inline virtual Quaternionr getOrientation() const override      inline virtual LandedState getLandedState() const override      inline virtual RCData getRCData() const override      inline virtual GeoPoint getGpsLocation() const override      inline virtual float getCommandPeriod() const override      inline virtual float getTakeoffZ() const override      inline virtual float getDistanceAccuracy() const override      inline virtual void commandMotorPWMs(float front_right_pwm, float rear_left_pwm, float front_left_pwm, float rear_right_pwm) override      inline virtual void commandRollPitchYawZ(float roll, float pitch, float yaw, float z) override      inline virtual void commandRollPitchYawThrottle(float roll, float pitch, float yaw, float throttle) override      inline virtual void commandRollPitchYawrateThrottle(float roll, float pitch, float yaw_rate, float throttle) override      inline virtual void commandRollPitchYawrateZ(float roll, float pitch, float yaw_rate, float z) override      inline virtual void commandAngleRatesZ(float roll_rate, float pitch_rate, float yaw_rate, float z) override      inline virtual void commandAngleRatesThrottle(float roll_rate, float pitch_rate, float yaw_rate, float throttle) override      inline virtual void commandVelocity(float vx, float vy, float vz, const YawMode &yaw_mode) override      inline virtual void commandVelocityZ(float vx, float vy, float z, const YawMode &yaw_mode) override      inline virtual void setControllerGains(uint8_t controller_type, const vector<float> &kp, const vector<float> &ki, const vector<float> &kd) override      inline virtual void commandPosition(float x, float y, float z, const YawMode &yaw_mode) override      inline virtual const MultirotorApiParams &getMultirotorApiParams() const override"], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15SimpleFlightApiEPK16MultirotorParamsPKN19AutonomySimSettings14VehicleSettingE", "nervosys::autonomylib::SimpleFlightApi::SimpleFlightApi", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15SimpleFlightApiEPK16MultirotorParamsPKN19AutonomySimSettings14VehicleSettingE", "nervosys::autonomylib::SimpleFlightApi::SimpleFlightApi::vehicle_params", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15SimpleFlightApiEPK16MultirotorParamsPKN19AutonomySimSettings14VehicleSettingE", "nervosys::autonomylib::SimpleFlightApi::SimpleFlightApi::vehicle_setting", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi9armDisarmEb", "nervosys::autonomylib::SimpleFlightApi::armDisarm", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi9armDisarmEb", "nervosys::autonomylib::SimpleFlightApi::armDisarm::arm", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandAngleRatesThrottle", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandAngleRatesThrottle::pitch_rate", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandAngleRatesThrottle::roll_rate", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandAngleRatesThrottle::throttle", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi25commandAngleRatesThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandAngleRatesThrottle::yaw_rate", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi18commandAngleRatesZEffff", "nervosys::autonomylib::SimpleFlightApi::commandAngleRatesZ", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi18commandAngleRatesZEffff", "nervosys::autonomylib::SimpleFlightApi::commandAngleRatesZ::pitch_rate", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi18commandAngleRatesZEffff", "nervosys::autonomylib::SimpleFlightApi::commandAngleRatesZ::roll_rate", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi18commandAngleRatesZEffff", "nervosys::autonomylib::SimpleFlightApi::commandAngleRatesZ::yaw_rate", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi18commandAngleRatesZEffff", "nervosys::autonomylib::SimpleFlightApi::commandAngleRatesZ::z", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16commandMotorPWMsEffff", "nervosys::autonomylib::SimpleFlightApi::commandMotorPWMs", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16commandMotorPWMsEffff", "nervosys::autonomylib::SimpleFlightApi::commandMotorPWMs::front_left_pwm", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16commandMotorPWMsEffff", "nervosys::autonomylib::SimpleFlightApi::commandMotorPWMs::front_right_pwm", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16commandMotorPWMsEffff", "nervosys::autonomylib::SimpleFlightApi::commandMotorPWMs::rear_left_pwm", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16commandMotorPWMsEffff", "nervosys::autonomylib::SimpleFlightApi::commandMotorPWMs::rear_right_pwm", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandPosition", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandPosition::x", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandPosition::y", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandPosition::yaw_mode", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15commandPositionEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandPosition::z", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawThrottle", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawThrottle::pitch", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawThrottle::roll", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawThrottle::throttle", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi27commandRollPitchYawThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawThrottle::yaw", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi20commandRollPitchYawZEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawZ", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi20commandRollPitchYawZEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawZ::pitch", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi20commandRollPitchYawZEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawZ::roll", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi20commandRollPitchYawZEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawZ::yaw", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi20commandRollPitchYawZEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawZ::z", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawrateThrottle", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawrateThrottle::pitch", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawrateThrottle::roll", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawrateThrottle::throttle", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi31commandRollPitchYawrateThrottleEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawrateThrottle::yaw_rate", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawrateZ", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawrateZ::pitch", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawrateZ::roll", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawrateZ::yaw_rate", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi24commandRollPitchYawrateZEffff", "nervosys::autonomylib::SimpleFlightApi::commandRollPitchYawrateZ::z", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandVelocity", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandVelocity::vx", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandVelocity::vy", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandVelocity::vz", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15commandVelocityEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandVelocity::yaw_mode", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandVelocityZ", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandVelocityZ::vx", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandVelocityZ::vy", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandVelocityZ::yaw_mode", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16commandVelocityZEfffRK7YawMode", "nervosys::autonomylib::SimpleFlightApi::commandVelocityZ::z", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16enableApiControlEb", "nervosys::autonomylib::SimpleFlightApi::enableApiControl", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16enableApiControlEb", "nervosys::autonomylib::SimpleFlightApi::enableApiControl::is_enabled", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi12getActuationEj", "nervosys::autonomylib::SimpleFlightApi::getActuation", ""], [57, 2, 2, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi12getActuationEj", "nervosys::autonomylib::SimpleFlightApi::getActuation::rotor_index", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi16getActuatorCountEv", "nervosys::autonomylib::SimpleFlightApi::getActuatorCount", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi16getCommandPeriodEv", "nervosys::autonomylib::SimpleFlightApi::getCommandPeriod", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi19getDistanceAccuracyEv", "nervosys::autonomylib::SimpleFlightApi::getDistanceAccuracy", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi14getGpsLocationEv", "nervosys::autonomylib::SimpleFlightApi::getGpsLocation", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi15getHomeGeoPointEv", "nervosys::autonomylib::SimpleFlightApi::getHomeGeoPoint", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi22getKinematicsEstimatedEv", "nervosys::autonomylib::SimpleFlightApi::getKinematicsEstimated", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi14getLandedStateEv", "nervosys::autonomylib::SimpleFlightApi::getLandedState", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi22getMultirotorApiParamsEv", "nervosys::autonomylib::SimpleFlightApi::getMultirotorApiParams", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi14getOrientationEv", "nervosys::autonomylib::SimpleFlightApi::getOrientation", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi11getPositionEv", "nervosys::autonomylib::SimpleFlightApi::getPosition", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi9getRCDataEv", "nervosys::autonomylib::SimpleFlightApi::getRCData", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi10getSensorsEv", "nervosys::autonomylib::SimpleFlightApi::getSensors", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi17getStatusMessagesERNSt6vectorINSt6stringEEE", "nervosys::autonomylib::SimpleFlightApi::getStatusMessages", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi17getStatusMessagesERNSt6vectorINSt6stringEEE", "nervosys::autonomylib::SimpleFlightApi::getStatusMessages::messages", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi11getTakeoffZEv", "nervosys::autonomylib::SimpleFlightApi::getTakeoffZ", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi11getVelocityEv", "nervosys::autonomylib::SimpleFlightApi::getVelocity", ""], [57, 0, 1, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi19isApiControlEnabledEv", "nervosys::autonomylib::SimpleFlightApi::isApiControlEnabled", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi8moveByRCERK6RCData", "nervosys::autonomylib::SimpleFlightApi::moveByRC", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi8moveByRCERK6RCData", "nervosys::autonomylib::SimpleFlightApi::moveByRC::rc_data", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi19resetImplementationEv", "nervosys::autonomylib::SimpleFlightApi::resetImplementation", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::SimpleFlightApi::setControllerGains", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::SimpleFlightApi::setControllerGains::controller_type", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::SimpleFlightApi::setControllerGains::kd", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::SimpleFlightApi::setControllerGains::ki", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE", "nervosys::autonomylib::SimpleFlightApi::setControllerGains::kp", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi9setRCDataERK6RCData", "nervosys::autonomylib::SimpleFlightApi::setRCData", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi9setRCDataERK6RCData", "nervosys::autonomylib::SimpleFlightApi::setRCData::rc_data", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi23setSimulatedGroundTruthEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::SimpleFlightApi::setSimulatedGroundTruth", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi23setSimulatedGroundTruthEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::SimpleFlightApi::setSimulatedGroundTruth::environment", ""], [57, 2, 2, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi23setSimulatedGroundTruthEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::SimpleFlightApi::setSimulatedGroundTruth::kinematics", ""], [57, 0, 1, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi6updateEv", "nervosys::autonomylib::SimpleFlightApi::update", ""], [58, 1, 1, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoardE", "nervosys::autonomylib::SimpleFlightBoard", "Public Functions    inline SimpleFlightBoard(const simple_flight::Params *params)      inline void setGroundTruthKinematics(const Kinematics::State *kinematics)      inline real_T getMotorControlSignal(uint index) const      inline void setInputChannel(uint index, real_T val)      inline void setIsRcConnected(bool is_connected)      inline virtual uint64_t micros() const override      inline virtual uint64_t millis() const override      inline virtual float readChannel(uint16_t index) const override      inline virtual float getAvgMotorOutput() const override      inline virtual bool isRcConnected() const override      inline virtual void writeOutput(uint16_t index, float value) override      inline virtual void setLed(uint8_t index, int32_t color) override      inline virtual void readAccel(float accel[3]) const override      inline virtual void readGyro(float gyro[3]) const override      inline virtual void reset() override      inline virtual void update() override"], [58, 0, 1, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard17SimpleFlightBoardEPKN13simple_flight6ParamsE", "nervosys::autonomylib::SimpleFlightBoard::SimpleFlightBoard", ""], [58, 2, 2, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard17SimpleFlightBoardEPKN13simple_flight6ParamsE", "nervosys::autonomylib::SimpleFlightBoard::SimpleFlightBoard::params", ""], [58, 0, 1, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard17getAvgMotorOutputEv", "nervosys::autonomylib::SimpleFlightBoard::getAvgMotorOutput", ""], [58, 0, 1, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard21getMotorControlSignalE4uint", "nervosys::autonomylib::SimpleFlightBoard::getMotorControlSignal", ""], [58, 2, 2, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard21getMotorControlSignalE4uint", "nervosys::autonomylib::SimpleFlightBoard::getMotorControlSignal::index", ""], [58, 0, 1, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard13isRcConnectedEv", "nervosys::autonomylib::SimpleFlightBoard::isRcConnected", ""], [58, 0, 1, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard6microsEv", "nervosys::autonomylib::SimpleFlightBoard::micros", ""], [58, 0, 1, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard6millisEv", "nervosys::autonomylib::SimpleFlightBoard::millis", ""], [58, 0, 1, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard9readAccelEAL3E_f", "nervosys::autonomylib::SimpleFlightBoard::readAccel", ""], [58, 2, 2, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard9readAccelEAL3E_f", "nervosys::autonomylib::SimpleFlightBoard::readAccel::accel", ""], [58, 0, 1, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard11readChannelE8uint16_t", "nervosys::autonomylib::SimpleFlightBoard::readChannel", ""], [58, 2, 2, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard11readChannelE8uint16_t", "nervosys::autonomylib::SimpleFlightBoard::readChannel::index", ""], [58, 0, 1, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard8readGyroEAL3E_f", "nervosys::autonomylib::SimpleFlightBoard::readGyro", ""], [58, 2, 2, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard8readGyroEAL3E_f", "nervosys::autonomylib::SimpleFlightBoard::readGyro::gyro", ""], [58, 0, 1, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard5resetEv", "nervosys::autonomylib::SimpleFlightBoard::reset", ""], [58, 0, 1, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard24setGroundTruthKinematicsEPKN10Kinematics5StateE", "nervosys::autonomylib::SimpleFlightBoard::setGroundTruthKinematics", ""], [58, 2, 2, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard24setGroundTruthKinematicsEPKN10Kinematics5StateE", "nervosys::autonomylib::SimpleFlightBoard::setGroundTruthKinematics::kinematics", ""], [58, 0, 1, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard15setInputChannelE4uint6real_T", "nervosys::autonomylib::SimpleFlightBoard::setInputChannel", ""], [58, 2, 2, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard15setInputChannelE4uint6real_T", "nervosys::autonomylib::SimpleFlightBoard::setInputChannel::index", ""], [58, 2, 2, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard15setInputChannelE4uint6real_T", "nervosys::autonomylib::SimpleFlightBoard::setInputChannel::val", ""], [58, 0, 1, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard16setIsRcConnectedEb", "nervosys::autonomylib::SimpleFlightBoard::setIsRcConnected", ""], [58, 2, 2, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard16setIsRcConnectedEb", "nervosys::autonomylib::SimpleFlightBoard::setIsRcConnected::is_connected", ""], [58, 0, 1, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard6setLedE7uint8_t7int32_t", "nervosys::autonomylib::SimpleFlightBoard::setLed", ""], [58, 2, 2, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard6setLedE7uint8_t7int32_t", "nervosys::autonomylib::SimpleFlightBoard::setLed::color", ""], [58, 2, 2, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard6setLedE7uint8_t7int32_t", "nervosys::autonomylib::SimpleFlightBoard::setLed::index", ""], [58, 0, 1, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard6updateEv", "nervosys::autonomylib::SimpleFlightBoard::update", ""], [58, 0, 1, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard11writeOutputE8uint16_tf", "nervosys::autonomylib::SimpleFlightBoard::writeOutput", ""], [58, 2, 2, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard11writeOutputE8uint16_tf", "nervosys::autonomylib::SimpleFlightBoard::writeOutput::index", ""], [58, 2, 2, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard11writeOutputE8uint16_tf", "nervosys::autonomylib::SimpleFlightBoard::writeOutput::value", ""], [59, 1, 1, "_CPPv4N8nervosys11autonomylib20SimpleFlightCommLinkE", "nervosys::autonomylib::SimpleFlightCommLink", "Public Functions    inline void getStatusMessages(std::vector<std::string> &messages)      inline virtual void reset()      inline virtual void update()      inline virtual void log(const std::string &message, int32_t log_level = ICommLink::kLogLevelInfo)"], [59, 0, 1, "_CPPv4N8nervosys11autonomylib20SimpleFlightCommLink17getStatusMessagesERNSt6vectorINSt6stringEEE", "nervosys::autonomylib::SimpleFlightCommLink::getStatusMessages", ""], [59, 2, 2, "_CPPv4N8nervosys11autonomylib20SimpleFlightCommLink17getStatusMessagesERNSt6vectorINSt6stringEEE", "nervosys::autonomylib::SimpleFlightCommLink::getStatusMessages::messages", ""], [59, 0, 1, "_CPPv4N8nervosys11autonomylib20SimpleFlightCommLink3logERKNSt6stringE7int32_t", "nervosys::autonomylib::SimpleFlightCommLink::log", ""], [59, 2, 2, "_CPPv4N8nervosys11autonomylib20SimpleFlightCommLink3logERKNSt6stringE7int32_t", "nervosys::autonomylib::SimpleFlightCommLink::log::log_level", ""], [59, 2, 2, "_CPPv4N8nervosys11autonomylib20SimpleFlightCommLink3logERKNSt6stringE7int32_t", "nervosys::autonomylib::SimpleFlightCommLink::log::message", ""], [59, 0, 1, "_CPPv4N8nervosys11autonomylib20SimpleFlightCommLink5resetEv", "nervosys::autonomylib::SimpleFlightCommLink::reset", ""], [59, 0, 1, "_CPPv4N8nervosys11autonomylib20SimpleFlightCommLink6updateEv", "nervosys::autonomylib::SimpleFlightCommLink::update", ""], [60, 1, 1, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommonE", "nervosys::autonomylib::SimpleFlightCommon", "Public Functions    template<typename T> inline const T &makeConstant(T &_)      template<typename T> inline T &makeVariable(const T &_)    Public Static Functions    static inline simple_flight::Axis3r toAxis3r(const Vector3r &vec)      static inline Vector3r toVector3r(const simple_flight::Axis3r &vec)      static inline Kinematics::State toKinematicsState3r(const simple_flight::KinematicsState &state)      static inline simple_flight::Axis4r toAxis4r(const Quaternionr &q)      static inline Quaternionr toQuaternion(const simple_flight::Axis4r &q)      static inline simple_flight::GeoPoint toSimpleFlightGeoPoint(const GeoPoint &geo_point)      static inline GeoPoint toGeoPoint(const simple_flight::GeoPoint &geo_point)"], [60, 0, 1, "_CPPv4I0EN8nervosys11autonomylib18SimpleFlightCommon12makeConstantERK1TR1T", "nervosys::autonomylib::SimpleFlightCommon::makeConstant", ""], [60, 7, 2, "_CPPv4I0EN8nervosys11autonomylib18SimpleFlightCommon12makeConstantERK1TR1T", "nervosys::autonomylib::SimpleFlightCommon::makeConstant::T", ""], [60, 2, 2, "_CPPv4I0EN8nervosys11autonomylib18SimpleFlightCommon12makeConstantERK1TR1T", "nervosys::autonomylib::SimpleFlightCommon::makeConstant::_", ""], [60, 0, 1, "_CPPv4I0EN8nervosys11autonomylib18SimpleFlightCommon12makeVariableER1TRK1T", "nervosys::autonomylib::SimpleFlightCommon::makeVariable", ""], [60, 7, 2, "_CPPv4I0EN8nervosys11autonomylib18SimpleFlightCommon12makeVariableER1TRK1T", "nervosys::autonomylib::SimpleFlightCommon::makeVariable::T", ""], [60, 2, 2, "_CPPv4I0EN8nervosys11autonomylib18SimpleFlightCommon12makeVariableER1TRK1T", "nervosys::autonomylib::SimpleFlightCommon::makeVariable::_", ""], [60, 0, 1, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon8toAxis3rERK8Vector3r", "nervosys::autonomylib::SimpleFlightCommon::toAxis3r", ""], [60, 2, 2, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon8toAxis3rERK8Vector3r", "nervosys::autonomylib::SimpleFlightCommon::toAxis3r::vec", ""], [60, 0, 1, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon8toAxis4rERK11Quaternionr", "nervosys::autonomylib::SimpleFlightCommon::toAxis4r", ""], [60, 2, 2, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon8toAxis4rERK11Quaternionr", "nervosys::autonomylib::SimpleFlightCommon::toAxis4r::q", ""], [60, 0, 1, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon10toGeoPointERKN13simple_flight8GeoPointE", "nervosys::autonomylib::SimpleFlightCommon::toGeoPoint", ""], [60, 2, 2, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon10toGeoPointERKN13simple_flight8GeoPointE", "nervosys::autonomylib::SimpleFlightCommon::toGeoPoint::geo_point", ""], [60, 0, 1, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon19toKinematicsState3rERKN13simple_flight15KinematicsStateE", "nervosys::autonomylib::SimpleFlightCommon::toKinematicsState3r", ""], [60, 2, 2, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon19toKinematicsState3rERKN13simple_flight15KinematicsStateE", "nervosys::autonomylib::SimpleFlightCommon::toKinematicsState3r::state", ""], [60, 0, 1, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon12toQuaternionERKN13simple_flight6Axis4rE", "nervosys::autonomylib::SimpleFlightCommon::toQuaternion", ""], [60, 2, 2, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon12toQuaternionERKN13simple_flight6Axis4rE", "nervosys::autonomylib::SimpleFlightCommon::toQuaternion::q", ""], [60, 0, 1, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon22toSimpleFlightGeoPointERK8GeoPoint", "nervosys::autonomylib::SimpleFlightCommon::toSimpleFlightGeoPoint", ""], [60, 2, 2, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon22toSimpleFlightGeoPointERK8GeoPoint", "nervosys::autonomylib::SimpleFlightCommon::toSimpleFlightGeoPoint::geo_point", ""], [60, 0, 1, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon10toVector3rERKN13simple_flight6Axis3rE", "nervosys::autonomylib::SimpleFlightCommon::toVector3r", ""], [60, 2, 2, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon10toVector3rERKN13simple_flight6Axis3rE", "nervosys::autonomylib::SimpleFlightCommon::toVector3r::vec", ""], [61, 1, 1, "_CPPv4N8nervosys11autonomylib21SimpleFlightEstimatorE", "nervosys::autonomylib::SimpleFlightEstimator", "Public Functions    inline virtual ~SimpleFlightEstimator()      inline void setGroundTruthKinematics(const Kinematics::State *kinematics, const Environment *environment)      inline virtual simple_flight::Axis3r getAngles() const override      inline virtual simple_flight::Axis3r getAngularVelocity() const override      inline virtual simple_flight::Axis3r getPosition() const override      inline virtual simple_flight::Axis3r transformToBodyFrame(const simple_flight::Axis3r &world_frame_val) const override      inline virtual simple_flight::Axis3r getLinearVelocity() const override      inline virtual simple_flight::Axis4r getOrientation() const override      inline virtual simple_flight::GeoPoint getGeoPoint() const override      inline virtual simple_flight::GeoPoint getHomeGeoPoint() const override      inline virtual simple_flight::KinematicsState getKinematicsEstimated() const override"], [61, 0, 1, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator9getAnglesEv", "nervosys::autonomylib::SimpleFlightEstimator::getAngles", ""], [61, 0, 1, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator18getAngularVelocityEv", "nervosys::autonomylib::SimpleFlightEstimator::getAngularVelocity", ""], [61, 0, 1, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator11getGeoPointEv", "nervosys::autonomylib::SimpleFlightEstimator::getGeoPoint", ""], [61, 0, 1, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator15getHomeGeoPointEv", "nervosys::autonomylib::SimpleFlightEstimator::getHomeGeoPoint", ""], [61, 0, 1, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator22getKinematicsEstimatedEv", "nervosys::autonomylib::SimpleFlightEstimator::getKinematicsEstimated", ""], [61, 0, 1, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator17getLinearVelocityEv", "nervosys::autonomylib::SimpleFlightEstimator::getLinearVelocity", ""], [61, 0, 1, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator14getOrientationEv", "nervosys::autonomylib::SimpleFlightEstimator::getOrientation", ""], [61, 0, 1, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator11getPositionEv", "nervosys::autonomylib::SimpleFlightEstimator::getPosition", ""], [61, 0, 1, "_CPPv4N8nervosys11autonomylib21SimpleFlightEstimator24setGroundTruthKinematicsEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::SimpleFlightEstimator::setGroundTruthKinematics", ""], [61, 2, 2, "_CPPv4N8nervosys11autonomylib21SimpleFlightEstimator24setGroundTruthKinematicsEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::SimpleFlightEstimator::setGroundTruthKinematics::environment", ""], [61, 2, 2, "_CPPv4N8nervosys11autonomylib21SimpleFlightEstimator24setGroundTruthKinematicsEPKN10Kinematics5StateEPK11Environment", "nervosys::autonomylib::SimpleFlightEstimator::setGroundTruthKinematics::kinematics", ""], [61, 0, 1, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator20transformToBodyFrameERKN13simple_flight6Axis3rE", "nervosys::autonomylib::SimpleFlightEstimator::transformToBodyFrame", ""], [61, 2, 2, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator20transformToBodyFrameERKN13simple_flight6Axis3rE", "nervosys::autonomylib::SimpleFlightEstimator::transformToBodyFrame::world_frame_val", ""], [61, 0, 1, "_CPPv4N8nervosys11autonomylib21SimpleFlightEstimatorD0Ev", "nervosys::autonomylib::SimpleFlightEstimator::~SimpleFlightEstimator", ""], [62, 1, 1, "_CPPv4N8nervosys11autonomylib23SimpleFlightQuadXParamsE", "nervosys::autonomylib::SimpleFlightQuadXParams", "Public Functions    inline SimpleFlightQuadXParams(const AutonomySimSettings::VehicleSetting *vehicle_setting, std::shared_ptr<const SensorFactory> sensor_factory)      virtual ~SimpleFlightQuadXParams() = default      inline virtual std::unique_ptr<MultirotorApiBase> createMultirotorApi() override    Protected Functions    inline virtual void setupParams() override      inline virtual const SensorFactory *getSensorFactory() const override"], [62, 0, 1, "_CPPv4N8nervosys11autonomylib23SimpleFlightQuadXParams23SimpleFlightQuadXParamsEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::SimpleFlightQuadXParams::SimpleFlightQuadXParams", ""], [62, 2, 2, "_CPPv4N8nervosys11autonomylib23SimpleFlightQuadXParams23SimpleFlightQuadXParamsEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::SimpleFlightQuadXParams::SimpleFlightQuadXParams::sensor_factory", ""], [62, 2, 2, "_CPPv4N8nervosys11autonomylib23SimpleFlightQuadXParams23SimpleFlightQuadXParamsEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrIK13SensorFactoryEE", "nervosys::autonomylib::SimpleFlightQuadXParams::SimpleFlightQuadXParams::vehicle_setting", ""], [62, 0, 1, "_CPPv4N8nervosys11autonomylib23SimpleFlightQuadXParams19createMultirotorApiEv", "nervosys::autonomylib::SimpleFlightQuadXParams::createMultirotorApi", ""], [62, 0, 1, "_CPPv4NK8nervosys11autonomylib23SimpleFlightQuadXParams16getSensorFactoryEv", "nervosys::autonomylib::SimpleFlightQuadXParams::getSensorFactory", ""], [62, 0, 1, "_CPPv4N8nervosys11autonomylib23SimpleFlightQuadXParams11setupParamsEv", "nervosys::autonomylib::SimpleFlightQuadXParams::setupParams", ""], [62, 0, 1, "_CPPv4N8nervosys11autonomylib23SimpleFlightQuadXParamsD0Ev", "nervosys::autonomylib::SimpleFlightQuadXParams::~SimpleFlightQuadXParams", ""], [63, 1, 1, "_CPPv4N8nervosys11autonomylib14SphereGeoFenceE", "nervosys::autonomylib::SphereGeoFence", "Public Functions    inline SphereGeoFence(const Vector3r &center, float radius, float max_height, float min_height, float distance_accuracy)      inline virtual void setBoundry(const Vector3r &origin, float xy_length, float max_z, float min_z) override      inline virtual void checkFence(const Vector3r &cur_loc, const Vector3r &dest_loc, bool &in_fence, bool &allow) override      inline virtual string toString() const override      inline virtual ~SphereGeoFence()"], [63, 0, 1, "_CPPv4N8nervosys11autonomylib14SphereGeoFence14SphereGeoFenceERK8Vector3rffff", "nervosys::autonomylib::SphereGeoFence::SphereGeoFence", ""], [63, 2, 2, "_CPPv4N8nervosys11autonomylib14SphereGeoFence14SphereGeoFenceERK8Vector3rffff", "nervosys::autonomylib::SphereGeoFence::SphereGeoFence::center", ""], [63, 2, 2, "_CPPv4N8nervosys11autonomylib14SphereGeoFence14SphereGeoFenceERK8Vector3rffff", "nervosys::autonomylib::SphereGeoFence::SphereGeoFence::distance_accuracy", ""], [63, 2, 2, "_CPPv4N8nervosys11autonomylib14SphereGeoFence14SphereGeoFenceERK8Vector3rffff", "nervosys::autonomylib::SphereGeoFence::SphereGeoFence::max_height", ""], [63, 2, 2, "_CPPv4N8nervosys11autonomylib14SphereGeoFence14SphereGeoFenceERK8Vector3rffff", "nervosys::autonomylib::SphereGeoFence::SphereGeoFence::min_height", ""], [63, 2, 2, "_CPPv4N8nervosys11autonomylib14SphereGeoFence14SphereGeoFenceERK8Vector3rffff", "nervosys::autonomylib::SphereGeoFence::SphereGeoFence::radius", ""], [63, 0, 1, "_CPPv4N8nervosys11autonomylib14SphereGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::SphereGeoFence::checkFence", ""], [63, 2, 2, "_CPPv4N8nervosys11autonomylib14SphereGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::SphereGeoFence::checkFence::allow", ""], [63, 2, 2, "_CPPv4N8nervosys11autonomylib14SphereGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::SphereGeoFence::checkFence::cur_loc", ""], [63, 2, 2, "_CPPv4N8nervosys11autonomylib14SphereGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::SphereGeoFence::checkFence::dest_loc", ""], [63, 2, 2, "_CPPv4N8nervosys11autonomylib14SphereGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb", "nervosys::autonomylib::SphereGeoFence::checkFence::in_fence", ""], [63, 0, 1, "_CPPv4N8nervosys11autonomylib14SphereGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::SphereGeoFence::setBoundry", ""], [63, 2, 2, "_CPPv4N8nervosys11autonomylib14SphereGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::SphereGeoFence::setBoundry::max_z", ""], [63, 2, 2, "_CPPv4N8nervosys11autonomylib14SphereGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::SphereGeoFence::setBoundry::min_z", ""], [63, 2, 2, "_CPPv4N8nervosys11autonomylib14SphereGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::SphereGeoFence::setBoundry::origin", ""], [63, 2, 2, "_CPPv4N8nervosys11autonomylib14SphereGeoFence10setBoundryERK8Vector3rfff", "nervosys::autonomylib::SphereGeoFence::setBoundry::xy_length", ""], [63, 0, 1, "_CPPv4NK8nervosys11autonomylib14SphereGeoFence8toStringEv", "nervosys::autonomylib::SphereGeoFence::toString", ""], [63, 0, 1, "_CPPv4N8nervosys11autonomylib14SphereGeoFenceD0Ev", "nervosys::autonomylib::SphereGeoFence::~SphereGeoFence", ""], [64, 1, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBaseE", "nervosys::autonomylib::VehicleApiBase", "Subclassed by nervosys::autonomylib::CarApiBase, nervosys::autonomylib::MultirotorApiBase"], [64, 1, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBase37VehicleCommandNotImplementedExceptionE", "nervosys::autonomylib::VehicleApiBase::VehicleCommandNotImplementedException", "Public Functions    inline VehicleCommandNotImplementedException(const std::string &message)"], [64, 0, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBase37VehicleCommandNotImplementedException37VehicleCommandNotImplementedExceptionERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::VehicleCommandNotImplementedException::VehicleCommandNotImplementedException", ""], [64, 2, 2, "_CPPv4N8nervosys11autonomylib14VehicleApiBase37VehicleCommandNotImplementedException37VehicleCommandNotImplementedExceptionERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::VehicleCommandNotImplementedException::VehicleCommandNotImplementedException::message", ""], [64, 1, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBase26VehicleControllerExceptionE", "nervosys::autonomylib::VehicleApiBase::VehicleControllerException", "Subclassed by nervosys::autonomylib::VehicleApiBase::VehicleCommandNotImplementedException, nervosys::autonomylib::VehicleApiBase::VehicleMoveException"], [64, 0, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBase26VehicleControllerException26VehicleControllerExceptionERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::VehicleControllerException::VehicleControllerException", ""], [64, 2, 2, "_CPPv4N8nervosys11autonomylib14VehicleApiBase26VehicleControllerException26VehicleControllerExceptionERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::VehicleControllerException::VehicleControllerException::message", ""], [64, 1, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBase20VehicleMoveExceptionE", "nervosys::autonomylib::VehicleApiBase::VehicleMoveException", "Subclassed by nervosys::autonomylib::MultirotorApiBase::UnsafeMoveException"], [64, 0, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBase20VehicleMoveException20VehicleMoveExceptionERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::VehicleMoveException::VehicleMoveException", ""], [64, 2, 2, "_CPPv4N8nervosys11autonomylib14VehicleApiBase20VehicleMoveException20VehicleMoveExceptionERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::VehicleMoveException::VehicleMoveException::message", ""], [64, 0, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBase9armDisarmEb", "nervosys::autonomylib::VehicleApiBase::armDisarm", ""], [64, 2, 2, "_CPPv4N8nervosys11autonomylib14VehicleApiBase9armDisarmEb", "nervosys::autonomylib::VehicleApiBase::armDisarm::arm", ""], [64, 0, 1, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase6canArmEv", "nervosys::autonomylib::VehicleApiBase::canArm", ""], [64, 0, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBase14cancelLastTaskEv", "nervosys::autonomylib::VehicleApiBase::cancelLastTask", ""], [64, 0, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBase16enableApiControlEb", "nervosys::autonomylib::VehicleApiBase::enableApiControl", ""], [64, 2, 2, "_CPPv4N8nervosys11autonomylib14VehicleApiBase16enableApiControlEb", "nervosys::autonomylib::VehicleApiBase::enableApiControl::is_enabled", ""], [64, 0, 1, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase12getActuationEj", "nervosys::autonomylib::VehicleApiBase::getActuation", ""], [64, 2, 2, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase12getActuationEj", "nervosys::autonomylib::VehicleApiBase::getActuation::actuator_index", ""], [64, 0, 1, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase16getActuatorCountEv", "nervosys::autonomylib::VehicleApiBase::getActuatorCount", ""], [64, 0, 1, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase16getBarometerDataERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::getBarometerData", ""], [64, 2, 2, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase16getBarometerDataERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::getBarometerData::barometer_name", ""], [64, 0, 1, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase21getDistanceSensorDataERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::getDistanceSensorData", ""], [64, 2, 2, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase21getDistanceSensorDataERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::getDistanceSensorData::distance_sensor_name", ""], [64, 0, 1, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase10getGpsDataERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::getGpsData", ""], [64, 2, 2, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase10getGpsDataERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::getGpsData::gps_name", ""], [64, 0, 1, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase15getHomeGeoPointEv", "nervosys::autonomylib::VehicleApiBase::getHomeGeoPoint", ""], [64, 0, 1, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase10getImuDataERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::getImuData", ""], [64, 2, 2, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase10getImuDataERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::getImuData::imu_name", ""], [64, 0, 1, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase12getLidarDataERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::getLidarData", ""], [64, 2, 2, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase12getLidarDataERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::getLidarData::lidar_name", ""], [64, 0, 1, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase19getMagnetometerDataERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::getMagnetometerData", ""], [64, 2, 2, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase19getMagnetometerDataERKNSt6stringE", "nervosys::autonomylib::VehicleApiBase::getMagnetometerData::magnetometer_name", ""], [64, 0, 1, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase9getRCDataEv", "nervosys::autonomylib::VehicleApiBase::getRCData", ""], [64, 0, 1, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase10getSensorsEv", "nervosys::autonomylib::VehicleApiBase::getSensors", ""], [64, 0, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBase17getStatusMessagesERNSt6vectorINSt6stringEEE", "nervosys::autonomylib::VehicleApiBase::getStatusMessages", ""], [64, 2, 2, "_CPPv4N8nervosys11autonomylib14VehicleApiBase17getStatusMessagesERNSt6vectorINSt6stringEEE", "nervosys::autonomylib::VehicleApiBase::getStatusMessages::messages", ""], [64, 0, 1, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase19isApiControlEnabledEv", "nervosys::autonomylib::VehicleApiBase::isApiControlEnabled", ""], [64, 0, 1, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase7isReadyERNSt6stringE", "nervosys::autonomylib::VehicleApiBase::isReady", ""], [64, 2, 2, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase7isReadyERNSt6stringE", "nervosys::autonomylib::VehicleApiBase::isReady::message", ""], [64, 0, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBase13sendTelemetryEf", "nervosys::autonomylib::VehicleApiBase::sendTelemetry", ""], [64, 2, 2, "_CPPv4N8nervosys11autonomylib14VehicleApiBase13sendTelemetryEf", "nervosys::autonomylib::VehicleApiBase::sendTelemetry::last_interval", ""], [64, 0, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBase9setRCDataERK6RCData", "nervosys::autonomylib::VehicleApiBase::setRCData", ""], [64, 2, 2, "_CPPv4N8nervosys11autonomylib14VehicleApiBase9setRCDataERK6RCData", "nervosys::autonomylib::VehicleApiBase::setRCData::rc_data", ""], [64, 0, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBase6updateEv", "nervosys::autonomylib::VehicleApiBase::update", ""], [64, 0, 1, "_CPPv4N8nervosys11autonomylib14VehicleApiBaseD0Ev", "nervosys::autonomylib::VehicleApiBase::~VehicleApiBase", ""], [68, 1, 1, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBaseE", "nervosys::autonomylib::VehicleSimApiBase", "Public Functions    virtual ~VehicleSimApiBase() = default      inline virtual void update() override      inline virtual void updateRenderedState(float dt)      inline virtual void updateRendering(float dt)      virtual const ImageCaptureBase *getImageCapture() const = 0      inline virtual ImageCaptureBase *getImageCapture()      virtual void initialize() = 0      virtual bool testLineOfSightToPoint(const GeoPoint &point) const = 0      virtual Pose getPose() const = 0      virtual void setPose(const Pose &pose, bool ignore_collision) = 0      virtual const Kinematics::State *getGroundTruthKinematics() const = 0      virtual void setKinematics(const Kinematics::State &state, bool ignore_collision) = 0      virtual const nervosys::autonomylib::Environment *getGroundTruthEnvironment() const = 0      virtual CollisionInfo getCollisionInfo() const = 0      virtual CollisionInfo getCollisionInfoAndReset() = 0      virtual int getRemoteControlID() const = 0      virtual RCData getRCData() const = 0      virtual std::string getVehicleName() const = 0      virtual std::string getRecordFileLine(bool is_header_line) const = 0      virtual void toggleTrace() = 0      virtual void setTraceLine(const std::vector<float> &color_rgba, float thickness) = 0      inline const AutonomySimSettings::VehicleSetting *getVehicleSetting() const"], [68, 0, 1, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase16getCollisionInfoEv", "nervosys::autonomylib::VehicleSimApiBase::getCollisionInfo", ""], [68, 0, 1, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase24getCollisionInfoAndResetEv", "nervosys::autonomylib::VehicleSimApiBase::getCollisionInfoAndReset", ""], [68, 0, 1, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase25getGroundTruthEnvironmentEv", "nervosys::autonomylib::VehicleSimApiBase::getGroundTruthEnvironment", ""], [68, 0, 1, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase24getGroundTruthKinematicsEv", "nervosys::autonomylib::VehicleSimApiBase::getGroundTruthKinematics", ""], [68, 0, 1, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase15getImageCaptureEv", "nervosys::autonomylib::VehicleSimApiBase::getImageCapture", ""], [68, 0, 1, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase15getImageCaptureEv", "nervosys::autonomylib::VehicleSimApiBase::getImageCapture", ""], [68, 0, 1, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase7getPoseEv", "nervosys::autonomylib::VehicleSimApiBase::getPose", ""], [68, 0, 1, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase9getRCDataEv", "nervosys::autonomylib::VehicleSimApiBase::getRCData", ""], [68, 0, 1, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase17getRecordFileLineEb", "nervosys::autonomylib::VehicleSimApiBase::getRecordFileLine", ""], [68, 2, 2, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase17getRecordFileLineEb", "nervosys::autonomylib::VehicleSimApiBase::getRecordFileLine::is_header_line", ""], [68, 0, 1, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase18getRemoteControlIDEv", "nervosys::autonomylib::VehicleSimApiBase::getRemoteControlID", ""], [68, 0, 1, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase14getVehicleNameEv", "nervosys::autonomylib::VehicleSimApiBase::getVehicleName", ""], [68, 0, 1, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase17getVehicleSettingEv", "nervosys::autonomylib::VehicleSimApiBase::getVehicleSetting", ""], [68, 0, 1, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase10initializeEv", "nervosys::autonomylib::VehicleSimApiBase::initialize", ""], [68, 0, 1, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase13setKinematicsERKN10Kinematics5StateEb", "nervosys::autonomylib::VehicleSimApiBase::setKinematics", ""], [68, 2, 2, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase13setKinematicsERKN10Kinematics5StateEb", "nervosys::autonomylib::VehicleSimApiBase::setKinematics::ignore_collision", ""], [68, 2, 2, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase13setKinematicsERKN10Kinematics5StateEb", "nervosys::autonomylib::VehicleSimApiBase::setKinematics::state", ""], [68, 0, 1, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase7setPoseERK4Poseb", "nervosys::autonomylib::VehicleSimApiBase::setPose", ""], [68, 2, 2, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase7setPoseERK4Poseb", "nervosys::autonomylib::VehicleSimApiBase::setPose::ignore_collision", ""], [68, 2, 2, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase7setPoseERK4Poseb", "nervosys::autonomylib::VehicleSimApiBase::setPose::pose", ""], [68, 0, 1, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase12setTraceLineERKNSt6vectorIfEEf", "nervosys::autonomylib::VehicleSimApiBase::setTraceLine", ""], [68, 2, 2, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase12setTraceLineERKNSt6vectorIfEEf", "nervosys::autonomylib::VehicleSimApiBase::setTraceLine::color_rgba", ""], [68, 2, 2, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase12setTraceLineERKNSt6vectorIfEEf", "nervosys::autonomylib::VehicleSimApiBase::setTraceLine::thickness", ""], [68, 0, 1, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase22testLineOfSightToPointERK8GeoPoint", "nervosys::autonomylib::VehicleSimApiBase::testLineOfSightToPoint", ""], [68, 2, 2, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase22testLineOfSightToPointERK8GeoPoint", "nervosys::autonomylib::VehicleSimApiBase::testLineOfSightToPoint::point", ""], [68, 0, 1, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase11toggleTraceEv", "nervosys::autonomylib::VehicleSimApiBase::toggleTrace", ""], [68, 0, 1, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase6updateEv", "nervosys::autonomylib::VehicleSimApiBase::update", ""], [68, 0, 1, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase19updateRenderedStateEf", "nervosys::autonomylib::VehicleSimApiBase::updateRenderedState", ""], [68, 2, 2, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase19updateRenderedStateEf", "nervosys::autonomylib::VehicleSimApiBase::updateRenderedState::dt", ""], [68, 0, 1, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase15updateRenderingEf", "nervosys::autonomylib::VehicleSimApiBase::updateRendering", ""], [68, 2, 2, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase15updateRenderingEf", "nervosys::autonomylib::VehicleSimApiBase::updateRendering::dt", ""], [68, 0, 1, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBaseD0Ev", "nervosys::autonomylib::VehicleSimApiBase::~VehicleSimApiBase", ""], [69, 1, 1, "_CPPv4N8nervosys11autonomylib5WorldE", "nervosys::autonomylib::World", "Public Functions    inline World(std::unique_ptr<PhysicsEngineBase> physics_engine)      inline virtual void resetImplementation() override      inline virtual void update() override      inline virtual void reportState(StateReporter &reporter) override      inline virtual void clear() override      inline virtual void insert(UpdatableObject *member) override      inline virtual void erase_remove(UpdatableObject *member) override      inline void startAsyncUpdator(uint64_t period)      inline void stopAsyncUpdator()      inline void lock()      inline void unlock()      inline virtual ~World()      inline void pause(bool is_paused)      inline bool isPaused() const      inline void pauseForTime(double seconds)      inline void continueForTime(double seconds)      inline void continueForFrames(uint32_t frames)      inline void setFrameNumber(uint32_t frameNumber)"], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World5WorldENSt10unique_ptrI17PhysicsEngineBaseEE", "nervosys::autonomylib::World::World", ""], [69, 2, 2, "_CPPv4N8nervosys11autonomylib5World5WorldENSt10unique_ptrI17PhysicsEngineBaseEE", "nervosys::autonomylib::World::World::physics_engine", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World5clearEv", "nervosys::autonomylib::World::clear", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World17continueForFramesE8uint32_t", "nervosys::autonomylib::World::continueForFrames", ""], [69, 2, 2, "_CPPv4N8nervosys11autonomylib5World17continueForFramesE8uint32_t", "nervosys::autonomylib::World::continueForFrames::frames", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World15continueForTimeEd", "nervosys::autonomylib::World::continueForTime", ""], [69, 2, 2, "_CPPv4N8nervosys11autonomylib5World15continueForTimeEd", "nervosys::autonomylib::World::continueForTime::seconds", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World12erase_removeEP15UpdatableObject", "nervosys::autonomylib::World::erase_remove", ""], [69, 2, 2, "_CPPv4N8nervosys11autonomylib5World12erase_removeEP15UpdatableObject", "nervosys::autonomylib::World::erase_remove::member", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World6insertEP15UpdatableObject", "nervosys::autonomylib::World::insert", ""], [69, 2, 2, "_CPPv4N8nervosys11autonomylib5World6insertEP15UpdatableObject", "nervosys::autonomylib::World::insert::member", ""], [69, 0, 1, "_CPPv4NK8nervosys11autonomylib5World8isPausedEv", "nervosys::autonomylib::World::isPaused", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World4lockEv", "nervosys::autonomylib::World::lock", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World5pauseEb", "nervosys::autonomylib::World::pause", ""], [69, 2, 2, "_CPPv4N8nervosys11autonomylib5World5pauseEb", "nervosys::autonomylib::World::pause::is_paused", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World12pauseForTimeEd", "nervosys::autonomylib::World::pauseForTime", ""], [69, 2, 2, "_CPPv4N8nervosys11autonomylib5World12pauseForTimeEd", "nervosys::autonomylib::World::pauseForTime::seconds", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World11reportStateER13StateReporter", "nervosys::autonomylib::World::reportState", ""], [69, 2, 2, "_CPPv4N8nervosys11autonomylib5World11reportStateER13StateReporter", "nervosys::autonomylib::World::reportState::reporter", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World19resetImplementationEv", "nervosys::autonomylib::World::resetImplementation", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World14setFrameNumberE8uint32_t", "nervosys::autonomylib::World::setFrameNumber", ""], [69, 2, 2, "_CPPv4N8nervosys11autonomylib5World14setFrameNumberE8uint32_t", "nervosys::autonomylib::World::setFrameNumber::frameNumber", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World17startAsyncUpdatorE8uint64_t", "nervosys::autonomylib::World::startAsyncUpdator", ""], [69, 2, 2, "_CPPv4N8nervosys11autonomylib5World17startAsyncUpdatorE8uint64_t", "nervosys::autonomylib::World::startAsyncUpdator::period", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World16stopAsyncUpdatorEv", "nervosys::autonomylib::World::stopAsyncUpdator", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World6unlockEv", "nervosys::autonomylib::World::unlock", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5World6updateEv", "nervosys::autonomylib::World::update", ""], [69, 0, 1, "_CPPv4N8nervosys11autonomylib5WorldD0Ev", "nervosys::autonomylib::World::~World", ""], [70, 1, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBaseE", "nervosys::autonomylib::WorldSimApiBase", "Values:"], [70, 5, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameterE", "nervosys::autonomylib::WorldSimApiBase::WeatherParameter", "Values:"], [70, 6, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter4DustE", "nervosys::autonomylib::WorldSimApiBase::WeatherParameter::Dust", ""], [70, 6, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter7EnabledE", "nervosys::autonomylib::WorldSimApiBase::WeatherParameter::Enabled", ""], [70, 6, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter3FogE", "nervosys::autonomylib::WorldSimApiBase::WeatherParameter::Fog", ""], [70, 6, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter9MapleLeafE", "nervosys::autonomylib::WorldSimApiBase::WeatherParameter::MapleLeaf", ""], [70, 6, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter4RainE", "nervosys::autonomylib::WorldSimApiBase::WeatherParameter::Rain", ""], [70, 6, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter8RoadLeafE", "nervosys::autonomylib::WorldSimApiBase::WeatherParameter::RoadLeaf", ""], [70, 6, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter8RoadSnowE", "nervosys::autonomylib::WorldSimApiBase::WeatherParameter::RoadSnow", ""], [70, 6, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter11RoadwetnessE", "nervosys::autonomylib::WorldSimApiBase::WeatherParameter::Roadwetness", ""], [70, 6, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter4SnowE", "nervosys::autonomylib::WorldSimApiBase::WeatherParameter::Snow", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase26addDetectionFilterMeshNameEN16ImageCaptureBase9ImageTypeERKNSt6stringERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::addDetectionFilterMeshName", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase26addDetectionFilterMeshNameEN16ImageCaptureBase9ImageTypeERKNSt6stringERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::addDetectionFilterMeshName::camera_details", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase26addDetectionFilterMeshNameEN16ImageCaptureBase9ImageTypeERKNSt6stringERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::addDetectionFilterMeshName::image_type", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase26addDetectionFilterMeshNameEN16ImageCaptureBase9ImageTypeERKNSt6stringERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::addDetectionFilterMeshName::mesh_name", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase10addVehicleERKNSt6stringERKNSt6stringERK4PoseRKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::addVehicle", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase10addVehicleERKNSt6stringERKNSt6stringERK4PoseRKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::addVehicle::pawn_path", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase10addVehicleERKNSt6stringERKNSt6stringERK4PoseRKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::addVehicle::pose", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase10addVehicleERKNSt6stringERKNSt6stringERK4PoseRKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::addVehicle::vehicle_name", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase10addVehicleERKNSt6stringERKNSt6stringERK4PoseRKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::addVehicle::vehicle_type", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase23clearDetectionMeshNamesEN16ImageCaptureBase9ImageTypeERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::clearDetectionMeshNames", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase23clearDetectionMeshNamesEN16ImageCaptureBase9ImageTypeERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::clearDetectionMeshNames::camera_details", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase23clearDetectionMeshNamesEN16ImageCaptureBase9ImageTypeERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::clearDetectionMeshNames::image_type", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17continueForFramesE8uint32_t", "nervosys::autonomylib::WorldSimApiBase::continueForFrames", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17continueForFramesE8uint32_t", "nervosys::autonomylib::WorldSimApiBase::continueForFrames::frames", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15continueForTimeEd", "nervosys::autonomylib::WorldSimApiBase::continueForTime", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15continueForTimeEd", "nervosys::autonomylib::WorldSimApiBase::continueForTime::seconds", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15createVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::createVoxelGrid", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15createVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::createVoxelGrid::output_file", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15createVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::createVoxelGrid::position", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15createVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::createVoxelGrid::res", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15createVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::createVoxelGrid::x_size", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15createVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::createVoxelGrid::y_size", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15createVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::createVoxelGrid::z_size", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13destroyObjectERKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::destroyObject", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13destroyObjectERKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::destroyObject::object_name", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16enableFocusPlaneEbRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::enableFocusPlane", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16enableFocusPlaneEbRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::enableFocusPlane::camera_details", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16enableFocusPlaneEbRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::enableFocusPlane::enable", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17enableManualFocusEbRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::enableManualFocus", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17enableManualFocusEbRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::enableManualFocus::camera_details", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17enableManualFocusEbRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::enableManualFocus::enable", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13enableWeatherEb", "nervosys::autonomylib::WorldSimApiBase::enableWeather", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13enableWeatherEb", "nervosys::autonomylib::WorldSimApiBase::enableWeather::enable", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase13getCameraInfoERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getCameraInfo", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase13getCameraInfoERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getCameraInfo::camera_details", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase21getCurrentFieldOfViewERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getCurrentFieldOfView", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase21getCurrentFieldOfViewERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getCurrentFieldOfView::camera_details", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13getDetectionsEN16ImageCaptureBase9ImageTypeERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getDetections", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13getDetectionsEN16ImageCaptureBase9ImageTypeERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getDetections::camera_details", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13getDetectionsEN16ImageCaptureBase9ImageTypeERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getDetections::image_type", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase19getDistortionParamsERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getDistortionParams", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase19getDistortionParamsERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getDistortionParams::camera_details", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase19getFilmbackSettingsERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getFilmbackSettings", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase19getFilmbackSettingsERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getFilmbackSettings::camera_details", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14getFocalLengthERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getFocalLength", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14getFocalLengthERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getFocalLength::camera_details", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16getFocusApertureERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getFocusAperture", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16getFocusApertureERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getFocusAperture::camera_details", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16getFocusDistanceERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getFocusDistance", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16getFocusDistanceERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getFocusDistance::camera_details", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase8getImageEN16ImageCaptureBase9ImageTypeERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getImage", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase8getImageEN16ImageCaptureBase9ImageTypeERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getImage::camera_details", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase8getImageEN16ImageCaptureBase9ImageTypeERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getImage::image_type", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase9getImagesERKNSt6vectorIN16ImageCaptureBase12ImageRequestEEERKNSt6stringEb", "nervosys::autonomylib::WorldSimApiBase::getImages", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase9getImagesERKNSt6vectorIN16ImageCaptureBase12ImageRequestEEERKNSt6stringEb", "nervosys::autonomylib::WorldSimApiBase::getImages::external", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase9getImagesERKNSt6vectorIN16ImageCaptureBase12ImageRequestEEERKNSt6stringEb", "nervosys::autonomylib::WorldSimApiBase::getImages::requests", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase9getImagesERKNSt6vectorIN16ImageCaptureBase12ImageRequestEEERKNSt6stringEb", "nervosys::autonomylib::WorldSimApiBase::getImages::vehicle_name", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15getLensSettingsERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getLensSettings", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15getLensSettingsERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getLensSettings::camera_details", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase28getMeshPositionVertexBuffersEv", "nervosys::autonomylib::WorldSimApiBase::getMeshPositionVertexBuffers", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase13getObjectPoseERKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::getObjectPose", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase13getObjectPoseERKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::getObjectPose::object_name", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase14getObjectScaleERKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::getObjectScale", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase14getObjectScaleERKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::getObjectScale::object_name", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase25getPresetFilmbackSettingsERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getPresetFilmbackSettings", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase25getPresetFilmbackSettingsERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getPresetFilmbackSettings::camera_details", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase21getPresetLensSettingsERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getPresetLensSettings", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase21getPresetLensSettingsERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::getPresetLensSettings::camera_details", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase23getSegmentationObjectIDERKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::getSegmentationObjectID", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase23getSegmentationObjectIDERKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::getSegmentationObjectID::mesh_name", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase17getSettingsStringEv", "nervosys::autonomylib::WorldSimApiBase::getSettingsString", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase15getWorldExtentsEv", "nervosys::autonomylib::WorldSimApiBase::getWorldExtents", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase8isPausedEv", "nervosys::autonomylib::WorldSimApiBase::isPaused", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase11isRecordingEv", "nervosys::autonomylib::WorldSimApiBase::isRecording", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase10listAssetsEv", "nervosys::autonomylib::WorldSimApiBase::listAssets", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase16listSceneObjectsERKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::listSceneObjects", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase16listSceneObjectsERKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::listSceneObjects::name_regex", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase12listVehiclesEv", "nervosys::autonomylib::WorldSimApiBase::listVehicles", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase9loadLevelERKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::loadLevel", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase9loadLevelERKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::loadLevel::level_name", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase5pauseEb", "nervosys::autonomylib::WorldSimApiBase::pause", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase5pauseEb", "nervosys::autonomylib::WorldSimApiBase::pause::is_paused", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15printLogMessageERKNSt6stringERKNSt6stringEh", "nervosys::autonomylib::WorldSimApiBase::printLogMessage", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15printLogMessageERKNSt6stringERKNSt6stringEh", "nervosys::autonomylib::WorldSimApiBase::printLogMessage::message", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15printLogMessageERKNSt6stringERKNSt6stringEh", "nervosys::autonomylib::WorldSimApiBase::printLogMessage::message_param", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15printLogMessageERKNSt6stringERKNSt6stringEh", "nervosys::autonomylib::WorldSimApiBase::printLogMessage::severity", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase5resetEv", "nervosys::autonomylib::WorldSimApiBase::reset", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17runConsoleCommandERKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::runConsoleCommand", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17runConsoleCommandERKNSt6stringE", "nervosys::autonomylib::WorldSimApiBase::runConsoleCommand::command", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12setCameraFoVEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setCameraFoV", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12setCameraFoVEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setCameraFoV::camera_details", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12setCameraFoVEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setCameraFoV::fov_degrees", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13setCameraPoseERKN8nervosys11autonomylib4PoseERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setCameraPose", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13setCameraPoseERKN8nervosys11autonomylib4PoseERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setCameraPose::camera_details", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13setCameraPoseERKN8nervosys11autonomylib4PoseERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setCameraPose::pose", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase24setDetectionFilterRadiusEN16ImageCaptureBase9ImageTypeEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setDetectionFilterRadius", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase24setDetectionFilterRadiusEN16ImageCaptureBase9ImageTypeEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setDetectionFilterRadius::camera_details", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase24setDetectionFilterRadiusEN16ImageCaptureBase9ImageTypeEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setDetectionFilterRadius::image_type", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase24setDetectionFilterRadiusEN16ImageCaptureBase9ImageTypeEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setDetectionFilterRadius::radius_cm", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase18setDistortionParamERKNSt6stringEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setDistortionParam", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase18setDistortionParamERKNSt6stringEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setDistortionParam::camera_details", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase18setDistortionParamERKNSt6stringEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setDistortionParam::param_name", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase18setDistortionParamERKNSt6stringEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setDistortionParam::value", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase11setExtForceERK8Vector3r", "nervosys::autonomylib::WorldSimApiBase::setExtForce", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase11setExtForceERK8Vector3r", "nervosys::autonomylib::WorldSimApiBase::setExtForce::ext_force", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase19setFilmbackSettingsEffRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setFilmbackSettings", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase19setFilmbackSettingsEffRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setFilmbackSettings::camera_details", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase19setFilmbackSettingsEffRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setFilmbackSettings::height", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase19setFilmbackSettingsEffRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setFilmbackSettings::width", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14setFocalLengthEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setFocalLength", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14setFocalLengthEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setFocalLength::camera_details", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14setFocalLengthEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setFocalLength::focal_length", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16setFocusApertureEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setFocusAperture", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16setFocusApertureEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setFocusAperture::camera_details", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16setFocusApertureEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setFocusAperture::focus_aperture", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16setFocusDistanceEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setFocusDistance", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16setFocusDistanceEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setFocusDistance::camera_details", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16setFocusDistanceEfRK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setFocusDistance::focus_distance", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17setLightIntensityERKNSt6stringEf", "nervosys::autonomylib::WorldSimApiBase::setLightIntensity", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17setLightIntensityERKNSt6stringEf", "nervosys::autonomylib::WorldSimApiBase::setLightIntensity::intensity", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17setLightIntensityERKNSt6stringEf", "nervosys::autonomylib::WorldSimApiBase::setLightIntensity::light_name", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17setObjectMaterialERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::WorldSimApiBase::setObjectMaterial", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17setObjectMaterialERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::WorldSimApiBase::setObjectMaterial::component_id", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17setObjectMaterialERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::WorldSimApiBase::setObjectMaterial::material_name", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17setObjectMaterialERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::WorldSimApiBase::setObjectMaterial::object_name", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase28setObjectMaterialFromTextureERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::WorldSimApiBase::setObjectMaterialFromTexture", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase28setObjectMaterialFromTextureERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::WorldSimApiBase::setObjectMaterialFromTexture::component_id", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase28setObjectMaterialFromTextureERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::WorldSimApiBase::setObjectMaterialFromTexture::object_name", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase28setObjectMaterialFromTextureERKNSt6stringERKNSt6stringEKi", "nervosys::autonomylib::WorldSimApiBase::setObjectMaterialFromTexture::texture_path", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13setObjectPoseERKNSt6stringERK4Poseb", "nervosys::autonomylib::WorldSimApiBase::setObjectPose", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13setObjectPoseERKNSt6stringERK4Poseb", "nervosys::autonomylib::WorldSimApiBase::setObjectPose::object_name", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13setObjectPoseERKNSt6stringERK4Poseb", "nervosys::autonomylib::WorldSimApiBase::setObjectPose::pose", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13setObjectPoseERKNSt6stringERK4Poseb", "nervosys::autonomylib::WorldSimApiBase::setObjectPose::teleport", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14setObjectScaleERKNSt6stringERK8Vector3r", "nervosys::autonomylib::WorldSimApiBase::setObjectScale", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14setObjectScaleERKNSt6stringERK8Vector3r", "nervosys::autonomylib::WorldSimApiBase::setObjectScale::object_name", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14setObjectScaleERKNSt6stringERK8Vector3r", "nervosys::autonomylib::WorldSimApiBase::setObjectScale::scale", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase25setPresetFilmbackSettingsENSt6stringERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setPresetFilmbackSettings", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase25setPresetFilmbackSettingsENSt6stringERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setPresetFilmbackSettings::camera_details", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase21setPresetLensSettingsENSt6stringERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setPresetLensSettings", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase21setPresetLensSettingsENSt6stringERK13CameraDetails", "nervosys::autonomylib::WorldSimApiBase::setPresetLensSettings::camera_details", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase23setSegmentationObjectIDERKNSt6stringEib", "nervosys::autonomylib::WorldSimApiBase::setSegmentationObjectID", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase23setSegmentationObjectIDERKNSt6stringEib", "nervosys::autonomylib::WorldSimApiBase::setSegmentationObjectID::is_name_regex", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase23setSegmentationObjectIDERKNSt6stringEib", "nervosys::autonomylib::WorldSimApiBase::setSegmentationObjectID::mesh_name", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase23setSegmentationObjectIDERKNSt6stringEib", "nervosys::autonomylib::WorldSimApiBase::setSegmentationObjectID::object_id", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12setTimeOfDayEbRKNSt6stringEbffb", "nervosys::autonomylib::WorldSimApiBase::setTimeOfDay", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12setTimeOfDayEbRKNSt6stringEbffb", "nervosys::autonomylib::WorldSimApiBase::setTimeOfDay::celestial_clock_speed", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12setTimeOfDayEbRKNSt6stringEbffb", "nervosys::autonomylib::WorldSimApiBase::setTimeOfDay::is_enabled", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12setTimeOfDayEbRKNSt6stringEbffb", "nervosys::autonomylib::WorldSimApiBase::setTimeOfDay::is_start_datetime_dst", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12setTimeOfDayEbRKNSt6stringEbffb", "nervosys::autonomylib::WorldSimApiBase::setTimeOfDay::move_sun", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12setTimeOfDayEbRKNSt6stringEbffb", "nervosys::autonomylib::WorldSimApiBase::setTimeOfDay::start_datetime", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12setTimeOfDayEbRKNSt6stringEbffb", "nervosys::autonomylib::WorldSimApiBase::setTimeOfDay::update_interval_secs", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase19setWeatherParameterE16WeatherParameterf", "nervosys::autonomylib::WorldSimApiBase::setWeatherParameter", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase19setWeatherParameterE16WeatherParameterf", "nervosys::autonomylib::WorldSimApiBase::setWeatherParameter::param", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase19setWeatherParameterE16WeatherParameterf", "nervosys::autonomylib::WorldSimApiBase::setWeatherParameter::val", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase7setWindERK8Vector3r", "nervosys::autonomylib::WorldSimApiBase::setWind", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase7setWindERK8Vector3r", "nervosys::autonomylib::WorldSimApiBase::setWind::wind", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase25simFlushPersistentMarkersEv", "nervosys::autonomylib::WorldSimApiBase::simFlushPersistentMarkers", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::WorldSimApiBase::simPlotArrows", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::WorldSimApiBase::simPlotArrows::arrow_size", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::WorldSimApiBase::simPlotArrows::color_rgba", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::WorldSimApiBase::simPlotArrows::duration", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::WorldSimApiBase::simPlotArrows::is_persistent", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::WorldSimApiBase::simPlotArrows::points_end", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::WorldSimApiBase::simPlotArrows::points_start", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb", "nervosys::autonomylib::WorldSimApiBase::simPlotArrows::thickness", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15simPlotLineListERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotLineList", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15simPlotLineListERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotLineList::color_rgba", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15simPlotLineListERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotLineList::duration", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15simPlotLineListERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotLineList::is_persistent", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15simPlotLineListERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotLineList::points", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15simPlotLineListERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotLineList::thickness", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16simPlotLineStripERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotLineStrip", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16simPlotLineStripERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotLineStrip::color_rgba", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16simPlotLineStripERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotLineStrip::duration", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16simPlotLineStripERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotLineStrip::is_persistent", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16simPlotLineStripERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotLineStrip::points", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16simPlotLineStripERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotLineStrip::thickness", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotPointsERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotPoints", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotPointsERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotPoints::color_rgba", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotPointsERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotPoints::duration", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotPointsERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotPoints::is_persistent", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotPointsERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotPoints::points", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotPointsERK6vectorI8Vector3rERK6vectorIfEffb", "nervosys::autonomylib::WorldSimApiBase::simPlotPoints::size", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14simPlotStringsERK6vectorINSt6stringEERK6vectorI8Vector3rEfRK6vectorIfEf", "nervosys::autonomylib::WorldSimApiBase::simPlotStrings", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14simPlotStringsERK6vectorINSt6stringEERK6vectorI8Vector3rEfRK6vectorIfEf", "nervosys::autonomylib::WorldSimApiBase::simPlotStrings::color_rgba", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14simPlotStringsERK6vectorINSt6stringEERK6vectorI8Vector3rEfRK6vectorIfEf", "nervosys::autonomylib::WorldSimApiBase::simPlotStrings::duration", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14simPlotStringsERK6vectorINSt6stringEERK6vectorI8Vector3rEfRK6vectorIfEf", "nervosys::autonomylib::WorldSimApiBase::simPlotStrings::positions", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14simPlotStringsERK6vectorINSt6stringEERK6vectorI8Vector3rEfRK6vectorIfEf", "nervosys::autonomylib::WorldSimApiBase::simPlotStrings::scale", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14simPlotStringsERK6vectorINSt6stringEERK6vectorI8Vector3rEfRK6vectorIfEf", "nervosys::autonomylib::WorldSimApiBase::simPlotStrings::strings", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17simPlotTransformsERK6vectorI4PoseEfffb", "nervosys::autonomylib::WorldSimApiBase::simPlotTransforms", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17simPlotTransformsERK6vectorI4PoseEfffb", "nervosys::autonomylib::WorldSimApiBase::simPlotTransforms::duration", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17simPlotTransformsERK6vectorI4PoseEfffb", "nervosys::autonomylib::WorldSimApiBase::simPlotTransforms::is_persistent", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17simPlotTransformsERK6vectorI4PoseEfffb", "nervosys::autonomylib::WorldSimApiBase::simPlotTransforms::poses", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17simPlotTransformsERK6vectorI4PoseEfffb", "nervosys::autonomylib::WorldSimApiBase::simPlotTransforms::scale", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17simPlotTransformsERK6vectorI4PoseEfffb", "nervosys::autonomylib::WorldSimApiBase::simPlotTransforms::thickness", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::WorldSimApiBase::simPlotTransformsWithNames", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::WorldSimApiBase::simPlotTransformsWithNames::duration", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::WorldSimApiBase::simPlotTransformsWithNames::names", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::WorldSimApiBase::simPlotTransformsWithNames::poses", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::WorldSimApiBase::simPlotTransformsWithNames::text_color_rgba", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::WorldSimApiBase::simPlotTransformsWithNames::text_scale", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::WorldSimApiBase::simPlotTransformsWithNames::tf_scale", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf", "nervosys::autonomylib::WorldSimApiBase::simPlotTransformsWithNames::tf_thickness", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase11spawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rbb", "nervosys::autonomylib::WorldSimApiBase::spawnObject", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase11spawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rbb", "nervosys::autonomylib::WorldSimApiBase::spawnObject::is_blueprint", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase11spawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rbb", "nervosys::autonomylib::WorldSimApiBase::spawnObject::load_component", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase11spawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rbb", "nervosys::autonomylib::WorldSimApiBase::spawnObject::object_name", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase11spawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rbb", "nervosys::autonomylib::WorldSimApiBase::spawnObject::physics_enabled", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase11spawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rbb", "nervosys::autonomylib::WorldSimApiBase::spawnObject::pose", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase11spawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rbb", "nervosys::autonomylib::WorldSimApiBase::spawnObject::scale", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14startRecordingEv", "nervosys::autonomylib::WorldSimApiBase::startRecording", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13stopRecordingEv", "nervosys::autonomylib::WorldSimApiBase::stopRecording", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12swapTexturesERKNSt6stringEiii", "nervosys::autonomylib::WorldSimApiBase::swapTextures", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12swapTexturesERKNSt6stringEiii", "nervosys::autonomylib::WorldSimApiBase::swapTextures::component_id", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12swapTexturesERKNSt6stringEiii", "nervosys::autonomylib::WorldSimApiBase::swapTextures::material_id", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12swapTexturesERKNSt6stringEiii", "nervosys::autonomylib::WorldSimApiBase::swapTextures::tag", ""], [70, 2, 2, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12swapTexturesERKNSt6stringEiii", "nervosys::autonomylib::WorldSimApiBase::swapTextures::tex_id", ""], [70, 0, 1, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase28testLineOfSightBetweenPointsERKN8nervosys11autonomylib8GeoPointERKN8nervosys11autonomylib8GeoPointE", "nervosys::autonomylib::WorldSimApiBase::testLineOfSightBetweenPoints", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase28testLineOfSightBetweenPointsERKN8nervosys11autonomylib8GeoPointERKN8nervosys11autonomylib8GeoPointE", "nervosys::autonomylib::WorldSimApiBase::testLineOfSightBetweenPoints::point1", ""], [70, 2, 2, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase28testLineOfSightBetweenPointsERKN8nervosys11autonomylib8GeoPointERKN8nervosys11autonomylib8GeoPointE", "nervosys::autonomylib::WorldSimApiBase::testLineOfSightBetweenPoints::point2", ""], [70, 0, 1, "_CPPv4N8nervosys11autonomylib15WorldSimApiBaseD0Ev", "nervosys::autonomylib::WorldSimApiBase::~WorldSimApiBase", ""], [441, 1, 1, "_CPPv4N8nervosys11autonomylib7YawModeE", "nervosys::autonomylib::YawMode", "Public Functions    inline YawMode()      inline YawMode(bool is_rate_val, float yaw_or_rate_val)      inline void setZeroRate()    Public Members    bool is_rate = true      float yaw_or_rate = 0.0f    Public Static Functions    static inline YawMode Zero()"], [441, 0, 1, "_CPPv4N8nervosys11autonomylib7YawMode7YawModeEbf", "nervosys::autonomylib::YawMode::YawMode", ""], [441, 0, 1, "_CPPv4N8nervosys11autonomylib7YawMode7YawModeEv", "nervosys::autonomylib::YawMode::YawMode", ""], [441, 2, 2, "_CPPv4N8nervosys11autonomylib7YawMode7YawModeEbf", "nervosys::autonomylib::YawMode::YawMode::is_rate_val", ""], [441, 2, 2, "_CPPv4N8nervosys11autonomylib7YawMode7YawModeEbf", "nervosys::autonomylib::YawMode::YawMode::yaw_or_rate_val", ""], [441, 0, 1, "_CPPv4N8nervosys11autonomylib7YawMode4ZeroEv", "nervosys::autonomylib::YawMode::Zero", ""], [441, 3, 1, "_CPPv4N8nervosys11autonomylib7YawMode7is_rateE", "nervosys::autonomylib::YawMode::is_rate", ""], [441, 0, 1, "_CPPv4N8nervosys11autonomylib7YawMode11setZeroRateEv", "nervosys::autonomylib::YawMode::setZeroRate", ""], [441, 3, 1, "_CPPv4N8nervosys11autonomylib7YawMode11yaw_or_rateE", "nervosys::autonomylib::YawMode::yaw_or_rate", ""], [71, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptorsE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors", "struct CarControls  Public Functions    MSGPACK_DEFINE_MAP(throttle, steering, brake, handbrake, is_manual_gear, manual_gear, gear_immediate)      inline CarControls()      inline CarControls(const nervosys::autonomylib::CarApiBase::CarControls &s)      inline nervosys::autonomylib::CarApiBase::CarControls to() const    Public Members    float throttle = 0      float steering = 0      float brake = 0      bool handbrake = false      bool is_manual_gear = false      int manual_gear = 0      bool gear_immediate = true      struct CarState  Public Functions    MSGPACK_DEFINE_MAP(speed, gear, rpm, maxrpm, handbrake, kinematics_estimated, timestamp)      inline CarState()      inline CarState(const nervosys::autonomylib::CarApiBase::CarState &s)      inline nervosys::autonomylib::CarApiBase::CarState to() const    Public Members    float speed      int gear      float rpm      float maxrpm      bool handbrake      KinematicsState kinematics_estimated      uint64_t timestamp"], [71, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControlsE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarControls", "Public Functions    MSGPACK_DEFINE_MAP(throttle, steering, brake, handbrake, is_manual_gear, manual_gear, gear_immediate)      inline CarControls()      inline CarControls(const nervosys::autonomylib::CarApiBase::CarControls &s)      inline nervosys::autonomylib::CarApiBase::CarControls to() const    Public Members    float throttle = 0      float steering = 0      float brake = 0      bool handbrake = false      bool is_manual_gear = false      int manual_gear = 0      bool gear_immediate = true"], [71, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls11CarControlsERKN8nervosys11autonomylib10CarApiBase11CarControlsE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarControls::CarControls", ""], [71, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls11CarControlsEv", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarControls::CarControls", ""], [71, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls11CarControlsERKN8nervosys11autonomylib10CarApiBase11CarControlsE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarControls::CarControls::s", ""], [71, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls18MSGPACK_DEFINE_MAPE8throttle8steering5brake9handbrake14is_manual_gear11manual_gear14gear_immediate", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarControls::MSGPACK_DEFINE_MAP", ""], [71, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls5brakeE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarControls::brake", ""], [71, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls14gear_immediateE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarControls::gear_immediate", ""], [71, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls9handbrakeE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarControls::handbrake", ""], [71, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls14is_manual_gearE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarControls::is_manual_gear", ""], [71, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls11manual_gearE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarControls::manual_gear", ""], [71, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls8steeringE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarControls::steering", ""], [71, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls8throttleE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarControls::throttle", ""], [71, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls2toEv", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarControls::to", ""], [71, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarStateE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarState", "Public Functions    MSGPACK_DEFINE_MAP(speed, gear, rpm, maxrpm, handbrake, kinematics_estimated, timestamp)      inline CarState()      inline CarState(const nervosys::autonomylib::CarApiBase::CarState &s)      inline nervosys::autonomylib::CarApiBase::CarState to() const    Public Members    float speed      int gear      float rpm      float maxrpm      bool handbrake      KinematicsState kinematics_estimated      uint64_t timestamp"], [71, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState8CarStateERKN8nervosys11autonomylib10CarApiBase8CarStateE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarState::CarState", ""], [71, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState8CarStateEv", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarState::CarState", ""], [71, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState8CarStateERKN8nervosys11autonomylib10CarApiBase8CarStateE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarState::CarState::s", ""], [71, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState18MSGPACK_DEFINE_MAPE5speed4gear3rpm6maxrpm9handbrake20kinematics_estimated9timestamp", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarState::MSGPACK_DEFINE_MAP", ""], [71, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState4gearE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarState::gear", ""], [71, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState9handbrakeE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarState::handbrake", ""], [71, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState20kinematics_estimatedE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarState::kinematics_estimated", ""], [71, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState6maxrpmE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarState::maxrpm", ""], [71, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState3rpmE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarState::rpm", ""], [71, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState5speedE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarState::speed", ""], [71, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState9timestampE", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarState::timestamp", ""], [71, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState2toEv", "nervosys::autonomylib_rpclib::CarRpcLibAdaptors::CarState::to", ""], [72, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptorsE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors", "struct MultirotorState  Public Functions    MSGPACK_DEFINE_MAP(collision, kinematics_estimated, gps_location, timestamp, landed_state, rc_data)      inline MultirotorState()      inline MultirotorState(const nervosys::autonomylib::MultirotorState &s)      inline nervosys::autonomylib::MultirotorState to() const    Public Members    CollisionInfo collision      KinematicsState kinematics_estimated      KinematicsState kinematics_true      GeoPoint gps_location      uint64_t timestamp      nervosys::autonomylib::LandedState landed_state      RCData rc_data      bool ready      std::string ready_message      std::vector<std::string> controller_messages      bool can_arm      struct RotorParameters  Public Functions    MSGPACK_DEFINE_MAP(thrust, torque_scaler, speed)      inline RotorParameters()      inline RotorParameters(const nervosys::autonomylib::RotorParameters &s)      inline nervosys::autonomylib::RotorParameters to() const    Public Members    nervosys::autonomylib::real_T thrust      nervosys::autonomylib::real_T torque_scaler      nervosys::autonomylib::real_T speed      struct RotorStates  Public Functions    MSGPACK_DEFINE_MAP(rotors, timestamp)      inline RotorStates()      inline RotorStates(const nervosys::autonomylib::RotorStates &s)      inline nervosys::autonomylib::RotorStates to() const    Public Members    std::vector<RotorParameters> rotors      uint64_t timestamp      struct YawMode  Public Functions    MSGPACK_DEFINE_MAP(is_rate, yaw_or_rate)      inline YawMode()      inline YawMode(const nervosys::autonomylib::YawMode &s)      inline nervosys::autonomylib::YawMode to() const    Public Members    bool is_rate = true      float yaw_or_rate = 0"], [72, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorStateE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState", "Public Functions    MSGPACK_DEFINE_MAP(collision, kinematics_estimated, gps_location, timestamp, landed_state, rc_data)      inline MultirotorState()      inline MultirotorState(const nervosys::autonomylib::MultirotorState &s)      inline nervosys::autonomylib::MultirotorState to() const    Public Members    CollisionInfo collision      KinematicsState kinematics_estimated      KinematicsState kinematics_true      GeoPoint gps_location      uint64_t timestamp      nervosys::autonomylib::LandedState landed_state      RCData rc_data      bool ready      std::string ready_message      std::vector<std::string> controller_messages      bool can_arm"], [72, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState18MSGPACK_DEFINE_MAPE9collision20kinematics_estimated12gps_location9timestamp12landed_state7rc_data", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::MSGPACK_DEFINE_MAP", ""], [72, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState15MultirotorStateERKN8nervosys11autonomylib15MultirotorStateE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::MultirotorState", ""], [72, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState15MultirotorStateEv", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::MultirotorState", ""], [72, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState15MultirotorStateERKN8nervosys11autonomylib15MultirotorStateE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::MultirotorState::s", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState7can_armE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::can_arm", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState9collisionE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::collision", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState19controller_messagesE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::controller_messages", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState12gps_locationE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::gps_location", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState20kinematics_estimatedE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::kinematics_estimated", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState15kinematics_trueE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::kinematics_true", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState12landed_stateE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::landed_state", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState7rc_dataE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::rc_data", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState5readyE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::ready", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState13ready_messageE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::ready_message", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState9timestampE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::timestamp", ""], [72, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState2toEv", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::MultirotorState::to", ""], [72, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParametersE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorParameters", "Public Functions    MSGPACK_DEFINE_MAP(thrust, torque_scaler, speed)      inline RotorParameters()      inline RotorParameters(const nervosys::autonomylib::RotorParameters &s)      inline nervosys::autonomylib::RotorParameters to() const    Public Members    nervosys::autonomylib::real_T thrust      nervosys::autonomylib::real_T torque_scaler      nervosys::autonomylib::real_T speed"], [72, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters18MSGPACK_DEFINE_MAPE6thrust13torque_scaler5speed", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorParameters::MSGPACK_DEFINE_MAP", ""], [72, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters15RotorParametersERKN8nervosys11autonomylib15RotorParametersE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorParameters::RotorParameters", ""], [72, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters15RotorParametersEv", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorParameters::RotorParameters", ""], [72, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters15RotorParametersERKN8nervosys11autonomylib15RotorParametersE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorParameters::RotorParameters::s", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters5speedE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorParameters::speed", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters6thrustE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorParameters::thrust", ""], [72, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters2toEv", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorParameters::to", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters13torque_scalerE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorParameters::torque_scaler", ""], [72, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStatesE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorStates", "Public Functions    MSGPACK_DEFINE_MAP(rotors, timestamp)      inline RotorStates()      inline RotorStates(const nervosys::autonomylib::RotorStates &s)      inline nervosys::autonomylib::RotorStates to() const    Public Members    std::vector<RotorParameters> rotors      uint64_t timestamp"], [72, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates18MSGPACK_DEFINE_MAPE6rotors9timestamp", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorStates::MSGPACK_DEFINE_MAP", ""], [72, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates11RotorStatesERKN8nervosys11autonomylib11RotorStatesE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorStates::RotorStates", ""], [72, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates11RotorStatesEv", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorStates::RotorStates", ""], [72, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates11RotorStatesERKN8nervosys11autonomylib11RotorStatesE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorStates::RotorStates::s", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates6rotorsE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorStates::rotors", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates9timestampE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorStates::timestamp", ""], [72, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates2toEv", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::RotorStates::to", ""], [72, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawModeE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::YawMode", "Public Functions    MSGPACK_DEFINE_MAP(is_rate, yaw_or_rate)      inline YawMode()      inline YawMode(const nervosys::autonomylib::YawMode &s)      inline nervosys::autonomylib::YawMode to() const    Public Members    bool is_rate = true      float yaw_or_rate = 0"], [72, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode18MSGPACK_DEFINE_MAPE7is_rate11yaw_or_rate", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::YawMode::MSGPACK_DEFINE_MAP", ""], [72, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode7YawModeERKN8nervosys11autonomylib7YawModeE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::YawMode::YawMode", ""], [72, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode7YawModeEv", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::YawMode::YawMode", ""], [72, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode7YawModeERKN8nervosys11autonomylib7YawModeE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::YawMode::YawMode::s", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode7is_rateE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::YawMode::is_rate", ""], [72, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode2toEv", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::YawMode::to", ""], [72, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode11yaw_or_rateE", "nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors::YawMode::yaw_or_rate", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBaseE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase", "Subclassed by nervosys::autonomylib_rpclib::CarRpcLibAdaptors, nervosys::autonomylib_rpclib::MultirotorRpcLibAdaptors"], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerDataE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::BarometerData", "Public Functions    MSGPACK_DEFINE_MAP(time_stamp, altitude, pressure, qnh)      inline BarometerData()      inline BarometerData(const nervosys::autonomylib::BarometerBase::Output &s)      inline nervosys::autonomylib::BarometerBase::Output to() const    Public Members    nervosys::autonomylib::TTimePoint time_stamp      nervosys::autonomylib::real_T altitude      nervosys::autonomylib::real_T pressure      nervosys::autonomylib::real_T qnh"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData13BarometerDataERKN8nervosys11autonomylib13BarometerBase6OutputE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::BarometerData::BarometerData", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData13BarometerDataEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::BarometerData::BarometerData", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData13BarometerDataERKN8nervosys11autonomylib13BarometerBase6OutputE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::BarometerData::BarometerData::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData18MSGPACK_DEFINE_MAPE10time_stamp8altitude8pressure3qnh", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::BarometerData::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData8altitudeE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::BarometerData::altitude", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData8pressureE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::BarometerData::pressure", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData3qnhE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::BarometerData::qnh", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData10time_stampE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::BarometerData::time_stamp", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::BarometerData::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2DE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box2D", "Public Functions    MSGPACK_DEFINE_MAP(min, max)      inline Box2D()      inline Box2D(const nervosys::autonomylib::Box2D &s)      inline nervosys::autonomylib::Box2D to() const    Public Members    Vector2r min      Vector2r max"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D5Box2DERKN8nervosys11autonomylib5Box2DE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box2D::Box2D", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D5Box2DEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box2D::Box2D", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D5Box2DERKN8nervosys11autonomylib5Box2DE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box2D::Box2D::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D18MSGPACK_DEFINE_MAPE3min3max", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box2D::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D3maxE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box2D::max", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D3minE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box2D::min", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box2D::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3DE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box3D", "Public Functions    MSGPACK_DEFINE_MAP(min, max)      inline Box3D()      inline Box3D(const nervosys::autonomylib::Box3D &s)      inline nervosys::autonomylib::Box3D to() const    Public Members    Vector3r min      Vector3r max"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D5Box3DERKN8nervosys11autonomylib5Box3DE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box3D::Box3D", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D5Box3DEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box3D::Box3D", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D5Box3DERKN8nervosys11autonomylib5Box3DE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box3D::Box3D::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D18MSGPACK_DEFINE_MAPE3min3max", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box3D::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D3maxE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box3D::max", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D3minE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box3D::min", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Box3D::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfoE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CameraInfo", "Public Functions    MSGPACK_DEFINE_MAP(pose, fov, proj_mat)      inline CameraInfo()      inline CameraInfo(const nervosys::autonomylib::CameraInfo &s)      inline nervosys::autonomylib::CameraInfo to() const    Public Members    Pose pose      float fov      ProjectionMatrix proj_mat"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo10CameraInfoERKN8nervosys11autonomylib10CameraInfoE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CameraInfo::CameraInfo", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo10CameraInfoEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CameraInfo::CameraInfo", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo10CameraInfoERKN8nervosys11autonomylib10CameraInfoE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CameraInfo::CameraInfo::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo18MSGPACK_DEFINE_MAPE4pose3fov8proj_mat", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CameraInfo::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo3fovE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CameraInfo::fov", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo4poseE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CameraInfo::pose", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo8proj_matE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CameraInfo::proj_mat", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CameraInfo::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfoE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CollisionInfo", "Public Functions    MSGPACK_DEFINE_MAP(has_collided, penetration_depth, time_stamp, normal, impact_point, position, object_name, object_id)      inline CollisionInfo()      inline CollisionInfo(const nervosys::autonomylib::CollisionInfo &s)      inline nervosys::autonomylib::CollisionInfo to() const    Public Members    bool has_collided = false      Vector3r normal      Vector3r impact_point      Vector3r position      nervosys::autonomylib::real_T penetration_depth = 0      nervosys::autonomylib::TTimePoint time_stamp = 0      std::string object_name      int object_id = -1"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo13CollisionInfoERKN8nervosys11autonomylib13CollisionInfoE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CollisionInfo::CollisionInfo", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo13CollisionInfoEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CollisionInfo::CollisionInfo", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo13CollisionInfoERKN8nervosys11autonomylib13CollisionInfoE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CollisionInfo::CollisionInfo::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo18MSGPACK_DEFINE_MAPE12has_collided17penetration_depth10time_stamp6normal12impact_point8position11object_name9object_id", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CollisionInfo::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo12has_collidedE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CollisionInfo::has_collided", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo12impact_pointE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CollisionInfo::impact_point", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo6normalE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CollisionInfo::normal", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo9object_idE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CollisionInfo::object_id", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo11object_nameE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CollisionInfo::object_name", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo17penetration_depthE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CollisionInfo::penetration_depth", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo8positionE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CollisionInfo::position", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo10time_stampE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CollisionInfo::time_stamp", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::CollisionInfo::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfoE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo", "Public Functions    MSGPACK_DEFINE_MAP(name, geo_point, box2D, box3D, relative_pose)      inline DetectionInfo()      inline DetectionInfo(const nervosys::autonomylib::DetectionInfo &d)      inline nervosys::autonomylib::DetectionInfo to() const    Public Members    std::string name      GeoPoint geo_point      Box2D box2D      Box3D box3D      Pose relative_pose    Public Static Functions    static inline std::vector<DetectionInfo> from(const std::vector<nervosys::autonomylib::DetectionInfo> &request)      static inline std::vector<nervosys::autonomylib::DetectionInfo> to(const std::vector<DetectionInfo> &request_adapter)"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo13DetectionInfoERKN8nervosys11autonomylib13DetectionInfoE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo::DetectionInfo", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo13DetectionInfoEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo::DetectionInfo", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo13DetectionInfoERKN8nervosys11autonomylib13DetectionInfoE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo::DetectionInfo::d", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo18MSGPACK_DEFINE_MAPE4name9geo_point5box2D5box3D13relative_pose", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo5box2DE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo::box2D", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo5box3DE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo::box3D", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo4fromERKNSt6vectorIN8nervosys11autonomylib13DetectionInfoEEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo::from", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo4fromERKNSt6vectorIN8nervosys11autonomylib13DetectionInfoEEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo::from::request", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo9geo_pointE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo::geo_point", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo4nameE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo::name", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo13relative_poseE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo::relative_pose", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo2toERKNSt6vectorI13DetectionInfoEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo::to", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo::to", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo2toERKNSt6vectorI13DetectionInfoEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DetectionInfo::to::request_adapter", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorDataE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DistanceSensorData", "Public Functions    MSGPACK_DEFINE_MAP(time_stamp, distance, min_distance, max_distance, relative_pose)      inline DistanceSensorData()      inline DistanceSensorData(const nervosys::autonomylib::DistanceSensorData &s)      inline nervosys::autonomylib::DistanceSensorData to() const    Public Members    nervosys::autonomylib::TTimePoint time_stamp      nervosys::autonomylib::real_T distance      nervosys::autonomylib::real_T min_distance      nervosys::autonomylib::real_T max_distance      Pose relative_pose"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData18DistanceSensorDataERKN8nervosys11autonomylib18DistanceSensorDataE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DistanceSensorData::DistanceSensorData", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData18DistanceSensorDataEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DistanceSensorData::DistanceSensorData", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData18DistanceSensorDataERKN8nervosys11autonomylib18DistanceSensorDataE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DistanceSensorData::DistanceSensorData::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData18MSGPACK_DEFINE_MAPE10time_stamp8distance12min_distance12max_distance13relative_pose", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DistanceSensorData::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData8distanceE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DistanceSensorData::distance", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData12max_distanceE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DistanceSensorData::max_distance", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData12min_distanceE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DistanceSensorData::min_distance", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData13relative_poseE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DistanceSensorData::relative_pose", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData10time_stampE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DistanceSensorData::time_stamp", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::DistanceSensorData::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentStateE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::EnvironmentState", "Public Functions    MSGPACK_DEFINE_MAP(position, geo_point, gravity, air_pressure, temperature, air_density)      inline EnvironmentState()      inline EnvironmentState(const nervosys::autonomylib::Environment::State &s)      inline nervosys::autonomylib::Environment::State to() const    Public Members    Vector3r position      GeoPoint geo_point      Vector3r gravity      float air_pressure      float temperature      float air_density"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState16EnvironmentStateERKN8nervosys11autonomylib11Environment5StateE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::EnvironmentState::EnvironmentState", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState16EnvironmentStateEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::EnvironmentState::EnvironmentState", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState16EnvironmentStateERKN8nervosys11autonomylib11Environment5StateE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::EnvironmentState::EnvironmentState::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState18MSGPACK_DEFINE_MAPE8position9geo_point7gravity12air_pressure11temperature11air_density", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::EnvironmentState::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState11air_densityE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::EnvironmentState::air_density", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState12air_pressureE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::EnvironmentState::air_pressure", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState9geo_pointE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::EnvironmentState::geo_point", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState7gravityE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::EnvironmentState::gravity", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState8positionE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::EnvironmentState::position", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState11temperatureE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::EnvironmentState::temperature", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::EnvironmentState::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPointE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GeoPoint", "Public Functions    MSGPACK_DEFINE_MAP(latitude, longitude, altitude)      inline GeoPoint()      inline GeoPoint(const nervosys::autonomylib::GeoPoint &s)      inline nervosys::autonomylib::GeoPoint to() const    Public Members    double latitude = 0      double longitude = 0      float altitude = 0"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint8GeoPointERKN8nervosys11autonomylib8GeoPointE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GeoPoint::GeoPoint", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint8GeoPointEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GeoPoint::GeoPoint", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint8GeoPointERKN8nervosys11autonomylib8GeoPointE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GeoPoint::GeoPoint::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint18MSGPACK_DEFINE_MAPE8latitude9longitude8altitude", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GeoPoint::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint8altitudeE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GeoPoint::altitude", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint8latitudeE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GeoPoint::latitude", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint9longitudeE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GeoPoint::longitude", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GeoPoint::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReportE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GnssReport", "Public Functions    MSGPACK_DEFINE_MAP(geo_point, eph, epv, velocity, fix_type, time_utc)      inline GnssReport()      inline GnssReport(const nervosys::autonomylib::GpsBase::GnssReport &s)      inline nervosys::autonomylib::GpsBase::GnssReport to() const    Public Members    GeoPoint geo_point      nervosys::autonomylib::real_T eph = 0.0      nervosys::autonomylib::real_T epv = 0.0      Vector3r velocity      nervosys::autonomylib::GpsBase::GnssFixType fix_type      uint64_t time_utc = 0"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport10GnssReportERKN8nervosys11autonomylib7GpsBase10GnssReportE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GnssReport::GnssReport", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport10GnssReportEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GnssReport::GnssReport", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport10GnssReportERKN8nervosys11autonomylib7GpsBase10GnssReportE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GnssReport::GnssReport::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport18MSGPACK_DEFINE_MAPE9geo_point3eph3epv8velocity8fix_type8time_utc", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GnssReport::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport3ephE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GnssReport::eph", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport3epvE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GnssReport::epv", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport8fix_typeE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GnssReport::fix_type", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport9geo_pointE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GnssReport::geo_point", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport8time_utcE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GnssReport::time_utc", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GnssReport::to", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport8velocityE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GnssReport::velocity", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsDataE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GpsData", "Public Functions    MSGPACK_DEFINE_MAP(time_stamp, gnss, is_valid)      inline GpsData()      inline GpsData(const nervosys::autonomylib::GpsBase::Output &s)      inline nervosys::autonomylib::GpsBase::Output to() const    Public Members    nervosys::autonomylib::TTimePoint time_stamp      GnssReport gnss      bool is_valid = false"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData7GpsDataERKN8nervosys11autonomylib7GpsBase6OutputE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GpsData::GpsData", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData7GpsDataEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GpsData::GpsData", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData7GpsDataERKN8nervosys11autonomylib7GpsBase6OutputE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GpsData::GpsData::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData18MSGPACK_DEFINE_MAPE10time_stamp4gnss8is_valid", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GpsData::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData4gnssE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GpsData::gnss", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData8is_validE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GpsData::is_valid", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData10time_stampE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GpsData::time_stamp", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::GpsData::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequestE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageRequest", "Public Functions    MSGPACK_DEFINE_MAP(camera_name, image_type, pixels_as_float, compress)      inline ImageRequest()      inline ImageRequest(const nervosys::autonomylib::ImageCaptureBase::ImageRequest &s)      inline nervosys::autonomylib::ImageCaptureBase::ImageRequest to() const    Public Members    std::string camera_name      nervosys::autonomylib::ImageCaptureBase::ImageType image_type      bool pixels_as_float      bool compress    Public Static Functions    static inline std::vector<ImageRequest> from(const std::vector<nervosys::autonomylib::ImageCaptureBase::ImageRequest> &request)      static inline std::vector<nervosys::autonomylib::ImageCaptureBase::ImageRequest> to(const std::vector<ImageRequest> &request_adapter)"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest12ImageRequestERKN8nervosys11autonomylib16ImageCaptureBase12ImageRequestE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageRequest::ImageRequest", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest12ImageRequestEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageRequest::ImageRequest", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest12ImageRequestERKN8nervosys11autonomylib16ImageCaptureBase12ImageRequestE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageRequest::ImageRequest::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest18MSGPACK_DEFINE_MAPE11camera_name10image_type15pixels_as_float8compress", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageRequest::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest11camera_nameE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageRequest::camera_name", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest8compressE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageRequest::compress", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest4fromERKNSt6vectorIN8nervosys11autonomylib16ImageCaptureBase12ImageRequestEEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageRequest::from", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest4fromERKNSt6vectorIN8nervosys11autonomylib16ImageCaptureBase12ImageRequestEEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageRequest::from::request", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest10image_typeE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageRequest::image_type", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest15pixels_as_floatE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageRequest::pixels_as_float", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest2toERKNSt6vectorI12ImageRequestEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageRequest::to", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageRequest::to", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest2toERKNSt6vectorI12ImageRequestEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageRequest::to::request_adapter", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponseE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse", "Public Functions    MSGPACK_DEFINE_MAP(image_data_uint8, image_data_float, camera_position, camera_name, camera_orientation, time_stamp, message, pixels_as_float, compress, width, height, image_type)      inline ImageResponse()      inline ImageResponse(const nervosys::autonomylib::ImageCaptureBase::ImageResponse &s)      inline nervosys::autonomylib::ImageCaptureBase::ImageResponse to() const    Public Members    std::vector<uint8_t> image_data_uint8      std::vector<float> image_data_float      std::string camera_name      Vector3r camera_position      Quaternionr camera_orientation      nervosys::autonomylib::TTimePoint time_stamp      std::string message      bool pixels_as_float      bool compress      int width      int height      nervosys::autonomylib::ImageCaptureBase::ImageType image_type    Public Static Functions    static inline std::vector<nervosys::autonomylib::ImageCaptureBase::ImageResponse> to(const std::vector<ImageResponse> &response_adapter)      static inline std::vector<ImageResponse> from(const std::vector<nervosys::autonomylib::ImageCaptureBase::ImageResponse> &response)"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse13ImageResponseERKN8nervosys11autonomylib16ImageCaptureBase13ImageResponseE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::ImageResponse", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse13ImageResponseEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::ImageResponse", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse13ImageResponseERKN8nervosys11autonomylib16ImageCaptureBase13ImageResponseE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::ImageResponse::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse18MSGPACK_DEFINE_MAPE16image_data_uint816image_data_float15camera_position11camera_name18camera_orientation10time_stamp7message15pixels_as_float8compress5width6height10image_type", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse11camera_nameE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::camera_name", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse18camera_orientationE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::camera_orientation", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse15camera_positionE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::camera_position", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse8compressE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::compress", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse4fromERKNSt6vectorIN8nervosys11autonomylib16ImageCaptureBase13ImageResponseEEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::from", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse4fromERKNSt6vectorIN8nervosys11autonomylib16ImageCaptureBase13ImageResponseEEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::from::response", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse6heightE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::height", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse16image_data_floatE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::image_data_float", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse16image_data_uint8E", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::image_data_uint8", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse10image_typeE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::image_type", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse7messageE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::message", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse15pixels_as_floatE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::pixels_as_float", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse10time_stampE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::time_stamp", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse2toERKNSt6vectorI13ImageResponseEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::to", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::to", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse2toERKNSt6vectorI13ImageResponseEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::to::response_adapter", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse5widthE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImageResponse::width", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuDataE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImuData", "Public Functions    MSGPACK_DEFINE_MAP(time_stamp, orientation, angular_velocity, linear_acceleration)      inline ImuData()      inline ImuData(const nervosys::autonomylib::ImuBase::Output &s)      inline nervosys::autonomylib::ImuBase::Output to() const    Public Members    nervosys::autonomylib::TTimePoint time_stamp      Quaternionr orientation      Vector3r angular_velocity      Vector3r linear_acceleration"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData7ImuDataERKN8nervosys11autonomylib7ImuBase6OutputE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImuData::ImuData", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData7ImuDataEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImuData::ImuData", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData7ImuDataERKN8nervosys11autonomylib7ImuBase6OutputE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImuData::ImuData::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData18MSGPACK_DEFINE_MAPE10time_stamp11orientation16angular_velocity19linear_acceleration", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImuData::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData16angular_velocityE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImuData::angular_velocity", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData19linear_accelerationE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImuData::linear_acceleration", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData11orientationE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImuData::orientation", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData10time_stampE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImuData::time_stamp", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ImuData::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsStateE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::KinematicsState", "Public Functions    MSGPACK_DEFINE_MAP(position, orientation, linear_velocity, angular_velocity, linear_acceleration, angular_acceleration)      inline KinematicsState()      inline KinematicsState(const nervosys::autonomylib::Kinematics::State &s)      inline nervosys::autonomylib::Kinematics::State to() const    Public Members    Vector3r position      Quaternionr orientation      Vector3r linear_velocity      Vector3r angular_velocity      Vector3r linear_acceleration      Vector3r angular_acceleration"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState15KinematicsStateERKN8nervosys11autonomylib10Kinematics5StateE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::KinematicsState::KinematicsState", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState15KinematicsStateEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::KinematicsState::KinematicsState", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState15KinematicsStateERKN8nervosys11autonomylib10Kinematics5StateE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::KinematicsState::KinematicsState::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState18MSGPACK_DEFINE_MAPE8position11orientation15linear_velocity16angular_velocity19linear_acceleration20angular_acceleration", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::KinematicsState::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState20angular_accelerationE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::KinematicsState::angular_acceleration", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState16angular_velocityE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::KinematicsState::angular_velocity", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState19linear_accelerationE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::KinematicsState::linear_acceleration", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState15linear_velocityE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::KinematicsState::linear_velocity", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState11orientationE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::KinematicsState::orientation", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState8positionE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::KinematicsState::position", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::KinematicsState::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarDataE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::LidarData", "Public Functions    MSGPACK_DEFINE_MAP(time_stamp, point_cloud, pose, segmentation)      inline LidarData()      inline LidarData(const nervosys::autonomylib::LidarData &s)      inline nervosys::autonomylib::LidarData to() const    Public Members    nervosys::autonomylib::TTimePoint time_stamp      std::vector<float> point_cloud      Pose pose      std::vector<int> segmentation"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData9LidarDataERKN8nervosys11autonomylib9LidarDataE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::LidarData::LidarData", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData9LidarDataEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::LidarData::LidarData", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData9LidarDataERKN8nervosys11autonomylib9LidarDataE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::LidarData::LidarData::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData18MSGPACK_DEFINE_MAPE10time_stamp11point_cloud4pose12segmentation", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::LidarData::MSGPACK_DEFINE_MAP", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData11point_cloudE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::LidarData::point_cloud", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData4poseE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::LidarData::pose", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData12segmentationE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::LidarData::segmentation", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData10time_stampE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::LidarData::time_stamp", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::LidarData::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerDataE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MagnetometerData", "Public Functions    MSGPACK_DEFINE_MAP(time_stamp, magnetic_field_body, magnetic_field_covariance)      inline MagnetometerData()      inline MagnetometerData(const nervosys::autonomylib::MagnetometerBase::Output &s)      inline nervosys::autonomylib::MagnetometerBase::Output to() const    Public Members    nervosys::autonomylib::TTimePoint time_stamp      Vector3r magnetic_field_body      std::vector<float> magnetic_field_covariance"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData18MSGPACK_DEFINE_MAPE10time_stamp19magnetic_field_body25magnetic_field_covariance", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MagnetometerData::MSGPACK_DEFINE_MAP", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData16MagnetometerDataERKN8nervosys11autonomylib16MagnetometerBase6OutputE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MagnetometerData::MagnetometerData", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData16MagnetometerDataEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MagnetometerData::MagnetometerData", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData16MagnetometerDataERKN8nervosys11autonomylib16MagnetometerBase6OutputE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MagnetometerData::MagnetometerData::s", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData19magnetic_field_bodyE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MagnetometerData::magnetic_field_body", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData25magnetic_field_covarianceE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MagnetometerData::magnetic_field_covariance", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData10time_stampE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MagnetometerData::time_stamp", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MagnetometerData::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponseE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse", "Public Functions    MSGPACK_DEFINE_MAP(position, orientation, vertices, indices, name)      inline MeshPositionVertexBuffersResponse()      inline MeshPositionVertexBuffersResponse(const nervosys::autonomylib::MeshPositionVertexBuffersResponse &s)      inline nervosys::autonomylib::MeshPositionVertexBuffersResponse to() const    Public Members    Vector3r position      Quaternionr orientation      std::vector<float> vertices      std::vector<uint32_t> indices      std::string name    Public Static Functions    static inline std::vector<nervosys::autonomylib::MeshPositionVertexBuffersResponse> to(const std::vector<MeshPositionVertexBuffersResponse> &response_adapter)      static inline std::vector<MeshPositionVertexBuffersResponse> from(const std::vector<nervosys::autonomylib::MeshPositionVertexBuffersResponse> &response)"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse18MSGPACK_DEFINE_MAPE8position11orientation8vertices7indices4name", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse::MSGPACK_DEFINE_MAP", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse33MeshPositionVertexBuffersResponseERKN8nervosys11autonomylib33MeshPositionVertexBuffersResponseE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse::MeshPositionVertexBuffersResponse", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse33MeshPositionVertexBuffersResponseEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse::MeshPositionVertexBuffersResponse", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse33MeshPositionVertexBuffersResponseERKN8nervosys11autonomylib33MeshPositionVertexBuffersResponseE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse::MeshPositionVertexBuffersResponse::s", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse4fromERKNSt6vectorIN8nervosys11autonomylib33MeshPositionVertexBuffersResponseEEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse::from", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse4fromERKNSt6vectorIN8nervosys11autonomylib33MeshPositionVertexBuffersResponseEEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse::from::response", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse7indicesE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse::indices", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse4nameE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse::name", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse11orientationE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse::orientation", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse8positionE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse::position", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse2toERKNSt6vectorI33MeshPositionVertexBuffersResponseEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse::to", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse::to", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse2toERKNSt6vectorI33MeshPositionVertexBuffersResponseEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse::to::response_adapter", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse8verticesE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse::vertices", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4PoseE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Pose", "Public Functions    MSGPACK_DEFINE_MAP(position, orientation)      inline Pose()      inline Pose(const nervosys::autonomylib::Pose &s)      inline nervosys::autonomylib::Pose to() const    Public Members    Vector3r position      Quaternionr orientation"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose18MSGPACK_DEFINE_MAPE8position11orientation", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Pose::MSGPACK_DEFINE_MAP", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose4PoseERKN8nervosys11autonomylib4PoseE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Pose::Pose", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose4PoseEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Pose::Pose", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose4PoseERKN8nervosys11autonomylib4PoseE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Pose::Pose::s", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose11orientationE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Pose::orientation", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose8positionE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Pose::position", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Pose::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrixE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ProjectionMatrix", "Public Functions    MSGPACK_DEFINE_MAP(matrix)      inline ProjectionMatrix()      inline ProjectionMatrix(const nervosys::autonomylib::ProjectionMatrix &s)      inline nervosys::autonomylib::ProjectionMatrix to() const    Public Members    float matrix[4][4]"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix18MSGPACK_DEFINE_MAPE6matrix", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ProjectionMatrix::MSGPACK_DEFINE_MAP", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix16ProjectionMatrixERKN8nervosys11autonomylib16ProjectionMatrixE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ProjectionMatrix::ProjectionMatrix", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix16ProjectionMatrixEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ProjectionMatrix::ProjectionMatrix", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix16ProjectionMatrixERKN8nervosys11autonomylib16ProjectionMatrixE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ProjectionMatrix::ProjectionMatrix::s", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix6matrixE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ProjectionMatrix::matrix", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::ProjectionMatrix::to", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11QuaternionrE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Quaternionr", "Public Functions    MSGPACK_DEFINE_MAP(w_val, x_val, y_val, z_val)      inline Quaternionr()      inline Quaternionr(const nervosys::autonomylib::Quaternionr &s)      inline nervosys::autonomylib::Quaternionr to() const    Public Members    nervosys::autonomylib::real_T w_val = 1      nervosys::autonomylib::real_T x_val = 0      nervosys::autonomylib::real_T y_val = 0      nervosys::autonomylib::real_T z_val = 0"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr18MSGPACK_DEFINE_MAPE5w_val5x_val5y_val5z_val", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Quaternionr::MSGPACK_DEFINE_MAP", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr11QuaternionrERKN8nervosys11autonomylib11QuaternionrE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Quaternionr::Quaternionr", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr11QuaternionrEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Quaternionr::Quaternionr", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr11QuaternionrERKN8nervosys11autonomylib11QuaternionrE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Quaternionr::Quaternionr::s", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Quaternionr::to", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr5w_valE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Quaternionr::w_val", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr5x_valE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Quaternionr::x_val", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr5y_valE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Quaternionr::y_val", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr5z_valE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Quaternionr::z_val", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCDataE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData", "Public Functions    MSGPACK_DEFINE_MAP(timestamp, pitch, roll, throttle, yaw, left_z, right_z, switches, vendor_id, is_initialized, is_valid)      inline RCData()      inline RCData(const nervosys::autonomylib::RCData &s)      inline nervosys::autonomylib::RCData to() const    Public Members    uint64_t timestamp = 0      float pitch = 0      float roll = 0      float throttle = 0      float yaw = 0      float left_z = 0      float right_z = 0      uint16_t switches = 0      std::string vendor_id = \"\"      bool is_initialized = false      bool is_valid = false"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData18MSGPACK_DEFINE_MAPE9timestamp5pitch4roll8throttle3yaw6left_z7right_z8switches9vendor_id14is_initialized8is_valid", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::MSGPACK_DEFINE_MAP", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData6RCDataERKN8nervosys11autonomylib6RCDataE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::RCData", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData6RCDataEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::RCData", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData6RCDataERKN8nervosys11autonomylib6RCDataE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::RCData::s", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData14is_initializedE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::is_initialized", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData8is_validE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::is_valid", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData6left_zE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::left_z", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData5pitchE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::pitch", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData7right_zE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::right_z", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData4rollE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::roll", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData8switchesE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::switches", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData8throttleE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::throttle", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData9timestampE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::timestamp", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::to", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData9vendor_idE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::vendor_id", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData3yawE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::RCData::yaw", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2rE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector2r", "Public Functions    MSGPACK_DEFINE_MAP(x_val, y_val)      inline Vector2r()      inline Vector2r(const nervosys::autonomylib::Vector2r &s)      inline nervosys::autonomylib::Vector2r to() const    Public Members    nervosys::autonomylib::real_T x_val = 0      nervosys::autonomylib::real_T y_val = 0"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r18MSGPACK_DEFINE_MAPE5x_val5y_val", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector2r::MSGPACK_DEFINE_MAP", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r8Vector2rERKN8nervosys11autonomylib8Vector2rE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector2r::Vector2r", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r8Vector2rEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector2r::Vector2r", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r8Vector2rERKN8nervosys11autonomylib8Vector2rE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector2r::Vector2r::s", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector2r::to", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r5x_valE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector2r::x_val", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r5y_valE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector2r::y_val", ""], [73, 1, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3rE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector3r", "Public Functions    MSGPACK_DEFINE_MAP(x_val, y_val, z_val)      inline Vector3r()      inline Vector3r(const nervosys::autonomylib::Vector3r &s)      inline nervosys::autonomylib::Vector3r to() const    Public Members    nervosys::autonomylib::real_T x_val = 0      nervosys::autonomylib::real_T y_val = 0      nervosys::autonomylib::real_T z_val = 0"], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r18MSGPACK_DEFINE_MAPE5x_val5y_val5z_val", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector3r::MSGPACK_DEFINE_MAP", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r8Vector3rERKN8nervosys11autonomylib8Vector3rE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector3r::Vector3r", ""], [73, 0, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r8Vector3rEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector3r::Vector3r", ""], [73, 2, 2, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r8Vector3rERKN8nervosys11autonomylib8Vector3rE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector3r::Vector3r::s", ""], [73, 0, 1, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r2toEv", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector3r::to", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r5x_valE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector3r::x_val", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r5y_valE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector3r::y_val", ""], [73, 3, 1, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r5z_valE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::Vector3r::z_val", ""], [73, 0, 1, "_CPPv4I00EN8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4fromEvRKNSt6vectorI4TSrcEERNSt6vectorI5TDestEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::from", ""], [73, 7, 2, "_CPPv4I00EN8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4fromEvRKNSt6vectorI4TSrcEERNSt6vectorI5TDestEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::from::TDest", ""], [73, 7, 2, "_CPPv4I00EN8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4fromEvRKNSt6vectorI4TSrcEERNSt6vectorI5TDestEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::from::TSrc", ""], [73, 2, 2, "_CPPv4I00EN8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4fromEvRKNSt6vectorI4TSrcEERNSt6vectorI5TDestEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::from::d", ""], [73, 2, 2, "_CPPv4I00EN8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4fromEvRKNSt6vectorI4TSrcEERNSt6vectorI5TDestEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::from::s", ""], [73, 0, 1, "_CPPv4I00EN8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase2toEvRKNSt6vectorI4TSrcEERNSt6vectorI5TDestEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::to", ""], [73, 7, 2, "_CPPv4I00EN8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase2toEvRKNSt6vectorI4TSrcEERNSt6vectorI5TDestEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::to::TDest", ""], [73, 7, 2, "_CPPv4I00EN8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase2toEvRKNSt6vectorI4TSrcEERNSt6vectorI5TDestEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::to::TSrc", ""], [73, 2, 2, "_CPPv4I00EN8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase2toEvRKNSt6vectorI4TSrcEERNSt6vectorI5TDestEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::to::d", ""], [73, 2, 2, "_CPPv4I00EN8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase2toEvRKNSt6vectorI4TSrcEERNSt6vectorI5TDestEE", "nervosys::autonomylib_rpclib::RpcLibAdaptorsBase::to::s", ""], [74, 1, 1, "_CPPv4N13simple_flight18AdaptiveControllerE", "simple_flight::AdaptiveController", "Public Functions    inline virtual void initialize(const IGoal *goal, const IStateEstimator *state_estimator) override      inline virtual const Axis4r &getOutput() override      inline virtual bool isLastGoalModeAllPassthrough() override"], [74, 0, 1, "_CPPv4N13simple_flight18AdaptiveController9getOutputEv", "simple_flight::AdaptiveController::getOutput", ""], [74, 0, 1, "_CPPv4N13simple_flight18AdaptiveController10initializeEPK5IGoalPK15IStateEstimator", "simple_flight::AdaptiveController::initialize", ""], [74, 2, 2, "_CPPv4N13simple_flight18AdaptiveController10initializeEPK5IGoalPK15IStateEstimator", "simple_flight::AdaptiveController::initialize::goal", ""], [74, 2, 2, "_CPPv4N13simple_flight18AdaptiveController10initializeEPK5IGoalPK15IStateEstimator", "simple_flight::AdaptiveController::initialize::state_estimator", ""], [74, 0, 1, "_CPPv4N13simple_flight18AdaptiveController28isLastGoalModeAllPassthroughEv", "simple_flight::AdaptiveController::isLastGoalModeAllPassthrough", ""], [75, 1, 1, "_CPPv4N13simple_flight20AngleLevelControllerE", "simple_flight::AngleLevelController", "Public Functions    inline AngleLevelController(Params *params, const IBoardClock *clock = nullptr)      inline virtual void initialize(unsigned int axis, const IGoal *goal, const IStateEstimator *state_estimator) override      inline virtual void reset() override      inline virtual void update() override      inline virtual TReal getOutput() override      inline virtual const Axis4r &getGoalValue() const override      inline virtual const GoalMode &getGoalMode() const override"], [75, 0, 1, "_CPPv4N13simple_flight20AngleLevelController20AngleLevelControllerEP6ParamsPK11IBoardClock", "simple_flight::AngleLevelController::AngleLevelController", ""], [75, 2, 2, "_CPPv4N13simple_flight20AngleLevelController20AngleLevelControllerEP6ParamsPK11IBoardClock", "simple_flight::AngleLevelController::AngleLevelController::clock", ""], [75, 2, 2, "_CPPv4N13simple_flight20AngleLevelController20AngleLevelControllerEP6ParamsPK11IBoardClock", "simple_flight::AngleLevelController::AngleLevelController::params", ""], [75, 0, 1, "_CPPv4NK13simple_flight20AngleLevelController11getGoalModeEv", "simple_flight::AngleLevelController::getGoalMode", ""], [75, 0, 1, "_CPPv4NK13simple_flight20AngleLevelController12getGoalValueEv", "simple_flight::AngleLevelController::getGoalValue", ""], [75, 0, 1, "_CPPv4N13simple_flight20AngleLevelController9getOutputEv", "simple_flight::AngleLevelController::getOutput", ""], [75, 0, 1, "_CPPv4N13simple_flight20AngleLevelController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::AngleLevelController::initialize", ""], [75, 2, 2, "_CPPv4N13simple_flight20AngleLevelController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::AngleLevelController::initialize::axis", ""], [75, 2, 2, "_CPPv4N13simple_flight20AngleLevelController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::AngleLevelController::initialize::goal", ""], [75, 2, 2, "_CPPv4N13simple_flight20AngleLevelController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::AngleLevelController::initialize::state_estimator", ""], [75, 0, 1, "_CPPv4N13simple_flight20AngleLevelController5resetEv", "simple_flight::AngleLevelController::reset", ""], [75, 0, 1, "_CPPv4N13simple_flight20AngleLevelController6updateEv", "simple_flight::AngleLevelController::update", ""], [76, 1, 1, "_CPPv4N13simple_flight19AngleRateControllerE", "simple_flight::AngleRateController", "Public Functions    inline AngleRateController(Params *params, const IBoardClock *clock)      inline virtual void initialize(unsigned int axis, const IGoal *goal, const IStateEstimator *state_estimator) override      inline virtual void reset() override      inline virtual void update() override      inline virtual TReal getOutput() override"], [76, 0, 1, "_CPPv4N13simple_flight19AngleRateController19AngleRateControllerEP6ParamsPK11IBoardClock", "simple_flight::AngleRateController::AngleRateController", ""], [76, 2, 2, "_CPPv4N13simple_flight19AngleRateController19AngleRateControllerEP6ParamsPK11IBoardClock", "simple_flight::AngleRateController::AngleRateController::clock", ""], [76, 2, 2, "_CPPv4N13simple_flight19AngleRateController19AngleRateControllerEP6ParamsPK11IBoardClock", "simple_flight::AngleRateController::AngleRateController::params", ""], [76, 0, 1, "_CPPv4N13simple_flight19AngleRateController9getOutputEv", "simple_flight::AngleRateController::getOutput", ""], [76, 0, 1, "_CPPv4N13simple_flight19AngleRateController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::AngleRateController::initialize", ""], [76, 2, 2, "_CPPv4N13simple_flight19AngleRateController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::AngleRateController::initialize::axis", ""], [76, 2, 2, "_CPPv4N13simple_flight19AngleRateController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::AngleRateController::initialize::goal", ""], [76, 2, 2, "_CPPv4N13simple_flight19AngleRateController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::AngleRateController::initialize::state_estimator", ""], [76, 0, 1, "_CPPv4N13simple_flight19AngleRateController5resetEv", "simple_flight::AngleRateController::reset", ""], [76, 0, 1, "_CPPv4N13simple_flight19AngleRateController6updateEv", "simple_flight::AngleRateController::update", ""], [77, 1, 1, "_CPPv4I0EN13simple_flight5Axis3E", "simple_flight::Axis3", "Subclassed by simple_flight::Axis4< GoalModeType >, simple_flight::Axis4< TReal >, simple_flight::Axis4< int16_t >, simple_flight::Axis4< T >"], [77, 0, 1, "_CPPv4N13simple_flight5Axis35Axis3ERK1TRK1TRK1T", "simple_flight::Axis3::Axis3", ""], [77, 2, 2, "_CPPv4N13simple_flight5Axis35Axis3ERK1TRK1TRK1T", "simple_flight::Axis3::Axis3::x_val", ""], [77, 2, 2, "_CPPv4N13simple_flight5Axis35Axis3ERK1TRK1TRK1T", "simple_flight::Axis3::Axis3::y_val", ""], [77, 2, 2, "_CPPv4N13simple_flight5Axis35Axis3ERK1TRK1TRK1T", "simple_flight::Axis3::Axis3::z_val", ""], [77, 0, 1, "_CPPv4N13simple_flight5Axis39AxisCountEv", "simple_flight::Axis3::AxisCount", ""], [77, 7, 2, "_CPPv4I0EN13simple_flight5Axis3E", "simple_flight::Axis3::T", "Subclassed by simple_flight::Axis4< GoalModeType >, simple_flight::Axis4< TReal >, simple_flight::Axis4< int16_t >, simple_flight::Axis4< T >"], [77, 0, 1, "_CPPv4NK13simple_flight5Axis316colWiseMultiply3ERK5Axis3I1TE", "simple_flight::Axis3::colWiseMultiply3", ""], [77, 2, 2, "_CPPv4NK13simple_flight5Axis316colWiseMultiply3ERK5Axis3I1TE", "simple_flight::Axis3::colWiseMultiply3::other", ""], [77, 0, 1, "_CPPv4NK13simple_flight5Axis37equals3ERK5Axis3I1TE", "simple_flight::Axis3::equals3", ""], [77, 2, 2, "_CPPv4NK13simple_flight5Axis37equals3ERK5Axis3I1TE", "simple_flight::Axis3::equals3::other", ""], [77, 0, 1, "_CPPv4N13simple_flight5Axis3ixEj", "simple_flight::Axis3::operator[]", ""], [77, 0, 1, "_CPPv4NK13simple_flight5Axis3ixEj", "simple_flight::Axis3::operator[]", ""], [77, 2, 2, "_CPPv4N13simple_flight5Axis3ixEj", "simple_flight::Axis3::operator[]::index", ""], [77, 2, 2, "_CPPv4NK13simple_flight5Axis3ixEj", "simple_flight::Axis3::operator[]::index", ""], [77, 0, 1, "_CPPv4N13simple_flight5Axis35pitchEv", "simple_flight::Axis3::pitch", ""], [77, 0, 1, "_CPPv4NK13simple_flight5Axis35pitchEv", "simple_flight::Axis3::pitch", ""], [77, 0, 1, "_CPPv4N13simple_flight5Axis34rollEv", "simple_flight::Axis3::roll", ""], [77, 0, 1, "_CPPv4NK13simple_flight5Axis34rollEv", "simple_flight::Axis3::roll", ""], [77, 0, 1, "_CPPv4NK13simple_flight5Axis38toStringEv", "simple_flight::Axis3::toString", ""], [77, 0, 1, "_CPPv4N13simple_flight5Axis31xEv", "simple_flight::Axis3::x", ""], [77, 0, 1, "_CPPv4NK13simple_flight5Axis31xEv", "simple_flight::Axis3::x", ""], [77, 0, 1, "_CPPv4N13simple_flight5Axis31yEv", "simple_flight::Axis3::y", ""], [77, 0, 1, "_CPPv4NK13simple_flight5Axis31yEv", "simple_flight::Axis3::y", ""], [77, 0, 1, "_CPPv4N13simple_flight5Axis33yawEv", "simple_flight::Axis3::yaw", ""], [77, 0, 1, "_CPPv4NK13simple_flight5Axis33yawEv", "simple_flight::Axis3::yaw", ""], [77, 0, 1, "_CPPv4N13simple_flight5Axis31zEv", "simple_flight::Axis3::z", ""], [77, 0, 1, "_CPPv4NK13simple_flight5Axis31zEv", "simple_flight::Axis3::z", ""], [77, 0, 1, "_CPPv4N13simple_flight5Axis34zeroEv", "simple_flight::Axis3::zero", ""], [77, 0, 1, "_CPPv4N13simple_flight5Axis3D0Ev", "simple_flight::Axis3::~Axis3", ""], [489, 4, 1, "_CPPv4N13simple_flight6Axis3rE", "simple_flight::Axis3r", ""], [78, 1, 1, "_CPPv4I0EN13simple_flight5Axis4E", "simple_flight::Axis4", "Public Functions    inline Axis4(const T &x_val = T(), const T &y_val = T(), const T &z_val = T(), const T &val4_val = T())      inline Axis4(const Axis3<T> &axis3_val, const T &val4_val = T())      inline void setAxis3(const Axis3<T> &axis3)      inline void setValues(const std::vector<T> &vals)      inline T &val4()      inline const T &val4() const      inline virtual T &operator[](unsigned int index) override      inline virtual const T &operator[](unsigned int index) const override      inline virtual std::string toString() const override      inline bool equals4(const Axis4<T> &other) const      inline Axis4<T> colWiseMultiply4(const Axis4<T> &other) const      inline T &throttle()      inline const T &throttle() const    Public Static Functions    static inline const Axis4<T> &zero()      static inline constexpr unsigned int AxisCount()      static inline Axis3<T> axis4ToXyz(const Axis4<T> axis4, bool swap_xy)      static inline Axis4<T> xyzToAxis4(const Axis3<T> xyz, bool swap_xy)"], [78, 0, 1, "_CPPv4N13simple_flight5Axis45Axis4ERK1TRK1TRK1TRK1T", "simple_flight::Axis4::Axis4", ""], [78, 0, 1, "_CPPv4N13simple_flight5Axis45Axis4ERK5Axis3I1TERK1T", "simple_flight::Axis4::Axis4", ""], [78, 2, 2, "_CPPv4N13simple_flight5Axis45Axis4ERK5Axis3I1TERK1T", "simple_flight::Axis4::Axis4::axis3_val", ""], [78, 2, 2, "_CPPv4N13simple_flight5Axis45Axis4ERK1TRK1TRK1TRK1T", "simple_flight::Axis4::Axis4::val4_val", ""], [78, 2, 2, "_CPPv4N13simple_flight5Axis45Axis4ERK5Axis3I1TERK1T", "simple_flight::Axis4::Axis4::val4_val", ""], [78, 2, 2, "_CPPv4N13simple_flight5Axis45Axis4ERK1TRK1TRK1TRK1T", "simple_flight::Axis4::Axis4::x_val", ""], [78, 2, 2, "_CPPv4N13simple_flight5Axis45Axis4ERK1TRK1TRK1TRK1T", "simple_flight::Axis4::Axis4::y_val", ""], [78, 2, 2, "_CPPv4N13simple_flight5Axis45Axis4ERK1TRK1TRK1TRK1T", "simple_flight::Axis4::Axis4::z_val", ""], [78, 0, 1, "_CPPv4N13simple_flight5Axis49AxisCountEv", "simple_flight::Axis4::AxisCount", ""], [78, 7, 2, "_CPPv4I0EN13simple_flight5Axis4E", "simple_flight::Axis4::T", "Public Functions    inline Axis4(const T &x_val = T(), const T &y_val = T(), const T &z_val = T(), const T &val4_val = T())      inline Axis4(const Axis3<T> &axis3_val, const T &val4_val = T())      inline void setAxis3(const Axis3<T> &axis3)      inline void setValues(const std::vector<T> &vals)      inline T &val4()      inline const T &val4() const      inline virtual T &operator[](unsigned int index) override      inline virtual const T &operator[](unsigned int index) const override      inline virtual std::string toString() const override      inline bool equals4(const Axis4<T> &other) const      inline Axis4<T> colWiseMultiply4(const Axis4<T> &other) const      inline T &throttle()      inline const T &throttle() const    Public Static Functions    static inline const Axis4<T> &zero()      static inline constexpr unsigned int AxisCount()      static inline Axis3<T> axis4ToXyz(const Axis4<T> axis4, bool swap_xy)      static inline Axis4<T> xyzToAxis4(const Axis3<T> xyz, bool swap_xy)"], [78, 0, 1, "_CPPv4N13simple_flight5Axis410axis4ToXyzEK5Axis4I1TEb", "simple_flight::Axis4::axis4ToXyz", ""], [78, 2, 2, "_CPPv4N13simple_flight5Axis410axis4ToXyzEK5Axis4I1TEb", "simple_flight::Axis4::axis4ToXyz::axis4", ""], [78, 2, 2, "_CPPv4N13simple_flight5Axis410axis4ToXyzEK5Axis4I1TEb", "simple_flight::Axis4::axis4ToXyz::swap_xy", ""], [78, 0, 1, "_CPPv4NK13simple_flight5Axis416colWiseMultiply4ERK5Axis4I1TE", "simple_flight::Axis4::colWiseMultiply4", ""], [78, 2, 2, "_CPPv4NK13simple_flight5Axis416colWiseMultiply4ERK5Axis4I1TE", "simple_flight::Axis4::colWiseMultiply4::other", ""], [78, 0, 1, "_CPPv4NK13simple_flight5Axis47equals4ERK5Axis4I1TE", "simple_flight::Axis4::equals4", ""], [78, 2, 2, "_CPPv4NK13simple_flight5Axis47equals4ERK5Axis4I1TE", "simple_flight::Axis4::equals4::other", ""], [78, 0, 1, "_CPPv4N13simple_flight5Axis4ixEj", "simple_flight::Axis4::operator[]", ""], [78, 0, 1, "_CPPv4NK13simple_flight5Axis4ixEj", "simple_flight::Axis4::operator[]", ""], [78, 2, 2, "_CPPv4N13simple_flight5Axis4ixEj", "simple_flight::Axis4::operator[]::index", ""], [78, 2, 2, "_CPPv4NK13simple_flight5Axis4ixEj", "simple_flight::Axis4::operator[]::index", ""], [78, 0, 1, "_CPPv4N13simple_flight5Axis48setAxis3ERK5Axis3I1TE", "simple_flight::Axis4::setAxis3", ""], [78, 2, 2, "_CPPv4N13simple_flight5Axis48setAxis3ERK5Axis3I1TE", "simple_flight::Axis4::setAxis3::axis3", ""], [78, 0, 1, "_CPPv4N13simple_flight5Axis49setValuesERKNSt6vectorI1TEE", "simple_flight::Axis4::setValues", ""], [78, 2, 2, "_CPPv4N13simple_flight5Axis49setValuesERKNSt6vectorI1TEE", "simple_flight::Axis4::setValues::vals", ""], [78, 0, 1, "_CPPv4N13simple_flight5Axis48throttleEv", "simple_flight::Axis4::throttle", ""], [78, 0, 1, "_CPPv4NK13simple_flight5Axis48throttleEv", "simple_flight::Axis4::throttle", ""], [78, 0, 1, "_CPPv4NK13simple_flight5Axis48toStringEv", "simple_flight::Axis4::toString", ""], [78, 0, 1, "_CPPv4N13simple_flight5Axis44val4Ev", "simple_flight::Axis4::val4", ""], [78, 0, 1, "_CPPv4NK13simple_flight5Axis44val4Ev", "simple_flight::Axis4::val4", ""], [78, 0, 1, "_CPPv4N13simple_flight5Axis410xyzToAxis4EK5Axis3I1TEb", "simple_flight::Axis4::xyzToAxis4", ""], [78, 2, 2, "_CPPv4N13simple_flight5Axis410xyzToAxis4EK5Axis3I1TEb", "simple_flight::Axis4::xyzToAxis4::swap_xy", ""], [78, 2, 2, "_CPPv4N13simple_flight5Axis410xyzToAxis4EK5Axis3I1TEb", "simple_flight::Axis4::xyzToAxis4::xyz", ""], [78, 0, 1, "_CPPv4N13simple_flight5Axis44zeroEv", "simple_flight::Axis4::zero", ""], [488, 4, 1, "_CPPv4N13simple_flight6Axis4rE", "simple_flight::Axis4r", ""], [79, 1, 1, "_CPPv4N13simple_flight17CascadeControllerE", "simple_flight::CascadeController", "Public Functions    inline CascadeController(Params *params, const IBoardClock *clock, ICommLink *comm_link)      inline virtual void initialize(const IGoal *goal, const IStateEstimator *state_estimator) override      inline virtual void reset() override      inline virtual void update() override      inline virtual const Axis4r &getOutput() override      inline virtual bool isLastGoalModeAllPassthrough() override"], [79, 0, 1, "_CPPv4N13simple_flight17CascadeController17CascadeControllerEP6ParamsPK11IBoardClockP9ICommLink", "simple_flight::CascadeController::CascadeController", ""], [79, 2, 2, "_CPPv4N13simple_flight17CascadeController17CascadeControllerEP6ParamsPK11IBoardClockP9ICommLink", "simple_flight::CascadeController::CascadeController::clock", ""], [79, 2, 2, "_CPPv4N13simple_flight17CascadeController17CascadeControllerEP6ParamsPK11IBoardClockP9ICommLink", "simple_flight::CascadeController::CascadeController::comm_link", ""], [79, 2, 2, "_CPPv4N13simple_flight17CascadeController17CascadeControllerEP6ParamsPK11IBoardClockP9ICommLink", "simple_flight::CascadeController::CascadeController::params", ""], [79, 0, 1, "_CPPv4N13simple_flight17CascadeController9getOutputEv", "simple_flight::CascadeController::getOutput", ""], [79, 0, 1, "_CPPv4N13simple_flight17CascadeController10initializeEPK5IGoalPK15IStateEstimator", "simple_flight::CascadeController::initialize", ""], [79, 2, 2, "_CPPv4N13simple_flight17CascadeController10initializeEPK5IGoalPK15IStateEstimator", "simple_flight::CascadeController::initialize::goal", ""], [79, 2, 2, "_CPPv4N13simple_flight17CascadeController10initializeEPK5IGoalPK15IStateEstimator", "simple_flight::CascadeController::initialize::state_estimator", ""], [79, 0, 1, "_CPPv4N13simple_flight17CascadeController28isLastGoalModeAllPassthroughEv", "simple_flight::CascadeController::isLastGoalModeAllPassthrough", ""], [79, 0, 1, "_CPPv4N13simple_flight17CascadeController5resetEv", "simple_flight::CascadeController::reset", ""], [79, 0, 1, "_CPPv4N13simple_flight17CascadeController6updateEv", "simple_flight::CascadeController::update", ""], [80, 1, 1, "_CPPv4N13simple_flight24ConstantOutputControllerE", "simple_flight::ConstantOutputController", "Public Functions    inline ConstantOutputController(TReal update_output = TReal(), TReal reset_output = TReal())      inline virtual void initialize(unsigned int axis, const IGoal *goal, const IStateEstimator *state_estimator) override      inline virtual void reset() override      inline virtual void update() override      inline virtual TReal getOutput() override"], [80, 0, 1, "_CPPv4N13simple_flight24ConstantOutputController24ConstantOutputControllerE5TReal5TReal", "simple_flight::ConstantOutputController::ConstantOutputController", ""], [80, 2, 2, "_CPPv4N13simple_flight24ConstantOutputController24ConstantOutputControllerE5TReal5TReal", "simple_flight::ConstantOutputController::ConstantOutputController::reset_output", ""], [80, 2, 2, "_CPPv4N13simple_flight24ConstantOutputController24ConstantOutputControllerE5TReal5TReal", "simple_flight::ConstantOutputController::ConstantOutputController::update_output", ""], [80, 0, 1, "_CPPv4N13simple_flight24ConstantOutputController9getOutputEv", "simple_flight::ConstantOutputController::getOutput", ""], [80, 0, 1, "_CPPv4N13simple_flight24ConstantOutputController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::ConstantOutputController::initialize", ""], [80, 2, 2, "_CPPv4N13simple_flight24ConstantOutputController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::ConstantOutputController::initialize::axis", ""], [80, 2, 2, "_CPPv4N13simple_flight24ConstantOutputController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::ConstantOutputController::initialize::goal", ""], [80, 2, 2, "_CPPv4N13simple_flight24ConstantOutputController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::ConstantOutputController::initialize::state_estimator", ""], [80, 0, 1, "_CPPv4N13simple_flight24ConstantOutputController5resetEv", "simple_flight::ConstantOutputController::reset", ""], [80, 0, 1, "_CPPv4N13simple_flight24ConstantOutputController6updateEv", "simple_flight::ConstantOutputController::update", ""], [81, 1, 1, "_CPPv4N13simple_flight8FirmwareE", "simple_flight::Firmware", "Public Functions    inline Firmware(Params *params, IBoard *board, ICommLink *comm_link, IStateEstimator *state_estimator)      inline virtual void reset() override      inline virtual void update() override      inline virtual IOffboardApi &offboardApi() override"], [81, 0, 1, "_CPPv4N13simple_flight8Firmware8FirmwareEP6ParamsP6IBoardP9ICommLinkP15IStateEstimator", "simple_flight::Firmware::Firmware", ""], [81, 2, 2, "_CPPv4N13simple_flight8Firmware8FirmwareEP6ParamsP6IBoardP9ICommLinkP15IStateEstimator", "simple_flight::Firmware::Firmware::board", ""], [81, 2, 2, "_CPPv4N13simple_flight8Firmware8FirmwareEP6ParamsP6IBoardP9ICommLinkP15IStateEstimator", "simple_flight::Firmware::Firmware::comm_link", ""], [81, 2, 2, "_CPPv4N13simple_flight8Firmware8FirmwareEP6ParamsP6IBoardP9ICommLinkP15IStateEstimator", "simple_flight::Firmware::Firmware::params", ""], [81, 2, 2, "_CPPv4N13simple_flight8Firmware8FirmwareEP6ParamsP6IBoardP9ICommLinkP15IStateEstimator", "simple_flight::Firmware::Firmware::state_estimator", ""], [81, 0, 1, "_CPPv4N13simple_flight8Firmware11offboardApiEv", "simple_flight::Firmware::offboardApi", ""], [81, 0, 1, "_CPPv4N13simple_flight8Firmware5resetEv", "simple_flight::Firmware::reset", ""], [81, 0, 1, "_CPPv4N13simple_flight8Firmware6updateEv", "simple_flight::Firmware::update", ""], [472, 1, 1, "_CPPv4N13simple_flight8GeoPointE", "simple_flight::GeoPoint", "Public Functions    inline GeoPoint()    Public Members    double latitude = std::numeric_limits<double>::quiet_NaN()      double longitude = std::numeric_limits<double>::quiet_NaN()      float altiude = std::numeric_limits<float>::quiet_NaN()    Public Static Functions    static inline const GeoPoint &nan()"], [472, 0, 1, "_CPPv4N13simple_flight8GeoPoint8GeoPointEv", "simple_flight::GeoPoint::GeoPoint", ""], [472, 3, 1, "_CPPv4N13simple_flight8GeoPoint7altiudeE", "simple_flight::GeoPoint::altiude", ""], [472, 3, 1, "_CPPv4N13simple_flight8GeoPoint8latitudeE", "simple_flight::GeoPoint::latitude", ""], [472, 3, 1, "_CPPv4N13simple_flight8GeoPoint9longitudeE", "simple_flight::GeoPoint::longitude", ""], [472, 0, 1, "_CPPv4N13simple_flight8GeoPoint3nanEv", "simple_flight::GeoPoint::nan", ""], [82, 1, 1, "_CPPv4N13simple_flight8GoalModeE", "simple_flight::GoalMode", "Public Functions    inline GoalMode(GoalModeType x_val = GoalModeType::AngleLevel, GoalModeType y_val = GoalModeType::AngleLevel, GoalModeType z_val = GoalModeType::AngleRate, GoalModeType val4_val = GoalModeType::Passthrough)    Public Static Functions    static inline const GoalMode &getStandardAngleMode()      static inline const GoalMode &getVelocityXYPosZMode()      static inline const GoalMode &getVelocityMode()      static inline const GoalMode &getPositionMode()      static inline const GoalMode &getAllRateMode()      static inline const GoalMode &getUnknown()"], [82, 0, 1, "_CPPv4N13simple_flight8GoalMode8GoalModeE12GoalModeType12GoalModeType12GoalModeType12GoalModeType", "simple_flight::GoalMode::GoalMode", ""], [82, 2, 2, "_CPPv4N13simple_flight8GoalMode8GoalModeE12GoalModeType12GoalModeType12GoalModeType12GoalModeType", "simple_flight::GoalMode::GoalMode::val4_val", ""], [82, 2, 2, "_CPPv4N13simple_flight8GoalMode8GoalModeE12GoalModeType12GoalModeType12GoalModeType12GoalModeType", "simple_flight::GoalMode::GoalMode::x_val", ""], [82, 2, 2, "_CPPv4N13simple_flight8GoalMode8GoalModeE12GoalModeType12GoalModeType12GoalModeType12GoalModeType", "simple_flight::GoalMode::GoalMode::y_val", ""], [82, 2, 2, "_CPPv4N13simple_flight8GoalMode8GoalModeE12GoalModeType12GoalModeType12GoalModeType12GoalModeType", "simple_flight::GoalMode::GoalMode::z_val", ""], [82, 0, 1, "_CPPv4N13simple_flight8GoalMode14getAllRateModeEv", "simple_flight::GoalMode::getAllRateMode", ""], [82, 0, 1, "_CPPv4N13simple_flight8GoalMode15getPositionModeEv", "simple_flight::GoalMode::getPositionMode", ""], [82, 0, 1, "_CPPv4N13simple_flight8GoalMode20getStandardAngleModeEv", "simple_flight::GoalMode::getStandardAngleMode", ""], [82, 0, 1, "_CPPv4N13simple_flight8GoalMode10getUnknownEv", "simple_flight::GoalMode::getUnknown", ""], [82, 0, 1, "_CPPv4N13simple_flight8GoalMode15getVelocityModeEv", "simple_flight::GoalMode::getVelocityMode", ""], [82, 0, 1, "_CPPv4N13simple_flight8GoalMode21getVelocityXYPosZModeEv", "simple_flight::GoalMode::getVelocityXYPosZMode", ""], [157, 5, 1, "_CPPv4N13simple_flight12GoalModeTypeE", "simple_flight::GoalModeType", "Values:"], [157, 6, 1, "_CPPv4N13simple_flight12GoalModeType10AngleLevelE", "simple_flight::GoalModeType::AngleLevel", ""], [157, 6, 1, "_CPPv4N13simple_flight12GoalModeType9AngleRateE", "simple_flight::GoalModeType::AngleRate", ""], [157, 6, 1, "_CPPv4N13simple_flight12GoalModeType14ConstantOutputE", "simple_flight::GoalModeType::ConstantOutput", ""], [157, 6, 1, "_CPPv4N13simple_flight12GoalModeType11PassthroughE", "simple_flight::GoalModeType::Passthrough", ""], [157, 6, 1, "_CPPv4N13simple_flight12GoalModeType13PositionWorldE", "simple_flight::GoalModeType::PositionWorld", ""], [157, 6, 1, "_CPPv4N13simple_flight12GoalModeType7UnknownE", "simple_flight::GoalModeType::Unknown", ""], [157, 6, 1, "_CPPv4N13simple_flight12GoalModeType13VelocityWorldE", "simple_flight::GoalModeType::VelocityWorld", ""], [83, 1, 1, "_CPPv4N13simple_flight15IAxisControllerE", "simple_flight::IAxisController", "Subclassed by simple_flight::AngleLevelController, simple_flight::AngleRateController, simple_flight::ConstantOutputController, simple_flight::PassthroughController, simple_flight::PositionController, simple_flight::VelocityController"], [83, 0, 1, "_CPPv4N13simple_flight15IAxisController9getOutputEv", "simple_flight::IAxisController::getOutput", ""], [83, 0, 1, "_CPPv4N13simple_flight15IAxisController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::IAxisController::initialize", ""], [83, 2, 2, "_CPPv4N13simple_flight15IAxisController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::IAxisController::initialize::axis", ""], [83, 2, 2, "_CPPv4N13simple_flight15IAxisController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::IAxisController::initialize::goal", ""], [83, 2, 2, "_CPPv4N13simple_flight15IAxisController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::IAxisController::initialize::state_estimator", ""], [83, 0, 1, "_CPPv4N13simple_flight15IAxisController5resetEv", "simple_flight::IAxisController::reset", ""], [84, 1, 1, "_CPPv4N13simple_flight6IBoardE", "simple_flight::IBoard", "Subclassed by nervosys::autonomylib::SimpleFlightBoard"], [85, 1, 1, "_CPPv4N13simple_flight11IBoardClockE", "simple_flight::IBoardClock", "Subclassed by simple_flight::IBoard"], [85, 0, 1, "_CPPv4NK13simple_flight11IBoardClock6microsEv", "simple_flight::IBoardClock::micros", ""], [85, 0, 1, "_CPPv4NK13simple_flight11IBoardClock6millisEv", "simple_flight::IBoardClock::millis", ""], [85, 0, 1, "_CPPv4N13simple_flight11IBoardClockD0Ev", "simple_flight::IBoardClock::~IBoardClock", ""], [86, 1, 1, "_CPPv4N13simple_flight15IBoardInputPinsE", "simple_flight::IBoardInputPins", "Subclassed by simple_flight::IBoard"], [86, 0, 1, "_CPPv4NK13simple_flight15IBoardInputPins17getAvgMotorOutputEv", "simple_flight::IBoardInputPins::getAvgMotorOutput", ""], [86, 0, 1, "_CPPv4NK13simple_flight15IBoardInputPins13isRcConnectedEv", "simple_flight::IBoardInputPins::isRcConnected", ""], [86, 0, 1, "_CPPv4NK13simple_flight15IBoardInputPins11readChannelE8uint16_t", "simple_flight::IBoardInputPins::readChannel", ""], [86, 2, 2, "_CPPv4NK13simple_flight15IBoardInputPins11readChannelE8uint16_t", "simple_flight::IBoardInputPins::readChannel::index", ""], [86, 0, 1, "_CPPv4N13simple_flight15IBoardInputPinsD0Ev", "simple_flight::IBoardInputPins::~IBoardInputPins", ""], [87, 1, 1, "_CPPv4N13simple_flight16IBoardOutputPinsE", "simple_flight::IBoardOutputPins", "Subclassed by simple_flight::IBoard"], [87, 0, 1, "_CPPv4N13simple_flight16IBoardOutputPins6setLedE7uint8_t7int32_t", "simple_flight::IBoardOutputPins::setLed", ""], [87, 2, 2, "_CPPv4N13simple_flight16IBoardOutputPins6setLedE7uint8_t7int32_t", "simple_flight::IBoardOutputPins::setLed::color", ""], [87, 2, 2, "_CPPv4N13simple_flight16IBoardOutputPins6setLedE7uint8_t7int32_t", "simple_flight::IBoardOutputPins::setLed::index", ""], [87, 0, 1, "_CPPv4N13simple_flight16IBoardOutputPins11writeOutputE8uint16_tf", "simple_flight::IBoardOutputPins::writeOutput", ""], [87, 2, 2, "_CPPv4N13simple_flight16IBoardOutputPins11writeOutputE8uint16_tf", "simple_flight::IBoardOutputPins::writeOutput::index", ""], [87, 2, 2, "_CPPv4N13simple_flight16IBoardOutputPins11writeOutputE8uint16_tf", "simple_flight::IBoardOutputPins::writeOutput::val", ""], [87, 0, 1, "_CPPv4N13simple_flight16IBoardOutputPinsD0Ev", "simple_flight::IBoardOutputPins::~IBoardOutputPins", ""], [88, 1, 1, "_CPPv4N13simple_flight13IBoardSensorsE", "simple_flight::IBoardSensors", "Subclassed by simple_flight::IBoard"], [88, 0, 1, "_CPPv4NK13simple_flight13IBoardSensors9readAccelEAL3E_f", "simple_flight::IBoardSensors::readAccel", ""], [88, 2, 2, "_CPPv4NK13simple_flight13IBoardSensors9readAccelEAL3E_f", "simple_flight::IBoardSensors::readAccel::accel", ""], [88, 0, 1, "_CPPv4NK13simple_flight13IBoardSensors8readGyroEAL3E_f", "simple_flight::IBoardSensors::readGyro", ""], [88, 2, 2, "_CPPv4NK13simple_flight13IBoardSensors8readGyroEAL3E_f", "simple_flight::IBoardSensors::readGyro::gyro", ""], [88, 0, 1, "_CPPv4N13simple_flight13IBoardSensorsD0Ev", "simple_flight::IBoardSensors::~IBoardSensors", ""], [89, 1, 1, "_CPPv4N13simple_flight9ICommLinkE", "simple_flight::ICommLink", "Subclassed by nervosys::autonomylib::SimpleFlightCommLink"], [89, 3, 1, "_CPPv4N13simple_flight9ICommLink14kLogLevelErrorE", "simple_flight::ICommLink::kLogLevelError", ""], [89, 3, 1, "_CPPv4N13simple_flight9ICommLink13kLogLevelInfoE", "simple_flight::ICommLink::kLogLevelInfo", ""], [89, 3, 1, "_CPPv4N13simple_flight9ICommLink13kLogLevelWarnE", "simple_flight::ICommLink::kLogLevelWarn", ""], [89, 0, 1, "_CPPv4N13simple_flight9ICommLink3logERKNSt6stringE7int32_t", "simple_flight::ICommLink::log", ""], [89, 2, 2, "_CPPv4N13simple_flight9ICommLink3logERKNSt6stringE7int32_t", "simple_flight::ICommLink::log::log_level", ""], [89, 2, 2, "_CPPv4N13simple_flight9ICommLink3logERKNSt6stringE7int32_t", "simple_flight::ICommLink::log::message", ""], [90, 1, 1, "_CPPv4N13simple_flight11IControllerE", "simple_flight::IController", "Subclassed by simple_flight::AdaptiveController, simple_flight::CascadeController"], [90, 0, 1, "_CPPv4N13simple_flight11IController9getOutputEv", "simple_flight::IController::getOutput", ""], [90, 0, 1, "_CPPv4N13simple_flight11IController10initializeEPK5IGoalPK15IStateEstimator", "simple_flight::IController::initialize", ""], [90, 2, 2, "_CPPv4N13simple_flight11IController10initializeEPK5IGoalPK15IStateEstimator", "simple_flight::IController::initialize::goal", ""], [90, 2, 2, "_CPPv4N13simple_flight11IController10initializeEPK5IGoalPK15IStateEstimator", "simple_flight::IController::initialize::state_estimator", ""], [90, 0, 1, "_CPPv4N13simple_flight11IController28isLastGoalModeAllPassthroughEv", "simple_flight::IController::isLastGoalModeAllPassthrough", ""], [91, 1, 1, "_CPPv4N13simple_flight9IFirmwareE", "simple_flight::IFirmware", "Subclassed by simple_flight::Firmware"], [91, 0, 1, "_CPPv4N13simple_flight9IFirmware11offboardApiEv", "simple_flight::IFirmware::offboardApi", ""], [92, 1, 1, "_CPPv4N13simple_flight5IGoalE", "simple_flight::IGoal", "Subclassed by simple_flight::AngleLevelController, simple_flight::IOffboardApi, simple_flight::PositionController, simple_flight::RemoteControl, simple_flight::VelocityController"], [92, 0, 1, "_CPPv4NK13simple_flight5IGoal11getGoalModeEv", "simple_flight::IGoal::getGoalMode", ""], [92, 0, 1, "_CPPv4NK13simple_flight5IGoal12getGoalValueEv", "simple_flight::IGoal::getGoalValue", ""], [92, 0, 1, "_CPPv4N13simple_flight5IGoalD0Ev", "simple_flight::IGoal::~IGoal", ""], [93, 1, 1, "_CPPv4N13simple_flight12IOffboardApiE", "simple_flight::IOffboardApi", "Subclassed by simple_flight::OffboardApi"], [93, 0, 1, "_CPPv4N13simple_flight12IOffboardApi3armERNSt6stringE", "simple_flight::IOffboardApi::arm", ""], [93, 2, 2, "_CPPv4N13simple_flight12IOffboardApi3armERNSt6stringE", "simple_flight::IOffboardApi::arm::message", ""], [93, 0, 1, "_CPPv4N13simple_flight12IOffboardApi20canRequestApiControlERNSt6stringE", "simple_flight::IOffboardApi::canRequestApiControl", ""], [93, 2, 2, "_CPPv4N13simple_flight12IOffboardApi20canRequestApiControlERNSt6stringE", "simple_flight::IOffboardApi::canRequestApiControl::message", ""], [93, 0, 1, "_CPPv4N13simple_flight12IOffboardApi6disarmERNSt6stringE", "simple_flight::IOffboardApi::disarm", ""], [93, 2, 2, "_CPPv4N13simple_flight12IOffboardApi6disarmERNSt6stringE", "simple_flight::IOffboardApi::disarm::message", ""], [93, 0, 1, "_CPPv4NK13simple_flight12IOffboardApi11getGeoPointEv", "simple_flight::IOffboardApi::getGeoPoint", ""], [93, 0, 1, "_CPPv4NK13simple_flight12IOffboardApi15getHomeGeoPointEv", "simple_flight::IOffboardApi::getHomeGeoPoint", ""], [93, 0, 1, "_CPPv4NK13simple_flight12IOffboardApi14getLandedStateEv", "simple_flight::IOffboardApi::getLandedState", ""], [93, 0, 1, "_CPPv4N13simple_flight12IOffboardApi17getStateEstimatorEv", "simple_flight::IOffboardApi::getStateEstimator", ""], [93, 0, 1, "_CPPv4NK13simple_flight12IOffboardApi15getVehicleStateEv", "simple_flight::IOffboardApi::getVehicleState", ""], [93, 0, 1, "_CPPv4N13simple_flight12IOffboardApi13hasApiControlEv", "simple_flight::IOffboardApi::hasApiControl", ""], [93, 0, 1, "_CPPv4N13simple_flight12IOffboardApi17releaseApiControlEv", "simple_flight::IOffboardApi::releaseApiControl", ""], [93, 0, 1, "_CPPv4N13simple_flight12IOffboardApi17requestApiControlERNSt6stringE", "simple_flight::IOffboardApi::requestApiControl", ""], [93, 2, 2, "_CPPv4N13simple_flight12IOffboardApi17requestApiControlERNSt6stringE", "simple_flight::IOffboardApi::requestApiControl::message", ""], [93, 0, 1, "_CPPv4N13simple_flight12IOffboardApi14setGoalAndModeEPK6Axis4rPK8GoalModeRNSt6stringE", "simple_flight::IOffboardApi::setGoalAndMode", ""], [93, 2, 2, "_CPPv4N13simple_flight12IOffboardApi14setGoalAndModeEPK6Axis4rPK8GoalModeRNSt6stringE", "simple_flight::IOffboardApi::setGoalAndMode::goal", ""], [93, 2, 2, "_CPPv4N13simple_flight12IOffboardApi14setGoalAndModeEPK6Axis4rPK8GoalModeRNSt6stringE", "simple_flight::IOffboardApi::setGoalAndMode::goal_mode", ""], [93, 2, 2, "_CPPv4N13simple_flight12IOffboardApi14setGoalAndModeEPK6Axis4rPK8GoalModeRNSt6stringE", "simple_flight::IOffboardApi::setGoalAndMode::message", ""], [94, 1, 1, "_CPPv4I0EN13simple_flight14IPidIntegratorE", "simple_flight::IPidIntegrator", "Subclassed by simple_flight::RungKuttaPidIntegrator< T >, simple_flight::StdPidIntegrator< T >"], [94, 7, 2, "_CPPv4I0EN13simple_flight14IPidIntegratorE", "simple_flight::IPidIntegrator::T", "Subclassed by simple_flight::RungKuttaPidIntegrator< T >, simple_flight::StdPidIntegrator< T >"], [94, 0, 1, "_CPPv4N13simple_flight14IPidIntegrator9getOutputEv", "simple_flight::IPidIntegrator::getOutput", ""], [94, 0, 1, "_CPPv4N13simple_flight14IPidIntegrator5resetEv", "simple_flight::IPidIntegrator::reset", ""], [94, 0, 1, "_CPPv4N13simple_flight14IPidIntegrator3setE1T", "simple_flight::IPidIntegrator::set", ""], [94, 2, 2, "_CPPv4N13simple_flight14IPidIntegrator3setE1T", "simple_flight::IPidIntegrator::set::val", ""], [94, 0, 1, "_CPPv4N13simple_flight14IPidIntegrator6updateEf1T8uint64_t", "simple_flight::IPidIntegrator::update", ""], [94, 2, 2, "_CPPv4N13simple_flight14IPidIntegrator6updateEf1T8uint64_t", "simple_flight::IPidIntegrator::update::dt", ""], [94, 2, 2, "_CPPv4N13simple_flight14IPidIntegrator6updateEf1T8uint64_t", "simple_flight::IPidIntegrator::update::error", ""], [94, 2, 2, "_CPPv4N13simple_flight14IPidIntegrator6updateEf1T8uint64_t", "simple_flight::IPidIntegrator::update::last_time", ""], [94, 0, 1, "_CPPv4N13simple_flight14IPidIntegratorD0Ev", "simple_flight::IPidIntegrator::~IPidIntegrator", ""], [95, 1, 1, "_CPPv4N13simple_flight15IStateEstimatorE", "simple_flight::IStateEstimator", "Subclassed by nervosys::autonomylib::SimpleFlightEstimator"], [95, 0, 1, "_CPPv4NK13simple_flight15IStateEstimator9getAnglesEv", "simple_flight::IStateEstimator::getAngles", ""], [95, 0, 1, "_CPPv4NK13simple_flight15IStateEstimator18getAngularVelocityEv", "simple_flight::IStateEstimator::getAngularVelocity", ""], [95, 0, 1, "_CPPv4NK13simple_flight15IStateEstimator11getGeoPointEv", "simple_flight::IStateEstimator::getGeoPoint", ""], [95, 0, 1, "_CPPv4NK13simple_flight15IStateEstimator15getHomeGeoPointEv", "simple_flight::IStateEstimator::getHomeGeoPoint", ""], [95, 0, 1, "_CPPv4NK13simple_flight15IStateEstimator22getKinematicsEstimatedEv", "simple_flight::IStateEstimator::getKinematicsEstimated", ""], [95, 0, 1, "_CPPv4NK13simple_flight15IStateEstimator17getLinearVelocityEv", "simple_flight::IStateEstimator::getLinearVelocity", ""], [95, 0, 1, "_CPPv4NK13simple_flight15IStateEstimator14getOrientationEv", "simple_flight::IStateEstimator::getOrientation", ""], [95, 0, 1, "_CPPv4NK13simple_flight15IStateEstimator11getPositionEv", "simple_flight::IStateEstimator::getPosition", ""], [95, 0, 1, "_CPPv4NK13simple_flight15IStateEstimator20transformToBodyFrameERK6Axis3r", "simple_flight::IStateEstimator::transformToBodyFrame", ""], [95, 2, 2, "_CPPv4NK13simple_flight15IStateEstimator20transformToBodyFrameERK6Axis3r", "simple_flight::IStateEstimator::transformToBodyFrame::world_frame_val", ""], [95, 0, 1, "_CPPv4N13simple_flight15IStateEstimatorD0Ev", "simple_flight::IStateEstimator::~IStateEstimator", ""], [96, 1, 1, "_CPPv4N13simple_flight10IUpdatableE", "simple_flight::IUpdatable", "Subclassed by simple_flight::IAxisController, simple_flight::IBoard, simple_flight::ICommLink, simple_flight::IController, simple_flight::IFirmware, simple_flight::OffboardApi, simple_flight::PidController< T >, simple_flight::RemoteControl"], [96, 0, 1, "_CPPv4N13simple_flight10IUpdatable23clearResetUpdateAssertsEv", "simple_flight::IUpdatable::clearResetUpdateAsserts", ""], [96, 0, 1, "_CPPv4N13simple_flight10IUpdatable5resetEv", "simple_flight::IUpdatable::reset", ""], [96, 0, 1, "_CPPv4N13simple_flight10IUpdatable6updateEv", "simple_flight::IUpdatable::update", ""], [96, 0, 1, "_CPPv4N13simple_flight10IUpdatableD0Ev", "simple_flight::IUpdatable::~IUpdatable", ""], [473, 1, 1, "_CPPv4N13simple_flight15KinematicsStateE", "simple_flight::KinematicsState", "Public Members    Axis3r position      Axis4r orientation      Axis3r linear_velocity      Axis3r angular_velocity      Axis3r linear_acceleration      Axis3r angular_acceleration"], [473, 3, 1, "_CPPv4N13simple_flight15KinematicsState20angular_accelerationE", "simple_flight::KinematicsState::angular_acceleration", ""], [473, 3, 1, "_CPPv4N13simple_flight15KinematicsState16angular_velocityE", "simple_flight::KinematicsState::angular_velocity", ""], [473, 3, 1, "_CPPv4N13simple_flight15KinematicsState19linear_accelerationE", "simple_flight::KinematicsState::linear_acceleration", ""], [473, 3, 1, "_CPPv4N13simple_flight15KinematicsState15linear_velocityE", "simple_flight::KinematicsState::linear_velocity", ""], [473, 3, 1, "_CPPv4N13simple_flight15KinematicsState11orientationE", "simple_flight::KinematicsState::orientation", ""], [473, 3, 1, "_CPPv4N13simple_flight15KinematicsState8positionE", "simple_flight::KinematicsState::position", ""], [97, 1, 1, "_CPPv4N13simple_flight5MixerE", "simple_flight::Mixer", "Public Functions    inline Mixer(const Params *params)      inline void getMotorOutput(const Axis4r &controls, std::vector<float> &motor_outputs) const"], [97, 0, 1, "_CPPv4N13simple_flight5Mixer5MixerEPK6Params", "simple_flight::Mixer::Mixer", ""], [97, 2, 2, "_CPPv4N13simple_flight5Mixer5MixerEPK6Params", "simple_flight::Mixer::Mixer::params", ""], [97, 0, 1, "_CPPv4NK13simple_flight5Mixer14getMotorOutputERK6Axis4rRNSt6vectorIfEE", "simple_flight::Mixer::getMotorOutput", ""], [97, 2, 2, "_CPPv4NK13simple_flight5Mixer14getMotorOutputERK6Axis4rRNSt6vectorIfEE", "simple_flight::Mixer::getMotorOutput::controls", ""], [97, 2, 2, "_CPPv4NK13simple_flight5Mixer14getMotorOutputERK6Axis4rRNSt6vectorIfEE", "simple_flight::Mixer::getMotorOutput::motor_outputs", ""], [474, 1, 1, "_CPPv4N13simple_flight5Mixer12motorMixer_tE", "simple_flight::Mixer::motorMixer_t", "Public Members    float throttle      float roll      float pitch      float yaw"], [474, 3, 1, "_CPPv4N13simple_flight5Mixer12motorMixer_t5pitchE", "simple_flight::Mixer::motorMixer_t::pitch", ""], [474, 3, 1, "_CPPv4N13simple_flight5Mixer12motorMixer_t4rollE", "simple_flight::Mixer::motorMixer_t::roll", ""], [474, 3, 1, "_CPPv4N13simple_flight5Mixer12motorMixer_t8throttleE", "simple_flight::Mixer::motorMixer_t::throttle", ""], [474, 3, 1, "_CPPv4N13simple_flight5Mixer12motorMixer_t3yawE", "simple_flight::Mixer::motorMixer_t::yaw", ""], [98, 1, 1, "_CPPv4N13simple_flight11OffboardApiE", "simple_flight::OffboardApi", "Public Functions    inline OffboardApi(const Params *params, const IBoardClock *clock, const IBoardInputPins *board_inputs, IStateEstimator *state_estimator, ICommLink *comm_link)      inline virtual void reset() override      inline virtual void update() override      inline virtual const Axis4r &getGoalValue() const override      inline virtual const GoalMode &getGoalMode() const override      inline virtual bool canRequestApiControl(std::string &message) override      inline virtual bool hasApiControl() override      inline virtual bool requestApiControl(std::string &message) override      inline virtual void releaseApiControl() override      inline virtual bool setGoalAndMode(const Axis4r *goal, const GoalMode *goal_mode, std::string &message) override      inline virtual bool arm(std::string &message) override      inline virtual bool disarm(std::string &message) override      inline virtual VehicleStateType getVehicleState() const override      inline virtual const IStateEstimator &getStateEstimator() override      inline virtual GeoPoint getHomeGeoPoint() const override      inline virtual GeoPoint getGeoPoint() const override      inline virtual bool getLandedState() const override"], [98, 0, 1, "_CPPv4N13simple_flight11OffboardApi11OffboardApiEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP15IStateEstimatorP9ICommLink", "simple_flight::OffboardApi::OffboardApi", ""], [98, 2, 2, "_CPPv4N13simple_flight11OffboardApi11OffboardApiEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP15IStateEstimatorP9ICommLink", "simple_flight::OffboardApi::OffboardApi::board_inputs", ""], [98, 2, 2, "_CPPv4N13simple_flight11OffboardApi11OffboardApiEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP15IStateEstimatorP9ICommLink", "simple_flight::OffboardApi::OffboardApi::clock", ""], [98, 2, 2, "_CPPv4N13simple_flight11OffboardApi11OffboardApiEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP15IStateEstimatorP9ICommLink", "simple_flight::OffboardApi::OffboardApi::comm_link", ""], [98, 2, 2, "_CPPv4N13simple_flight11OffboardApi11OffboardApiEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP15IStateEstimatorP9ICommLink", "simple_flight::OffboardApi::OffboardApi::params", ""], [98, 2, 2, "_CPPv4N13simple_flight11OffboardApi11OffboardApiEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP15IStateEstimatorP9ICommLink", "simple_flight::OffboardApi::OffboardApi::state_estimator", ""], [98, 0, 1, "_CPPv4N13simple_flight11OffboardApi3armERNSt6stringE", "simple_flight::OffboardApi::arm", ""], [98, 2, 2, "_CPPv4N13simple_flight11OffboardApi3armERNSt6stringE", "simple_flight::OffboardApi::arm::message", ""], [98, 0, 1, "_CPPv4N13simple_flight11OffboardApi20canRequestApiControlERNSt6stringE", "simple_flight::OffboardApi::canRequestApiControl", ""], [98, 2, 2, "_CPPv4N13simple_flight11OffboardApi20canRequestApiControlERNSt6stringE", "simple_flight::OffboardApi::canRequestApiControl::message", ""], [98, 0, 1, "_CPPv4N13simple_flight11OffboardApi6disarmERNSt6stringE", "simple_flight::OffboardApi::disarm", ""], [98, 2, 2, "_CPPv4N13simple_flight11OffboardApi6disarmERNSt6stringE", "simple_flight::OffboardApi::disarm::message", ""], [98, 0, 1, "_CPPv4NK13simple_flight11OffboardApi11getGeoPointEv", "simple_flight::OffboardApi::getGeoPoint", ""], [98, 0, 1, "_CPPv4NK13simple_flight11OffboardApi11getGoalModeEv", "simple_flight::OffboardApi::getGoalMode", ""], [98, 0, 1, "_CPPv4NK13simple_flight11OffboardApi12getGoalValueEv", "simple_flight::OffboardApi::getGoalValue", ""], [98, 0, 1, "_CPPv4NK13simple_flight11OffboardApi15getHomeGeoPointEv", "simple_flight::OffboardApi::getHomeGeoPoint", ""], [98, 0, 1, "_CPPv4NK13simple_flight11OffboardApi14getLandedStateEv", "simple_flight::OffboardApi::getLandedState", ""], [98, 0, 1, "_CPPv4N13simple_flight11OffboardApi17getStateEstimatorEv", "simple_flight::OffboardApi::getStateEstimator", ""], [98, 0, 1, "_CPPv4NK13simple_flight11OffboardApi15getVehicleStateEv", "simple_flight::OffboardApi::getVehicleState", ""], [98, 0, 1, "_CPPv4N13simple_flight11OffboardApi13hasApiControlEv", "simple_flight::OffboardApi::hasApiControl", ""], [98, 0, 1, "_CPPv4N13simple_flight11OffboardApi17releaseApiControlEv", "simple_flight::OffboardApi::releaseApiControl", ""], [98, 0, 1, "_CPPv4N13simple_flight11OffboardApi17requestApiControlERNSt6stringE", "simple_flight::OffboardApi::requestApiControl", ""], [98, 2, 2, "_CPPv4N13simple_flight11OffboardApi17requestApiControlERNSt6stringE", "simple_flight::OffboardApi::requestApiControl::message", ""], [98, 0, 1, "_CPPv4N13simple_flight11OffboardApi5resetEv", "simple_flight::OffboardApi::reset", ""], [98, 0, 1, "_CPPv4N13simple_flight11OffboardApi14setGoalAndModeEPK6Axis4rPK8GoalModeRNSt6stringE", "simple_flight::OffboardApi::setGoalAndMode", ""], [98, 2, 2, "_CPPv4N13simple_flight11OffboardApi14setGoalAndModeEPK6Axis4rPK8GoalModeRNSt6stringE", "simple_flight::OffboardApi::setGoalAndMode::goal", ""], [98, 2, 2, "_CPPv4N13simple_flight11OffboardApi14setGoalAndModeEPK6Axis4rPK8GoalModeRNSt6stringE", "simple_flight::OffboardApi::setGoalAndMode::goal_mode", ""], [98, 2, 2, "_CPPv4N13simple_flight11OffboardApi14setGoalAndModeEPK6Axis4rPK8GoalModeRNSt6stringE", "simple_flight::OffboardApi::setGoalAndMode::message", ""], [98, 0, 1, "_CPPv4N13simple_flight11OffboardApi6updateEv", "simple_flight::OffboardApi::update", ""], [475, 1, 1, "_CPPv4N13simple_flight6ParamsE", "simple_flight::Params", "Values:"], [475, 1, 1, "_CPPv4N13simple_flight6Params13AngleLevelPidE", "simple_flight::Params::AngleLevelPid", "Public Members    const float pi = 3.14159265359f      const float kP = 2.5f      const float kI = 0.0f      const float kD = 0.0f      Axis4r max_limit = Axis4r(pi / 5.5f, pi / 5.5f, pi, 1.0f)      Axis4r p = Axis4r(kP, kP, kP, 1.0f)      Axis4r i = Axis4r(kI, kI, kI, 0.0f)      Axis4r d = Axis4r(kD, kD, kD, 0.0f)"], [475, 3, 1, "_CPPv4N13simple_flight6Params13AngleLevelPid1dE", "simple_flight::Params::AngleLevelPid::d", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params13AngleLevelPid1iE", "simple_flight::Params::AngleLevelPid::i", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params13AngleLevelPid2kDE", "simple_flight::Params::AngleLevelPid::kD", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params13AngleLevelPid2kIE", "simple_flight::Params::AngleLevelPid::kI", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params13AngleLevelPid2kPE", "simple_flight::Params::AngleLevelPid::kP", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params13AngleLevelPid9max_limitE", "simple_flight::Params::AngleLevelPid::max_limit", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params13AngleLevelPid1pE", "simple_flight::Params::AngleLevelPid::p", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params13AngleLevelPid2piE", "simple_flight::Params::AngleLevelPid::pi", ""], [475, 1, 1, "_CPPv4N13simple_flight6Params12AngleRatePidE", "simple_flight::Params::AngleRatePid", "Public Members    const float kMaxLimit = 2.5f      const float kP = 0.25f      const float kI = 0.0f      const float kD = 0.0f      Axis3r max_limit = Axis3r(kMaxLimit, kMaxLimit, kMaxLimit)      Axis4r p = Axis4r(kP, kP, kP, 1.0f)      Axis4r i = Axis4r(kI, kI, kI, 0.0f)      Axis4r d = Axis4r(kD, kD, kD, 0.0f)"], [475, 3, 1, "_CPPv4N13simple_flight6Params12AngleRatePid1dE", "simple_flight::Params::AngleRatePid::d", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params12AngleRatePid1iE", "simple_flight::Params::AngleRatePid::i", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params12AngleRatePid2kDE", "simple_flight::Params::AngleRatePid::kD", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params12AngleRatePid2kIE", "simple_flight::Params::AngleRatePid::kI", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params12AngleRatePid9kMaxLimitE", "simple_flight::Params::AngleRatePid::kMaxLimit", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params12AngleRatePid2kPE", "simple_flight::Params::AngleRatePid::kP", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params12AngleRatePid9max_limitE", "simple_flight::Params::AngleRatePid::max_limit", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params12AngleRatePid1pE", "simple_flight::Params::AngleRatePid::p", ""], [475, 5, 1, "_CPPv4N13simple_flight6Params14ControllerTypeE", "simple_flight::Params::ControllerType", "Values:"], [475, 6, 1, "_CPPv4N13simple_flight6Params14ControllerType8AdaptiveE", "simple_flight::Params::ControllerType::Adaptive", ""], [475, 6, 1, "_CPPv4N13simple_flight6Params14ControllerType7CascadeE", "simple_flight::Params::ControllerType::Cascade", ""], [475, 1, 1, "_CPPv4N13simple_flight6Params5MotorE", "simple_flight::Params::Motor", "Public Members    uint16_t motor_count = 4      float min_motor_output = 0      float max_motor_output = 1      float min_angling_throttle = Params::min_armed_throttle() / 2"], [475, 3, 1, "_CPPv4N13simple_flight6Params5Motor16max_motor_outputE", "simple_flight::Params::Motor::max_motor_output", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params5Motor20min_angling_throttleE", "simple_flight::Params::Motor::min_angling_throttle", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params5Motor16min_motor_outputE", "simple_flight::Params::Motor::min_motor_output", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params5Motor11motor_countE", "simple_flight::Params::Motor::motor_count", ""], [475, 1, 1, "_CPPv4N13simple_flight6Params11PositionPidE", "simple_flight::Params::PositionPid", "Public Members    const float kMaxLimit = 8.8E26f      const float kP = 0.25f      const float kI = 0.0f      const float kD = 0.0f      Axis4r max_limit = Axis4r(kMaxLimit, kMaxLimit, kMaxLimit, 1.0f)      Axis4r p = Axis4r(kP, kP, 0, kP)      Axis4r i = Axis4r(kI, kI, kI, kI)      Axis4r d = Axis4r(kD, kD, kD, kD)"], [475, 3, 1, "_CPPv4N13simple_flight6Params11PositionPid1dE", "simple_flight::Params::PositionPid::d", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11PositionPid1iE", "simple_flight::Params::PositionPid::i", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11PositionPid2kDE", "simple_flight::Params::PositionPid::kD", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11PositionPid2kIE", "simple_flight::Params::PositionPid::kI", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11PositionPid9kMaxLimitE", "simple_flight::Params::PositionPid::kMaxLimit", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11PositionPid2kPE", "simple_flight::Params::PositionPid::kP", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11PositionPid9max_limitE", "simple_flight::Params::PositionPid::max_limit", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11PositionPid1pE", "simple_flight::Params::PositionPid::p", ""], [475, 1, 1, "_CPPv4N13simple_flight6Params2RcE", "simple_flight::Params::Rc", "Public Members    uint16_t channel_count = 12      uint16_t read_interval_ms = 10      int16_t rate_level_mode_channel = 4      int16_t allow_api_control_channel = 5      float action_request_tolerance = 0.1f      uint64_t arm_duration = 100      uint64_t disarm_duration = 100      uint64_t neutral_duration = 100      Axis4<int16_t> channels = Axis4<int16_t>(0, 3, 1, 2)      TReal max_angle_level_switch = 0.3f      float min_angling_throttle = Params::min_armed_throttle() / 1.5f      bool allow_api_when_disconnected = false      bool allow_api_always = false"], [475, 3, 1, "_CPPv4N13simple_flight6Params2Rc24action_request_toleranceE", "simple_flight::Params::Rc::action_request_tolerance", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params2Rc16allow_api_alwaysE", "simple_flight::Params::Rc::allow_api_always", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params2Rc25allow_api_control_channelE", "simple_flight::Params::Rc::allow_api_control_channel", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params2Rc27allow_api_when_disconnectedE", "simple_flight::Params::Rc::allow_api_when_disconnected", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params2Rc12arm_durationE", "simple_flight::Params::Rc::arm_duration", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params2Rc13channel_countE", "simple_flight::Params::Rc::channel_count", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params2Rc8channelsE", "simple_flight::Params::Rc::channels", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params2Rc15disarm_durationE", "simple_flight::Params::Rc::disarm_duration", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params2Rc22max_angle_level_switchE", "simple_flight::Params::Rc::max_angle_level_switch", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params2Rc20min_angling_throttleE", "simple_flight::Params::Rc::min_angling_throttle", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params2Rc16neutral_durationE", "simple_flight::Params::Rc::neutral_duration", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params2Rc23rate_level_mode_channelE", "simple_flight::Params::Rc::rate_level_mode_channel", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params2Rc16read_interval_msE", "simple_flight::Params::Rc::read_interval_ms", ""], [475, 1, 1, "_CPPv4N13simple_flight6Params7TakeoffE", "simple_flight::Params::Takeoff", "Public Members    float takeoff_z = -2.0f"], [475, 3, 1, "_CPPv4N13simple_flight6Params7Takeoff9takeoff_zE", "simple_flight::Params::Takeoff::takeoff_z", ""], [475, 1, 1, "_CPPv4N13simple_flight6Params11VelocityPidE", "simple_flight::Params::VelocityPid", "Public Members    const float kMinThrottle = std::min(1.0f, Params::min_armed_throttle() * 3.0f)      const float kMaxLimit = 6.0f      const float kP = 0.2f      const float kI = 2.0f      const float kD = 0.0f      Axis4r max_limit = Axis4r(kMaxLimit, kMaxLimit, 0, kMaxLimit)      Axis4r p = Axis4r(kP, kP, 0.0f, 2.0f)      Axis4r i = Axis4r(0.0f, 0.0f, 0.0f, kI)      Axis4r d = Axis4r(kD, kD, kD, kD)      Axis4r iterm_discount = Axis4r(1, 1, 1, 0.9999f)      Axis4r output_bias = Axis4r(0, 0, 0, 0)      float min_throttle = kMinThrottle"], [475, 3, 1, "_CPPv4N13simple_flight6Params11VelocityPid1dE", "simple_flight::Params::VelocityPid::d", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11VelocityPid1iE", "simple_flight::Params::VelocityPid::i", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11VelocityPid14iterm_discountE", "simple_flight::Params::VelocityPid::iterm_discount", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11VelocityPid2kDE", "simple_flight::Params::VelocityPid::kD", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11VelocityPid2kIE", "simple_flight::Params::VelocityPid::kI", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11VelocityPid9kMaxLimitE", "simple_flight::Params::VelocityPid::kMaxLimit", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11VelocityPid12kMinThrottleE", "simple_flight::Params::VelocityPid::kMinThrottle", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11VelocityPid2kPE", "simple_flight::Params::VelocityPid::kP", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11VelocityPid9max_limitE", "simple_flight::Params::VelocityPid::max_limit", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11VelocityPid12min_throttleE", "simple_flight::Params::VelocityPid::min_throttle", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11VelocityPid11output_biasE", "simple_flight::Params::VelocityPid::output_bias", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params11VelocityPid1pE", "simple_flight::Params::VelocityPid::p", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params15angle_level_pidE", "simple_flight::Params::angle_level_pid", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params14angle_rate_pidE", "simple_flight::Params::angle_rate_pid", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params16api_goal_timeoutE", "simple_flight::Params::api_goal_timeout", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params15controller_typeE", "simple_flight::Params::controller_type", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params17default_goal_modeE", "simple_flight::Params::default_goal_mode", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params21default_vehicle_stateE", "simple_flight::Params::default_vehicle_state", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params13gains_changedE", "simple_flight::Params::gains_changed", ""], [475, 0, 1, "_CPPv4N13simple_flight6Params18min_armed_throttleEv", "simple_flight::Params::min_armed_throttle", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params5motorE", "simple_flight::Params::motor", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params12position_pidE", "simple_flight::Params::position_pid", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params2rcE", "simple_flight::Params::rc", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params7takeoffE", "simple_flight::Params::takeoff", ""], [475, 3, 1, "_CPPv4N13simple_flight6Params12velocity_pidE", "simple_flight::Params::velocity_pid", ""], [99, 1, 1, "_CPPv4N13simple_flight21PassthroughControllerE", "simple_flight::PassthroughController", "Public Functions    inline virtual void initialize(unsigned int axis, const IGoal *goal, const IStateEstimator *state_estimator) override      inline virtual void reset() override      inline virtual void update() override      inline virtual TReal getOutput() override"], [99, 0, 1, "_CPPv4N13simple_flight21PassthroughController9getOutputEv", "simple_flight::PassthroughController::getOutput", ""], [99, 0, 1, "_CPPv4N13simple_flight21PassthroughController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::PassthroughController::initialize", ""], [99, 2, 2, "_CPPv4N13simple_flight21PassthroughController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::PassthroughController::initialize::axis", ""], [99, 2, 2, "_CPPv4N13simple_flight21PassthroughController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::PassthroughController::initialize::goal", ""], [99, 2, 2, "_CPPv4N13simple_flight21PassthroughController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::PassthroughController::initialize::state_estimator", ""], [99, 0, 1, "_CPPv4N13simple_flight21PassthroughController5resetEv", "simple_flight::PassthroughController::reset", ""], [99, 0, 1, "_CPPv4N13simple_flight21PassthroughController6updateEv", "simple_flight::PassthroughController::update", ""], [483, 1, 1, "_CPPv4I0EN13simple_flight9PidConfigE", "simple_flight::PidConfig", "Values:"], [483, 5, 1, "_CPPv4N13simple_flight9PidConfig14IntegratorTypeE", "simple_flight::PidConfig::IntegratorType", "Values:"], [483, 6, 1, "_CPPv4N13simple_flight9PidConfig14IntegratorType9RungKuttaE", "simple_flight::PidConfig::IntegratorType::RungKutta", ""], [483, 6, 1, "_CPPv4N13simple_flight9PidConfig14IntegratorType8StandardE", "simple_flight::PidConfig::IntegratorType::Standard", ""], [483, 0, 1, "_CPPv4N13simple_flight9PidConfig9PidConfigEfff1T1Tfb1Tf", "simple_flight::PidConfig::PidConfig", ""], [483, 2, 2, "_CPPv4N13simple_flight9PidConfig9PidConfigEfff1T1Tfb1Tf", "simple_flight::PidConfig::PidConfig::enabled_val", ""], [483, 2, 2, "_CPPv4N13simple_flight9PidConfig9PidConfigEfff1T1Tfb1Tf", "simple_flight::PidConfig::PidConfig::iterm_discount_val", ""], [483, 2, 2, "_CPPv4N13simple_flight9PidConfig9PidConfigEfff1T1Tfb1Tf", "simple_flight::PidConfig::PidConfig::kd_val", ""], [483, 2, 2, "_CPPv4N13simple_flight9PidConfig9PidConfigEfff1T1Tfb1Tf", "simple_flight::PidConfig::PidConfig::ki_val", ""], [483, 2, 2, "_CPPv4N13simple_flight9PidConfig9PidConfigEfff1T1Tfb1Tf", "simple_flight::PidConfig::PidConfig::kp_val", ""], [483, 2, 2, "_CPPv4N13simple_flight9PidConfig9PidConfigEfff1T1Tfb1Tf", "simple_flight::PidConfig::PidConfig::max_output_val", ""], [483, 2, 2, "_CPPv4N13simple_flight9PidConfig9PidConfigEfff1T1Tfb1Tf", "simple_flight::PidConfig::PidConfig::min_output_val", ""], [483, 2, 2, "_CPPv4N13simple_flight9PidConfig9PidConfigEfff1T1Tfb1Tf", "simple_flight::PidConfig::PidConfig::output_bias_val", ""], [483, 2, 2, "_CPPv4N13simple_flight9PidConfig9PidConfigEfff1T1Tfb1Tf", "simple_flight::PidConfig::PidConfig::time_scale_val", ""], [483, 7, 2, "_CPPv4I0EN13simple_flight9PidConfigE", "simple_flight::PidConfig::T", "Values:"], [483, 3, 1, "_CPPv4N13simple_flight9PidConfig7enabledE", "simple_flight::PidConfig::enabled", ""], [483, 3, 1, "_CPPv4N13simple_flight9PidConfig15integrator_typeE", "simple_flight::PidConfig::integrator_type", ""], [483, 3, 1, "_CPPv4N13simple_flight9PidConfig14iterm_discountE", "simple_flight::PidConfig::iterm_discount", ""], [483, 3, 1, "_CPPv4N13simple_flight9PidConfig2kdE", "simple_flight::PidConfig::kd", ""], [483, 3, 1, "_CPPv4N13simple_flight9PidConfig2kiE", "simple_flight::PidConfig::ki", ""], [483, 3, 1, "_CPPv4N13simple_flight9PidConfig2kpE", "simple_flight::PidConfig::kp", ""], [483, 3, 1, "_CPPv4N13simple_flight9PidConfig10max_outputE", "simple_flight::PidConfig::max_output", ""], [483, 3, 1, "_CPPv4N13simple_flight9PidConfig10min_outputE", "simple_flight::PidConfig::min_output", ""], [483, 3, 1, "_CPPv4N13simple_flight9PidConfig11output_biasE", "simple_flight::PidConfig::output_bias", ""], [483, 3, 1, "_CPPv4N13simple_flight9PidConfig10time_scaleE", "simple_flight::PidConfig::time_scale", ""], [100, 1, 1, "_CPPv4I0EN13simple_flight13PidControllerE", "simple_flight::PidController", "Public Functions    inline PidController(const IBoardClock *clock = nullptr, const PidConfig<T> &config = PidConfig<T>())      inline void setGoal(const T &goal)      inline const T &getGoal() const      inline void setMeasured(const T &measured)      inline const T &getMeasured() const      inline const PidConfig<T> &getConfig() const      inline void setConfig(const PidConfig<T> &config)      inline T getOutput()      inline virtual void reset() override      inline virtual void update() override"], [100, 0, 1, "_CPPv4N13simple_flight13PidController13PidControllerEPK11IBoardClockRK9PidConfigI1TE", "simple_flight::PidController::PidController", ""], [100, 2, 2, "_CPPv4N13simple_flight13PidController13PidControllerEPK11IBoardClockRK9PidConfigI1TE", "simple_flight::PidController::PidController::clock", ""], [100, 2, 2, "_CPPv4N13simple_flight13PidController13PidControllerEPK11IBoardClockRK9PidConfigI1TE", "simple_flight::PidController::PidController::config", ""], [100, 7, 2, "_CPPv4I0EN13simple_flight13PidControllerE", "simple_flight::PidController::T", "Public Functions    inline PidController(const IBoardClock *clock = nullptr, const PidConfig<T> &config = PidConfig<T>())      inline void setGoal(const T &goal)      inline const T &getGoal() const      inline void setMeasured(const T &measured)      inline const T &getMeasured() const      inline const PidConfig<T> &getConfig() const      inline void setConfig(const PidConfig<T> &config)      inline T getOutput()      inline virtual void reset() override      inline virtual void update() override"], [100, 0, 1, "_CPPv4NK13simple_flight13PidController9getConfigEv", "simple_flight::PidController::getConfig", ""], [100, 0, 1, "_CPPv4NK13simple_flight13PidController7getGoalEv", "simple_flight::PidController::getGoal", ""], [100, 0, 1, "_CPPv4NK13simple_flight13PidController11getMeasuredEv", "simple_flight::PidController::getMeasured", ""], [100, 0, 1, "_CPPv4N13simple_flight13PidController9getOutputEv", "simple_flight::PidController::getOutput", ""], [100, 0, 1, "_CPPv4N13simple_flight13PidController5resetEv", "simple_flight::PidController::reset", ""], [100, 0, 1, "_CPPv4N13simple_flight13PidController9setConfigERK9PidConfigI1TE", "simple_flight::PidController::setConfig", ""], [100, 2, 2, "_CPPv4N13simple_flight13PidController9setConfigERK9PidConfigI1TE", "simple_flight::PidController::setConfig::config", ""], [100, 0, 1, "_CPPv4N13simple_flight13PidController7setGoalERK1T", "simple_flight::PidController::setGoal", ""], [100, 2, 2, "_CPPv4N13simple_flight13PidController7setGoalERK1T", "simple_flight::PidController::setGoal::goal", ""], [100, 0, 1, "_CPPv4N13simple_flight13PidController11setMeasuredERK1T", "simple_flight::PidController::setMeasured", ""], [100, 2, 2, "_CPPv4N13simple_flight13PidController11setMeasuredERK1T", "simple_flight::PidController::setMeasured::measured", ""], [100, 0, 1, "_CPPv4N13simple_flight13PidController6updateEv", "simple_flight::PidController::update", ""], [101, 1, 1, "_CPPv4N13simple_flight18PositionControllerE", "simple_flight::PositionController", "Public Functions    inline PositionController(Params *params, const IBoardClock *clock = nullptr)      inline virtual void initialize(unsigned int axis, const IGoal *goal, const IStateEstimator *state_estimator) override      inline virtual void reset() override      inline virtual void update() override      inline virtual TReal getOutput() override      inline virtual const Axis4r &getGoalValue() const override      inline virtual const GoalMode &getGoalMode() const override"], [101, 0, 1, "_CPPv4N13simple_flight18PositionController18PositionControllerEP6ParamsPK11IBoardClock", "simple_flight::PositionController::PositionController", ""], [101, 2, 2, "_CPPv4N13simple_flight18PositionController18PositionControllerEP6ParamsPK11IBoardClock", "simple_flight::PositionController::PositionController::clock", ""], [101, 2, 2, "_CPPv4N13simple_flight18PositionController18PositionControllerEP6ParamsPK11IBoardClock", "simple_flight::PositionController::PositionController::params", ""], [101, 0, 1, "_CPPv4NK13simple_flight18PositionController11getGoalModeEv", "simple_flight::PositionController::getGoalMode", ""], [101, 0, 1, "_CPPv4NK13simple_flight18PositionController12getGoalValueEv", "simple_flight::PositionController::getGoalValue", ""], [101, 0, 1, "_CPPv4N13simple_flight18PositionController9getOutputEv", "simple_flight::PositionController::getOutput", ""], [101, 0, 1, "_CPPv4N13simple_flight18PositionController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::PositionController::initialize", ""], [101, 2, 2, "_CPPv4N13simple_flight18PositionController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::PositionController::initialize::axis", ""], [101, 2, 2, "_CPPv4N13simple_flight18PositionController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::PositionController::initialize::goal", ""], [101, 2, 2, "_CPPv4N13simple_flight18PositionController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::PositionController::initialize::state_estimator", ""], [101, 0, 1, "_CPPv4N13simple_flight18PositionController5resetEv", "simple_flight::PositionController::reset", ""], [101, 0, 1, "_CPPv4N13simple_flight18PositionController6updateEv", "simple_flight::PositionController::update", ""], [102, 1, 1, "_CPPv4N13simple_flight13RemoteControlE", "simple_flight::RemoteControl", "Public Functions    inline RemoteControl(const Params *params, const IBoardClock *clock, const IBoardInputPins *board_inputs, VehicleState *vehicle_state, IStateEstimator *state_estimator, ICommLink *comm_link)      inline virtual void reset() override      inline virtual void update() override      inline virtual const Axis4r &getGoalValue() const override      inline virtual const GoalMode &getGoalMode() const override      inline bool allowApiControl()      inline float getMotorOutput()"], [102, 0, 1, "_CPPv4N13simple_flight13RemoteControl13RemoteControlEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP12VehicleStateP15IStateEstimatorP9ICommLink", "simple_flight::RemoteControl::RemoteControl", ""], [102, 2, 2, "_CPPv4N13simple_flight13RemoteControl13RemoteControlEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP12VehicleStateP15IStateEstimatorP9ICommLink", "simple_flight::RemoteControl::RemoteControl::board_inputs", ""], [102, 2, 2, "_CPPv4N13simple_flight13RemoteControl13RemoteControlEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP12VehicleStateP15IStateEstimatorP9ICommLink", "simple_flight::RemoteControl::RemoteControl::clock", ""], [102, 2, 2, "_CPPv4N13simple_flight13RemoteControl13RemoteControlEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP12VehicleStateP15IStateEstimatorP9ICommLink", "simple_flight::RemoteControl::RemoteControl::comm_link", ""], [102, 2, 2, "_CPPv4N13simple_flight13RemoteControl13RemoteControlEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP12VehicleStateP15IStateEstimatorP9ICommLink", "simple_flight::RemoteControl::RemoteControl::params", ""], [102, 2, 2, "_CPPv4N13simple_flight13RemoteControl13RemoteControlEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP12VehicleStateP15IStateEstimatorP9ICommLink", "simple_flight::RemoteControl::RemoteControl::state_estimator", ""], [102, 2, 2, "_CPPv4N13simple_flight13RemoteControl13RemoteControlEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP12VehicleStateP15IStateEstimatorP9ICommLink", "simple_flight::RemoteControl::RemoteControl::vehicle_state", ""], [102, 0, 1, "_CPPv4N13simple_flight13RemoteControl15allowApiControlEv", "simple_flight::RemoteControl::allowApiControl", ""], [102, 0, 1, "_CPPv4NK13simple_flight13RemoteControl11getGoalModeEv", "simple_flight::RemoteControl::getGoalMode", ""], [102, 0, 1, "_CPPv4NK13simple_flight13RemoteControl12getGoalValueEv", "simple_flight::RemoteControl::getGoalValue", ""], [102, 0, 1, "_CPPv4N13simple_flight13RemoteControl14getMotorOutputEv", "simple_flight::RemoteControl::getMotorOutput", ""], [102, 0, 1, "_CPPv4N13simple_flight13RemoteControl5resetEv", "simple_flight::RemoteControl::reset", ""], [102, 0, 1, "_CPPv4N13simple_flight13RemoteControl6updateEv", "simple_flight::RemoteControl::update", ""], [103, 1, 1, "_CPPv4I0EN13simple_flight22RungKuttaPidIntegratorE", "simple_flight::RungKuttaPidIntegrator", "Public Functions    inline RungKuttaPidIntegrator(const PidConfig<T> &config)      inline virtual ~RungKuttaPidIntegrator()      inline virtual void reset() override      inline virtual void set(T val) override      inline virtual void update(float dt, T error, uint64_t last_time) override      inline virtual T getOutput() override"], [103, 0, 1, "_CPPv4N13simple_flight22RungKuttaPidIntegrator22RungKuttaPidIntegratorERK9PidConfigI1TE", "simple_flight::RungKuttaPidIntegrator::RungKuttaPidIntegrator", ""], [103, 2, 2, "_CPPv4N13simple_flight22RungKuttaPidIntegrator22RungKuttaPidIntegratorERK9PidConfigI1TE", "simple_flight::RungKuttaPidIntegrator::RungKuttaPidIntegrator::config", ""], [103, 7, 2, "_CPPv4I0EN13simple_flight22RungKuttaPidIntegratorE", "simple_flight::RungKuttaPidIntegrator::T", "Public Functions    inline RungKuttaPidIntegrator(const PidConfig<T> &config)      inline virtual ~RungKuttaPidIntegrator()      inline virtual void reset() override      inline virtual void set(T val) override      inline virtual void update(float dt, T error, uint64_t last_time) override      inline virtual T getOutput() override"], [103, 0, 1, "_CPPv4N13simple_flight22RungKuttaPidIntegrator9getOutputEv", "simple_flight::RungKuttaPidIntegrator::getOutput", ""], [103, 0, 1, "_CPPv4N13simple_flight22RungKuttaPidIntegrator5resetEv", "simple_flight::RungKuttaPidIntegrator::reset", ""], [103, 0, 1, "_CPPv4N13simple_flight22RungKuttaPidIntegrator3setE1T", "simple_flight::RungKuttaPidIntegrator::set", ""], [103, 2, 2, "_CPPv4N13simple_flight22RungKuttaPidIntegrator3setE1T", "simple_flight::RungKuttaPidIntegrator::set::val", ""], [103, 0, 1, "_CPPv4N13simple_flight22RungKuttaPidIntegrator6updateEf1T8uint64_t", "simple_flight::RungKuttaPidIntegrator::update", ""], [103, 2, 2, "_CPPv4N13simple_flight22RungKuttaPidIntegrator6updateEf1T8uint64_t", "simple_flight::RungKuttaPidIntegrator::update::dt", ""], [103, 2, 2, "_CPPv4N13simple_flight22RungKuttaPidIntegrator6updateEf1T8uint64_t", "simple_flight::RungKuttaPidIntegrator::update::error", ""], [103, 2, 2, "_CPPv4N13simple_flight22RungKuttaPidIntegrator6updateEf1T8uint64_t", "simple_flight::RungKuttaPidIntegrator::update::last_time", ""], [103, 0, 1, "_CPPv4N13simple_flight22RungKuttaPidIntegratorD0Ev", "simple_flight::RungKuttaPidIntegrator::~RungKuttaPidIntegrator", ""], [104, 1, 1, "_CPPv4I0EN13simple_flight16StdPidIntegratorE", "simple_flight::StdPidIntegrator", "Public Functions    inline StdPidIntegrator(const PidConfig<T> &config)      inline virtual ~StdPidIntegrator()      inline virtual void reset() override      inline virtual void set(T val) override      inline virtual void update(float dt, T error, uint64_t last_time) override      inline virtual T getOutput() override"], [104, 0, 1, "_CPPv4N13simple_flight16StdPidIntegrator16StdPidIntegratorERK9PidConfigI1TE", "simple_flight::StdPidIntegrator::StdPidIntegrator", ""], [104, 2, 2, "_CPPv4N13simple_flight16StdPidIntegrator16StdPidIntegratorERK9PidConfigI1TE", "simple_flight::StdPidIntegrator::StdPidIntegrator::config", ""], [104, 7, 2, "_CPPv4I0EN13simple_flight16StdPidIntegratorE", "simple_flight::StdPidIntegrator::T", "Public Functions    inline StdPidIntegrator(const PidConfig<T> &config)      inline virtual ~StdPidIntegrator()      inline virtual void reset() override      inline virtual void set(T val) override      inline virtual void update(float dt, T error, uint64_t last_time) override      inline virtual T getOutput() override"], [104, 0, 1, "_CPPv4N13simple_flight16StdPidIntegrator9getOutputEv", "simple_flight::StdPidIntegrator::getOutput", ""], [104, 0, 1, "_CPPv4N13simple_flight16StdPidIntegrator5resetEv", "simple_flight::StdPidIntegrator::reset", ""], [104, 0, 1, "_CPPv4N13simple_flight16StdPidIntegrator3setE1T", "simple_flight::StdPidIntegrator::set", ""], [104, 2, 2, "_CPPv4N13simple_flight16StdPidIntegrator3setE1T", "simple_flight::StdPidIntegrator::set::val", ""], [104, 0, 1, "_CPPv4N13simple_flight16StdPidIntegrator6updateEf1T8uint64_t", "simple_flight::StdPidIntegrator::update", ""], [104, 2, 2, "_CPPv4N13simple_flight16StdPidIntegrator6updateEf1T8uint64_t", "simple_flight::StdPidIntegrator::update::dt", ""], [104, 2, 2, "_CPPv4N13simple_flight16StdPidIntegrator6updateEf1T8uint64_t", "simple_flight::StdPidIntegrator::update::error", ""], [104, 2, 2, "_CPPv4N13simple_flight16StdPidIntegrator6updateEf1T8uint64_t", "simple_flight::StdPidIntegrator::update::last_time", ""], [104, 0, 1, "_CPPv4N13simple_flight16StdPidIntegratorD0Ev", "simple_flight::StdPidIntegrator::~StdPidIntegrator", ""], [487, 4, 1, "_CPPv4N13simple_flight5TRealE", "simple_flight::TReal", ""], [105, 1, 1, "_CPPv4N13simple_flight12VehicleStateE", "simple_flight::VehicleState", "Public Functions    inline VehicleStateType getState() const      inline void setState(VehicleStateType state, const GeoPoint &home_geo_point = GeoPoint::nan())      inline const GeoPoint &getHomeGeoPoint() const    Public Static Functions    static inline VehicleStateType fromString(const std::string &val)"], [105, 0, 1, "_CPPv4N13simple_flight12VehicleState10fromStringERKNSt6stringE", "simple_flight::VehicleState::fromString", ""], [105, 2, 2, "_CPPv4N13simple_flight12VehicleState10fromStringERKNSt6stringE", "simple_flight::VehicleState::fromString::val", ""], [105, 0, 1, "_CPPv4NK13simple_flight12VehicleState15getHomeGeoPointEv", "simple_flight::VehicleState::getHomeGeoPoint", ""], [105, 0, 1, "_CPPv4NK13simple_flight12VehicleState8getStateEv", "simple_flight::VehicleState::getState", ""], [105, 0, 1, "_CPPv4N13simple_flight12VehicleState8setStateE16VehicleStateTypeRK8GeoPoint", "simple_flight::VehicleState::setState", ""], [105, 2, 2, "_CPPv4N13simple_flight12VehicleState8setStateE16VehicleStateTypeRK8GeoPoint", "simple_flight::VehicleState::setState::home_geo_point", ""], [105, 2, 2, "_CPPv4N13simple_flight12VehicleState8setStateE16VehicleStateTypeRK8GeoPoint", "simple_flight::VehicleState::setState::state", ""], [158, 5, 1, "_CPPv4N13simple_flight16VehicleStateTypeE", "simple_flight::VehicleStateType", "Values:"], [158, 6, 1, "_CPPv4N13simple_flight16VehicleStateType6ActiveE", "simple_flight::VehicleStateType::Active", ""], [158, 6, 1, "_CPPv4N13simple_flight16VehicleStateType5ArmedE", "simple_flight::VehicleStateType::Armed", ""], [158, 6, 1, "_CPPv4N13simple_flight16VehicleStateType10BeingArmedE", "simple_flight::VehicleStateType::BeingArmed", ""], [158, 6, 1, "_CPPv4N13simple_flight16VehicleStateType13BeingDisarmedE", "simple_flight::VehicleStateType::BeingDisarmed", ""], [158, 6, 1, "_CPPv4N13simple_flight16VehicleStateType8DisarmedE", "simple_flight::VehicleStateType::Disarmed", ""], [158, 6, 1, "_CPPv4N13simple_flight16VehicleStateType8InactiveE", "simple_flight::VehicleStateType::Inactive", ""], [158, 6, 1, "_CPPv4N13simple_flight16VehicleStateType7UnknownE", "simple_flight::VehicleStateType::Unknown", ""], [106, 1, 1, "_CPPv4N13simple_flight18VelocityControllerE", "simple_flight::VelocityController", "Public Functions    inline VelocityController(Params *params, const IBoardClock *clock = nullptr)      inline virtual void initialize(unsigned int axis, const IGoal *goal, const IStateEstimator *state_estimator) override      inline virtual void reset() override      inline virtual void update() override      inline virtual TReal getOutput() override      inline virtual const Axis4r &getGoalValue() const override      inline virtual const GoalMode &getGoalMode() const override"], [106, 0, 1, "_CPPv4N13simple_flight18VelocityController18VelocityControllerEP6ParamsPK11IBoardClock", "simple_flight::VelocityController::VelocityController", ""], [106, 2, 2, "_CPPv4N13simple_flight18VelocityController18VelocityControllerEP6ParamsPK11IBoardClock", "simple_flight::VelocityController::VelocityController::clock", ""], [106, 2, 2, "_CPPv4N13simple_flight18VelocityController18VelocityControllerEP6ParamsPK11IBoardClock", "simple_flight::VelocityController::VelocityController::params", ""], [106, 0, 1, "_CPPv4NK13simple_flight18VelocityController11getGoalModeEv", "simple_flight::VelocityController::getGoalMode", ""], [106, 0, 1, "_CPPv4NK13simple_flight18VelocityController12getGoalValueEv", "simple_flight::VelocityController::getGoalValue", ""], [106, 0, 1, "_CPPv4N13simple_flight18VelocityController9getOutputEv", "simple_flight::VelocityController::getOutput", ""], [106, 0, 1, "_CPPv4N13simple_flight18VelocityController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::VelocityController::initialize", ""], [106, 2, 2, "_CPPv4N13simple_flight18VelocityController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::VelocityController::initialize::axis", ""], [106, 2, 2, "_CPPv4N13simple_flight18VelocityController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::VelocityController::initialize::goal", ""], [106, 2, 2, "_CPPv4N13simple_flight18VelocityController10initializeEjPK5IGoalPK15IStateEstimator", "simple_flight::VelocityController::initialize::state_estimator", ""], [106, 0, 1, "_CPPv4N13simple_flight18VelocityController5resetEv", "simple_flight::VelocityController::reset", ""], [106, 0, 1, "_CPPv4N13simple_flight18VelocityController6updateEv", "simple_flight::VelocityController::update", ""]], "conf": [[493, 8, 1, 0, "author", ""], [512, 8, 1, 0, "autodoc_default_flags", ""], [496, 8, 1, 0, "autosectionlabel_maxdepth", ""], [516, 8, 1, 0, "autosectionlabel_prefix_document", ""], [506, 8, 1, 0, "autosummary_generate", ""], [494, 8, 1, 0, "breathe_default_project", ""], [519, 8, 1, 0, "breathe_projects", ""], [510, 8, 1, 0, "copyright", ""], [502, 8, 1, 0, "epub_exclude_files", ""], [524, 8, 1, 0, "epub_title", ""], [504, 8, 1, 0, "exclude_patterns", ""], [526, 8, 1, 0, "exhale_args", ""], [521, 8, 1, 0, "extensions", ""], [515, 8, 1, 0, "highlight_language", ""], [501, 8, 1, 0, "html_css_files", ""], [513, 8, 1, 0, "html_js_files", ""], [525, 8, 1, 0, "html_static_path", ""], [499, 8, 1, 0, "html_style", ""], [491, 8, 1, 0, "html_theme", ""], [508, 8, 1, 0, "html_theme_options", ""], [527, 8, 1, 0, "html_title", ""], [520, 8, 1, 0, "htmlhelp_basename", ""], [509, 8, 1, 0, "intersphinx_mapping", ""], [514, 8, 1, 0, "language", ""], [503, 8, 1, 0, "latex_documents", ""], [495, 8, 1, 0, "latex_elements", ""], [505, 8, 1, 0, "man_pages", ""], [511, 8, 1, 0, "master_doc", ""], [498, 8, 1, 0, "primary_domain", ""], [497, 8, 1, 0, "project", ""], [523, 8, 1, 0, "pygments_style", ""], [517, 8, 1, 0, "release", ""], [518, 8, 1, 0, "source_suffix", ""], [522, 8, 1, 0, "templates_path", ""], [500, 8, 1, 0, "texinfo_documents", ""], [507, 8, 1, 0, "todo_include_todos", ""], [492, 8, 1, 0, "version", ""]]}, "objtypes": {"0": "cpp:function", "1": "cpp:class", "2": "cpp:functionParam", "3": "cpp:member", "4": "cpp:type", "5": "cpp:enum", "6": "cpp:enumerator", "7": "cpp:templateTypeParam", "8": "py:attribute"}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "class", "C++ class"], "2": ["cpp", "functionParam", "C++ function parameter"], "3": ["cpp", "member", "C++ member"], "4": ["cpp", "type", "C++ type"], "5": ["cpp", "enum", "C++ enum"], "6": ["cpp", "enumerator", "C++ enumerator"], "7": ["cpp", "templateTypeParam", "C++ type template parameter"], "8": ["py", "attribute", "Python attribute"]}, "titleterms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 270, 279, 283, 284, 285], "apiprovid": [0, 160, 288], "document": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 154, 155, 156, 157, 158, 272, 273, 274, 275, 276, 277, 278, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527], "apiserverbas": [1, 161, 289], "inherit": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106], "relationship": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 422, 424, 425, 426, 428, 429, 430, 432, 433, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482], "deriv": [1, 7, 9, 16, 21, 23, 26, 28, 30, 32, 34, 37, 44, 45, 46, 50, 51, 54, 64, 66, 67, 73, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], "type": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 416, 475], "arducopterapi": [2, 220, 348, 400], "nest": [2, 4, 6, 7, 9, 14, 15, 18, 21, 24, 25, 28, 30, 31, 32, 33, 34, 35, 36, 37, 40, 42, 49, 50, 51, 52, 53, 54, 64, 65, 66, 67, 71, 72, 73, 97, 400, 401, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 422, 424, 425, 426, 428, 429, 430, 432, 433, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482], "base": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 93, 98, 99, 100, 101, 102, 103, 104, 106], "arducopterparam": [3, 221, 349], "arducoptersoloapi": [4, 222, 350, 401, 402], "arducoptersoloparam": [5, 223, 351], "arduroverapi": [6, 208, 336, 403], "barometerbas": [7, 186, 314, 404], "barometersimpl": [8, 187, 315], "carapibas": [9, 204, 332, 406, 407], "carapifactori": [10, 203, 331], "carrpclibcli": [11, 206, 267, 334, 395], "carrpclibserv": [12, 207, 268, 335, 396], "cubegeof": [13, 178, 306], "debugphysicsbodi": [14, 15, 168, 296], "wrenchvertex": 15, "distancebas": [16, 189, 317], "distancesimpl": [17, 190, 318], "environ": [18, 169, 297, 409], "externalphysicsengin": [19, 170, 298], "fastphysicsengin": [20, 171, 299], "gpsbase": [21, 192, 274, 320, 410, 411, 412, 413, 414], "gpssimpl": [22, 193, 321], "igeof": [23, 179, 307], "imusimpl": [24, 195, 323, 419], "kinemat": [25, 172, 300, 420], "lidarbas": [26, 197, 325], "lidarsimpl": [27, 198, 326], "magnetometerbas": [28, 200, 328, 422], "magnetometersimpl": [29, 201, 329], "mavlinkmultirotorapi": [30, 31, 224, 352], "mavlinklogviewerlog": 31, "multirotorapibas": [32, 33, 34, 35, 36, 215, 269, 343, 397, 424, 425, 426], "obsstrategychang": 33, "singlecal": 34, "singletaskcal": 35, "unsafemoveexcept": 36, "multirotorparam": [37, 210, 338, 428, 429], "multirotorparamsfactori": [38, 211, 339], "multirotorphysicsbodi": [39, 212, 340], "multirotorrpclibcli": [40, 218, 270, 346, 398, 430], "multirotorrpclibserv": [41, 219, 271, 347, 399], "obstaclemap": [42, 180, 265, 308, 393, 432], "physxcarapi": [43, 209, 337], "physicsbodi": [44, 173, 301], "physicsbodyvertex": [45, 174, 302], "physicsenginebas": [46, 175, 303], "physicsworld": [47, 176, 304], "px4multirotorparam": [48, 225, 353], "rotoractu": [49, 213, 341, 433], "rpclibclientbas": [50, 163, 263, 291, 391, 437], "rpclibserverbas": [51, 52, 164, 264, 292, 392, 438], "apinotsupport": 52, "safetyev": [53, 181, 266, 275, 276, 309, 394, 439], "sensorbas": [54, 183, 311, 440], "sensorcollect": [55, 184, 312], "sensorfactori": [56, 185, 313], "simpleflightapi": [57, 226, 354], "simpleflightboard": [58, 227, 355], "simpleflightcommlink": [59, 228, 356], "simpleflightcommon": [60, 229, 357], "simpleflightestim": [61, 230, 358], "simpleflightquadxparam": [62, 231, 359], "spheregeof": [63, 182, 310], "vehicleapibas": [64, 65, 66, 67, 165, 293], "vehiclecommandnotimplementedexcept": 65, "vehiclecontrollerexcept": 66, "vehiclemoveexcept": 67, "vehiclesimapibas": [68, 166, 294], "world": [69, 177, 305], "worldsimapibas": [70, 167, 277, 295], "carrpclibadaptor": [71, 205, 333, 442, 443, 485], "multirotorrpclibadaptor": [72, 217, 345, 444, 445, 446, 447, 486], "rpclibadaptorsbas": [73, 162, 290, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 484], "adaptivecontrol": [74, 232, 360], "anglelevelcontrol": [75, 233, 361], "angleratecontrol": [76, 234, 362], "templat": [77, 78, 94, 100, 103, 104, 483], "axis3": 77, "axis4": 78, "cascadecontrol": [79, 235, 363], "constantoutputcontrol": [80, 236, 364], "firmwar": [81, 135, 140, 144, 208, 209, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 365], "goalmod": 82, "iaxiscontrol": [83, 249, 377], "iboard": [84, 250, 378], "iboardclock": [85, 251, 379], "iboardinputpin": [86, 252, 380], "iboardoutputpin": [87, 253, 381], "iboardsensor": [88, 254, 382], "icommlink": [89, 255, 383], "icontrol": [90, 256, 384], "ifirmwar": [91, 257, 385], "igoal": [92, 258, 386], "ioffboardapi": [93, 259, 387], "ipidintegr": [94, 260, 388], "istateestim": [95, 261, 389], "iupdat": [96, 262, 390], "mixer": [97, 238, 366, 474], "offboardapi": [98, 239, 367], "passthroughcontrol": [99, 241, 369], "pidcontrol": [100, 242, 370], "positioncontrol": [101, 243, 371], "remotecontrol": [102, 244, 372], "rungkuttapidintegr": [103, 245, 373], "stdpidintegr": [104, 246, 374], "vehiclest": 105, "velocitycontrol": [106, 247, 375], "defin": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 263, 264, 267, 268, 270, 271, 279], "check": [107, 109, 111, 113, 115, 117], "rpclib_msgpack": [108, 110, 112, 114, 116, 118], "directori": [119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 490], "autonomylib": [119, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 283, 484, 485, 486, 528], "subdirectori": [119, 121, 125, 132, 133, 135, 138, 140, 143, 144, 146, 149, 150, 152], "doc": [120, 159], "file": [120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 151, 153, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 490], "includ": [121, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271], "api": [122, 134, 139, 147, 151, 153, 160, 161, 162, 163, 164, 165, 166, 167, 204, 205, 206, 207, 215, 216, 217, 218, 219, 263, 264, 267, 268, 269, 270, 271, 279, 490], "physic": [123, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177], "safeti": [124, 148, 178, 179, 180, 181, 182, 265, 266], "sensor": [125, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "baromet": [126, 186, 187, 188], "distanc": [127, 189, 190, 191], "gp": [128, 192, 193, 194], "imu": [129, 195, 196], "lidar": [130, 197, 198, 199], "magnetomet": [131, 200, 201, 202], "vehicl": [132, 149, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 267, 268, 269, 270, 271], "car": [133, 150, 203, 204, 205, 206, 207, 208, 209, 267, 268], "ardurov": [136, 208], "physxcar": [137, 209], "multirotor": [138, 152, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 269, 270, 271], "arducopt": [141, 220, 221], "mavlink": [142, 222, 223, 224, 225], "simple_flight": [143, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 285, 487, 488, 489], "interfac": [145, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "src": [146, 263, 264, 265, 266, 267, 268, 269, 270, 271], "enum": [154, 155, 156, 157, 158, 214, 216, 248, 279, 283, 285], "drivetraintyp": [154, 272], "landedst": [155, 273], "rotorturningdirect": 156, "goalmodetyp": 157, "vehiclestatetyp": 158, "conf": [159, 280, 287, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527], "py": [159, 287], "content": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 280, 282, 283, 284, 285], "definit": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271], "namespac": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 279, 280, 281, 282, 283, 284, 285, 286], "variabl": [159, 279, 280, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527], "hpp": [160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390], "By": [160, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 174, 175, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "function": [162, 217, 272, 273, 274, 275, 276, 277, 278, 279], "barometersimpleparam": [188, 316, 405], "distancesimpleparam": [191, 319, 408], "gpssimpleparam": [194, 322, 415], "imusimpleparam": [196, 324, 416, 417, 418], "lidarsimpleparam": [199, 327, 421], "magnetometersimpleparam": [202, 330, 423], "rotorparam": [214, 342, 435], "multirotorcommon": [216, 344], "param": [240, 368, 428, 475, 476, 477, 478, 479, 480, 481, 482], "commonstruct": [248, 376], "typedef": [248, 263, 267, 270, 279, 283, 285, 484, 485, 486, 487, 488, 489], "cpp": [263, 264, 265, 266, 267, 268, 269, 270, 271, 391, 392, 393, 394, 395, 396, 397, 398, 399], "msgpack_add_enum": [272, 273, 274, 275, 276, 277, 278], "nervosi": [272, 273, 274, 275, 276, 277, 278, 282, 283, 284, 484, 485, 486], "gnssfixtyp": 274, "obsavoidancestrategi": 275, "safetyviolationtype_": 276, "weatherparamet": 277, "imagecapturebas": 278, "imagetyp": 278, "full": [279, 490], "struct": [279, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "mavlinkcom": 281, "autonomylib_rpclib": 284, "std": 286, "program": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], "list": [287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399], "rotorcontrolmessag": [400, 401], "sensormessag": 402, "rovercontrolmessag": 403, "output": [404, 414, 422, 433], "carcontrol": [406, 442], "carstat": [407, 443], "state": [409, 419, 420], "gnssreport": [410, 457], "gpspoint": 411, "navsatfix": 412, "navsatstatu": 413, "acceleromet": 417, "gyroscop": 418, "pathposit": 424, "pathseg": 425, "statuslock": 426, "multirotorapiparam": 427, "rotorpos": 429, "impl": [430, 437, 438], "multirotorst": [431, 444], "obstacleinfo": 432, "rotorparamet": [434, 445], "rotorst": [436, 446], "evalresult": 439, "groundtruth": 440, "yawmod": [441, 447], "barometerdata": 448, "box2d": 449, "box3d": 450, "camerainfo": 451, "collisioninfo": 452, "detectioninfo": 453, "distancesensordata": 454, "environmentst": 455, "geopoint": [456, 472], "gpsdata": 458, "imagerequest": 459, "imagerespons": 460, "imudata": 461, "kinematicsst": [462, 473], "lidardata": 463, "magnetometerdata": 464, "meshpositionvertexbuffersrespons": 465, "pose": 466, "projectionmatrix": 467, "quaternionr": 468, "rcdata": 469, "vector2r": 470, "vector3r": 471, "motormixer_t": 474, "anglelevelpid": 476, "angleratepid": 477, "motor": 478, "positionpid": 479, "rc": 480, "takeoff": 481, "velocitypid": 482, "pidconfig": 483, "treal": 487, "axis4r": 488, "axis3r": 489, "html_theme": 491, "version": 492, "author": 493, "breathe_default_project": 494, "latex_el": 495, "autosectionlabel_maxdepth": 496, "project": 497, "primary_domain": 498, "html_style": 499, "texinfo_docu": 500, "html_css_file": 501, "epub_exclude_fil": 502, "latex_docu": 503, "exclude_pattern": 504, "man_pag": 505, "autosummary_gener": 506, "todo_include_todo": 507, "html_theme_opt": 508, "intersphinx_map": 509, "copyright": 510, "master_doc": 511, "autodoc_default_flag": 512, "html_js_file": 513, "languag": 514, "highlight_languag": 515, "autosectionlabel_prefix_docu": 516, "releas": 517, "source_suffix": 518, "breathe_project": 519, "htmlhelp_basenam": 520, "extens": 521, "templates_path": 522, "pygments_styl": 523, "epub_titl": 524, "html_static_path": 525, "exhale_arg": 526, "html_titl": 527}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Class ApiProvider": [[0, "class-apiprovider"]], "Class Documentation": [[0, "class-documentation"], [1, "class-documentation"], [2, "class-documentation"], [3, "class-documentation"], [4, "class-documentation"], [5, "class-documentation"], [6, "class-documentation"], [7, "class-documentation"], [8, "class-documentation"], [9, "class-documentation"], [10, "class-documentation"], [11, "class-documentation"], [12, "class-documentation"], [13, "class-documentation"], [14, "class-documentation"], [15, "class-documentation"], [16, "class-documentation"], [17, "class-documentation"], [18, "class-documentation"], [19, "class-documentation"], [20, "class-documentation"], [21, "class-documentation"], [22, "class-documentation"], [23, "class-documentation"], [24, "class-documentation"], [25, "class-documentation"], [26, "class-documentation"], [27, "class-documentation"], [28, "class-documentation"], [29, "class-documentation"], [30, "class-documentation"], [31, "class-documentation"], [32, "class-documentation"], [33, "class-documentation"], [34, "class-documentation"], [35, "class-documentation"], [36, "class-documentation"], [37, "class-documentation"], [38, "class-documentation"], [39, "class-documentation"], [40, "class-documentation"], [41, "class-documentation"], [42, "class-documentation"], [43, "class-documentation"], [44, "class-documentation"], [45, "class-documentation"], [46, "class-documentation"], [47, "class-documentation"], [48, "class-documentation"], [49, "class-documentation"], [50, "class-documentation"], [51, "class-documentation"], [52, "class-documentation"], [53, "class-documentation"], [54, "class-documentation"], [55, "class-documentation"], [56, "class-documentation"], [57, "class-documentation"], [58, "class-documentation"], [59, "class-documentation"], [60, "class-documentation"], [61, "class-documentation"], [62, "class-documentation"], [63, "class-documentation"], [64, "class-documentation"], [65, "class-documentation"], [66, "class-documentation"], [67, "class-documentation"], [68, "class-documentation"], [69, "class-documentation"], [70, "class-documentation"], [71, "class-documentation"], [72, "class-documentation"], [73, "class-documentation"], [74, "class-documentation"], [75, "class-documentation"], [76, "class-documentation"], [77, "class-documentation"], [78, "class-documentation"], [79, "class-documentation"], [80, "class-documentation"], [81, "class-documentation"], [82, "class-documentation"], [83, "class-documentation"], [84, "class-documentation"], [85, "class-documentation"], [86, "class-documentation"], [87, "class-documentation"], [88, "class-documentation"], [89, "class-documentation"], [90, "class-documentation"], [91, "class-documentation"], [92, "class-documentation"], [93, "class-documentation"], [94, "class-documentation"], [95, "class-documentation"], [96, "class-documentation"], [97, "class-documentation"], [98, "class-documentation"], [99, "class-documentation"], [100, "class-documentation"], [101, "class-documentation"], [102, "class-documentation"], [103, "class-documentation"], [104, "class-documentation"], [105, "class-documentation"], [106, "class-documentation"]], "Class ApiServerBase": [[1, "class-apiserverbase"]], "Inheritance Relationships": [[1, "inheritance-relationships"], [2, "inheritance-relationships"], [3, "inheritance-relationships"], [4, "inheritance-relationships"], [5, "inheritance-relationships"], [6, "inheritance-relationships"], [7, "inheritance-relationships"], [8, "inheritance-relationships"], [9, "inheritance-relationships"], [11, "inheritance-relationships"], [12, "inheritance-relationships"], [13, "inheritance-relationships"], [14, "inheritance-relationships"], [15, "inheritance-relationships"], [16, "inheritance-relationships"], [17, "inheritance-relationships"], [18, "inheritance-relationships"], [19, "inheritance-relationships"], [20, "inheritance-relationships"], [21, "inheritance-relationships"], [22, "inheritance-relationships"], [23, "inheritance-relationships"], [24, "inheritance-relationships"], [25, "inheritance-relationships"], [26, "inheritance-relationships"], [27, "inheritance-relationships"], [28, "inheritance-relationships"], [29, "inheritance-relationships"], [30, "inheritance-relationships"], [31, "inheritance-relationships"], [32, "inheritance-relationships"], [34, "inheritance-relationships"], [35, "inheritance-relationships"], [36, "inheritance-relationships"], [37, "inheritance-relationships"], [39, "inheritance-relationships"], [40, "inheritance-relationships"], [41, "inheritance-relationships"], [43, "inheritance-relationships"], [44, "inheritance-relationships"], [45, "inheritance-relationships"], [46, "inheritance-relationships"], [47, "inheritance-relationships"], [48, "inheritance-relationships"], [49, "inheritance-relationships"], [50, "inheritance-relationships"], [51, "inheritance-relationships"], [52, "inheritance-relationships"], [54, "inheritance-relationships"], [55, "inheritance-relationships"], [57, "inheritance-relationships"], [58, "inheritance-relationships"], [59, "inheritance-relationships"], [61, "inheritance-relationships"], [62, "inheritance-relationships"], [63, "inheritance-relationships"], [64, "inheritance-relationships"], [65, "inheritance-relationships"], [66, "inheritance-relationships"], [67, "inheritance-relationships"], [68, "inheritance-relationships"], [69, "inheritance-relationships"], [71, "inheritance-relationships"], [72, "inheritance-relationships"], [73, "inheritance-relationships"], [74, "inheritance-relationships"], [75, "inheritance-relationships"], [76, "inheritance-relationships"], [77, "inheritance-relationships"], [78, "inheritance-relationships"], [79, "inheritance-relationships"], [80, "inheritance-relationships"], [81, "inheritance-relationships"], [82, "inheritance-relationships"], [83, "inheritance-relationships"], [84, "inheritance-relationships"], [85, "inheritance-relationships"], [86, "inheritance-relationships"], [87, "inheritance-relationships"], [88, "inheritance-relationships"], [89, "inheritance-relationships"], [90, "inheritance-relationships"], [91, "inheritance-relationships"], [92, "inheritance-relationships"], [93, "inheritance-relationships"], [94, "inheritance-relationships"], [95, "inheritance-relationships"], [96, "inheritance-relationships"], [98, "inheritance-relationships"], [99, "inheritance-relationships"], [100, "inheritance-relationships"], [101, "inheritance-relationships"], [102, "inheritance-relationships"], [103, "inheritance-relationships"], [104, "inheritance-relationships"], [106, "inheritance-relationships"]], "Derived Type": [[1, "derived-type"], [7, "derived-type"], [16, "derived-type"], [21, "derived-type"], [26, "derived-type"], [28, "derived-type"], [30, "derived-type"], [34, "derived-type"], [45, "derived-type"], [67, "derived-type"], [84, "derived-type"], [85, "derived-type"], [86, "derived-type"], [87, "derived-type"], [88, "derived-type"], [89, "derived-type"], [91, "derived-type"], [93, "derived-type"], [95, "derived-type"]], "Class ArduCopterApi": [[2, "class-arducopterapi"]], "Nested Relationships": [[2, "nested-relationships"], [4, "nested-relationships"], [6, "nested-relationships"], [7, "nested-relationships"], [9, "nested-relationships"], [14, "nested-relationships"], [15, "nested-relationships"], [18, "nested-relationships"], [21, "nested-relationships"], [24, "nested-relationships"], [25, "nested-relationships"], [28, "nested-relationships"], [30, "nested-relationships"], [31, "nested-relationships"], [32, "nested-relationships"], [33, "nested-relationships"], [34, "nested-relationships"], [35, "nested-relationships"], [36, "nested-relationships"], [37, "nested-relationships"], [40, "nested-relationships"], [42, "nested-relationships"], [49, "nested-relationships"], [50, "nested-relationships"], [51, "nested-relationships"], [52, "nested-relationships"], [53, "nested-relationships"], [54, "nested-relationships"], [64, "nested-relationships"], [65, "nested-relationships"], [66, "nested-relationships"], [67, "nested-relationships"], [71, "nested-relationships"], [72, "nested-relationships"], [73, "nested-relationships"], [97, "nested-relationships"], [400, "nested-relationships"], [401, "nested-relationships"], [402, "nested-relationships"], [403, "nested-relationships"], [404, "nested-relationships"], [406, "nested-relationships"], [407, "nested-relationships"], [409, "nested-relationships"], [410, "nested-relationships"], [411, "nested-relationships"], [412, "nested-relationships"], [413, "nested-relationships"], [414, "nested-relationships"], [416, "nested-relationships"], [417, "nested-relationships"], [418, "nested-relationships"], [419, "nested-relationships"], [420, "nested-relationships"], [422, "nested-relationships"], [424, "nested-relationships"], [425, "nested-relationships"], [426, "nested-relationships"], [428, "nested-relationships"], [429, "nested-relationships"], [430, "nested-relationships"], [432, "nested-relationships"], [433, "nested-relationships"], [437, "nested-relationships"], [438, "nested-relationships"], [439, "nested-relationships"], [440, "nested-relationships"], [442, "nested-relationships"], [443, "nested-relationships"], [444, "nested-relationships"], [445, "nested-relationships"], [446, "nested-relationships"], [447, "nested-relationships"], [448, "nested-relationships"], [449, "nested-relationships"], [450, "nested-relationships"], [451, "nested-relationships"], [452, "nested-relationships"], [453, "nested-relationships"], [454, "nested-relationships"], [455, "nested-relationships"], [456, "nested-relationships"], [457, "nested-relationships"], [458, "nested-relationships"], [459, "nested-relationships"], [460, "nested-relationships"], [461, "nested-relationships"], [462, "nested-relationships"], [463, "nested-relationships"], [464, "nested-relationships"], [465, "nested-relationships"], [466, "nested-relationships"], [467, "nested-relationships"], [468, "nested-relationships"], [469, "nested-relationships"], [470, "nested-relationships"], [471, "nested-relationships"], [474, "nested-relationships"], [475, "nested-relationships"], [476, "nested-relationships"], [477, "nested-relationships"], [478, "nested-relationships"], [479, "nested-relationships"], [480, "nested-relationships"], [481, "nested-relationships"], [482, "nested-relationships"]], "Nested Types": [[2, "nested-types"], [4, "nested-types"], [6, "nested-types"], [7, "nested-types"], [9, "nested-types"], [14, "nested-types"], [18, "nested-types"], [21, "nested-types"], [24, "nested-types"], [25, "nested-types"], [28, "nested-types"], [30, "nested-types"], [32, "nested-types"], [37, "nested-types"], [40, "nested-types"], [42, "nested-types"], [49, "nested-types"], [50, "nested-types"], [51, "nested-types"], [53, "nested-types"], [54, "nested-types"], [64, "nested-types"], [71, "nested-types"], [72, "nested-types"], [73, "nested-types"], [97, "nested-types"], [416, "nested-types"], [475, "nested-types"]], "Base Type": [[2, "base-type"], [3, "base-type"], [4, "base-type"], [5, "base-type"], [6, "base-type"], [7, "base-type"], [8, "base-type"], [9, "base-type"], [11, "base-type"], [12, "base-type"], [13, "base-type"], [14, "base-type"], [15, "base-type"], [16, "base-type"], [17, "base-type"], [18, "base-type"], [19, "base-type"], [20, "base-type"], [21, "base-type"], [22, "base-type"], [24, "base-type"], [25, "base-type"], [26, "base-type"], [27, "base-type"], [28, "base-type"], [29, "base-type"], [30, "base-type"], [31, "base-type"], [32, "base-type"], [35, "base-type"], [36, "base-type"], [39, "base-type"], [40, "base-type"], [41, "base-type"], [43, "base-type"], [44, "base-type"], [45, "base-type"], [46, "base-type"], [47, "base-type"], [48, "base-type"], [49, "base-type"], [51, "base-type"], [52, "base-type"], [54, "base-type"], [55, "base-type"], [57, "base-type"], [58, "base-type"], [59, "base-type"], [61, "base-type"], [62, "base-type"], [63, "base-type"], [64, "base-type"], [65, "base-type"], [66, "base-type"], [67, "base-type"], [68, "base-type"], [69, "base-type"], [71, "base-type"], [72, "base-type"], [74, "base-type"], [76, "base-type"], [78, "base-type"], [79, "base-type"], [80, "base-type"], [81, "base-type"], [82, "base-type"], [83, "base-type"], [89, "base-type"], [90, "base-type"], [91, "base-type"], [93, "base-type"], [99, "base-type"], [100, "base-type"], [103, "base-type"], [104, "base-type"]], "Class ArduCopterParams": [[3, "class-arducopterparams"]], "Class ArduCopterSoloApi": [[4, "class-arducoptersoloapi"]], "Class ArduCopterSoloParams": [[5, "class-arducoptersoloparams"]], "Class ArduRoverApi": [[6, "class-arduroverapi"]], "Class BarometerBase": [[7, "class-barometerbase"]], "Class BarometerSimple": [[8, "class-barometersimple"]], "Class CarApiBase": [[9, "class-carapibase"]], "Derived Types": [[9, "derived-types"], [23, "derived-types"], [32, "derived-types"], [37, "derived-types"], [44, "derived-types"], [46, "derived-types"], [50, "derived-types"], [51, "derived-types"], [54, "derived-types"], [64, "derived-types"], [66, "derived-types"], [73, "derived-types"], [77, "derived-types"], [83, "derived-types"], [90, "derived-types"], [92, "derived-types"], [94, "derived-types"], [96, "derived-types"]], "Class CarApiFactory": [[10, "class-carapifactory"]], "Class CarRpcLibClient": [[11, "class-carrpclibclient"]], "Class CarRpcLibServer": [[12, "class-carrpclibserver"]], "Class CubeGeoFence": [[13, "class-cubegeofence"]], "Class DebugPhysicsBody": [[14, "class-debugphysicsbody"]], "Class DebugPhysicsBody::WrenchVertex": [[15, "class-debugphysicsbody-wrenchvertex"]], "Class DistanceBase": [[16, "class-distancebase"]], "Class DistanceSimple": [[17, "class-distancesimple"]], "Class Environment": [[18, "class-environment"]], "Class ExternalPhysicsEngine": [[19, "class-externalphysicsengine"]], "Class FastPhysicsEngine": [[20, "class-fastphysicsengine"]], "Class GpsBase": [[21, "class-gpsbase"]], "Class GpsSimple": [[22, "class-gpssimple"]], "Class IGeoFence": [[23, "class-igeofence"]], "Class ImuSimple": [[24, "class-imusimple"]], "Class Kinematics": [[25, "class-kinematics"]], "Class LidarBase": [[26, "class-lidarbase"]], "Class LidarSimple": [[27, "class-lidarsimple"]], "Class MagnetometerBase": [[28, "class-magnetometerbase"]], "Class MagnetometerSimple": [[29, "class-magnetometersimple"]], "Class MavLinkMultirotorApi": [[30, "class-mavlinkmultirotorapi"]], "Class MavLinkMultirotorApi::MavLinkLogViewerLog": [[31, "class-mavlinkmultirotorapi-mavlinklogviewerlog"]], "Class MultirotorApiBase": [[32, "class-multirotorapibase"]], "Class MultirotorApiBase::ObsStrategyChanger": [[33, "class-multirotorapibase-obsstrategychanger"]], "Class MultirotorApiBase::SingleCall": [[34, "class-multirotorapibase-singlecall"]], "Class MultirotorApiBase::SingleTaskCall": [[35, "class-multirotorapibase-singletaskcall"]], "Class MultirotorApiBase::UnsafeMoveException": [[36, "class-multirotorapibase-unsafemoveexception"]], "Class MultirotorParams": [[37, "class-multirotorparams"]], "Class MultirotorParamsFactory": [[38, "class-multirotorparamsfactory"]], "Class MultirotorPhysicsBody": [[39, "class-multirotorphysicsbody"]], "Class MultirotorRpcLibClient": [[40, "class-multirotorrpclibclient"]], "Class MultirotorRpcLibServer": [[41, "class-multirotorrpclibserver"]], "Class ObstacleMap": [[42, "class-obstaclemap"]], "Class PhysXCarApi": [[43, "class-physxcarapi"]], "Class PhysicsBody": [[44, "class-physicsbody"]], "Class PhysicsBodyVertex": [[45, "class-physicsbodyvertex"]], "Class PhysicsEngineBase": [[46, "class-physicsenginebase"]], "Class PhysicsWorld": [[47, "class-physicsworld"]], "Class Px4MultirotorParams": [[48, "class-px4multirotorparams"]], "Class RotorActuator": [[49, "class-rotoractuator"]], "Class RpcLibClientBase": [[50, "class-rpclibclientbase"]], "Class RpcLibServerBase": [[51, "class-rpclibserverbase"]], "Class RpcLibServerBase::ApiNotSupported": [[52, "class-rpclibserverbase-apinotsupported"]], "Class SafetyEval": [[53, "class-safetyeval"]], "Class SensorBase": [[54, "class-sensorbase"]], "Class SensorCollection": [[55, "class-sensorcollection"]], "Class SensorFactory": [[56, "class-sensorfactory"]], "Class SimpleFlightApi": [[57, "class-simpleflightapi"]], "Class SimpleFlightBoard": [[58, "class-simpleflightboard"]], "Class SimpleFlightCommLink": [[59, "class-simpleflightcommlink"]], "Class SimpleFlightCommon": [[60, "class-simpleflightcommon"]], "Class SimpleFlightEstimator": [[61, "class-simpleflightestimator"]], "Class SimpleFlightQuadXParams": [[62, "class-simpleflightquadxparams"]], "Class SphereGeoFence": [[63, "class-spheregeofence"]], "Class VehicleApiBase": [[64, "class-vehicleapibase"]], "Class VehicleApiBase::VehicleCommandNotImplementedException": [[65, "class-vehicleapibase-vehiclecommandnotimplementedexception"]], "Class VehicleApiBase::VehicleControllerException": [[66, "class-vehicleapibase-vehiclecontrollerexception"]], "Class VehicleApiBase::VehicleMoveException": [[67, "class-vehicleapibase-vehiclemoveexception"]], "Class VehicleSimApiBase": [[68, "class-vehiclesimapibase"]], "Class World": [[69, "class-world"]], "Class WorldSimApiBase": [[70, "class-worldsimapibase"]], "Class CarRpcLibAdaptors": [[71, "class-carrpclibadaptors"]], "Class MultirotorRpcLibAdaptors": [[72, "class-multirotorrpclibadaptors"]], "Class RpcLibAdaptorsBase": [[73, "class-rpclibadaptorsbase"]], "Class AdaptiveController": [[74, "class-adaptivecontroller"]], "Class AngleLevelController": [[75, "class-anglelevelcontroller"]], "Base Types": [[75, "base-types"], [84, "base-types"], [98, "base-types"], [101, "base-types"], [102, "base-types"], [106, "base-types"]], "Class AngleRateController": [[76, "class-angleratecontroller"]], "Template Class Axis3": [[77, "template-class-axis3"]], "Template Class Axis4": [[78, "template-class-axis4"]], "Class CascadeController": [[79, "class-cascadecontroller"]], "Class ConstantOutputController": [[80, "class-constantoutputcontroller"]], "Class Firmware": [[81, "class-firmware"]], "Class GoalMode": [[82, "class-goalmode"]], "Class IAxisController": [[83, "class-iaxiscontroller"]], "Class IBoard": [[84, "class-iboard"]], "Class IBoardClock": [[85, "class-iboardclock"]], "Class IBoardInputPins": [[86, "class-iboardinputpins"]], "Class IBoardOutputPins": [[87, "class-iboardoutputpins"]], "Class IBoardSensors": [[88, "class-iboardsensors"]], "Class ICommLink": [[89, "class-icommlink"]], "Class IController": [[90, "class-icontroller"]], "Class IFirmware": [[91, "class-ifirmware"]], "Class IGoal": [[92, "class-igoal"]], "Class IOffboardApi": [[93, "class-ioffboardapi"]], "Template Class IPidIntegrator": [[94, "template-class-ipidintegrator"]], "Class IStateEstimator": [[95, "class-istateestimator"]], "Class IUpdatable": [[96, "class-iupdatable"]], "Class Mixer": [[97, "class-mixer"]], "Class OffboardApi": [[98, "class-offboardapi"]], "Class PassthroughController": [[99, "class-passthroughcontroller"]], "Template Class PidController": [[100, "template-class-pidcontroller"]], "Class PositionController": [[101, "class-positioncontroller"]], "Class RemoteControl": [[102, "class-remotecontrol"]], "Template Class RungKuttaPidIntegrator": [[103, "template-class-rungkuttapidintegrator"]], "Template Class StdPidIntegrator": [[104, "template-class-stdpidintegrator"]], "Class VehicleState": [[105, "class-vehiclestate"]], "Class VelocityController": [[106, "class-velocitycontroller"]], "Define check": [[107, "define-check"], [109, "define-check"], [111, "define-check"], [113, "define-check"], [115, "define-check"], [117, "define-check"]], "Define Documentation": [[107, "define-documentation"], [108, "define-documentation"], [109, "define-documentation"], [110, "define-documentation"], [111, "define-documentation"], [112, "define-documentation"], [113, "define-documentation"], [114, "define-documentation"], [115, "define-documentation"], [116, "define-documentation"], [117, "define-documentation"], [118, "define-documentation"]], "Define RPCLIB_MSGPACK": [[108, "define-rpclib-msgpack"], [110, "define-rpclib-msgpack"], [112, "define-rpclib-msgpack"], [114, "define-rpclib-msgpack"], [116, "define-rpclib-msgpack"], [118, "define-rpclib-msgpack"]], "Directory AutonomyLib": [[119, "directory-autonomylib"]], "Subdirectories": [[119, "subdirectories"], [121, "subdirectories"], [125, "subdirectories"], [132, "subdirectories"], [133, "subdirectories"], [135, "subdirectories"], [138, "subdirectories"], [140, "subdirectories"], [143, "subdirectories"], [144, "subdirectories"], [146, "subdirectories"], [149, "subdirectories"], [150, "subdirectories"], [152, "subdirectories"]], "Directory docs": [[120, "directory-docs"]], "Files": [[120, "files"], [122, "files"], [123, "files"], [124, "files"], [125, "files"], [126, "files"], [127, "files"], [128, "files"], [129, "files"], [130, "files"], [131, "files"], [133, "files"], [134, "files"], [136, "files"], [137, "files"], [138, "files"], [139, "files"], [141, "files"], [142, "files"], [143, "files"], [144, "files"], [145, "files"], [147, "files"], [148, "files"], [151, "files"], [153, "files"], [490, "files"]], "Directory include": [[121, "directory-include"]], "Directory api": [[122, "directory-api"], [134, "directory-api"], [139, "directory-api"], [147, "directory-api"], [151, "directory-api"], [153, "directory-api"]], "Directory physics": [[123, "directory-physics"]], "Directory safety": [[124, "directory-safety"], [148, "directory-safety"]], "Directory sensors": [[125, "directory-sensors"]], "Directory barometer": [[126, "directory-barometer"]], "Directory distance": [[127, "directory-distance"]], "Directory gps": [[128, "directory-gps"]], "Directory imu": [[129, "directory-imu"]], "Directory lidar": [[130, "directory-lidar"]], "Directory magnetometer": [[131, "directory-magnetometer"]], "Directory vehicles": [[132, "directory-vehicles"], [149, "directory-vehicles"]], "Directory car": [[133, "directory-car"], [150, "directory-car"]], "Directory firmwares": [[135, "directory-firmwares"], [140, "directory-firmwares"]], "Directory ardurover": [[136, "directory-ardurover"]], "Directory physxcar": [[137, "directory-physxcar"]], "Directory multirotor": [[138, "directory-multirotor"], [152, "directory-multirotor"]], "Directory arducopter": [[141, "directory-arducopter"]], "Directory mavlink": [[142, "directory-mavlink"]], "Directory simple_flight": [[143, "directory-simple-flight"]], "Directory firmware": [[144, "directory-firmware"]], "Directory interfaces": [[145, "directory-interfaces"]], "Directory src": [[146, "directory-src"]], "Enum DrivetrainType": [[154, "enum-drivetraintype"]], "Enum Documentation": [[154, "enum-documentation"], [155, "enum-documentation"], [156, "enum-documentation"], [157, "enum-documentation"], [158, "enum-documentation"]], "Enum LandedState": [[155, "enum-landedstate"]], "Enum RotorTurningDirection": [[156, "enum-rotorturningdirection"]], "Enum GoalModeType": [[157, "enum-goalmodetype"]], "Enum VehicleStateType": [[158, "enum-vehiclestatetype"]], "File conf.py": [[159, "file-conf-py"]], "Contents": [[159, "contents"], [160, "contents"], [161, "contents"], [162, "contents"], [163, "contents"], [164, "contents"], [165, "contents"], [166, "contents"], [167, "contents"], [168, "contents"], [169, "contents"], [170, "contents"], [171, "contents"], [172, "contents"], [173, "contents"], [174, "contents"], [175, "contents"], [176, "contents"], [177, "contents"], [178, "contents"], [179, "contents"], [180, "contents"], [181, "contents"], [182, "contents"], [183, "contents"], [184, "contents"], [185, "contents"], [186, "contents"], [187, "contents"], [188, "contents"], [189, "contents"], [190, "contents"], [191, "contents"], [192, "contents"], [193, "contents"], [194, "contents"], [195, "contents"], [196, "contents"], [197, "contents"], [198, "contents"], [199, "contents"], [200, "contents"], [201, "contents"], [202, "contents"], [203, "contents"], [204, "contents"], [205, "contents"], [206, "contents"], [207, "contents"], [208, "contents"], [209, "contents"], [210, "contents"], [211, "contents"], [212, "contents"], [213, "contents"], [214, "contents"], [215, "contents"], [216, "contents"], [217, "contents"], [218, "contents"], [219, "contents"], [220, "contents"], [221, "contents"], [222, "contents"], [223, "contents"], [224, "contents"], [225, "contents"], [226, "contents"], [227, "contents"], [228, "contents"], [229, "contents"], [230, "contents"], [231, "contents"], [232, "contents"], [233, "contents"], [234, "contents"], [235, "contents"], [236, "contents"], [237, "contents"], [238, "contents"], [239, "contents"], [240, "contents"], [241, "contents"], [242, "contents"], [243, "contents"], [244, "contents"], [245, "contents"], [246, "contents"], [247, "contents"], [248, "contents"], [249, "contents"], [250, "contents"], [251, "contents"], [252, "contents"], [253, "contents"], [254, "contents"], [255, "contents"], [256, "contents"], [257, "contents"], [258, "contents"], [259, "contents"], [260, "contents"], [261, "contents"], [262, "contents"], [263, "contents"], [264, "contents"], [265, "contents"], [266, "contents"], [267, "contents"], [268, "contents"], [269, "contents"], [270, "contents"], [271, "contents"], [280, "contents"], [282, "contents"], [283, "contents"], [284, "contents"], [285, "contents"]], "Definition (AutonomyLib/docs/conf.py)": [[159, "definition-autonomylib-docs-conf-py"]], "Namespaces": [[159, "namespaces"], [160, "namespaces"], [161, "namespaces"], [162, "namespaces"], [163, "namespaces"], [164, "namespaces"], [165, "namespaces"], [166, "namespaces"], [167, "namespaces"], [168, "namespaces"], [169, "namespaces"], [170, "namespaces"], [171, "namespaces"], [172, "namespaces"], [173, "namespaces"], [174, "namespaces"], [175, "namespaces"], [176, "namespaces"], [177, "namespaces"], [178, "namespaces"], [179, "namespaces"], [180, "namespaces"], [181, "namespaces"], [182, "namespaces"], [183, "namespaces"], [184, "namespaces"], [185, "namespaces"], [186, "namespaces"], [187, "namespaces"], [188, "namespaces"], [189, "namespaces"], [190, "namespaces"], [191, "namespaces"], [192, "namespaces"], [193, "namespaces"], [194, "namespaces"], [195, "namespaces"], [196, "namespaces"], [197, "namespaces"], [198, "namespaces"], [199, "namespaces"], [200, "namespaces"], [201, "namespaces"], [202, "namespaces"], [203, "namespaces"], [204, "namespaces"], [205, "namespaces"], [206, "namespaces"], [207, "namespaces"], [208, "namespaces"], [209, "namespaces"], [210, "namespaces"], [211, "namespaces"], [212, "namespaces"], [213, "namespaces"], [214, "namespaces"], [215, "namespaces"], [216, "namespaces"], [217, "namespaces"], [218, "namespaces"], [219, "namespaces"], [220, "namespaces"], [221, "namespaces"], [222, "namespaces"], [223, "namespaces"], [224, "namespaces"], [225, "namespaces"], [226, "namespaces"], [227, "namespaces"], [228, "namespaces"], [229, "namespaces"], [230, "namespaces"], [231, "namespaces"], [232, "namespaces"], [233, "namespaces"], [234, "namespaces"], [235, "namespaces"], [236, "namespaces"], [237, "namespaces"], [238, "namespaces"], [239, "namespaces"], [240, "namespaces"], [241, "namespaces"], [242, "namespaces"], [243, "namespaces"], [244, "namespaces"], [245, "namespaces"], [246, "namespaces"], [247, "namespaces"], [248, "namespaces"], [249, "namespaces"], [250, "namespaces"], [251, "namespaces"], [252, "namespaces"], [253, "namespaces"], [254, "namespaces"], [255, "namespaces"], [256, "namespaces"], [257, "namespaces"], [258, "namespaces"], [259, "namespaces"], [260, "namespaces"], [261, "namespaces"], [262, "namespaces"], [263, "namespaces"], [264, "namespaces"], [265, "namespaces"], [266, "namespaces"], [267, "namespaces"], [268, "namespaces"], [269, "namespaces"], [270, "namespaces"], [271, "namespaces"], [279, "namespaces"], [282, "namespaces"]], "Variables": [[159, "variables"], [279, "variables"], [280, "variables"]], "File ApiProvider.hpp": [[160, "file-apiprovider-hpp"]], "Definition (AutonomyLib/include/api/ApiProvider.hpp)": [[160, "definition-autonomylib-include-api-apiprovider-hpp"]], "Includes": [[160, "includes"], [161, "includes"], [162, "includes"], [163, "includes"], [164, "includes"], [165, "includes"], [166, "includes"], [167, "includes"], [168, "includes"], [169, "includes"], [170, "includes"], [171, "includes"], [172, "includes"], [173, "includes"], [174, "includes"], [175, "includes"], [176, "includes"], [177, "includes"], [178, "includes"], [179, "includes"], [180, "includes"], [181, "includes"], [182, "includes"], [183, "includes"], [184, "includes"], [185, "includes"], [186, "includes"], [187, "includes"], [188, "includes"], [189, "includes"], [190, "includes"], [191, "includes"], [192, "includes"], [193, "includes"], [194, "includes"], [195, "includes"], [196, "includes"], [197, "includes"], [198, "includes"], [199, "includes"], [200, "includes"], [201, "includes"], [202, "includes"], [203, "includes"], [204, "includes"], [205, "includes"], [206, "includes"], [207, "includes"], [208, "includes"], [209, "includes"], [210, "includes"], [211, "includes"], [212, "includes"], [213, "includes"], [214, "includes"], [215, "includes"], [216, "includes"], [217, "includes"], [218, "includes"], [219, "includes"], [220, "includes"], [221, "includes"], [222, "includes"], [223, "includes"], [224, "includes"], [225, "includes"], [226, "includes"], [227, "includes"], [228, "includes"], [229, "includes"], [230, "includes"], [231, "includes"], [233, "includes"], [234, "includes"], [235, "includes"], [236, "includes"], [237, "includes"], [238, "includes"], [239, "includes"], [240, "includes"], [241, "includes"], [242, "includes"], [243, "includes"], [244, "includes"], [245, "includes"], [246, "includes"], [247, "includes"], [248, "includes"], [249, "includes"], [250, "includes"], [251, "includes"], [252, "includes"], [253, "includes"], [255, "includes"], [256, "includes"], [257, "includes"], [258, "includes"], [259, "includes"], [260, "includes"], [261, "includes"], [263, "includes"], [264, "includes"], [265, "includes"], [266, "includes"], [267, "includes"], [268, "includes"], [269, "includes"], [270, "includes"], [271, "includes"]], "Included By": [[160, "included-by"], [161, "included-by"], [162, "included-by"], [163, "included-by"], [164, "included-by"], [165, "included-by"], [166, "included-by"], [167, "included-by"], [169, "included-by"], [172, "included-by"], [173, "included-by"], [174, "included-by"], [175, "included-by"], [177, "included-by"], [179, "included-by"], [180, "included-by"], [181, "included-by"], [183, "included-by"], [184, "included-by"], [185, "included-by"], [186, "included-by"], [187, "included-by"], [188, "included-by"], [189, "included-by"], [190, "included-by"], [191, "included-by"], [192, "included-by"], [193, "included-by"], [194, "included-by"], [195, "included-by"], [196, "included-by"], [197, "included-by"], [198, "included-by"], [199, "included-by"], [200, "included-by"], [201, "included-by"], [202, "included-by"], [204, "included-by"], [205, "included-by"], [206, "included-by"], [207, "included-by"], [208, "included-by"], [209, "included-by"], [213, "included-by"], [214, "included-by"], [215, "included-by"], [216, "included-by"], [217, "included-by"], [218, "included-by"], [219, "included-by"], [220, "included-by"], [221, "included-by"], [222, "included-by"], [223, "included-by"], [224, "included-by"], [226, "included-by"], [227, "included-by"], [228, "included-by"], [229, "included-by"], [230, "included-by"], [231, "included-by"], [232, "included-by"], [233, "included-by"], [234, "included-by"], [235, "included-by"], [236, "included-by"], [237, "included-by"], [238, "included-by"], [239, "included-by"], [240, "included-by"], [241, "included-by"], [242, "included-by"], [243, "included-by"], [244, "included-by"], [245, "included-by"], [246, "included-by"], [247, "included-by"], [248, "included-by"], [249, "included-by"], [250, "included-by"], [251, "included-by"], [252, "included-by"], [253, "included-by"], [254, "included-by"], [255, "included-by"], [256, "included-by"], [257, "included-by"], [258, "included-by"], [259, "included-by"], [260, "included-by"], [261, "included-by"], [262, "included-by"]], "Classes": [[160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [270, "classes"], [283, "classes"], [284, "classes"], [285, "classes"]], "File ApiServerBase.hpp": [[161, "file-apiserverbase-hpp"]], "Definition (AutonomyLib/include/api/ApiServerBase.hpp)": [[161, "definition-autonomylib-include-api-apiserverbase-hpp"]], "File RpcLibAdaptorsBase.hpp": [[162, "file-rpclibadaptorsbase-hpp"]], "Definition (AutonomyLib/include/api/RpcLibAdaptorsBase.hpp)": [[162, "definition-autonomylib-include-api-rpclibadaptorsbase-hpp"]], "Functions": [[162, "functions"], [217, "functions"], [279, "functions"]], "File RpcLibClientBase.hpp": [[163, "file-rpclibclientbase-hpp"]], "Definition (AutonomyLib/include/api/RpcLibClientBase.hpp)": [[163, "definition-autonomylib-include-api-rpclibclientbase-hpp"]], "File RpcLibServerBase.hpp": [[164, "file-rpclibserverbase-hpp"]], "Definition (AutonomyLib/include/api/RpcLibServerBase.hpp)": [[164, "definition-autonomylib-include-api-rpclibserverbase-hpp"]], "File VehicleApiBase.hpp": [[165, "file-vehicleapibase-hpp"]], "Definition (AutonomyLib/include/api/VehicleApiBase.hpp)": [[165, "definition-autonomylib-include-api-vehicleapibase-hpp"]], "File VehicleSimApiBase.hpp": [[166, "file-vehiclesimapibase-hpp"]], "Definition (AutonomyLib/include/api/VehicleSimApiBase.hpp)": [[166, "definition-autonomylib-include-api-vehiclesimapibase-hpp"]], "File WorldSimApiBase.hpp": [[167, "file-worldsimapibase-hpp"]], "Definition (AutonomyLib/include/api/WorldSimApiBase.hpp)": [[167, "definition-autonomylib-include-api-worldsimapibase-hpp"]], "File DebugPhysicsBody.hpp": [[168, "file-debugphysicsbody-hpp"]], "Definition (AutonomyLib/include/physics/DebugPhysicsBody.hpp)": [[168, "definition-autonomylib-include-physics-debugphysicsbody-hpp"]], "File Environment.hpp": [[169, "file-environment-hpp"]], "Definition (AutonomyLib/include/physics/Environment.hpp)": [[169, "definition-autonomylib-include-physics-environment-hpp"]], "File ExternalPhysicsEngine.hpp": [[170, "file-externalphysicsengine-hpp"]], "Definition (AutonomyLib/include/physics/ExternalPhysicsEngine.hpp)": [[170, "definition-autonomylib-include-physics-externalphysicsengine-hpp"]], "File FastPhysicsEngine.hpp": [[171, "file-fastphysicsengine-hpp"]], "Definition (AutonomyLib/include/physics/FastPhysicsEngine.hpp)": [[171, "definition-autonomylib-include-physics-fastphysicsengine-hpp"]], "File Kinematics.hpp": [[172, "file-kinematics-hpp"]], "Definition (AutonomyLib/include/physics/Kinematics.hpp)": [[172, "definition-autonomylib-include-physics-kinematics-hpp"]], "File PhysicsBody.hpp": [[173, "file-physicsbody-hpp"]], "Definition (AutonomyLib/include/physics/PhysicsBody.hpp)": [[173, "definition-autonomylib-include-physics-physicsbody-hpp"]], "File PhysicsBodyVertex.hpp": [[174, "file-physicsbodyvertex-hpp"]], "Definition (AutonomyLib/include/physics/PhysicsBodyVertex.hpp)": [[174, "definition-autonomylib-include-physics-physicsbodyvertex-hpp"]], "File PhysicsEngineBase.hpp": [[175, "file-physicsenginebase-hpp"]], "Definition (AutonomyLib/include/physics/PhysicsEngineBase.hpp)": [[175, "definition-autonomylib-include-physics-physicsenginebase-hpp"]], "File PhysicsWorld.hpp": [[176, "file-physicsworld-hpp"]], "Definition (AutonomyLib/include/physics/PhysicsWorld.hpp)": [[176, "definition-autonomylib-include-physics-physicsworld-hpp"]], "File World.hpp": [[177, "file-world-hpp"]], "Definition (AutonomyLib/include/physics/World.hpp)": [[177, "definition-autonomylib-include-physics-world-hpp"]], "File CubeGeoFence.hpp": [[178, "file-cubegeofence-hpp"]], "Definition (AutonomyLib/include/safety/CubeGeoFence.hpp)": [[178, "definition-autonomylib-include-safety-cubegeofence-hpp"]], "File IGeoFence.hpp": [[179, "file-igeofence-hpp"]], "Definition (AutonomyLib/include/safety/IGeoFence.hpp)": [[179, "definition-autonomylib-include-safety-igeofence-hpp"]], "File ObstacleMap.hpp": [[180, "file-obstaclemap-hpp"]], "Definition (AutonomyLib/include/safety/ObstacleMap.hpp)": [[180, "definition-autonomylib-include-safety-obstaclemap-hpp"]], "File SafetyEval.hpp": [[181, "file-safetyeval-hpp"]], "Definition (AutonomyLib/include/safety/SafetyEval.hpp)": [[181, "definition-autonomylib-include-safety-safetyeval-hpp"]], "File SphereGeoFence.hpp": [[182, "file-spheregeofence-hpp"]], "Definition (AutonomyLib/include/safety/SphereGeoFence.hpp)": [[182, "definition-autonomylib-include-safety-spheregeofence-hpp"]], "File SensorBase.hpp": [[183, "file-sensorbase-hpp"]], "Definition (AutonomyLib/include/sensors/SensorBase.hpp)": [[183, "definition-autonomylib-include-sensors-sensorbase-hpp"]], "File SensorCollection.hpp": [[184, "file-sensorcollection-hpp"]], "Definition (AutonomyLib/include/sensors/SensorCollection.hpp)": [[184, "definition-autonomylib-include-sensors-sensorcollection-hpp"]], "File SensorFactory.hpp": [[185, "file-sensorfactory-hpp"]], "Definition (AutonomyLib/include/sensors/SensorFactory.hpp)": [[185, "definition-autonomylib-include-sensors-sensorfactory-hpp"]], "File BarometerBase.hpp": [[186, "file-barometerbase-hpp"]], "Definition (AutonomyLib/include/sensors/barometer/BarometerBase.hpp)": [[186, "definition-autonomylib-include-sensors-barometer-barometerbase-hpp"]], "File BarometerSimple.hpp": [[187, "file-barometersimple-hpp"]], "Definition (AutonomyLib/include/sensors/barometer/BarometerSimple.hpp)": [[187, "definition-autonomylib-include-sensors-barometer-barometersimple-hpp"]], "File BarometerSimpleParams.hpp": [[188, "file-barometersimpleparams-hpp"]], "Definition (AutonomyLib/include/sensors/barometer/BarometerSimpleParams.hpp)": [[188, "definition-autonomylib-include-sensors-barometer-barometersimpleparams-hpp"]], "File DistanceBase.hpp": [[189, "file-distancebase-hpp"]], "Definition (AutonomyLib/include/sensors/distance/DistanceBase.hpp)": [[189, "definition-autonomylib-include-sensors-distance-distancebase-hpp"]], "File DistanceSimple.hpp": [[190, "file-distancesimple-hpp"]], "Definition (AutonomyLib/include/sensors/distance/DistanceSimple.hpp)": [[190, "definition-autonomylib-include-sensors-distance-distancesimple-hpp"]], "File DistanceSimpleParams.hpp": [[191, "file-distancesimpleparams-hpp"]], "Definition (AutonomyLib/include/sensors/distance/DistanceSimpleParams.hpp)": [[191, "definition-autonomylib-include-sensors-distance-distancesimpleparams-hpp"]], "File GpsBase.hpp": [[192, "file-gpsbase-hpp"]], "Definition (AutonomyLib/include/sensors/gps/GpsBase.hpp)": [[192, "definition-autonomylib-include-sensors-gps-gpsbase-hpp"]], "File GpsSimple.hpp": [[193, "file-gpssimple-hpp"]], "Definition (AutonomyLib/include/sensors/gps/GpsSimple.hpp)": [[193, "definition-autonomylib-include-sensors-gps-gpssimple-hpp"]], "File GpsSimpleParams.hpp": [[194, "file-gpssimpleparams-hpp"]], "Definition (AutonomyLib/include/sensors/gps/GpsSimpleParams.hpp)": [[194, "definition-autonomylib-include-sensors-gps-gpssimpleparams-hpp"]], "File ImuSimple.hpp": [[195, "file-imusimple-hpp"]], "Definition (AutonomyLib/include/sensors/imu/ImuSimple.hpp)": [[195, "definition-autonomylib-include-sensors-imu-imusimple-hpp"]], "File ImuSimpleParams.hpp": [[196, "file-imusimpleparams-hpp"]], "Definition (AutonomyLib/include/sensors/imu/ImuSimpleParams.hpp)": [[196, "definition-autonomylib-include-sensors-imu-imusimpleparams-hpp"]], "File LidarBase.hpp": [[197, "file-lidarbase-hpp"]], "Definition (AutonomyLib/include/sensors/lidar/LidarBase.hpp)": [[197, "definition-autonomylib-include-sensors-lidar-lidarbase-hpp"]], "File LidarSimple.hpp": [[198, "file-lidarsimple-hpp"]], "Definition (AutonomyLib/include/sensors/lidar/LidarSimple.hpp)": [[198, "definition-autonomylib-include-sensors-lidar-lidarsimple-hpp"]], "File LidarSimpleParams.hpp": [[199, "file-lidarsimpleparams-hpp"]], "Definition (AutonomyLib/include/sensors/lidar/LidarSimpleParams.hpp)": [[199, "definition-autonomylib-include-sensors-lidar-lidarsimpleparams-hpp"]], "File MagnetometerBase.hpp": [[200, "file-magnetometerbase-hpp"]], "Definition (AutonomyLib/include/sensors/magnetometer/MagnetometerBase.hpp)": [[200, "definition-autonomylib-include-sensors-magnetometer-magnetometerbase-hpp"]], "File MagnetometerSimple.hpp": [[201, "file-magnetometersimple-hpp"]], "Definition (AutonomyLib/include/sensors/magnetometer/MagnetometerSimple.hpp)": [[201, "definition-autonomylib-include-sensors-magnetometer-magnetometersimple-hpp"]], "File MagnetometerSimpleParams.hpp": [[202, "file-magnetometersimpleparams-hpp"]], "Definition (AutonomyLib/include/sensors/magnetometer/MagnetometerSimpleParams.hpp)": [[202, "definition-autonomylib-include-sensors-magnetometer-magnetometersimpleparams-hpp"]], "File CarApiFactory.hpp": [[203, "file-carapifactory-hpp"]], "Definition (AutonomyLib/include/vehicles/car/CarApiFactory.hpp)": [[203, "definition-autonomylib-include-vehicles-car-carapifactory-hpp"]], "File CarApiBase.hpp": [[204, "file-carapibase-hpp"]], "Definition (AutonomyLib/include/vehicles/car/api/CarApiBase.hpp)": [[204, "definition-autonomylib-include-vehicles-car-api-carapibase-hpp"]], "File CarRpcLibAdaptors.hpp": [[205, "file-carrpclibadaptors-hpp"]], "Definition (AutonomyLib/include/vehicles/car/api/CarRpcLibAdaptors.hpp)": [[205, "definition-autonomylib-include-vehicles-car-api-carrpclibadaptors-hpp"]], "File CarRpcLibClient.hpp": [[206, "file-carrpclibclient-hpp"]], "Definition (AutonomyLib/include/vehicles/car/api/CarRpcLibClient.hpp)": [[206, "definition-autonomylib-include-vehicles-car-api-carrpclibclient-hpp"]], "File CarRpcLibServer.hpp": [[207, "file-carrpclibserver-hpp"]], "Definition (AutonomyLib/include/vehicles/car/api/CarRpcLibServer.hpp)": [[207, "definition-autonomylib-include-vehicles-car-api-carrpclibserver-hpp"]], "File ArduRoverApi.hpp": [[208, "file-arduroverapi-hpp"]], "Definition (AutonomyLib/include/vehicles/car/firmwares/ardurover/ArduRoverApi.hpp)": [[208, "definition-autonomylib-include-vehicles-car-firmwares-ardurover-arduroverapi-hpp"]], "File PhysXCarApi.hpp": [[209, "file-physxcarapi-hpp"]], "Definition (AutonomyLib/include/vehicles/car/firmwares/physxcar/PhysXCarApi.hpp)": [[209, "definition-autonomylib-include-vehicles-car-firmwares-physxcar-physxcarapi-hpp"]], "File MultiRotorParams.hpp": [[210, "file-multirotorparams-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/MultiRotorParams.hpp)": [[210, "definition-autonomylib-include-vehicles-multirotor-multirotorparams-hpp"]], "File MultiRotorParamsFactory.hpp": [[211, "file-multirotorparamsfactory-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/MultiRotorParamsFactory.hpp)": [[211, "definition-autonomylib-include-vehicles-multirotor-multirotorparamsfactory-hpp"]], "File MultiRotorPhysicsBody.hpp": [[212, "file-multirotorphysicsbody-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/MultiRotorPhysicsBody.hpp)": [[212, "definition-autonomylib-include-vehicles-multirotor-multirotorphysicsbody-hpp"]], "File RotorActuator.hpp": [[213, "file-rotoractuator-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/RotorActuator.hpp)": [[213, "definition-autonomylib-include-vehicles-multirotor-rotoractuator-hpp"]], "File RotorParams.hpp": [[214, "file-rotorparams-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/RotorParams.hpp)": [[214, "definition-autonomylib-include-vehicles-multirotor-rotorparams-hpp"]], "Enums": [[214, "enums"], [216, "enums"], [248, "enums"], [279, "enums"], [283, "enums"], [285, "enums"]], "File MultirotorApiBase.hpp": [[215, "file-multirotorapibase-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/api/MultirotorApiBase.hpp)": [[215, "definition-autonomylib-include-vehicles-multirotor-api-multirotorapibase-hpp"]], "File MultirotorCommon.hpp": [[216, "file-multirotorcommon-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/api/MultirotorCommon.hpp)": [[216, "definition-autonomylib-include-vehicles-multirotor-api-multirotorcommon-hpp"]], "File MultirotorRpcLibAdaptors.hpp": [[217, "file-multirotorrpclibadaptors-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/api/MultirotorRpcLibAdaptors.hpp)": [[217, "definition-autonomylib-include-vehicles-multirotor-api-multirotorrpclibadaptors-hpp"]], "File MultirotorRpcLibClient.hpp": [[218, "file-multirotorrpclibclient-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/api/MultirotorRpcLibClient.hpp)": [[218, "definition-autonomylib-include-vehicles-multirotor-api-multirotorrpclibclient-hpp"]], "File MultirotorRpcLibServer.hpp": [[219, "file-multirotorrpclibserver-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/api/MultirotorRpcLibServer.hpp)": [[219, "definition-autonomylib-include-vehicles-multirotor-api-multirotorrpclibserver-hpp"]], "File ArduCopterApi.hpp": [[220, "file-arducopterapi-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/arducopter/ArduCopterApi.hpp)": [[220, "definition-autonomylib-include-vehicles-multirotor-firmwares-arducopter-arducopterapi-hpp"]], "File ArduCopterParams.hpp": [[221, "file-arducopterparams-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/arducopter/ArduCopterParams.hpp)": [[221, "definition-autonomylib-include-vehicles-multirotor-firmwares-arducopter-arducopterparams-hpp"]], "File ArduCopterSoloApi.hpp": [[222, "file-arducoptersoloapi-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/mavlink/ArduCopterSoloApi.hpp)": [[222, "definition-autonomylib-include-vehicles-multirotor-firmwares-mavlink-arducoptersoloapi-hpp"]], "File ArduCopterSoloParams.hpp": [[223, "file-arducoptersoloparams-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/mavlink/ArduCopterSoloParams.hpp)": [[223, "definition-autonomylib-include-vehicles-multirotor-firmwares-mavlink-arducoptersoloparams-hpp"]], "File MavLinkMultirotorApi.hpp": [[224, "file-mavlinkmultirotorapi-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/mavlink/MavLinkMultirotorApi.hpp)": [[224, "definition-autonomylib-include-vehicles-multirotor-firmwares-mavlink-mavlinkmultirotorapi-hpp"]], "File Px4MultiRotorParams.hpp": [[225, "file-px4multirotorparams-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/mavlink/Px4MultiRotorParams.hpp)": [[225, "definition-autonomylib-include-vehicles-multirotor-firmwares-mavlink-px4multirotorparams-hpp"]], "File SimpleFlightApi.hpp": [[226, "file-simpleflightapi-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/SimpleFlightApi.hpp)": [[226, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-simpleflightapi-hpp"]], "File SimpleFlightBoard.hpp": [[227, "file-simpleflightboard-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/SimpleFlightBoard.hpp)": [[227, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-simpleflightboard-hpp"]], "File SimpleFlightCommLink.hpp": [[228, "file-simpleflightcommlink-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/SimpleFlightCommLink.hpp)": [[228, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-simpleflightcommlink-hpp"]], "File SimpleFlightCommon.hpp": [[229, "file-simpleflightcommon-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/SimpleFlightCommon.hpp)": [[229, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-simpleflightcommon-hpp"]], "File SimpleFlightEstimator.hpp": [[230, "file-simpleflightestimator-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/SimpleFlightEstimator.hpp)": [[230, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-simpleflightestimator-hpp"]], "File SimpleFlightQuadXParams.hpp": [[231, "file-simpleflightquadxparams-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/SimpleFlightQuadXParams.hpp)": [[231, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-simpleflightquadxparams-hpp"]], "File AdaptiveController.hpp": [[232, "file-adaptivecontroller-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/AdaptiveController.hpp)": [[232, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-adaptivecontroller-hpp"]], "File AngleLevelController.hpp": [[233, "file-anglelevelcontroller-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/AngleLevelController.hpp)": [[233, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-anglelevelcontroller-hpp"]], "File AngleRateController.hpp": [[234, "file-angleratecontroller-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/AngleRateController.hpp)": [[234, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-angleratecontroller-hpp"]], "File CascadeController.hpp": [[235, "file-cascadecontroller-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/CascadeController.hpp)": [[235, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-cascadecontroller-hpp"]], "File ConstantOutputController.hpp": [[236, "file-constantoutputcontroller-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/ConstantOutputController.hpp)": [[236, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-constantoutputcontroller-hpp"]], "File Firmware.hpp": [[237, "file-firmware-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/Firmware.hpp)": [[237, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-firmware-hpp"]], "File Mixer.hpp": [[238, "file-mixer-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/Mixer.hpp)": [[238, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-mixer-hpp"]], "File OffboardApi.hpp": [[239, "file-offboardapi-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/OffboardApi.hpp)": [[239, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-offboardapi-hpp"]], "File Params.hpp": [[240, "file-params-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/Params.hpp)": [[240, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-params-hpp"]], "File PassthroughController.hpp": [[241, "file-passthroughcontroller-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/PassthroughController.hpp)": [[241, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-passthroughcontroller-hpp"]], "File PidController.hpp": [[242, "file-pidcontroller-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/PidController.hpp)": [[242, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-pidcontroller-hpp"]], "File PositionController.hpp": [[243, "file-positioncontroller-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/PositionController.hpp)": [[243, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-positioncontroller-hpp"]], "File RemoteControl.hpp": [[244, "file-remotecontrol-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/RemoteControl.hpp)": [[244, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-remotecontrol-hpp"]], "File RungKuttaPidIntegrator.hpp": [[245, "file-rungkuttapidintegrator-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/RungKuttaPidIntegrator.hpp)": [[245, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-rungkuttapidintegrator-hpp"]], "File StdPidIntegrator.hpp": [[246, "file-stdpidintegrator-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/StdPidIntegrator.hpp)": [[246, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-stdpidintegrator-hpp"]], "File VelocityController.hpp": [[247, "file-velocitycontroller-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/VelocityController.hpp)": [[247, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-velocitycontroller-hpp"]], "File CommonStructs.hpp": [[248, "file-commonstructs-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/CommonStructs.hpp)": [[248, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-commonstructs-hpp"]], "Typedefs": [[248, "typedefs"], [263, "typedefs"], [267, "typedefs"], [270, "typedefs"], [279, "typedefs"], [283, "typedefs"], [285, "typedefs"]], "File IAxisController.hpp": [[249, "file-iaxiscontroller-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IAxisController.hpp)": [[249, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-iaxiscontroller-hpp"]], "File IBoard.hpp": [[250, "file-iboard-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IBoard.hpp)": [[250, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-iboard-hpp"]], "File IBoardClock.hpp": [[251, "file-iboardclock-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IBoardClock.hpp)": [[251, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-iboardclock-hpp"]], "File IBoardInputPins.hpp": [[252, "file-iboardinputpins-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IBoardInputPins.hpp)": [[252, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-iboardinputpins-hpp"]], "File IBoardOutputPins.hpp": [[253, "file-iboardoutputpins-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IBoardOutputPins.hpp)": [[253, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-iboardoutputpins-hpp"]], "File IBoardSensors.hpp": [[254, "file-iboardsensors-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IBoardSensors.hpp)": [[254, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-iboardsensors-hpp"]], "File ICommLink.hpp": [[255, "file-icommlink-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/ICommLink.hpp)": [[255, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-icommlink-hpp"]], "File IController.hpp": [[256, "file-icontroller-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IController.hpp)": [[256, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-icontroller-hpp"]], "File IFirmware.hpp": [[257, "file-ifirmware-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IFirmware.hpp)": [[257, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-ifirmware-hpp"]], "File IGoal.hpp": [[258, "file-igoal-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IGoal.hpp)": [[258, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-igoal-hpp"]], "File IOffboardApi.hpp": [[259, "file-ioffboardapi-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IOffboardApi.hpp)": [[259, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-ioffboardapi-hpp"]], "File IPidIntegrator.hpp": [[260, "file-ipidintegrator-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IPidIntegrator.hpp)": [[260, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-ipidintegrator-hpp"]], "File IStateEstimator.hpp": [[261, "file-istateestimator-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IStateEstimator.hpp)": [[261, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-istateestimator-hpp"]], "File IUpdatable.hpp": [[262, "file-iupdatable-hpp"]], "Definition (AutonomyLib/include/vehicles/multirotor/firmwares/simple_flight/firmware/interfaces/IUpdatable.hpp)": [[262, "definition-autonomylib-include-vehicles-multirotor-firmwares-simple-flight-firmware-interfaces-iupdatable-hpp"]], "File RpcLibClientBase.cpp": [[263, "file-rpclibclientbase-cpp"]], "Definition (AutonomyLib/src/api/RpcLibClientBase.cpp)": [[263, "definition-autonomylib-src-api-rpclibclientbase-cpp"]], "Defines": [[263, "defines"], [264, "defines"], [267, "defines"], [268, "defines"], [270, "defines"], [271, "defines"], [279, "defines"]], "File RpcLibServerBase.cpp": [[264, "file-rpclibserverbase-cpp"]], "Definition (AutonomyLib/src/api/RpcLibServerBase.cpp)": [[264, "definition-autonomylib-src-api-rpclibserverbase-cpp"]], "File ObstacleMap.cpp": [[265, "file-obstaclemap-cpp"]], "Definition (AutonomyLib/src/safety/ObstacleMap.cpp)": [[265, "definition-autonomylib-src-safety-obstaclemap-cpp"]], "File SafetyEval.cpp": [[266, "file-safetyeval-cpp"]], "Definition (AutonomyLib/src/safety/SafetyEval.cpp)": [[266, "definition-autonomylib-src-safety-safetyeval-cpp"]], "File CarRpcLibClient.cpp": [[267, "file-carrpclibclient-cpp"]], "Definition (AutonomyLib/src/vehicles/car/api/CarRpcLibClient.cpp)": [[267, "definition-autonomylib-src-vehicles-car-api-carrpclibclient-cpp"]], "File CarRpcLibServer.cpp": [[268, "file-carrpclibserver-cpp"]], "Definition (AutonomyLib/src/vehicles/car/api/CarRpcLibServer.cpp)": [[268, "definition-autonomylib-src-vehicles-car-api-carrpclibserver-cpp"]], "File MultirotorApiBase.cpp": [[269, "file-multirotorapibase-cpp"]], "Definition (AutonomyLib/src/vehicles/multirotor/api/MultirotorApiBase.cpp)": [[269, "definition-autonomylib-src-vehicles-multirotor-api-multirotorapibase-cpp"]], "File MultirotorRpcLibClient.cpp": [[270, "file-multirotorrpclibclient-cpp"]], "Definition (AutonomyLib/src/vehicles/multirotor/api/MultirotorRpcLibClient.cpp)": [[270, "definition-autonomylib-src-vehicles-multirotor-api-multirotorrpclibclient-cpp"]], "File MultirotorRpcLibServer.cpp": [[271, "file-multirotorrpclibserver-cpp"]], "Definition (AutonomyLib/src/vehicles/multirotor/api/MultirotorRpcLibServer.cpp)": [[271, "definition-autonomylib-src-vehicles-multirotor-api-multirotorrpclibserver-cpp"]], "Function MSGPACK_ADD_ENUM(nervosys::autonomylib::DrivetrainType)": [[272, "function-msgpack-add-enum-nervosys-autonomylib-drivetraintype"]], "Function Documentation": [[272, "function-documentation"], [273, "function-documentation"], [274, "function-documentation"], [275, "function-documentation"], [276, "function-documentation"], [277, "function-documentation"], [278, "function-documentation"]], "Function MSGPACK_ADD_ENUM(nervosys::autonomylib::LandedState)": [[273, "function-msgpack-add-enum-nervosys-autonomylib-landedstate"]], "Function MSGPACK_ADD_ENUM(nervosys::autonomylib::GpsBase::GnssFixType)": [[274, "function-msgpack-add-enum-nervosys-autonomylib-gpsbase-gnssfixtype"]], "Function MSGPACK_ADD_ENUM(nervosys::autonomylib::SafetyEval::ObsAvoidanceStrategy)": [[275, "function-msgpack-add-enum-nervosys-autonomylib-safetyeval-obsavoidancestrategy"]], "Function MSGPACK_ADD_ENUM(nervosys::autonomylib::SafetyEval::SafetyViolationType_)": [[276, "function-msgpack-add-enum-nervosys-autonomylib-safetyeval-safetyviolationtype"]], "Function MSGPACK_ADD_ENUM(nervosys::autonomylib::WorldSimApiBase::WeatherParameter)": [[277, "function-msgpack-add-enum-nervosys-autonomylib-worldsimapibase-weatherparameter"]], "Function MSGPACK_ADD_ENUM(nervosys::autonomylib::ImageCaptureBase::ImageType)": [[278, "function-msgpack-add-enum-nervosys-autonomylib-imagecapturebase-imagetype"]], "Full API": [[279, "full-api"], [490, "full-api"]], "Classes and Structs": [[279, "classes-and-structs"]], "Namespace conf": [[280, "namespace-conf"]], "Namespace mavlinkcom": [[281, "namespace-mavlinkcom"]], "Namespace nervosys": [[282, "namespace-nervosys"]], "Namespace nervosys::autonomylib": [[283, "namespace-nervosys-autonomylib"]], "Namespace nervosys::autonomylib_rpclib": [[284, "namespace-nervosys-autonomylib-rpclib"]], "Namespace simple_flight": [[285, "namespace-simple-flight"]], "Namespace std": [[286, "namespace-std"]], "Program Listing for File conf.py": [[287, "program-listing-for-file-conf-py"]], "Program Listing for File ApiProvider.hpp": [[288, "program-listing-for-file-apiprovider-hpp"]], "Program Listing for File ApiServerBase.hpp": [[289, "program-listing-for-file-apiserverbase-hpp"]], "Program Listing for File RpcLibAdaptorsBase.hpp": [[290, "program-listing-for-file-rpclibadaptorsbase-hpp"]], "Program Listing for File RpcLibClientBase.hpp": [[291, "program-listing-for-file-rpclibclientbase-hpp"]], "Program Listing for File RpcLibServerBase.hpp": [[292, "program-listing-for-file-rpclibserverbase-hpp"]], "Program Listing for File VehicleApiBase.hpp": [[293, "program-listing-for-file-vehicleapibase-hpp"]], "Program Listing for File VehicleSimApiBase.hpp": [[294, "program-listing-for-file-vehiclesimapibase-hpp"]], "Program Listing for File WorldSimApiBase.hpp": [[295, "program-listing-for-file-worldsimapibase-hpp"]], "Program Listing for File DebugPhysicsBody.hpp": [[296, "program-listing-for-file-debugphysicsbody-hpp"]], "Program Listing for File Environment.hpp": [[297, "program-listing-for-file-environment-hpp"]], "Program Listing for File ExternalPhysicsEngine.hpp": [[298, "program-listing-for-file-externalphysicsengine-hpp"]], "Program Listing for File FastPhysicsEngine.hpp": [[299, "program-listing-for-file-fastphysicsengine-hpp"]], "Program Listing for File Kinematics.hpp": [[300, "program-listing-for-file-kinematics-hpp"]], "Program Listing for File PhysicsBody.hpp": [[301, "program-listing-for-file-physicsbody-hpp"]], "Program Listing for File PhysicsBodyVertex.hpp": [[302, "program-listing-for-file-physicsbodyvertex-hpp"]], "Program Listing for File PhysicsEngineBase.hpp": [[303, "program-listing-for-file-physicsenginebase-hpp"]], "Program Listing for File PhysicsWorld.hpp": [[304, "program-listing-for-file-physicsworld-hpp"]], "Program Listing for File World.hpp": [[305, "program-listing-for-file-world-hpp"]], "Program Listing for File CubeGeoFence.hpp": [[306, "program-listing-for-file-cubegeofence-hpp"]], "Program Listing for File IGeoFence.hpp": [[307, "program-listing-for-file-igeofence-hpp"]], "Program Listing for File ObstacleMap.hpp": [[308, "program-listing-for-file-obstaclemap-hpp"]], "Program Listing for File SafetyEval.hpp": [[309, "program-listing-for-file-safetyeval-hpp"]], "Program Listing for File SphereGeoFence.hpp": [[310, "program-listing-for-file-spheregeofence-hpp"]], "Program Listing for File SensorBase.hpp": [[311, "program-listing-for-file-sensorbase-hpp"]], "Program Listing for File SensorCollection.hpp": [[312, "program-listing-for-file-sensorcollection-hpp"]], "Program Listing for File SensorFactory.hpp": [[313, "program-listing-for-file-sensorfactory-hpp"]], "Program Listing for File BarometerBase.hpp": [[314, "program-listing-for-file-barometerbase-hpp"]], "Program Listing for File BarometerSimple.hpp": [[315, "program-listing-for-file-barometersimple-hpp"]], "Program Listing for File BarometerSimpleParams.hpp": [[316, "program-listing-for-file-barometersimpleparams-hpp"]], "Program Listing for File DistanceBase.hpp": [[317, "program-listing-for-file-distancebase-hpp"]], "Program Listing for File DistanceSimple.hpp": [[318, "program-listing-for-file-distancesimple-hpp"]], "Program Listing for File DistanceSimpleParams.hpp": [[319, "program-listing-for-file-distancesimpleparams-hpp"]], "Program Listing for File GpsBase.hpp": [[320, "program-listing-for-file-gpsbase-hpp"]], "Program Listing for File GpsSimple.hpp": [[321, "program-listing-for-file-gpssimple-hpp"]], "Program Listing for File GpsSimpleParams.hpp": [[322, "program-listing-for-file-gpssimpleparams-hpp"]], "Program Listing for File ImuSimple.hpp": [[323, "program-listing-for-file-imusimple-hpp"]], "Program Listing for File ImuSimpleParams.hpp": [[324, "program-listing-for-file-imusimpleparams-hpp"]], "Program Listing for File LidarBase.hpp": [[325, "program-listing-for-file-lidarbase-hpp"]], "Program Listing for File LidarSimple.hpp": [[326, "program-listing-for-file-lidarsimple-hpp"]], "Program Listing for File LidarSimpleParams.hpp": [[327, "program-listing-for-file-lidarsimpleparams-hpp"]], "Program Listing for File MagnetometerBase.hpp": [[328, "program-listing-for-file-magnetometerbase-hpp"]], "Program Listing for File MagnetometerSimple.hpp": [[329, "program-listing-for-file-magnetometersimple-hpp"]], "Program Listing for File MagnetometerSimpleParams.hpp": [[330, "program-listing-for-file-magnetometersimpleparams-hpp"]], "Program Listing for File CarApiFactory.hpp": [[331, "program-listing-for-file-carapifactory-hpp"]], "Program Listing for File CarApiBase.hpp": [[332, "program-listing-for-file-carapibase-hpp"]], "Program Listing for File CarRpcLibAdaptors.hpp": [[333, "program-listing-for-file-carrpclibadaptors-hpp"]], "Program Listing for File CarRpcLibClient.hpp": [[334, "program-listing-for-file-carrpclibclient-hpp"]], "Program Listing for File CarRpcLibServer.hpp": [[335, "program-listing-for-file-carrpclibserver-hpp"]], "Program Listing for File ArduRoverApi.hpp": [[336, "program-listing-for-file-arduroverapi-hpp"]], "Program Listing for File PhysXCarApi.hpp": [[337, "program-listing-for-file-physxcarapi-hpp"]], "Program Listing for File MultiRotorParams.hpp": [[338, "program-listing-for-file-multirotorparams-hpp"]], "Program Listing for File MultiRotorParamsFactory.hpp": [[339, "program-listing-for-file-multirotorparamsfactory-hpp"]], "Program Listing for File MultiRotorPhysicsBody.hpp": [[340, "program-listing-for-file-multirotorphysicsbody-hpp"]], "Program Listing for File RotorActuator.hpp": [[341, "program-listing-for-file-rotoractuator-hpp"]], "Program Listing for File RotorParams.hpp": [[342, "program-listing-for-file-rotorparams-hpp"]], "Program Listing for File MultirotorApiBase.hpp": [[343, "program-listing-for-file-multirotorapibase-hpp"]], "Program Listing for File MultirotorCommon.hpp": [[344, "program-listing-for-file-multirotorcommon-hpp"]], "Program Listing for File MultirotorRpcLibAdaptors.hpp": [[345, "program-listing-for-file-multirotorrpclibadaptors-hpp"]], "Program Listing for File MultirotorRpcLibClient.hpp": [[346, "program-listing-for-file-multirotorrpclibclient-hpp"]], "Program Listing for File MultirotorRpcLibServer.hpp": [[347, "program-listing-for-file-multirotorrpclibserver-hpp"]], "Program Listing for File ArduCopterApi.hpp": [[348, "program-listing-for-file-arducopterapi-hpp"]], "Program Listing for File ArduCopterParams.hpp": [[349, "program-listing-for-file-arducopterparams-hpp"]], "Program Listing for File ArduCopterSoloApi.hpp": [[350, "program-listing-for-file-arducoptersoloapi-hpp"]], "Program Listing for File ArduCopterSoloParams.hpp": [[351, "program-listing-for-file-arducoptersoloparams-hpp"]], "Program Listing for File MavLinkMultirotorApi.hpp": [[352, "program-listing-for-file-mavlinkmultirotorapi-hpp"]], "Program Listing for File Px4MultiRotorParams.hpp": [[353, "program-listing-for-file-px4multirotorparams-hpp"]], "Program Listing for File SimpleFlightApi.hpp": [[354, "program-listing-for-file-simpleflightapi-hpp"]], "Program Listing for File SimpleFlightBoard.hpp": [[355, "program-listing-for-file-simpleflightboard-hpp"]], "Program Listing for File SimpleFlightCommLink.hpp": [[356, "program-listing-for-file-simpleflightcommlink-hpp"]], "Program Listing for File SimpleFlightCommon.hpp": [[357, "program-listing-for-file-simpleflightcommon-hpp"]], "Program Listing for File SimpleFlightEstimator.hpp": [[358, "program-listing-for-file-simpleflightestimator-hpp"]], "Program Listing for File SimpleFlightQuadXParams.hpp": [[359, "program-listing-for-file-simpleflightquadxparams-hpp"]], "Program Listing for File AdaptiveController.hpp": [[360, "program-listing-for-file-adaptivecontroller-hpp"]], "Program Listing for File AngleLevelController.hpp": [[361, "program-listing-for-file-anglelevelcontroller-hpp"]], "Program Listing for File AngleRateController.hpp": [[362, "program-listing-for-file-angleratecontroller-hpp"]], "Program Listing for File CascadeController.hpp": [[363, "program-listing-for-file-cascadecontroller-hpp"]], "Program Listing for File ConstantOutputController.hpp": [[364, "program-listing-for-file-constantoutputcontroller-hpp"]], "Program Listing for File Firmware.hpp": [[365, "program-listing-for-file-firmware-hpp"]], "Program Listing for File Mixer.hpp": [[366, "program-listing-for-file-mixer-hpp"]], "Program Listing for File OffboardApi.hpp": [[367, "program-listing-for-file-offboardapi-hpp"]], "Program Listing for File Params.hpp": [[368, "program-listing-for-file-params-hpp"]], "Program Listing for File PassthroughController.hpp": [[369, "program-listing-for-file-passthroughcontroller-hpp"]], "Program Listing for File PidController.hpp": [[370, "program-listing-for-file-pidcontroller-hpp"]], "Program Listing for File PositionController.hpp": [[371, "program-listing-for-file-positioncontroller-hpp"]], "Program Listing for File RemoteControl.hpp": [[372, "program-listing-for-file-remotecontrol-hpp"]], "Program Listing for File RungKuttaPidIntegrator.hpp": [[373, "program-listing-for-file-rungkuttapidintegrator-hpp"]], "Program Listing for File StdPidIntegrator.hpp": [[374, "program-listing-for-file-stdpidintegrator-hpp"]], "Program Listing for File VelocityController.hpp": [[375, "program-listing-for-file-velocitycontroller-hpp"]], "Program Listing for File CommonStructs.hpp": [[376, "program-listing-for-file-commonstructs-hpp"]], "Program Listing for File IAxisController.hpp": [[377, "program-listing-for-file-iaxiscontroller-hpp"]], "Program Listing for File IBoard.hpp": [[378, "program-listing-for-file-iboard-hpp"]], "Program Listing for File IBoardClock.hpp": [[379, "program-listing-for-file-iboardclock-hpp"]], "Program Listing for File IBoardInputPins.hpp": [[380, "program-listing-for-file-iboardinputpins-hpp"]], "Program Listing for File IBoardOutputPins.hpp": [[381, "program-listing-for-file-iboardoutputpins-hpp"]], "Program Listing for File IBoardSensors.hpp": [[382, "program-listing-for-file-iboardsensors-hpp"]], "Program Listing for File ICommLink.hpp": [[383, "program-listing-for-file-icommlink-hpp"]], "Program Listing for File IController.hpp": [[384, "program-listing-for-file-icontroller-hpp"]], "Program Listing for File IFirmware.hpp": [[385, "program-listing-for-file-ifirmware-hpp"]], "Program Listing for File IGoal.hpp": [[386, "program-listing-for-file-igoal-hpp"]], "Program Listing for File IOffboardApi.hpp": [[387, "program-listing-for-file-ioffboardapi-hpp"]], "Program Listing for File IPidIntegrator.hpp": [[388, "program-listing-for-file-ipidintegrator-hpp"]], "Program Listing for File IStateEstimator.hpp": [[389, "program-listing-for-file-istateestimator-hpp"]], "Program Listing for File IUpdatable.hpp": [[390, "program-listing-for-file-iupdatable-hpp"]], "Program Listing for File RpcLibClientBase.cpp": [[391, "program-listing-for-file-rpclibclientbase-cpp"]], "Program Listing for File RpcLibServerBase.cpp": [[392, "program-listing-for-file-rpclibserverbase-cpp"]], "Program Listing for File ObstacleMap.cpp": [[393, "program-listing-for-file-obstaclemap-cpp"]], "Program Listing for File SafetyEval.cpp": [[394, "program-listing-for-file-safetyeval-cpp"]], "Program Listing for File CarRpcLibClient.cpp": [[395, "program-listing-for-file-carrpclibclient-cpp"]], "Program Listing for File CarRpcLibServer.cpp": [[396, "program-listing-for-file-carrpclibserver-cpp"]], "Program Listing for File MultirotorApiBase.cpp": [[397, "program-listing-for-file-multirotorapibase-cpp"]], "Program Listing for File MultirotorRpcLibClient.cpp": [[398, "program-listing-for-file-multirotorrpclibclient-cpp"]], "Program Listing for File MultirotorRpcLibServer.cpp": [[399, "program-listing-for-file-multirotorrpclibserver-cpp"]], "Struct ArduCopterApi::RotorControlMessage": [[400, "struct-arducopterapi-rotorcontrolmessage"]], "Struct Documentation": [[400, "struct-documentation"], [401, "struct-documentation"], [402, "struct-documentation"], [403, "struct-documentation"], [404, "struct-documentation"], [405, "struct-documentation"], [406, "struct-documentation"], [407, "struct-documentation"], [408, "struct-documentation"], [409, "struct-documentation"], [410, "struct-documentation"], [411, "struct-documentation"], [412, "struct-documentation"], [413, "struct-documentation"], [414, "struct-documentation"], [415, "struct-documentation"], [416, "struct-documentation"], [417, "struct-documentation"], [418, "struct-documentation"], [419, "struct-documentation"], [420, "struct-documentation"], [421, "struct-documentation"], [422, "struct-documentation"], [423, "struct-documentation"], [424, "struct-documentation"], [425, "struct-documentation"], [426, "struct-documentation"], [427, "struct-documentation"], [428, "struct-documentation"], [429, "struct-documentation"], [430, "struct-documentation"], [431, "struct-documentation"], [432, "struct-documentation"], [433, "struct-documentation"], [434, "struct-documentation"], [435, "struct-documentation"], [436, "struct-documentation"], [437, "struct-documentation"], [438, "struct-documentation"], [439, "struct-documentation"], [440, "struct-documentation"], [441, "struct-documentation"], [442, "struct-documentation"], [443, "struct-documentation"], [444, "struct-documentation"], [445, "struct-documentation"], [446, "struct-documentation"], [447, "struct-documentation"], [448, "struct-documentation"], [449, "struct-documentation"], [450, "struct-documentation"], [451, "struct-documentation"], [452, "struct-documentation"], [453, "struct-documentation"], [454, "struct-documentation"], [455, "struct-documentation"], [456, "struct-documentation"], [457, "struct-documentation"], [458, "struct-documentation"], [459, "struct-documentation"], [460, "struct-documentation"], [461, "struct-documentation"], [462, "struct-documentation"], [463, "struct-documentation"], [464, "struct-documentation"], [465, "struct-documentation"], [466, "struct-documentation"], [467, "struct-documentation"], [468, "struct-documentation"], [469, "struct-documentation"], [470, "struct-documentation"], [471, "struct-documentation"], [472, "struct-documentation"], [473, "struct-documentation"], [474, "struct-documentation"], [475, "struct-documentation"], [476, "struct-documentation"], [477, "struct-documentation"], [478, "struct-documentation"], [479, "struct-documentation"], [480, "struct-documentation"], [481, "struct-documentation"], [482, "struct-documentation"], [483, "struct-documentation"]], "Struct ArduCopterSoloApi::RotorControlMessage": [[401, "struct-arducoptersoloapi-rotorcontrolmessage"]], "Struct ArduCopterSoloApi::SensorMessage": [[402, "struct-arducoptersoloapi-sensormessage"]], "Struct ArduRoverApi::RoverControlMessage": [[403, "struct-arduroverapi-rovercontrolmessage"]], "Struct BarometerBase::Output": [[404, "struct-barometerbase-output"]], "Struct BarometerSimpleParams": [[405, "struct-barometersimpleparams"]], "Struct CarApiBase::CarControls": [[406, "struct-carapibase-carcontrols"]], "Struct CarApiBase::CarState": [[407, "struct-carapibase-carstate"]], "Struct DistanceSimpleParams": [[408, "struct-distancesimpleparams"]], "Struct Environment::State": [[409, "struct-environment-state"]], "Struct GpsBase::GnssReport": [[410, "struct-gpsbase-gnssreport"]], "Struct GpsBase::GpsPoint": [[411, "struct-gpsbase-gpspoint"]], "Struct GpsBase::NavSatFix": [[412, "struct-gpsbase-navsatfix"]], "Struct GpsBase::NavSatStatus": [[413, "struct-gpsbase-navsatstatus"]], "Struct GpsBase::Output": [[414, "struct-gpsbase-output"]], "Struct GpsSimpleParams": [[415, "struct-gpssimpleparams"]], "Struct ImuSimpleParams": [[416, "struct-imusimpleparams"]], "Struct ImuSimpleParams::Accelerometer": [[417, "struct-imusimpleparams-accelerometer"]], "Struct ImuSimpleParams::Gyroscope": [[418, "struct-imusimpleparams-gyroscope"]], "Struct ImuSimple::State": [[419, "struct-imusimple-state"]], "Struct Kinematics::State": [[420, "struct-kinematics-state"]], "Struct LidarSimpleParams": [[421, "struct-lidarsimpleparams"]], "Struct MagnetometerBase::Output": [[422, "struct-magnetometerbase-output"]], "Struct MagnetometerSimpleParams": [[423, "struct-magnetometersimpleparams"]], "Struct MultirotorApiBase::PathPosition": [[424, "struct-multirotorapibase-pathposition"]], "Struct MultirotorApiBase::PathSegment": [[425, "struct-multirotorapibase-pathsegment"]], "Struct MultirotorApiBase::StatusLock": [[426, "struct-multirotorapibase-statuslock"]], "Struct MultirotorApiParams": [[427, "struct-multirotorapiparams"]], "Struct MultirotorParams::Params": [[428, "struct-multirotorparams-params"]], "Struct MultirotorParams::RotorPose": [[429, "struct-multirotorparams-rotorpose"]], "Struct MultirotorRpcLibClient::impl": [[430, "struct-multirotorrpclibclient-impl"]], "Struct MultirotorState": [[431, "struct-multirotorstate"]], "Struct ObstacleMap::ObstacleInfo": [[432, "struct-obstaclemap-obstacleinfo"]], "Struct RotorActuator::Output": [[433, "struct-rotoractuator-output"]], "Struct RotorParameters": [[434, "struct-rotorparameters"]], "Struct RotorParams": [[435, "struct-rotorparams"]], "Struct RotorStates": [[436, "struct-rotorstates"]], "Struct RpcLibClientBase::impl": [[437, "struct-rpclibclientbase-impl"]], "Struct RpcLibServerBase::impl": [[438, "struct-rpclibserverbase-impl"]], "Struct SafetyEval::EvalResult": [[439, "struct-safetyeval-evalresult"]], "Struct SensorBase::GroundTruth": [[440, "struct-sensorbase-groundtruth"]], "Struct YawMode": [[441, "struct-yawmode"]], "Struct CarRpcLibAdaptors::CarControls": [[442, "struct-carrpclibadaptors-carcontrols"]], "Struct CarRpcLibAdaptors::CarState": [[443, "struct-carrpclibadaptors-carstate"]], "Struct MultirotorRpcLibAdaptors::MultirotorState": [[444, "struct-multirotorrpclibadaptors-multirotorstate"]], "Struct MultirotorRpcLibAdaptors::RotorParameters": [[445, "struct-multirotorrpclibadaptors-rotorparameters"]], "Struct MultirotorRpcLibAdaptors::RotorStates": [[446, "struct-multirotorrpclibadaptors-rotorstates"]], "Struct MultirotorRpcLibAdaptors::YawMode": [[447, "struct-multirotorrpclibadaptors-yawmode"]], "Struct RpcLibAdaptorsBase::BarometerData": [[448, "struct-rpclibadaptorsbase-barometerdata"]], "Struct RpcLibAdaptorsBase::Box2D": [[449, "struct-rpclibadaptorsbase-box2d"]], "Struct RpcLibAdaptorsBase::Box3D": [[450, "struct-rpclibadaptorsbase-box3d"]], "Struct RpcLibAdaptorsBase::CameraInfo": [[451, "struct-rpclibadaptorsbase-camerainfo"]], "Struct RpcLibAdaptorsBase::CollisionInfo": [[452, "struct-rpclibadaptorsbase-collisioninfo"]], "Struct RpcLibAdaptorsBase::DetectionInfo": [[453, "struct-rpclibadaptorsbase-detectioninfo"]], "Struct RpcLibAdaptorsBase::DistanceSensorData": [[454, "struct-rpclibadaptorsbase-distancesensordata"]], "Struct RpcLibAdaptorsBase::EnvironmentState": [[455, "struct-rpclibadaptorsbase-environmentstate"]], "Struct RpcLibAdaptorsBase::GeoPoint": [[456, "struct-rpclibadaptorsbase-geopoint"]], "Struct RpcLibAdaptorsBase::GnssReport": [[457, "struct-rpclibadaptorsbase-gnssreport"]], "Struct RpcLibAdaptorsBase::GpsData": [[458, "struct-rpclibadaptorsbase-gpsdata"]], "Struct RpcLibAdaptorsBase::ImageRequest": [[459, "struct-rpclibadaptorsbase-imagerequest"]], "Struct RpcLibAdaptorsBase::ImageResponse": [[460, "struct-rpclibadaptorsbase-imageresponse"]], "Struct RpcLibAdaptorsBase::ImuData": [[461, "struct-rpclibadaptorsbase-imudata"]], "Struct RpcLibAdaptorsBase::KinematicsState": [[462, "struct-rpclibadaptorsbase-kinematicsstate"]], "Struct RpcLibAdaptorsBase::LidarData": [[463, "struct-rpclibadaptorsbase-lidardata"]], "Struct RpcLibAdaptorsBase::MagnetometerData": [[464, "struct-rpclibadaptorsbase-magnetometerdata"]], "Struct RpcLibAdaptorsBase::MeshPositionVertexBuffersResponse": [[465, "struct-rpclibadaptorsbase-meshpositionvertexbuffersresponse"]], "Struct RpcLibAdaptorsBase::Pose": [[466, "struct-rpclibadaptorsbase-pose"]], "Struct RpcLibAdaptorsBase::ProjectionMatrix": [[467, "struct-rpclibadaptorsbase-projectionmatrix"]], "Struct RpcLibAdaptorsBase::Quaternionr": [[468, "struct-rpclibadaptorsbase-quaternionr"]], "Struct RpcLibAdaptorsBase::RCData": [[469, "struct-rpclibadaptorsbase-rcdata"]], "Struct RpcLibAdaptorsBase::Vector2r": [[470, "struct-rpclibadaptorsbase-vector2r"]], "Struct RpcLibAdaptorsBase::Vector3r": [[471, "struct-rpclibadaptorsbase-vector3r"]], "Struct GeoPoint": [[472, "struct-geopoint"]], "Struct KinematicsState": [[473, "struct-kinematicsstate"]], "Struct Mixer::motorMixer_t": [[474, "struct-mixer-motormixer-t"]], "Struct Params": [[475, "struct-params"]], "Struct Params::AngleLevelPid": [[476, "struct-params-anglelevelpid"]], "Struct Params::AngleRatePid": [[477, "struct-params-angleratepid"]], "Struct Params::Motor": [[478, "struct-params-motor"]], "Struct Params::PositionPid": [[479, "struct-params-positionpid"]], "Struct Params::Rc": [[480, "struct-params-rc"]], "Struct Params::Takeoff": [[481, "struct-params-takeoff"]], "Struct Params::VelocityPid": [[482, "struct-params-velocitypid"]], "Template Struct PidConfig": [[483, "template-struct-pidconfig"]], "Typedef nervosys::autonomylib::RpcLibAdaptorsBase": [[484, "typedef-nervosys-autonomylib-rpclibadaptorsbase"]], "Typedef Documentation": [[484, "typedef-documentation"], [485, "typedef-documentation"], [486, "typedef-documentation"], [487, "typedef-documentation"], [488, "typedef-documentation"], [489, "typedef-documentation"]], "Typedef nervosys::autonomylib::CarRpcLibAdaptors": [[485, "typedef-nervosys-autonomylib-carrpclibadaptors"]], "Typedef nervosys::autonomylib::MultirotorRpcLibAdaptors": [[486, "typedef-nervosys-autonomylib-multirotorrpclibadaptors"]], "Typedef simple_flight::TReal": [[487, "typedef-simple-flight-treal"]], "Typedef simple_flight::Axis4r": [[488, "typedef-simple-flight-axis4r"]], "Typedef simple_flight::Axis3r": [[489, "typedef-simple-flight-axis3r"]], "Directories": [[490, "directories"]], "Variable conf::html_theme": [[491, "variable-conf-html-theme"]], "Variable Documentation": [[491, "variable-documentation"], [492, "variable-documentation"], [493, "variable-documentation"], [494, "variable-documentation"], [495, "variable-documentation"], [496, "variable-documentation"], [497, "variable-documentation"], [498, "variable-documentation"], [499, "variable-documentation"], [500, "variable-documentation"], [501, "variable-documentation"], [502, "variable-documentation"], [503, "variable-documentation"], [504, "variable-documentation"], [505, "variable-documentation"], [506, "variable-documentation"], [507, "variable-documentation"], [508, "variable-documentation"], [509, "variable-documentation"], [510, "variable-documentation"], [511, "variable-documentation"], [512, "variable-documentation"], [513, "variable-documentation"], [514, "variable-documentation"], [515, "variable-documentation"], [516, "variable-documentation"], [517, "variable-documentation"], [518, "variable-documentation"], [519, "variable-documentation"], [520, "variable-documentation"], [521, "variable-documentation"], [522, "variable-documentation"], [523, "variable-documentation"], [524, "variable-documentation"], [525, "variable-documentation"], [526, "variable-documentation"], [527, "variable-documentation"]], "Variable conf::version": [[492, "variable-conf-version"]], "Variable conf::author": [[493, "variable-conf-author"]], "Variable conf::breathe_default_project": [[494, "variable-conf-breathe-default-project"]], "Variable conf::latex_elements": [[495, "variable-conf-latex-elements"]], "Variable conf::autosectionlabel_maxdepth": [[496, "variable-conf-autosectionlabel-maxdepth"]], "Variable conf::project": [[497, "variable-conf-project"]], "Variable conf::primary_domain": [[498, "variable-conf-primary-domain"]], "Variable conf::html_style": [[499, "variable-conf-html-style"]], "Variable conf::texinfo_documents": [[500, "variable-conf-texinfo-documents"]], "Variable conf::html_css_files": [[501, "variable-conf-html-css-files"]], "Variable conf::epub_exclude_files": [[502, "variable-conf-epub-exclude-files"]], "Variable conf::latex_documents": [[503, "variable-conf-latex-documents"]], "Variable conf::exclude_patterns": [[504, "variable-conf-exclude-patterns"]], "Variable conf::man_pages": [[505, "variable-conf-man-pages"]], "Variable conf::autosummary_generate": [[506, "variable-conf-autosummary-generate"]], "Variable conf::todo_include_todos": [[507, "variable-conf-todo-include-todos"]], "Variable conf::html_theme_options": [[508, "variable-conf-html-theme-options"]], "Variable conf::intersphinx_mapping": [[509, "variable-conf-intersphinx-mapping"]], "Variable conf::copyright": [[510, "variable-conf-copyright"]], "Variable conf::master_doc": [[511, "variable-conf-master-doc"]], "Variable conf::autodoc_default_flags": [[512, "variable-conf-autodoc-default-flags"]], "Variable conf::html_js_files": [[513, "variable-conf-html-js-files"]], "Variable conf::language": [[514, "variable-conf-language"]], "Variable conf::highlight_language": [[515, "variable-conf-highlight-language"]], "Variable conf::autosectionlabel_prefix_document": [[516, "variable-conf-autosectionlabel-prefix-document"]], "Variable conf::release": [[517, "variable-conf-release"]], "Variable conf::source_suffix": [[518, "variable-conf-source-suffix"]], "Variable conf::breathe_projects": [[519, "variable-conf-breathe-projects"]], "Variable conf::htmlhelp_basename": [[520, "variable-conf-htmlhelp-basename"]], "Variable conf::extensions": [[521, "variable-conf-extensions"]], "Variable conf::templates_path": [[522, "variable-conf-templates-path"]], "Variable conf::pygments_style": [[523, "variable-conf-pygments-style"]], "Variable conf::epub_title": [[524, "variable-conf-epub-title"]], "Variable conf::html_static_path": [[525, "variable-conf-html-static-path"]], "Variable conf::exhale_args": [[526, "variable-conf-exhale-args"]], "Variable conf::html_title": [[527, "variable-conf-html-title"]], "AutonomyLib": [[528, "autonomylib"]]}, "indexentries": {"nervosys::autonomylib::apiprovider (c++ class)": [[0, "_CPPv4N8nervosys11autonomylib11ApiProviderE"]], "nervosys::autonomylib::apiprovider::apiprovider (c++ function)": [[0, "_CPPv4N8nervosys11autonomylib11ApiProvider11ApiProviderEP15WorldSimApiBase"]], "nervosys::autonomylib::apiprovider::getvehicleapi (c++ function)": [[0, "_CPPv4N8nervosys11autonomylib11ApiProvider13getVehicleApiERKNSt6stringE"]], "nervosys::autonomylib::apiprovider::getvehicleapis (c++ function)": [[0, "_CPPv4N8nervosys11autonomylib11ApiProvider14getVehicleApisEv"]], "nervosys::autonomylib::apiprovider::getvehiclecount (c++ function)": [[0, "_CPPv4NK8nervosys11autonomylib11ApiProvider15getVehicleCountEv"]], "nervosys::autonomylib::apiprovider::getvehiclesimapi (c++ function)": [[0, "_CPPv4NK8nervosys11autonomylib11ApiProvider16getVehicleSimApiERKNSt6stringE"]], "nervosys::autonomylib::apiprovider::getvehiclesimapis (c++ function)": [[0, "_CPPv4N8nervosys11autonomylib11ApiProvider17getVehicleSimApisEv"]], "nervosys::autonomylib::apiprovider::getworldsimapi (c++ function)": [[0, "_CPPv4N8nervosys11autonomylib11ApiProvider14getWorldSimApiEv"]], "nervosys::autonomylib::apiprovider::hasdefaultvehicle (c++ function)": [[0, "_CPPv4NK8nervosys11autonomylib11ApiProvider17hasDefaultVehicleEv"]], "nervosys::autonomylib::apiprovider::insert_or_assign (c++ function)": [[0, "_CPPv4N8nervosys11autonomylib11ApiProvider16insert_or_assignERKNSt6stringEP14VehicleApiBaseP17VehicleSimApiBase"]], "nervosys::autonomylib::apiprovider::makedefaultvehicle (c++ function)": [[0, "_CPPv4N8nervosys11autonomylib11ApiProvider18makeDefaultVehicleERKNSt6stringE"]], "nervosys::autonomylib::apiprovider::~apiprovider (c++ function)": [[0, "_CPPv4N8nervosys11autonomylib11ApiProviderD0Ev"]], "nervosys::autonomylib::apiserverbase (c++ class)": [[1, "_CPPv4N8nervosys11autonomylib13ApiServerBaseE"]], "nervosys::autonomylib::apiserverbase::start (c++ function)": [[1, "_CPPv4N8nervosys11autonomylib13ApiServerBase5startEbNSt6size_tE"]], "nervosys::autonomylib::apiserverbase::stop (c++ function)": [[1, "_CPPv4N8nervosys11autonomylib13ApiServerBase4stopEv"]], "nervosys::autonomylib::apiserverbase::~apiserverbase (c++ function)": [[1, "_CPPv4N8nervosys11autonomylib13ApiServerBaseD0Ev"]], "nervosys::autonomylib::arducopterapi (c++ class)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApiE"]], "nervosys::autonomylib::arducopterapi::arducopterapi (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi13ArduCopterApiEPK16MultirotorParamsRKN19AutonomySimSettings21MavLinkConnectionInfoE"]], "nervosys::autonomylib::arducopterapi::armdisarm (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi9armDisarmEb"]], "nervosys::autonomylib::arducopterapi::closeconnections (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16closeConnectionsEv"]], "nervosys::autonomylib::arducopterapi::commandangleratesthrottle (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi25commandAngleRatesThrottleEffff"]], "nervosys::autonomylib::arducopterapi::commandangleratesz (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi18commandAngleRatesZEffff"]], "nervosys::autonomylib::arducopterapi::commandmotorpwms (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16commandMotorPWMsEffff"]], "nervosys::autonomylib::arducopterapi::commandposition (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi15commandPositionEfffRK7YawMode"]], "nervosys::autonomylib::arducopterapi::commandrollpitchyawthrottle (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi27commandRollPitchYawThrottleEffff"]], "nervosys::autonomylib::arducopterapi::commandrollpitchyawz (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi20commandRollPitchYawZEffff"]], "nervosys::autonomylib::arducopterapi::commandrollpitchyawratethrottle (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi31commandRollPitchYawrateThrottleEffff"]], "nervosys::autonomylib::arducopterapi::commandrollpitchyawratez (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi24commandRollPitchYawrateZEffff"]], "nervosys::autonomylib::arducopterapi::commandvelocity (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi15commandVelocityEfffRK7YawMode"]], "nervosys::autonomylib::arducopterapi::commandvelocityz (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16commandVelocityZEfffRK7YawMode"]], "nervosys::autonomylib::arducopterapi::connect (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi7connectEv"]], "nervosys::autonomylib::arducopterapi::enableapicontrol (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi16enableApiControlEb"]], "nervosys::autonomylib::arducopterapi::getactuation (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi12getActuationEj"]], "nervosys::autonomylib::arducopterapi::getactuatorcount (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi16getActuatorCountEv"]], "nervosys::autonomylib::arducopterapi::getcommandperiod (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi16getCommandPeriodEv"]], "nervosys::autonomylib::arducopterapi::getdistanceaccuracy (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi19getDistanceAccuracyEv"]], "nervosys::autonomylib::arducopterapi::getgpslocation (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi14getGpsLocationEv"]], "nervosys::autonomylib::arducopterapi::gethomegeopoint (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi15getHomeGeoPointEv"]], "nervosys::autonomylib::arducopterapi::getkinematicsestimated (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi22getKinematicsEstimatedEv"]], "nervosys::autonomylib::arducopterapi::getlandedstate (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi14getLandedStateEv"]], "nervosys::autonomylib::arducopterapi::getmultirotorapiparams (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi22getMultirotorApiParamsEv"]], "nervosys::autonomylib::arducopterapi::getorientation (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi14getOrientationEv"]], "nervosys::autonomylib::arducopterapi::getposition (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi11getPositionEv"]], "nervosys::autonomylib::arducopterapi::getrcdata (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi9getRCDataEv"]], "nervosys::autonomylib::arducopterapi::getsensors (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi10getSensorsEv"]], "nervosys::autonomylib::arducopterapi::getstatusmessages (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi17getStatusMessagesERNSt6vectorINSt6stringEEE"]], "nervosys::autonomylib::arducopterapi::gettakeoffz (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi11getTakeoffZEv"]], "nervosys::autonomylib::arducopterapi::getvelocity (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi11getVelocityEv"]], "nervosys::autonomylib::arducopterapi::isapicontrolenabled (c++ function)": [[2, "_CPPv4NK8nervosys11autonomylib13ArduCopterApi19isApiControlEnabledEv"]], "nervosys::autonomylib::arducopterapi::movebyrc (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi8moveByRCERK6RCData"]], "nervosys::autonomylib::arducopterapi::resetimplementation (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi19resetImplementationEv"]], "nervosys::autonomylib::arducopterapi::setcontrollergains (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE"]], "nervosys::autonomylib::arducopterapi::setrcdata (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi9setRCDataERK6RCData"]], "nervosys::autonomylib::arducopterapi::setsimulatedgroundtruth (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi23setSimulatedGroundTruthEPKN10Kinematics5StateEPK11Environment"]], "nervosys::autonomylib::arducopterapi::update (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApi6updateEv"]], "nervosys::autonomylib::arducopterapi::~arducopterapi (c++ function)": [[2, "_CPPv4N8nervosys11autonomylib13ArduCopterApiD0Ev"]], "nervosys::autonomylib::arducopterparams (c++ class)": [[3, "_CPPv4N8nervosys11autonomylib16ArduCopterParamsE"]], "nervosys::autonomylib::arducopterparams::arducopterparams (c++ function)": [[3, "_CPPv4N8nervosys11autonomylib16ArduCopterParams16ArduCopterParamsERKN19AutonomySimSettings21MavLinkVehicleSettingENSt10shared_ptrIK13SensorFactoryEE"]], "nervosys::autonomylib::arducopterparams::createmultirotorapi (c++ function)": [[3, "_CPPv4N8nervosys11autonomylib16ArduCopterParams19createMultirotorApiEv"]], "nervosys::autonomylib::arducopterparams::getconnectioninfo (c++ function)": [[3, "_CPPv4N8nervosys11autonomylib16ArduCopterParams17getConnectionInfoERKN19AutonomySimSettings21MavLinkVehicleSettingE"]], "nervosys::autonomylib::arducopterparams::getsensorfactory (c++ function)": [[3, "_CPPv4NK8nervosys11autonomylib16ArduCopterParams16getSensorFactoryEv"]], "nervosys::autonomylib::arducopterparams::setupparams (c++ function)": [[3, "_CPPv4N8nervosys11autonomylib16ArduCopterParams11setupParamsEv"]], "nervosys::autonomylib::arducopterparams::~arducopterparams (c++ function)": [[3, "_CPPv4N8nervosys11autonomylib16ArduCopterParamsD0Ev"]], "nervosys::autonomylib::arducoptersoloapi (c++ class)": [[4, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApiE"]], "nervosys::autonomylib::arducoptersoloapi::close (c++ function)": [[4, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi5closeEv"]], "nervosys::autonomylib::arducoptersoloapi::connect (c++ function)": [[4, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi7connectEv"]], "nervosys::autonomylib::arducoptersoloapi::update (c++ function)": [[4, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi6updateEv"]], "nervosys::autonomylib::arducoptersoloapi::~arducoptersoloapi (c++ function)": [[4, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApiD0Ev"]], "nervosys::autonomylib::arducoptersoloparams (c++ class)": [[5, "_CPPv4N8nervosys11autonomylib20ArduCopterSoloParamsE"]], "nervosys::autonomylib::arducoptersoloparams::arducoptersoloparams (c++ function)": [[5, "_CPPv4N8nervosys11autonomylib20ArduCopterSoloParams20ArduCopterSoloParamsERKN19AutonomySimSettings21MavLinkVehicleSettingENSt10shared_ptrIK13SensorFactoryEE"]], "nervosys::autonomylib::arducoptersoloparams::createmultirotorapi (c++ function)": [[5, "_CPPv4N8nervosys11autonomylib20ArduCopterSoloParams19createMultirotorApiEv"]], "nervosys::autonomylib::arducoptersoloparams::getsensorfactory (c++ function)": [[5, "_CPPv4NK8nervosys11autonomylib20ArduCopterSoloParams16getSensorFactoryEv"]], "nervosys::autonomylib::arducoptersoloparams::setupparams (c++ function)": [[5, "_CPPv4N8nervosys11autonomylib20ArduCopterSoloParams11setupParamsEv"]], "nervosys::autonomylib::arducoptersoloparams::~arducoptersoloparams (c++ function)": [[5, "_CPPv4N8nervosys11autonomylib20ArduCopterSoloParamsD0Ev"]], "nervosys::autonomylib::arduroverapi (c++ class)": [[6, "_CPPv4N8nervosys11autonomylib12ArduRoverApiE"]], "nervosys::autonomylib::arduroverapi::arduroverapi (c++ function)": [[6, "_CPPv4N8nervosys11autonomylib12ArduRoverApi12ArduRoverApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment"]], "nervosys::autonomylib::arduroverapi::armdisarm (c++ function)": [[6, "_CPPv4N8nervosys11autonomylib12ArduRoverApi9armDisarmEb"]], "nervosys::autonomylib::arduroverapi::closeconnections (c++ function)": [[6, "_CPPv4N8nervosys11autonomylib12ArduRoverApi16closeConnectionsEv"]], "nervosys::autonomylib::arduroverapi::connect (c++ function)": [[6, "_CPPv4N8nervosys11autonomylib12ArduRoverApi7connectEv"]], "nervosys::autonomylib::arduroverapi::enableapicontrol (c++ function)": [[6, "_CPPv4N8nervosys11autonomylib12ArduRoverApi16enableApiControlEb"]], "nervosys::autonomylib::arduroverapi::getcarcontrols (c++ function)": [[6, "_CPPv4NK8nervosys11autonomylib12ArduRoverApi14getCarControlsEv"]], "nervosys::autonomylib::arduroverapi::getcarstate (c++ function)": [[6, "_CPPv4NK8nervosys11autonomylib12ArduRoverApi11getCarStateEv"]], "nervosys::autonomylib::arduroverapi::gethomegeopoint (c++ function)": [[6, "_CPPv4NK8nervosys11autonomylib12ArduRoverApi15getHomeGeoPointEv"]], "nervosys::autonomylib::arduroverapi::getsensors (c++ function)": [[6, "_CPPv4NK8nervosys11autonomylib12ArduRoverApi10getSensorsEv"]], "nervosys::autonomylib::arduroverapi::getstatusmessages (c++ function)": [[6, "_CPPv4N8nervosys11autonomylib12ArduRoverApi17getStatusMessagesERNSt6vectorINSt6stringEEE"]], "nervosys::autonomylib::arduroverapi::isapicontrolenabled (c++ function)": [[6, "_CPPv4NK8nervosys11autonomylib12ArduRoverApi19isApiControlEnabledEv"]], "nervosys::autonomylib::arduroverapi::resetimplementation (c++ function)": [[6, "_CPPv4N8nervosys11autonomylib12ArduRoverApi19resetImplementationEv"]], "nervosys::autonomylib::arduroverapi::setcarcontrols (c++ function)": [[6, "_CPPv4N8nervosys11autonomylib12ArduRoverApi14setCarControlsERK11CarControls"]], "nervosys::autonomylib::arduroverapi::update (c++ function)": [[6, "_CPPv4N8nervosys11autonomylib12ArduRoverApi6updateEv"]], "nervosys::autonomylib::arduroverapi::updatecarstate (c++ function)": [[6, "_CPPv4N8nervosys11autonomylib12ArduRoverApi14updateCarStateERK8CarState"]], "nervosys::autonomylib::arduroverapi::~arduroverapi (c++ function)": [[6, "_CPPv4N8nervosys11autonomylib12ArduRoverApiD0Ev"]], "nervosys::autonomylib::barometerbase (c++ class)": [[7, "_CPPv4N8nervosys11autonomylib13BarometerBaseE"]], "nervosys::autonomylib::barometerbase::barometerbase (c++ function)": [[7, "_CPPv4N8nervosys11autonomylib13BarometerBase13BarometerBaseERKNSt6stringE"]], "nervosys::autonomylib::barometerbase::output (c++ struct)": [[7, "_CPPv4N8nervosys11autonomylib13BarometerBase6OutputE"], [404, "_CPPv4N8nervosys11autonomylib13BarometerBase6OutputE"]], "nervosys::autonomylib::barometerbase::output::altitude (c++ member)": [[7, "_CPPv4N8nervosys11autonomylib13BarometerBase6Output8altitudeE"], [404, "_CPPv4N8nervosys11autonomylib13BarometerBase6Output8altitudeE"]], "nervosys::autonomylib::barometerbase::output::pressure (c++ member)": [[7, "_CPPv4N8nervosys11autonomylib13BarometerBase6Output8pressureE"], [404, "_CPPv4N8nervosys11autonomylib13BarometerBase6Output8pressureE"]], "nervosys::autonomylib::barometerbase::output::qnh (c++ member)": [[7, "_CPPv4N8nervosys11autonomylib13BarometerBase6Output3qnhE"], [404, "_CPPv4N8nervosys11autonomylib13BarometerBase6Output3qnhE"]], "nervosys::autonomylib::barometerbase::output::time_stamp (c++ member)": [[7, "_CPPv4N8nervosys11autonomylib13BarometerBase6Output10time_stampE"], [404, "_CPPv4N8nervosys11autonomylib13BarometerBase6Output10time_stampE"]], "nervosys::autonomylib::barometerbase::getoutput (c++ function)": [[7, "_CPPv4NK8nervosys11autonomylib13BarometerBase9getOutputEv"]], "nervosys::autonomylib::barometerbase::reportstate (c++ function)": [[7, "_CPPv4N8nervosys11autonomylib13BarometerBase11reportStateER13StateReporter"]], "nervosys::autonomylib::barometerbase::setoutput (c++ function)": [[7, "_CPPv4N8nervosys11autonomylib13BarometerBase9setOutputERK6Output"]], "nervosys::autonomylib::barometersimple (c++ class)": [[8, "_CPPv4N8nervosys11autonomylib15BarometerSimpleE"]], "nervosys::autonomylib::barometersimple::barometersimple (c++ function)": [[8, "_CPPv4N8nervosys11autonomylib15BarometerSimple15BarometerSimpleERKN19AutonomySimSettings16BarometerSettingE"]], "nervosys::autonomylib::barometersimple::resetimplementation (c++ function)": [[8, "_CPPv4N8nervosys11autonomylib15BarometerSimple19resetImplementationEv"]], "nervosys::autonomylib::barometersimple::update (c++ function)": [[8, "_CPPv4N8nervosys11autonomylib15BarometerSimple6updateEv"]], "nervosys::autonomylib::barometersimple::~barometersimple (c++ function)": [[8, "_CPPv4N8nervosys11autonomylib15BarometerSimpleD0Ev"]], "nervosys::autonomylib::carapibase (c++ class)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBaseE"]], "nervosys::autonomylib::carapibase::carapibase (c++ function)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase10CarApiBaseEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment"]], "nervosys::autonomylib::carapibase::carcontrols (c++ struct)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControlsE"], [406, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControlsE"]], "nervosys::autonomylib::carapibase::carcontrols::carcontrols (c++ function)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11CarControlsEfffbbib"], [9, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11CarControlsEv"], [406, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11CarControlsEfffbbib"], [406, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11CarControlsEv"]], "nervosys::autonomylib::carapibase::carcontrols::brake (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls5brakeE"], [406, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls5brakeE"]], "nervosys::autonomylib::carapibase::carcontrols::gear_immediate (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls14gear_immediateE"], [406, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls14gear_immediateE"]], "nervosys::autonomylib::carapibase::carcontrols::handbrake (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls9handbrakeE"], [406, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls9handbrakeE"]], "nervosys::autonomylib::carapibase::carcontrols::is_manual_gear (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls14is_manual_gearE"], [406, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls14is_manual_gearE"]], "nervosys::autonomylib::carapibase::carcontrols::manual_gear (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11manual_gearE"], [406, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls11manual_gearE"]], "nervosys::autonomylib::carapibase::carcontrols::set_throttle (c++ function)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls12set_throttleEfb"], [406, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls12set_throttleEfb"]], "nervosys::autonomylib::carapibase::carcontrols::steering (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls8steeringE"], [406, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls8steeringE"]], "nervosys::autonomylib::carapibase::carcontrols::throttle (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls8throttleE"], [406, "_CPPv4N8nervosys11autonomylib10CarApiBase11CarControls8throttleE"]], "nervosys::autonomylib::carapibase::carstate (c++ struct)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarStateE"], [407, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarStateE"]], "nervosys::autonomylib::carapibase::carstate::carstate (c++ function)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState8CarStateEfiffbRKN10Kinematics5StateE8uint64_t"], [9, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState8CarStateEv"], [407, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState8CarStateEfiffbRKN10Kinematics5StateE8uint64_t"], [407, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState8CarStateEv"]], "nervosys::autonomylib::carapibase::carstate::gear (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState4gearE"], [407, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState4gearE"]], "nervosys::autonomylib::carapibase::carstate::getorientation (c++ function)": [[9, "_CPPv4NK8nervosys11autonomylib10CarApiBase8CarState14getOrientationEv"], [407, "_CPPv4NK8nervosys11autonomylib10CarApiBase8CarState14getOrientationEv"]], "nervosys::autonomylib::carapibase::carstate::getposition (c++ function)": [[9, "_CPPv4NK8nervosys11autonomylib10CarApiBase8CarState11getPositionEv"], [407, "_CPPv4NK8nervosys11autonomylib10CarApiBase8CarState11getPositionEv"]], "nervosys::autonomylib::carapibase::carstate::handbrake (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState9handbrakeE"], [407, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState9handbrakeE"]], "nervosys::autonomylib::carapibase::carstate::kinematics_estimated (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState20kinematics_estimatedE"], [407, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState20kinematics_estimatedE"]], "nervosys::autonomylib::carapibase::carstate::maxrpm (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState6maxrpmE"], [407, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState6maxrpmE"]], "nervosys::autonomylib::carapibase::carstate::rpm (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState3rpmE"], [407, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState3rpmE"]], "nervosys::autonomylib::carapibase::carstate::speed (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState5speedE"], [407, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState5speedE"]], "nervosys::autonomylib::carapibase::carstate::timestamp (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState9timestampE"], [407, "_CPPv4N8nervosys11autonomylib10CarApiBase8CarState9timestampE"]], "nervosys::autonomylib::carapibase::addsensorsfromsettings (c++ function)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase22addSensorsFromSettingsEPKN19AutonomySimSettings14VehicleSettingE"]], "nervosys::autonomylib::carapibase::getcarcontrols (c++ function)": [[9, "_CPPv4NK8nervosys11autonomylib10CarApiBase14getCarControlsEv"]], "nervosys::autonomylib::carapibase::getcarstate (c++ function)": [[9, "_CPPv4NK8nervosys11autonomylib10CarApiBase11getCarStateEv"]], "nervosys::autonomylib::carapibase::getsensors (c++ function)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase10getSensorsEv"], [9, "_CPPv4NK8nervosys11autonomylib10CarApiBase10getSensorsEv"]], "nervosys::autonomylib::carapibase::initialize (c++ function)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase10initializeEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment"]], "nervosys::autonomylib::carapibase::reportstate (c++ function)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase11reportStateER13StateReporter"]], "nervosys::autonomylib::carapibase::resetimplementation (c++ function)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase19resetImplementationEv"]], "nervosys::autonomylib::carapibase::sensor_factory_ (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase15sensor_factory_E"]], "nervosys::autonomylib::carapibase::sensor_storage_ (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase15sensor_storage_E"]], "nervosys::autonomylib::carapibase::sensors_ (c++ member)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase8sensors_E"]], "nervosys::autonomylib::carapibase::setcarcontrols (c++ function)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase14setCarControlsERK11CarControls"]], "nervosys::autonomylib::carapibase::update (c++ function)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase6updateEv"]], "nervosys::autonomylib::carapibase::updatecarstate (c++ function)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBase14updateCarStateERK8CarState"]], "nervosys::autonomylib::carapibase::~carapibase (c++ function)": [[9, "_CPPv4N8nervosys11autonomylib10CarApiBaseD0Ev"]], "nervosys::autonomylib::carapifactory (c++ class)": [[10, "_CPPv4N8nervosys11autonomylib13CarApiFactoryE"]], "nervosys::autonomylib::carapifactory::createapi (c++ function)": [[10, "_CPPv4N8nervosys11autonomylib13CarApiFactory9createApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment"]], "nervosys::autonomylib::carrpclibclient (c++ class)": [[11, "_CPPv4N8nervosys11autonomylib15CarRpcLibClientE"]], "nervosys::autonomylib::carrpclibclient::carrpclibclient (c++ function)": [[11, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient15CarRpcLibClientERK6string8uint16_tf"]], "nervosys::autonomylib::carrpclibclient::getcarcontrols (c++ function)": [[11, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient14getCarControlsERKNSt6stringE"]], "nervosys::autonomylib::carrpclibclient::getcarstate (c++ function)": [[11, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient11getCarStateERKNSt6stringE"]], "nervosys::autonomylib::carrpclibclient::setcarcontrols (c++ function)": [[11, "_CPPv4N8nervosys11autonomylib15CarRpcLibClient14setCarControlsERKN10CarApiBase11CarControlsERKNSt6stringE"]], "nervosys::autonomylib::carrpclibclient::~carrpclibclient (c++ function)": [[11, "_CPPv4N8nervosys11autonomylib15CarRpcLibClientD0Ev"]], "nervosys::autonomylib::carrpclibserver (c++ class)": [[12, "_CPPv4N8nervosys11autonomylib15CarRpcLibServerE"]], "nervosys::autonomylib::carrpclibserver::carrpclibserver (c++ function)": [[12, "_CPPv4N8nervosys11autonomylib15CarRpcLibServer15CarRpcLibServerEP11ApiProvider6string8uint16_t"]], "nervosys::autonomylib::carrpclibserver::getvehicleapi (c++ function)": [[12, "_CPPv4N8nervosys11autonomylib15CarRpcLibServer13getVehicleApiERKNSt6stringE"]], "nervosys::autonomylib::carrpclibserver::~carrpclibserver (c++ function)": [[12, "_CPPv4N8nervosys11autonomylib15CarRpcLibServerD0Ev"]], "nervosys::autonomylib::cubegeofence (c++ class)": [[13, "_CPPv4N8nervosys11autonomylib12CubeGeoFenceE"]], "nervosys::autonomylib::cubegeofence::cubegeofence (c++ function)": [[13, "_CPPv4N8nervosys11autonomylib12CubeGeoFence12CubeGeoFenceERK8Vector3rRK8Vector3rf"]], "nervosys::autonomylib::cubegeofence::checkfence (c++ function)": [[13, "_CPPv4N8nervosys11autonomylib12CubeGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb"]], "nervosys::autonomylib::cubegeofence::setboundry (c++ function)": [[13, "_CPPv4N8nervosys11autonomylib12CubeGeoFence10setBoundryERK8Vector3rfff"]], "nervosys::autonomylib::cubegeofence::tostring (c++ function)": [[13, "_CPPv4NK8nervosys11autonomylib12CubeGeoFence8toStringEv"]], "nervosys::autonomylib::cubegeofence::~cubegeofence (c++ function)": [[13, "_CPPv4N8nervosys11autonomylib12CubeGeoFenceD0Ev"]], "nervosys::autonomylib::debugphysicsbody (c++ class)": [[14, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBodyE"]], "nervosys::autonomylib::debugphysicsbody::dragvertexcount (c++ function)": [[14, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody15dragVertexCountEv"]], "nervosys::autonomylib::debugphysicsbody::getdragvertex (c++ function)": [[14, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody13getDragVertexE4uint"], [14, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody13getDragVertexE4uint"]], "nervosys::autonomylib::debugphysicsbody::getfriction (c++ function)": [[14, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody11getFrictionEv"]], "nervosys::autonomylib::debugphysicsbody::getrestitution (c++ function)": [[14, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody14getRestitutionEv"]], "nervosys::autonomylib::debugphysicsbody::getshapevertex (c++ function)": [[14, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody14getShapeVertexE4uint"]], "nervosys::autonomylib::debugphysicsbody::getwrenchvertex (c++ function)": [[14, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody15getWrenchVertexE4uint"], [14, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody15getWrenchVertexE4uint"]], "nervosys::autonomylib::debugphysicsbody::initialize (c++ function)": [[14, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody10initializeEP10KinematicsP11Environment"]], "nervosys::autonomylib::debugphysicsbody::shapevertexcount (c++ function)": [[14, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody16shapeVertexCountEv"]], "nervosys::autonomylib::debugphysicsbody::updatekinematics (c++ function)": [[14, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody16updateKinematicsERKN10Kinematics5StateE"], [14, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody16updateKinematicsEv"]], "nervosys::autonomylib::debugphysicsbody::wrenchvertexcount (c++ function)": [[14, "_CPPv4NK8nervosys11autonomylib16DebugPhysicsBody17wrenchVertexCountEv"]], "nervosys::autonomylib::debugphysicsbody::wrenchvertex (c++ class)": [[15, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody12WrenchVertexE"]], "nervosys::autonomylib::debugphysicsbody::wrenchvertex::wrenchvertex (c++ function)": [[15, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody12WrenchVertex12WrenchVertexERK8Vector3rRK8Vector3rRK8Vector3r"]], "nervosys::autonomylib::debugphysicsbody::wrenchvertex::setwrench (c++ function)": [[15, "_CPPv4N8nervosys11autonomylib16DebugPhysicsBody12WrenchVertex9setWrenchER6Wrench"]], "nervosys::autonomylib::distancebase (c++ class)": [[16, "_CPPv4N8nervosys11autonomylib12DistanceBaseE"]], "nervosys::autonomylib::distancebase::distancebase (c++ function)": [[16, "_CPPv4N8nervosys11autonomylib12DistanceBase12DistanceBaseERKNSt6stringE"]], "nervosys::autonomylib::distancebase::getoutput (c++ function)": [[16, "_CPPv4NK8nervosys11autonomylib12DistanceBase9getOutputEv"]], "nervosys::autonomylib::distancebase::reportstate (c++ function)": [[16, "_CPPv4N8nervosys11autonomylib12DistanceBase11reportStateER13StateReporter"]], "nervosys::autonomylib::distancebase::setoutput (c++ function)": [[16, "_CPPv4N8nervosys11autonomylib12DistanceBase9setOutputERK18DistanceSensorData"]], "nervosys::autonomylib::distancesimple (c++ class)": [[17, "_CPPv4N8nervosys11autonomylib14DistanceSimpleE"]], "nervosys::autonomylib::distancesimple::distancesimple (c++ function)": [[17, "_CPPv4N8nervosys11autonomylib14DistanceSimple14DistanceSimpleERKN19AutonomySimSettings15DistanceSettingE"]], "nervosys::autonomylib::distancesimple::getparams (c++ function)": [[17, "_CPPv4NK8nervosys11autonomylib14DistanceSimple9getParamsEv"]], "nervosys::autonomylib::distancesimple::getraylength (c++ function)": [[17, "_CPPv4N8nervosys11autonomylib14DistanceSimple12getRayLengthERK4Pose"]], "nervosys::autonomylib::distancesimple::resetimplementation (c++ function)": [[17, "_CPPv4N8nervosys11autonomylib14DistanceSimple19resetImplementationEv"]], "nervosys::autonomylib::distancesimple::update (c++ function)": [[17, "_CPPv4N8nervosys11autonomylib14DistanceSimple6updateEv"]], "nervosys::autonomylib::distancesimple::~distancesimple (c++ function)": [[17, "_CPPv4N8nervosys11autonomylib14DistanceSimpleD0Ev"]], "nervosys::autonomylib::environment (c++ class)": [[18, "_CPPv4N8nervosys11autonomylib11EnvironmentE"]], "nervosys::autonomylib::environment::environment (c++ function)": [[18, "_CPPv4N8nervosys11autonomylib11Environment11EnvironmentERK5State"], [18, "_CPPv4N8nervosys11autonomylib11Environment11EnvironmentEv"]], "nervosys::autonomylib::environment::state (c++ struct)": [[18, "_CPPv4N8nervosys11autonomylib11Environment5StateE"], [409, "_CPPv4N8nervosys11autonomylib11Environment5StateE"]], "nervosys::autonomylib::environment::state::state (c++ function)": [[18, "_CPPv4N8nervosys11autonomylib11Environment5State5StateERK8Vector3rRK8GeoPoint"], [18, "_CPPv4N8nervosys11autonomylib11Environment5State5StateEv"], [409, "_CPPv4N8nervosys11autonomylib11Environment5State5StateERK8Vector3rRK8GeoPoint"], [409, "_CPPv4N8nervosys11autonomylib11Environment5State5StateEv"]], "nervosys::autonomylib::environment::state::air_density (c++ member)": [[18, "_CPPv4N8nervosys11autonomylib11Environment5State11air_densityE"], [409, "_CPPv4N8nervosys11autonomylib11Environment5State11air_densityE"]], "nervosys::autonomylib::environment::state::air_pressure (c++ member)": [[18, "_CPPv4N8nervosys11autonomylib11Environment5State12air_pressureE"], [409, "_CPPv4N8nervosys11autonomylib11Environment5State12air_pressureE"]], "nervosys::autonomylib::environment::state::geo_point (c++ member)": [[18, "_CPPv4N8nervosys11autonomylib11Environment5State9geo_pointE"], [409, "_CPPv4N8nervosys11autonomylib11Environment5State9geo_pointE"]], "nervosys::autonomylib::environment::state::gravity (c++ member)": [[18, "_CPPv4N8nervosys11autonomylib11Environment5State7gravityE"], [409, "_CPPv4N8nervosys11autonomylib11Environment5State7gravityE"]], "nervosys::autonomylib::environment::state::position (c++ member)": [[18, "_CPPv4N8nervosys11autonomylib11Environment5State8positionE"], [409, "_CPPv4N8nervosys11autonomylib11Environment5State8positionE"]], "nervosys::autonomylib::environment::state::temperature (c++ member)": [[18, "_CPPv4N8nervosys11autonomylib11Environment5State11temperatureE"], [409, "_CPPv4N8nervosys11autonomylib11Environment5State11temperatureE"]], "nervosys::autonomylib::environment::failresetupdateordering (c++ function)": [[18, "_CPPv4N8nervosys11autonomylib11Environment23failResetUpdateOrderingENSt6stringE"]], "nervosys::autonomylib::environment::gethomegeopoint (c++ function)": [[18, "_CPPv4NK8nervosys11autonomylib11Environment15getHomeGeoPointEv"]], "nervosys::autonomylib::environment::getinitialstate (c++ function)": [[18, "_CPPv4NK8nervosys11autonomylib11Environment15getInitialStateEv"]], "nervosys::autonomylib::environment::getstate (c++ function)": [[18, "_CPPv4N8nervosys11autonomylib11Environment8getStateEv"], [18, "_CPPv4NK8nervosys11autonomylib11Environment8getStateEv"]], "nervosys::autonomylib::environment::initialize (c++ function)": [[18, "_CPPv4N8nervosys11autonomylib11Environment10initializeERK5State"]], "nervosys::autonomylib::environment::resetimplementation (c++ function)": [[18, "_CPPv4N8nervosys11autonomylib11Environment19resetImplementationEv"]], "nervosys::autonomylib::environment::sethomegeopoint (c++ function)": [[18, "_CPPv4N8nervosys11autonomylib11Environment15setHomeGeoPointERK8GeoPoint"]], "nervosys::autonomylib::environment::setposition (c++ function)": [[18, "_CPPv4N8nervosys11autonomylib11Environment11setPositionERK8Vector3r"]], "nervosys::autonomylib::environment::update (c++ function)": [[18, "_CPPv4N8nervosys11autonomylib11Environment6updateEv"]], "nervosys::autonomylib::externalphysicsengine (c++ class)": [[19, "_CPPv4N8nervosys11autonomylib21ExternalPhysicsEngineE"]], "nervosys::autonomylib::externalphysicsengine::externalphysicsengine (c++ function)": [[19, "_CPPv4N8nervosys11autonomylib21ExternalPhysicsEngine21ExternalPhysicsEngineEv"]], "nervosys::autonomylib::externalphysicsengine::reportstate (c++ function)": [[19, "_CPPv4N8nervosys11autonomylib21ExternalPhysicsEngine11reportStateER13StateReporter"]], "nervosys::autonomylib::externalphysicsengine::resetimplementation (c++ function)": [[19, "_CPPv4N8nervosys11autonomylib21ExternalPhysicsEngine19resetImplementationEv"]], "nervosys::autonomylib::externalphysicsengine::update (c++ function)": [[19, "_CPPv4N8nervosys11autonomylib21ExternalPhysicsEngine6updateEv"]], "nervosys::autonomylib::fastphysicsengine (c++ class)": [[20, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngineE"]], "nervosys::autonomylib::fastphysicsengine::fastphysicsengine (c++ function)": [[20, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine17FastPhysicsEngineEb8Vector3r8Vector3r"]], "nervosys::autonomylib::fastphysicsengine::insert (c++ function)": [[20, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine6insertEP11PhysicsBody"]], "nervosys::autonomylib::fastphysicsengine::reportstate (c++ function)": [[20, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine11reportStateER13StateReporter"]], "nervosys::autonomylib::fastphysicsengine::resetimplementation (c++ function)": [[20, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine19resetImplementationEv"]], "nervosys::autonomylib::fastphysicsengine::setextforce (c++ function)": [[20, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine11setExtForceERK8Vector3r"]], "nervosys::autonomylib::fastphysicsengine::setwind (c++ function)": [[20, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine7setWindERK8Vector3r"]], "nervosys::autonomylib::fastphysicsengine::update (c++ function)": [[20, "_CPPv4N8nervosys11autonomylib17FastPhysicsEngine6updateEv"]], "nervosys::autonomylib::gpsbase (c++ class)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBaseE"]], "nervosys::autonomylib::gpsbase::gnssfixtype (c++ enum)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase11GnssFixTypeE"]], "nervosys::autonomylib::gpsbase::gnssfixtype::gnss_fix_2d_fix (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase11GnssFixType15GNSS_FIX_2D_FIXE"]], "nervosys::autonomylib::gpsbase::gnssfixtype::gnss_fix_3d_fix (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase11GnssFixType15GNSS_FIX_3D_FIXE"]], "nervosys::autonomylib::gpsbase::gnssfixtype::gnss_fix_no_fix (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase11GnssFixType15GNSS_FIX_NO_FIXE"]], "nervosys::autonomylib::gpsbase::gnssfixtype::gnss_fix_time_only (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase11GnssFixType18GNSS_FIX_TIME_ONLYE"]], "nervosys::autonomylib::gpsbase::gnssreport (c++ struct)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReportE"], [410, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReportE"]], "nervosys::autonomylib::gpsbase::gnssreport::eph (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport3ephE"], [410, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport3ephE"]], "nervosys::autonomylib::gpsbase::gnssreport::epv (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport3epvE"], [410, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport3epvE"]], "nervosys::autonomylib::gpsbase::gnssreport::fix_type (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport8fix_typeE"], [410, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport8fix_typeE"]], "nervosys::autonomylib::gpsbase::gnssreport::geo_point (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport9geo_pointE"], [410, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport9geo_pointE"]], "nervosys::autonomylib::gpsbase::gnssreport::time_utc (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport8time_utcE"], [410, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport8time_utcE"]], "nervosys::autonomylib::gpsbase::gnssreport::velocity (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport8velocityE"], [410, "_CPPv4N8nervosys11autonomylib7GpsBase10GnssReport8velocityE"]], "nervosys::autonomylib::gpsbase::gpsbase (c++ function)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase7GpsBaseERKNSt6stringE"]], "nervosys::autonomylib::gpsbase::gpspoint (c++ struct)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPointE"], [411, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPointE"]], "nervosys::autonomylib::gpsbase::gpspoint::gpspoint (c++ function)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8GpsPointEddfif"], [21, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8GpsPointEv"], [411, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8GpsPointEddfif"], [411, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8GpsPointEv"]], "nervosys::autonomylib::gpsbase::gpspoint::altitude (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8altitudeE"], [411, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8altitudeE"]], "nervosys::autonomylib::gpsbase::gpspoint::health (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint6healthE"], [411, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint6healthE"]], "nervosys::autonomylib::gpsbase::gpspoint::height (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint6heightE"], [411, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint6heightE"]], "nervosys::autonomylib::gpsbase::gpspoint::latitude (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8latitudeE"], [411, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint8latitudeE"]], "nervosys::autonomylib::gpsbase::gpspoint::longitude (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint9longitudeE"], [411, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint9longitudeE"]], "nervosys::autonomylib::gpsbase::gpspoint::to_string (c++ function)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint9to_stringEv"], [411, "_CPPv4N8nervosys11autonomylib7GpsBase8GpsPoint9to_stringEv"]], "nervosys::autonomylib::gpsbase::navsatfix (c++ struct)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFixE"], [412, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFixE"]], "nervosys::autonomylib::gpsbase::navsatfix::geo_point (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFix9geo_pointE"], [412, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFix9geo_pointE"]], "nervosys::autonomylib::gpsbase::navsatfix::position_covariance (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFix19position_covarianceE"], [412, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFix19position_covarianceE"]], "nervosys::autonomylib::gpsbase::navsatfix::position_covariance_type (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFix24position_covariance_typeE"], [412, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFix24position_covariance_typeE"]], "nervosys::autonomylib::gpsbase::navsatfix::status (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFix6statusE"], [412, "_CPPv4N8nervosys11autonomylib7GpsBase9NavSatFix6statusE"]], "nervosys::autonomylib::gpsbase::navsatstatus (c++ struct)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase12NavSatStatusE"], [413, "_CPPv4N8nervosys11autonomylib7GpsBase12NavSatStatusE"]], "nervosys::autonomylib::gpsbase::navsatstatus::service (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase12NavSatStatus7serviceE"], [413, "_CPPv4N8nervosys11autonomylib7GpsBase12NavSatStatus7serviceE"]], "nervosys::autonomylib::gpsbase::navsatstatus::status (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase12NavSatStatus6statusE"], [413, "_CPPv4N8nervosys11autonomylib7GpsBase12NavSatStatus6statusE"]], "nervosys::autonomylib::gpsbase::navsatstatusservicetype (c++ enum)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase23NavSatStatusServiceTypeE"]], "nervosys::autonomylib::gpsbase::navsatstatusservicetype::service_compass (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase23NavSatStatusServiceType15SERVICE_COMPASSE"]], "nervosys::autonomylib::gpsbase::navsatstatusservicetype::service_galileo (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase23NavSatStatusServiceType15SERVICE_GALILEOE"]], "nervosys::autonomylib::gpsbase::navsatstatusservicetype::service_glonass (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase23NavSatStatusServiceType15SERVICE_GLONASSE"]], "nervosys::autonomylib::gpsbase::navsatstatusservicetype::service_gps (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase23NavSatStatusServiceType11SERVICE_GPSE"]], "nervosys::autonomylib::gpsbase::navsatstatustype (c++ enum)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase16NavSatStatusTypeE"]], "nervosys::autonomylib::gpsbase::navsatstatustype::status_fix (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase16NavSatStatusType10STATUS_FIXE"]], "nervosys::autonomylib::gpsbase::navsatstatustype::status_gbas_fix (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase16NavSatStatusType15STATUS_GBAS_FIXE"]], "nervosys::autonomylib::gpsbase::navsatstatustype::status_no_fix (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase16NavSatStatusType13STATUS_NO_FIXE"]], "nervosys::autonomylib::gpsbase::navsatstatustype::status_sbas_fix (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase16NavSatStatusType15STATUS_SBAS_FIXE"]], "nervosys::autonomylib::gpsbase::output (c++ struct)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase6OutputE"], [414, "_CPPv4N8nervosys11autonomylib7GpsBase6OutputE"]], "nervosys::autonomylib::gpsbase::output::gnss (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase6Output4gnssE"], [414, "_CPPv4N8nervosys11autonomylib7GpsBase6Output4gnssE"]], "nervosys::autonomylib::gpsbase::output::is_valid (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase6Output8is_validE"], [414, "_CPPv4N8nervosys11autonomylib7GpsBase6Output8is_validE"]], "nervosys::autonomylib::gpsbase::output::time_stamp (c++ member)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase6Output10time_stampE"], [414, "_CPPv4N8nervosys11autonomylib7GpsBase6Output10time_stampE"]], "nervosys::autonomylib::gpsbase::positioncovariancetype (c++ enum)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase22PositionCovarianceTypeE"]], "nervosys::autonomylib::gpsbase::positioncovariancetype::covariance_type_approximated (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase22PositionCovarianceType28COVARIANCE_TYPE_APPROXIMATEDE"]], "nervosys::autonomylib::gpsbase::positioncovariancetype::covariance_type_diagonal_known (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase22PositionCovarianceType30COVARIANCE_TYPE_DIAGONAL_KNOWNE"]], "nervosys::autonomylib::gpsbase::positioncovariancetype::covariance_type_known (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase22PositionCovarianceType21COVARIANCE_TYPE_KNOWNE"]], "nervosys::autonomylib::gpsbase::positioncovariancetype::covariance_type_unknown (c++ enumerator)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase22PositionCovarianceType23COVARIANCE_TYPE_UNKNOWNE"]], "nervosys::autonomylib::gpsbase::getoutput (c++ function)": [[21, "_CPPv4NK8nervosys11autonomylib7GpsBase9getOutputEv"]], "nervosys::autonomylib::gpsbase::reportstate (c++ function)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase11reportStateER13StateReporter"]], "nervosys::autonomylib::gpsbase::setoutput (c++ function)": [[21, "_CPPv4N8nervosys11autonomylib7GpsBase9setOutputERK6Output"]], "nervosys::autonomylib::gpssimple (c++ class)": [[22, "_CPPv4N8nervosys11autonomylib9GpsSimpleE"]], "nervosys::autonomylib::gpssimple::gpssimple (c++ function)": [[22, "_CPPv4N8nervosys11autonomylib9GpsSimple9GpsSimpleERKN19AutonomySimSettings10GpsSettingE"]], "nervosys::autonomylib::gpssimple::resetimplementation (c++ function)": [[22, "_CPPv4N8nervosys11autonomylib9GpsSimple19resetImplementationEv"]], "nervosys::autonomylib::gpssimple::update (c++ function)": [[22, "_CPPv4N8nervosys11autonomylib9GpsSimple6updateEv"]], "nervosys::autonomylib::gpssimple::~gpssimple (c++ function)": [[22, "_CPPv4N8nervosys11autonomylib9GpsSimpleD0Ev"]], "nervosys::autonomylib::igeofence (c++ class)": [[23, "_CPPv4N8nervosys11autonomylib9IGeoFenceE"]], "nervosys::autonomylib::igeofence::checkfence (c++ function)": [[23, "_CPPv4N8nervosys11autonomylib9IGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb"]], "nervosys::autonomylib::igeofence::setboundry (c++ function)": [[23, "_CPPv4N8nervosys11autonomylib9IGeoFence10setBoundryERK8Vector3rfff"]], "nervosys::autonomylib::igeofence::tostring (c++ function)": [[23, "_CPPv4NK8nervosys11autonomylib9IGeoFence8toStringEv"]], "nervosys::autonomylib::igeofence::~igeofence (c++ function)": [[23, "_CPPv4N8nervosys11autonomylib9IGeoFenceD0Ev"]], "nervosys::autonomylib::imusimple (c++ class)": [[24, "_CPPv4N8nervosys11autonomylib9ImuSimpleE"]], "nervosys::autonomylib::imusimple::imusimple (c++ function)": [[24, "_CPPv4N8nervosys11autonomylib9ImuSimple9ImuSimpleERKN19AutonomySimSettings10ImuSettingE"]], "nervosys::autonomylib::imusimple::resetimplementation (c++ function)": [[24, "_CPPv4N8nervosys11autonomylib9ImuSimple19resetImplementationEv"]], "nervosys::autonomylib::imusimple::update (c++ function)": [[24, "_CPPv4N8nervosys11autonomylib9ImuSimple6updateEv"]], "nervosys::autonomylib::imusimple::~imusimple (c++ function)": [[24, "_CPPv4N8nervosys11autonomylib9ImuSimpleD0Ev"]], "nervosys::autonomylib::kinematics (c++ class)": [[25, "_CPPv4N8nervosys11autonomylib10KinematicsE"]], "nervosys::autonomylib::kinematics::kinematics (c++ function)": [[25, "_CPPv4N8nervosys11autonomylib10Kinematics10KinematicsERK5State"]], "nervosys::autonomylib::kinematics::state (c++ struct)": [[25, "_CPPv4N8nervosys11autonomylib10Kinematics5StateE"], [420, "_CPPv4N8nervosys11autonomylib10Kinematics5StateE"]], "nervosys::autonomylib::kinematics::state::accelerations (c++ member)": [[25, "_CPPv4N8nervosys11autonomylib10Kinematics5State13accelerationsE"], [420, "_CPPv4N8nervosys11autonomylib10Kinematics5State13accelerationsE"]], "nervosys::autonomylib::kinematics::state::pose (c++ member)": [[25, "_CPPv4N8nervosys11autonomylib10Kinematics5State4poseE"], [420, "_CPPv4N8nervosys11autonomylib10Kinematics5State4poseE"]], "nervosys::autonomylib::kinematics::state::twist (c++ member)": [[25, "_CPPv4N8nervosys11autonomylib10Kinematics5State5twistE"], [420, "_CPPv4N8nervosys11autonomylib10Kinematics5State5twistE"]], "nervosys::autonomylib::kinematics::state::zero (c++ function)": [[25, "_CPPv4N8nervosys11autonomylib10Kinematics5State4zeroEv"], [420, "_CPPv4N8nervosys11autonomylib10Kinematics5State4zeroEv"]], "nervosys::autonomylib::kinematics::getinitialstate (c++ function)": [[25, "_CPPv4NK8nervosys11autonomylib10Kinematics15getInitialStateEv"]], "nervosys::autonomylib::kinematics::getpose (c++ function)": [[25, "_CPPv4NK8nervosys11autonomylib10Kinematics7getPoseEv"]], "nervosys::autonomylib::kinematics::getstate (c++ function)": [[25, "_CPPv4NK8nervosys11autonomylib10Kinematics8getStateEv"]], "nervosys::autonomylib::kinematics::gettwist (c++ function)": [[25, "_CPPv4NK8nervosys11autonomylib10Kinematics8getTwistEv"]], "nervosys::autonomylib::kinematics::initialize (c++ function)": [[25, "_CPPv4N8nervosys11autonomylib10Kinematics10initializeERK5State"]], "nervosys::autonomylib::kinematics::reportstate (c++ function)": [[25, "_CPPv4N8nervosys11autonomylib10Kinematics11reportStateER13StateReporter"]], "nervosys::autonomylib::kinematics::resetimplementation (c++ function)": [[25, "_CPPv4N8nervosys11autonomylib10Kinematics19resetImplementationEv"]], "nervosys::autonomylib::kinematics::setpose (c++ function)": [[25, "_CPPv4N8nervosys11autonomylib10Kinematics7setPoseERK4Pose"]], "nervosys::autonomylib::kinematics::setstate (c++ function)": [[25, "_CPPv4N8nervosys11autonomylib10Kinematics8setStateERK5State"]], "nervosys::autonomylib::kinematics::settwist (c++ function)": [[25, "_CPPv4N8nervosys11autonomylib10Kinematics8setTwistERK5Twist"]], "nervosys::autonomylib::kinematics::update (c++ function)": [[25, "_CPPv4N8nervosys11autonomylib10Kinematics6updateEv"]], "nervosys::autonomylib::lidarbase (c++ class)": [[26, "_CPPv4N8nervosys11autonomylib9LidarBaseE"]], "nervosys::autonomylib::lidarbase::lidarbase (c++ function)": [[26, "_CPPv4N8nervosys11autonomylib9LidarBase9LidarBaseERKNSt6stringE"]], "nervosys::autonomylib::lidarbase::getoutput (c++ function)": [[26, "_CPPv4NK8nervosys11autonomylib9LidarBase9getOutputEv"]], "nervosys::autonomylib::lidarbase::reportstate (c++ function)": [[26, "_CPPv4N8nervosys11autonomylib9LidarBase11reportStateER13StateReporter"]], "nervosys::autonomylib::lidarbase::setoutput (c++ function)": [[26, "_CPPv4N8nervosys11autonomylib9LidarBase9setOutputERK9LidarData"]], "nervosys::autonomylib::lidarsimple (c++ class)": [[27, "_CPPv4N8nervosys11autonomylib11LidarSimpleE"]], "nervosys::autonomylib::lidarsimple::lidarsimple (c++ function)": [[27, "_CPPv4N8nervosys11autonomylib11LidarSimple11LidarSimpleERKN19AutonomySimSettings12LidarSettingE"]], "nervosys::autonomylib::lidarsimple::getparams (c++ function)": [[27, "_CPPv4NK8nervosys11autonomylib11LidarSimple9getParamsEv"]], "nervosys::autonomylib::lidarsimple::getpointcloud (c++ function)": [[27, "_CPPv4N8nervosys11autonomylib11LidarSimple13getPointCloudERK4PoseRK4Pose10TTimeDeltaR6vectorI6real_TER6vectorIiE"]], "nervosys::autonomylib::lidarsimple::reportstate (c++ function)": [[27, "_CPPv4N8nervosys11autonomylib11LidarSimple11reportStateER13StateReporter"]], "nervosys::autonomylib::lidarsimple::resetimplementation (c++ function)": [[27, "_CPPv4N8nervosys11autonomylib11LidarSimple19resetImplementationEv"]], "nervosys::autonomylib::lidarsimple::update (c++ function)": [[27, "_CPPv4N8nervosys11autonomylib11LidarSimple6updateEv"]], "nervosys::autonomylib::lidarsimple::~lidarsimple (c++ function)": [[27, "_CPPv4N8nervosys11autonomylib11LidarSimpleD0Ev"]], "nervosys::autonomylib::magnetometerbase (c++ class)": [[28, "_CPPv4N8nervosys11autonomylib16MagnetometerBaseE"]], "nervosys::autonomylib::magnetometerbase::magnetometerbase (c++ function)": [[28, "_CPPv4N8nervosys11autonomylib16MagnetometerBase16MagnetometerBaseERKNSt6stringE"]], "nervosys::autonomylib::magnetometerbase::output (c++ struct)": [[28, "_CPPv4N8nervosys11autonomylib16MagnetometerBase6OutputE"], [422, "_CPPv4N8nervosys11autonomylib16MagnetometerBase6OutputE"]], "nervosys::autonomylib::magnetometerbase::output::magnetic_field_body (c++ member)": [[28, "_CPPv4N8nervosys11autonomylib16MagnetometerBase6Output19magnetic_field_bodyE"], [422, "_CPPv4N8nervosys11autonomylib16MagnetometerBase6Output19magnetic_field_bodyE"]], "nervosys::autonomylib::magnetometerbase::output::magnetic_field_covariance (c++ member)": [[28, "_CPPv4N8nervosys11autonomylib16MagnetometerBase6Output25magnetic_field_covarianceE"], [422, "_CPPv4N8nervosys11autonomylib16MagnetometerBase6Output25magnetic_field_covarianceE"]], "nervosys::autonomylib::magnetometerbase::output::time_stamp (c++ member)": [[28, "_CPPv4N8nervosys11autonomylib16MagnetometerBase6Output10time_stampE"], [422, "_CPPv4N8nervosys11autonomylib16MagnetometerBase6Output10time_stampE"]], "nervosys::autonomylib::magnetometerbase::getoutput (c++ function)": [[28, "_CPPv4NK8nervosys11autonomylib16MagnetometerBase9getOutputEv"]], "nervosys::autonomylib::magnetometerbase::reportstate (c++ function)": [[28, "_CPPv4N8nervosys11autonomylib16MagnetometerBase11reportStateER13StateReporter"]], "nervosys::autonomylib::magnetometerbase::setoutput (c++ function)": [[28, "_CPPv4N8nervosys11autonomylib16MagnetometerBase9setOutputERK6Output"]], "nervosys::autonomylib::magnetometersimple (c++ class)": [[29, "_CPPv4N8nervosys11autonomylib18MagnetometerSimpleE"]], "nervosys::autonomylib::magnetometersimple::magnetometersimple (c++ function)": [[29, "_CPPv4N8nervosys11autonomylib18MagnetometerSimple18MagnetometerSimpleERKN19AutonomySimSettings19MagnetometerSettingE"]], "nervosys::autonomylib::magnetometersimple::resetimplementation (c++ function)": [[29, "_CPPv4N8nervosys11autonomylib18MagnetometerSimple19resetImplementationEv"]], "nervosys::autonomylib::magnetometersimple::update (c++ function)": [[29, "_CPPv4N8nervosys11autonomylib18MagnetometerSimple6updateEv"]], "nervosys::autonomylib::magnetometersimple::~magnetometersimple (c++ function)": [[29, "_CPPv4N8nervosys11autonomylib18MagnetometerSimpleD0Ev"]], "nervosys::autonomylib::mavlinkmultirotorapi (c++ class)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApiE"]], "nervosys::autonomylib::mavlinkmultirotorapi::mavlinklogviewerlog (c++ class)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLogE"], [31, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLogE"]], "nervosys::autonomylib::mavlinkmultirotorapi::mavlinklogviewerlog::mavlinklogviewerlog (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLog19MavLinkLogViewerLogENSt10shared_ptrIN10mavlinkcom11MavLinkNodeEEE"], [31, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLog19MavLinkLogViewerLogENSt10shared_ptrIN10mavlinkcom11MavLinkNodeEEE"]], "nervosys::autonomylib::mavlinkmultirotorapi::mavlinklogviewerlog::write (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLog5writeERKN10mavlinkcom14MavLinkMessageE8uint64_t"], [31, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLog5writeERKN10mavlinkcom14MavLinkMessageE8uint64_t"]], "nervosys::autonomylib::mavlinkmultirotorapi::mavlinklogviewerlog::~mavlinklogviewerlog (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLogD0Ev"], [31, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19MavLinkLogViewerLogD0Ev"]], "nervosys::autonomylib::mavlinkmultirotorapi::rotorcontrolscount (c++ member)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18RotorControlsCountE"]], "nervosys::autonomylib::mavlinkmultirotorapi::advancetime (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi11advanceTimeEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::aftertask (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi9afterTaskEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::armdisarm (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi9armDisarmEb"]], "nervosys::autonomylib::mavlinkmultirotorapi::beforetask (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi10beforeTaskEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::canarm (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi6canArmEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::close (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi5closeEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::closeallconnection (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18closeAllConnectionEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::commandangleratesthrottle (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi25commandAngleRatesThrottleEffff"]], "nervosys::autonomylib::mavlinkmultirotorapi::commandangleratesz (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18commandAngleRatesZEffff"]], "nervosys::autonomylib::mavlinkmultirotorapi::commandmotorpwms (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16commandMotorPWMsEffff"]], "nervosys::autonomylib::mavlinkmultirotorapi::commandposition (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15commandPositionEfffRK7YawMode"]], "nervosys::autonomylib::mavlinkmultirotorapi::commandrollpitchyawthrottle (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi27commandRollPitchYawThrottleEffff"]], "nervosys::autonomylib::mavlinkmultirotorapi::commandrollpitchyawz (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi20commandRollPitchYawZEffff"]], "nervosys::autonomylib::mavlinkmultirotorapi::commandrollpitchyawratethrottle (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi31commandRollPitchYawrateThrottleEffff"]], "nervosys::autonomylib::mavlinkmultirotorapi::commandrollpitchyawratez (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi24commandRollPitchYawrateZEffff"]], "nervosys::autonomylib::mavlinkmultirotorapi::commandvelocity (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15commandVelocityEfffRK7YawMode"]], "nervosys::autonomylib::mavlinkmultirotorapi::commandvelocityz (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16commandVelocityZEfffRK7YawMode"]], "nervosys::autonomylib::mavlinkmultirotorapi::connect (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi7connectEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::connect_thread (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14connect_threadEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::connection_info_ (c++ member)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16connection_info_E"]], "nervosys::autonomylib::mavlinkmultirotorapi::disconnect (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi10disconnectEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::enableapicontrol (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi16enableApiControlEb"]], "nervosys::autonomylib::mavlinkmultirotorapi::getactuation (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi12getActuationEj"]], "nervosys::autonomylib::mavlinkmultirotorapi::getactuatorcount (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi16getActuatorCountEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::getcommandperiod (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi16getCommandPeriodEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::getdistanceaccuracy (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi19getDistanceAccuracyEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::getgpslocation (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi14getGpsLocationEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::gethomegeopoint (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi15getHomeGeoPointEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::getkinematicsestimated (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi22getKinematicsEstimatedEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::getlandedstate (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi14getLandedStateEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::getmocappose (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi12getMocapPoseEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::getmultirotorapiparams (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi22getMultirotorApiParamsEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::getorientation (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi14getOrientationEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::getposition (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi11getPositionEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::getsensors (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi10getSensorsEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::getsimtime (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi10getSimTimeEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::getstatusmessages (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi17getStatusMessagesERNSt6vectorINSt6stringEEE"]], "nervosys::autonomylib::mavlinkmultirotorapi::gettakeoffz (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi11getTakeoffZEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::getvelocity (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi11getVelocityEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::gohome (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi6goHomeEf"]], "nervosys::autonomylib::mavlinkmultirotorapi::hil_controls_mutex_ (c++ member)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19hil_controls_mutex_E"]], "nervosys::autonomylib::mavlinkmultirotorapi::hover (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi5hoverEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::initialize (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi10initializeERKN19AutonomySimSettings21MavLinkConnectionInfoEPK16SensorCollectionb"]], "nervosys::autonomylib::mavlinkmultirotorapi::isapicontrolenabled (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi19isApiControlEnabledEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::isready (c++ function)": [[30, "_CPPv4NK8nervosys11autonomylib20MavLinkMultirotorApi7isReadyERNSt6stringE"]], "nervosys::autonomylib::mavlinkmultirotorapi::is_simulation_mode_ (c++ member)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19is_simulation_mode_E"]], "nervosys::autonomylib::mavlinkmultirotorapi::land (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi4landEf"]], "nervosys::autonomylib::mavlinkmultirotorapi::movetoposition (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14moveToPositionEfffff14DrivetrainTypeRK7YawModeff"]], "nervosys::autonomylib::mavlinkmultirotorapi::onarmed (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi7onArmedEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::ondisarmed (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi10onDisarmedEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::resetimplementation (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19resetImplementationEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::rotor_controls_ (c++ member)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15rotor_controls_E"]], "nervosys::autonomylib::mavlinkmultirotorapi::sendtelemetry (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi13sendTelemetryEf"]], "nervosys::autonomylib::mavlinkmultirotorapi::sensors_ (c++ member)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi8sensors_E"]], "nervosys::autonomylib::mavlinkmultirotorapi::setcontrollergains (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE"]], "nervosys::autonomylib::mavlinkmultirotorapi::start_telemtry_thread (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi21start_telemtry_threadEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::takeoff (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi7takeoffEf"]], "nervosys::autonomylib::mavlinkmultirotorapi::telemtry_thread (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi15telemtry_threadEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::update (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi6updateEv"]], "nervosys::autonomylib::mavlinkmultirotorapi::waitforhomelocation (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi19waitForHomeLocationEf"]], "nervosys::autonomylib::mavlinkmultirotorapi::waitforstablegroundposition (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi27waitForStableGroundPositionEf"]], "nervosys::autonomylib::mavlinkmultirotorapi::writetelemetry (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApi14writeTelemetryEf"]], "nervosys::autonomylib::mavlinkmultirotorapi::~mavlinkmultirotorapi (c++ function)": [[30, "_CPPv4N8nervosys11autonomylib20MavLinkMultirotorApiD0Ev"]], "nervosys::autonomylib::multirotorapibase (c++ class)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBaseE"]], "nervosys::autonomylib::multirotorapibase::singlecall (c++ class)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCallE"], [34, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCallE"]], "nervosys::autonomylib::multirotorapibase::singlecall::singlecall (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCall10SingleCallEP17MultirotorApiBase"], [34, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCall10SingleCallEP17MultirotorApiBase"]], "nervosys::autonomylib::multirotorapibase::singlecall::getvehicleapi (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCall13getVehicleApiEv"], [34, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCall13getVehicleApiEv"]], "nervosys::autonomylib::multirotorapibase::singlecall::isrootcall (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCall10isRootCallEv"], [34, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCall10isRootCallEv"]], "nervosys::autonomylib::multirotorapibase::singlecall::~singlecall (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCallD0Ev"], [34, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10SingleCallD0Ev"]], "nervosys::autonomylib::multirotorapibase::singletaskcall (c++ class)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14SingleTaskCallE"], [35, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14SingleTaskCallE"]], "nervosys::autonomylib::multirotorapibase::singletaskcall::singletaskcall (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14SingleTaskCall14SingleTaskCallEP17MultirotorApiBase"], [35, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14SingleTaskCall14SingleTaskCallEP17MultirotorApiBase"]], "nervosys::autonomylib::multirotorapibase::singletaskcall::~singletaskcall (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14SingleTaskCallD0Ev"], [35, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14SingleTaskCallD0Ev"]], "nervosys::autonomylib::multirotorapibase::statuslock (c++ struct)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10StatusLockE"], [426, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10StatusLockE"]], "nervosys::autonomylib::multirotorapibase::statuslock::statuslock (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10StatusLock10StatusLockEPK17MultirotorApiBase"], [426, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10StatusLock10StatusLockEPK17MultirotorApiBase"]], "nervosys::autonomylib::multirotorapibase::unsafemoveexception (c++ class)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19UnsafeMoveExceptionE"], [36, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19UnsafeMoveExceptionE"]], "nervosys::autonomylib::multirotorapibase::unsafemoveexception::unsafemoveexception (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19UnsafeMoveException19UnsafeMoveExceptionEKN10SafetyEval10EvalResultERKNSt6stringE"], [36, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19UnsafeMoveException19UnsafeMoveExceptionEKN10SafetyEval10EvalResultERKNSt6stringE"]], "nervosys::autonomylib::multirotorapibase::unsafemoveexception::result (c++ member)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19UnsafeMoveException6resultE"], [36, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19UnsafeMoveException6resultE"]], "nervosys::autonomylib::multirotorapibase::waitfunction (c++ type)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12WaitFunctionE"]], "nervosys::autonomylib::multirotorapibase::aftertask (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9afterTaskEv"]], "nervosys::autonomylib::multirotorapibase::beforetask (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10beforeTaskEv"]], "nervosys::autonomylib::multirotorapibase::cancellasttask (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14cancelLastTaskEv"]], "nervosys::autonomylib::multirotorapibase::commandangleratesthrottle (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25commandAngleRatesThrottleEffff"]], "nervosys::autonomylib::multirotorapibase::commandangleratesz (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18commandAngleRatesZEffff"]], "nervosys::autonomylib::multirotorapibase::commandmotorpwms (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase16commandMotorPWMsEffff"]], "nervosys::autonomylib::multirotorapibase::commandposition (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15commandPositionEfffRK7YawMode"]], "nervosys::autonomylib::multirotorapibase::commandrollpitchyawthrottle (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27commandRollPitchYawThrottleEffff"]], "nervosys::autonomylib::multirotorapibase::commandrollpitchyawz (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase20commandRollPitchYawZEffff"]], "nervosys::autonomylib::multirotorapibase::commandrollpitchyawratethrottle (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase31commandRollPitchYawrateThrottleEffff"]], "nervosys::autonomylib::multirotorapibase::commandrollpitchyawratez (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24commandRollPitchYawrateZEffff"]], "nervosys::autonomylib::multirotorapibase::commandvelocity (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15commandVelocityEfffRK7YawMode"]], "nervosys::autonomylib::multirotorapibase::commandvelocityz (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase16commandVelocityZEfffRK7YawMode"]], "nervosys::autonomylib::multirotorapibase::emergencymaneuverifunsafe (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25emergencyManeuverIfUnsafeERKN10SafetyEval10EvalResultE"]], "nervosys::autonomylib::multirotorapibase::estimaterctrims (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15estimateRCTrimsEfff"]], "nervosys::autonomylib::multirotorapibase::getautolookahead (c++ function)": [[32, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase16getAutoLookaheadEffff"]], "nervosys::autonomylib::multirotorapibase::getcanceltoken (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14getCancelTokenEv"]], "nervosys::autonomylib::multirotorapibase::getcommandperiod (c++ function)": [[32, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase16getCommandPeriodEv"]], "nervosys::autonomylib::multirotorapibase::getdistanceaccuracy (c++ function)": [[32, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase19getDistanceAccuracyEv"]], "nervosys::autonomylib::multirotorapibase::getgpslocation (c++ function)": [[32, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase14getGpsLocationEv"]], "nervosys::autonomylib::multirotorapibase::getkinematicsestimated (c++ function)": [[32, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase22getKinematicsEstimatedEv"]], "nervosys::autonomylib::multirotorapibase::getlandedstate (c++ function)": [[32, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase14getLandedStateEv"]], "nervosys::autonomylib::multirotorapibase::getmultirotorapiparams (c++ function)": [[32, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase22getMultirotorApiParamsEv"]], "nervosys::autonomylib::multirotorapibase::getmultirotorstate (c++ function)": [[32, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase18getMultirotorStateEv"]], "nervosys::autonomylib::multirotorapibase::getobsavoidancevelocity (c++ function)": [[32, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase23getObsAvoidanceVelocityEff"]], "nervosys::autonomylib::multirotorapibase::getorientation (c++ function)": [[32, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase14getOrientationEv"]], "nervosys::autonomylib::multirotorapibase::getposition (c++ function)": [[32, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase11getPositionEv"]], "nervosys::autonomylib::multirotorapibase::getrotorstates (c++ function)": [[32, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase14getRotorStatesEv"]], "nervosys::autonomylib::multirotorapibase::gettakeoffz (c++ function)": [[32, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase11getTakeoffZEv"]], "nervosys::autonomylib::multirotorapibase::getvelocity (c++ function)": [[32, "_CPPv4NK8nervosys11autonomylib17MultirotorApiBase11getVelocityEv"]], "nervosys::autonomylib::multirotorapibase::gohome (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase6goHomeEf"]], "nervosys::autonomylib::multirotorapibase::hover (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase5hoverEv"]], "nervosys::autonomylib::multirotorapibase::land (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase4landEf"]], "nervosys::autonomylib::multirotorapibase::movebyangleratesthrottle (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByAngleRatesThrottleEfffff"]], "nervosys::autonomylib::multirotorapibase::movebyangleratesthrottleinternal (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase32moveByAngleRatesThrottleInternalEffff"]], "nervosys::autonomylib::multirotorapibase::movebyangleratesz (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase17moveByAngleRatesZEfffff"]], "nervosys::autonomylib::multirotorapibase::movebyanglerateszinternal (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase25moveByAngleRatesZInternalEffff"]], "nervosys::autonomylib::multirotorapibase::movebymanual (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12moveByManualEffff14DrivetrainTypeRK7YawMode"]], "nervosys::autonomylib::multirotorapibase::movebymotorpwms (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByMotorPWMsEfffff"]], "nervosys::autonomylib::multirotorapibase::movebyrc (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase8moveByRCERK6RCData"]], "nervosys::autonomylib::multirotorapibase::movebyrollpitchyawthrottle (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26moveByRollPitchYawThrottleEfffff"]], "nervosys::autonomylib::multirotorapibase::movebyrollpitchyawthrottleinternal (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase34moveByRollPitchYawThrottleInternalEffff"]], "nervosys::autonomylib::multirotorapibase::movebyrollpitchyawz (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19moveByRollPitchYawZEfffff"]], "nervosys::autonomylib::multirotorapibase::movebyrollpitchyawzinternal (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27moveByRollPitchYawZInternalEffff"]], "nervosys::autonomylib::multirotorapibase::movebyrollpitchyawratethrottle (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase30moveByRollPitchYawrateThrottleEfffff"]], "nervosys::autonomylib::multirotorapibase::movebyrollpitchyawratethrottleinternal (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase38moveByRollPitchYawrateThrottleInternalEffff"]], "nervosys::autonomylib::multirotorapibase::movebyrollpitchyawratez (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByRollPitchYawrateZEfffff"]], "nervosys::autonomylib::multirotorapibase::movebyrollpitchyawratezinternal (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase31moveByRollPitchYawrateZInternalEffff"]], "nervosys::autonomylib::multirotorapibase::movebyvelocity (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveByVelocityEffff14DrivetrainTypeRK7YawMode"]], "nervosys::autonomylib::multirotorapibase::movebyvelocitybodyframe (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByVelocityBodyFrameEffff14DrivetrainTypeRK7YawMode"]], "nervosys::autonomylib::multirotorapibase::movebyvelocityinternal (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase22moveByVelocityInternalEfffRK7YawMode"]], "nervosys::autonomylib::multirotorapibase::movebyvelocityz (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15moveByVelocityZEffff14DrivetrainTypeRK7YawMode"]], "nervosys::autonomylib::multirotorapibase::movebyvelocityzbodyframe (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase24moveByVelocityZBodyFrameEffff14DrivetrainTypeRK7YawMode"]], "nervosys::autonomylib::multirotorapibase::movebyvelocityzinternal (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23moveByVelocityZInternalEfffRK7YawMode"]], "nervosys::autonomylib::multirotorapibase::moveonpath (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase10moveOnPathERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeff"]], "nervosys::autonomylib::multirotorapibase::movetogps (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9moveToGPSEfffff14DrivetrainTypeRK7YawModeff"]], "nervosys::autonomylib::multirotorapibase::movetoposition (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14moveToPositionEfffff14DrivetrainTypeRK7YawModeff"]], "nervosys::autonomylib::multirotorapibase::movetopositioninternal (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase22moveToPositionInternalERK8Vector3rRK7YawMode"]], "nervosys::autonomylib::multirotorapibase::movetoz (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase7moveToZEfffRK7YawModeff"]], "nervosys::autonomylib::multirotorapibase::resetimplementation (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19resetImplementationEv"]], "nervosys::autonomylib::multirotorapibase::rotatebyyawrate (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15rotateByYawRateEff"]], "nervosys::autonomylib::multirotorapibase::rotatetoyaw (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11rotateToYawEfff"]], "nervosys::autonomylib::multirotorapibase::safetycheckdestination (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase22safetyCheckDestinationERK8Vector3r"]], "nervosys::autonomylib::multirotorapibase::safetycheckvelocity (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase19safetyCheckVelocityERK8Vector3r"]], "nervosys::autonomylib::multirotorapibase::safetycheckvelocityz (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase20safetyCheckVelocityZEfff"]], "nervosys::autonomylib::multirotorapibase::setanglelevelcontrollergains (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase28setAngleLevelControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE"]], "nervosys::autonomylib::multirotorapibase::setangleratecontrollergains (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase27setAngleRateControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE"]], "nervosys::autonomylib::multirotorapibase::setcontrollergains (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE"]], "nervosys::autonomylib::multirotorapibase::setpositioncontrollergains (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26setPositionControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE"]], "nervosys::autonomylib::multirotorapibase::setrotorstates (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase14setRotorStatesERK11RotorStates"]], "nervosys::autonomylib::multirotorapibase::setsafety (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfff"]], "nervosys::autonomylib::multirotorapibase::setsafetyeval (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase13setSafetyEvalEK10shared_ptrI10SafetyEvalE"]], "nervosys::autonomylib::multirotorapibase::setsimulatedgroundtruth (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase23setSimulatedGroundTruthEPKN10Kinematics5StateEPK11Environment"]], "nervosys::autonomylib::multirotorapibase::setvelocitycontrollergains (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase26setVelocityControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfE"]], "nervosys::autonomylib::multirotorapibase::takeoff (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase7takeoffEf"]], "nervosys::autonomylib::multirotorapibase::waitforfunction (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase15waitForFunctionE12WaitFunctionf"]], "nervosys::autonomylib::multirotorapibase::waitforz (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase8waitForZEfff"]], "nervosys::autonomylib::multirotorapibase::~multirotorapibase (c++ function)": [[32, "_CPPv4N8nervosys11autonomylib17MultirotorApiBaseD0Ev"]], "nervosys::autonomylib::multirotorapibase::obsstrategychanger (c++ class)": [[33, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18ObsStrategyChangerE"]], "nervosys::autonomylib::multirotorapibase::obsstrategychanger::obsstrategychanger (c++ function)": [[33, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18ObsStrategyChanger18ObsStrategyChangerE10shared_ptrI10SafetyEvalEN10SafetyEval20ObsAvoidanceStrategyE"]], "nervosys::autonomylib::multirotorapibase::obsstrategychanger::~obsstrategychanger (c++ function)": [[33, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase18ObsStrategyChangerD0Ev"]], "nervosys::autonomylib::multirotorparams (c++ class)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParamsE"]], "nervosys::autonomylib::multirotorparams::params (c++ struct)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams6ParamsE"], [428, "_CPPv4N8nervosys11autonomylib16MultirotorParams6ParamsE"]], "nervosys::autonomylib::multirotorparams::params::angular_drag_coefficient (c++ member)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params24angular_drag_coefficientE"], [428, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params24angular_drag_coefficientE"]], "nervosys::autonomylib::multirotorparams::params::body_box (c++ member)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params8body_boxE"], [428, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params8body_boxE"]], "nervosys::autonomylib::multirotorparams::params::friction (c++ member)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params8frictionE"], [428, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params8frictionE"]], "nervosys::autonomylib::multirotorparams::params::inertia (c++ member)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params7inertiaE"], [428, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params7inertiaE"]], "nervosys::autonomylib::multirotorparams::params::linear_drag_coefficient (c++ member)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params23linear_drag_coefficientE"], [428, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params23linear_drag_coefficientE"]], "nervosys::autonomylib::multirotorparams::params::mass (c++ member)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params4massE"], [428, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params4massE"]], "nervosys::autonomylib::multirotorparams::params::restitution (c++ member)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params11restitutionE"], [428, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params11restitutionE"]], "nervosys::autonomylib::multirotorparams::params::rotor_count (c++ member)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params11rotor_countE"], [428, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params11rotor_countE"]], "nervosys::autonomylib::multirotorparams::params::rotor_params (c++ member)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params12rotor_paramsE"], [428, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params12rotor_paramsE"]], "nervosys::autonomylib::multirotorparams::params::rotor_poses (c++ member)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params11rotor_posesE"], [428, "_CPPv4N8nervosys11autonomylib16MultirotorParams6Params11rotor_posesE"]], "nervosys::autonomylib::multirotorparams::rotorpose (c++ struct)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPoseE"], [429, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPoseE"]], "nervosys::autonomylib::multirotorparams::rotorpose::rotorpose (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose9RotorPoseERK8Vector3rRK8Vector3r21RotorTurningDirection"], [37, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose9RotorPoseEv"], [429, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose9RotorPoseERK8Vector3rRK8Vector3r21RotorTurningDirection"], [429, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose9RotorPoseEv"]], "nervosys::autonomylib::multirotorparams::rotorpose::direction (c++ member)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose9directionE"], [429, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose9directionE"]], "nervosys::autonomylib::multirotorparams::rotorpose::normal (c++ member)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose6normalE"], [429, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose6normalE"]], "nervosys::autonomylib::multirotorparams::rotorpose::position (c++ member)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose8positionE"], [429, "_CPPv4N8nervosys11autonomylib16MultirotorParams9RotorPose8positionE"]], "nervosys::autonomylib::multirotorparams::addsensorsfromsettings (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams22addSensorsFromSettingsEPKN19AutonomySimSettings14VehicleSettingE"]], "nervosys::autonomylib::multirotorparams::computeinertiamatrix (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams20computeInertiaMatrixER10Matrix3x3rRK8Vector3rRK6vectorI9RotorPoseE6real_T6real_T"]], "nervosys::autonomylib::multirotorparams::createmultirotorapi (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams19createMultirotorApiEv"]], "nervosys::autonomylib::multirotorparams::getparams (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams9getParamsEv"], [37, "_CPPv4NK8nervosys11autonomylib16MultirotorParams9getParamsEv"]], "nervosys::autonomylib::multirotorparams::getsensorfactory (c++ function)": [[37, "_CPPv4NK8nervosys11autonomylib16MultirotorParams16getSensorFactoryEv"]], "nervosys::autonomylib::multirotorparams::getsensors (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams10getSensorsEv"], [37, "_CPPv4NK8nervosys11autonomylib16MultirotorParams10getSensorsEv"]], "nervosys::autonomylib::multirotorparams::initialize (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams10initializeEPKN19AutonomySimSettings14VehicleSettingE"]], "nervosys::autonomylib::multirotorparams::initializerotorhexx (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams19initializeRotorHexXER6vectorI9RotorPoseE4uintA_6real_T6real_T"]], "nervosys::autonomylib::multirotorparams::initializerotoroctox (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams20initializeRotorOctoXER6vectorI9RotorPoseE4uintA_6real_T6real_T"]], "nervosys::autonomylib::multirotorparams::initializerotorquadx (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams20initializeRotorQuadXER6vectorI9RotorPoseE4uintA_6real_T6real_T"]], "nervosys::autonomylib::multirotorparams::initializerotors (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams16initializeRotorsER6vectorI9RotorPoseE4uintA_6real_TA_6real_TA_21RotorTurningDirection6real_T"]], "nervosys::autonomylib::multirotorparams::setupframeblacksheep (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams20setupFrameBlacksheepER6Params"]], "nervosys::autonomylib::multirotorparams::setupframeflamewheel (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams20setupFrameFlamewheelER6Params"]], "nervosys::autonomylib::multirotorparams::setupframeflamewheelfla (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams23setupFrameFlamewheelFLAER6Params"]], "nervosys::autonomylib::multirotorparams::setupframegenerichex (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams20setupFrameGenericHexER6Params"]], "nervosys::autonomylib::multirotorparams::setupframegenericocto (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams21setupFrameGenericOctoER6Params"]], "nervosys::autonomylib::multirotorparams::setupframegenericquad (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams21setupFrameGenericQuadER6Params"]], "nervosys::autonomylib::multirotorparams::setupparams (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParams11setupParamsEv"]], "nervosys::autonomylib::multirotorparams::~multirotorparams (c++ function)": [[37, "_CPPv4N8nervosys11autonomylib16MultirotorParamsD0Ev"]], "nervosys::autonomylib::multirotorparamsfactory (c++ class)": [[38, "_CPPv4N8nervosys11autonomylib23MultirotorParamsFactoryE"]], "nervosys::autonomylib::multirotorparamsfactory::createconfig (c++ function)": [[38, "_CPPv4N8nervosys11autonomylib23MultirotorParamsFactory12createConfigEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrIK13SensorFactoryEE"]], "nervosys::autonomylib::multirotorphysicsbody (c++ class)": [[39, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBodyE"]], "nervosys::autonomylib::multirotorphysicsbody::multirotorphysicsbody (c++ function)": [[39, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody21MultirotorPhysicsBodyEP16MultirotorParamsP14VehicleApiBaseP10KinematicsP11Environment"]], "nervosys::autonomylib::multirotorphysicsbody::dragvertexcount (c++ function)": [[39, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody15dragVertexCountEv"]], "nervosys::autonomylib::multirotorphysicsbody::getdragvertex (c++ function)": [[39, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody13getDragVertexE4uint"], [39, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody13getDragVertexE4uint"]], "nervosys::autonomylib::multirotorphysicsbody::getfriction (c++ function)": [[39, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody11getFrictionEv"]], "nervosys::autonomylib::multirotorphysicsbody::getrestitution (c++ function)": [[39, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody14getRestitutionEv"]], "nervosys::autonomylib::multirotorphysicsbody::getrotoroutput (c++ function)": [[39, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody14getRotorOutputE4uint"]], "nervosys::autonomylib::multirotorphysicsbody::getsensors (c++ function)": [[39, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody10getSensorsEv"]], "nervosys::autonomylib::multirotorphysicsbody::getwrenchvertex (c++ function)": [[39, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody15getWrenchVertexE4uint"], [39, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody15getWrenchVertexE4uint"]], "nervosys::autonomylib::multirotorphysicsbody::reportstate (c++ function)": [[39, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody11reportStateER13StateReporter"]], "nervosys::autonomylib::multirotorphysicsbody::resetimplementation (c++ function)": [[39, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody19resetImplementationEv"]], "nervosys::autonomylib::multirotorphysicsbody::update (c++ function)": [[39, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody6updateEv"]], "nervosys::autonomylib::multirotorphysicsbody::updatekinematics (c++ function)": [[39, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody16updateKinematicsERKN10Kinematics5StateE"], [39, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody16updateKinematicsEv"]], "nervosys::autonomylib::multirotorphysicsbody::updatesensorsandcontroller (c++ function)": [[39, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBody26updateSensorsAndControllerEv"]], "nervosys::autonomylib::multirotorphysicsbody::wrenchvertexcount (c++ function)": [[39, "_CPPv4NK8nervosys11autonomylib21MultirotorPhysicsBody17wrenchVertexCountEv"]], "nervosys::autonomylib::multirotorphysicsbody::~multirotorphysicsbody (c++ function)": [[39, "_CPPv4N8nervosys11autonomylib21MultirotorPhysicsBodyD0Ev"]], "nervosys::autonomylib::multirotorrpclibclient (c++ class)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClientE"]], "nervosys::autonomylib::multirotorrpclibclient::multirotorrpclibclient (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient22MultirotorRpcLibClientERK6string8uint16_tf"]], "nervosys::autonomylib::multirotorrpclibclient::getmultirotorstate (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient18getMultirotorStateERKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::getrotorstates (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14getRotorStatesERKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::gohomeasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient11goHomeAsyncEfRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::hoverasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient10hoverAsyncERKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::impl (c++ struct)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient4implE"], [430, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient4implE"]], "nervosys::autonomylib::multirotorrpclibclient::impl::last_future (c++ member)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient4impl11last_futureE"], [430, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient4impl11last_futureE"]], "nervosys::autonomylib::multirotorrpclibclient::landasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9landAsyncEfRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movebyangleratesthrottleasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByAngleRatesThrottleAsyncEfffffRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movebyanglerateszasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient22moveByAngleRatesZAsyncEfffffRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movebymanualasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient17moveByManualAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movebymotorpwmsasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByMotorPWMsAsyncEfffffRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movebyrc (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient8moveByRCERK6RCDataRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movebyrollpitchyawthrottleasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient31moveByRollPitchYawThrottleAsyncEfffffRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movebyrollpitchyawzasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient24moveByRollPitchYawZAsyncEfffffRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movebyrollpitchyawratethrottleasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient35moveByRollPitchYawrateThrottleAsyncEfffffRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movebyrollpitchyawratezasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByRollPitchYawrateZAsyncEfffffRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movebyvelocityasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveByVelocityAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movebyvelocitybodyframeasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28moveByVelocityBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movebyvelocityzasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20moveByVelocityZAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movebyvelocityzbodyframeasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient29moveByVelocityZBodyFrameAsyncEffff14DrivetrainTypeRK7YawModeRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::moveonpathasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient15moveOnPathAsyncERK6vectorI8Vector3rEff14DrivetrainTypeRK7YawModeffRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movetogpsasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14moveToGPSAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movetopositionasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient19moveToPositionAsyncEfffff14DrivetrainTypeRK7YawModeffRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::movetozasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient12moveToZAsyncEfffRK7YawModeffRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::rotatebyyawrateasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient20rotateByYawRateAsyncEffRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::rotatetoyawasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient16rotateToYawAsyncEfffRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::setanglelevelcontrollergains (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient28setAngleLevelControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::setangleratecontrollergains (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient27setAngleRateControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::setpositioncontrollergains (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient26setPositionControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::setsafety (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient9setSafetyEN10SafetyEval19SafetyViolationTypeEfN10SafetyEval20ObsAvoidanceStrategyEfRK8Vector3rfffRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::setvelocitycontrollergains (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient26setVelocityControllerGainsERK6vectorIfERK6vectorIfERK6vectorIfERKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::takeoffasync (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient12takeoffAsyncEfRKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibclient::waitonlasttask (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClient14waitOnLastTaskEPbf"]], "nervosys::autonomylib::multirotorrpclibclient::~multirotorrpclibclient (c++ function)": [[40, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibClientD0Ev"]], "nervosys::autonomylib::multirotorrpclibserver (c++ class)": [[41, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibServerE"]], "nervosys::autonomylib::multirotorrpclibserver::multirotorrpclibserver (c++ function)": [[41, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibServer22MultirotorRpcLibServerEP11ApiProvider6string8uint16_t"]], "nervosys::autonomylib::multirotorrpclibserver::getvehicleapi (c++ function)": [[41, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibServer13getVehicleApiERKNSt6stringE"]], "nervosys::autonomylib::multirotorrpclibserver::~multirotorrpclibserver (c++ function)": [[41, "_CPPv4N8nervosys11autonomylib22MultirotorRpcLibServerD0Ev"]], "nervosys::autonomylib::obstaclemap (c++ class)": [[42, "_CPPv4N8nervosys11autonomylib11ObstacleMapE"]], "nervosys::autonomylib::obstaclemap::obstacleinfo (c++ struct)": [[42, "_CPPv4N8nervosys11autonomylib11ObstacleMap12ObstacleInfoE"], [432, "_CPPv4N8nervosys11autonomylib11ObstacleMap12ObstacleInfoE"]], "nervosys::autonomylib::obstaclemap::obstacleinfo::confidence (c++ member)": [[42, "_CPPv4N8nervosys11autonomylib11ObstacleMap12ObstacleInfo10confidenceE"], [432, "_CPPv4N8nervosys11autonomylib11ObstacleMap12ObstacleInfo10confidenceE"]], "nervosys::autonomylib::obstaclemap::obstacleinfo::distance (c++ member)": [[42, "_CPPv4N8nervosys11autonomylib11ObstacleMap12ObstacleInfo8distanceE"], [432, "_CPPv4N8nervosys11autonomylib11ObstacleMap12ObstacleInfo8distanceE"]], "nervosys::autonomylib::obstaclemap::obstacleinfo::tick (c++ member)": [[42, "_CPPv4N8nervosys11autonomylib11ObstacleMap12ObstacleInfo4tickE"], [432, "_CPPv4N8nervosys11autonomylib11ObstacleMap12ObstacleInfo4tickE"]], "nervosys::autonomylib::obstaclemap::obstacleinfo::tostring (c++ function)": [[42, "_CPPv4NK8nervosys11autonomylib11ObstacleMap12ObstacleInfo8toStringEv"], [432, "_CPPv4NK8nervosys11autonomylib11ObstacleMap12ObstacleInfo8toStringEv"]], "nervosys::autonomylib::obstaclemap::obstaclemap (c++ function)": [[42, "_CPPv4N8nervosys11autonomylib11ObstacleMap11ObstacleMapEib"]], "nervosys::autonomylib::obstaclemap::angletotick (c++ function)": [[42, "_CPPv4NK8nervosys11autonomylib11ObstacleMap11angleToTickEf"]], "nervosys::autonomylib::obstaclemap::getclosestobstacle (c++ function)": [[42, "_CPPv4N8nervosys11autonomylib11ObstacleMap18getClosestObstacleEv"]], "nervosys::autonomylib::obstaclemap::getticks (c++ function)": [[42, "_CPPv4NK8nervosys11autonomylib11ObstacleMap8getTicksEv"]], "nervosys::autonomylib::obstaclemap::hasobstacle (c++ function)": [[42, "_CPPv4N8nervosys11autonomylib11ObstacleMap11hasObstacleEii"]], "nervosys::autonomylib::obstaclemap::hasobstacle_ (c++ function)": [[42, "_CPPv4NK8nervosys11autonomylib11ObstacleMap12hasObstacle_Eii"]], "nervosys::autonomylib::obstaclemap::setblindspot (c++ function)": [[42, "_CPPv4N8nervosys11autonomylib11ObstacleMap12setBlindspotEib"]], "nervosys::autonomylib::obstaclemap::ticktoangleend (c++ function)": [[42, "_CPPv4NK8nervosys11autonomylib11ObstacleMap14tickToAngleEndEi"]], "nervosys::autonomylib::obstaclemap::ticktoanglemid (c++ function)": [[42, "_CPPv4NK8nervosys11autonomylib11ObstacleMap14tickToAngleMidEi"]], "nervosys::autonomylib::obstaclemap::ticktoanglestart (c++ function)": [[42, "_CPPv4NK8nervosys11autonomylib11ObstacleMap16tickToAngleStartEi"]], "nervosys::autonomylib::obstaclemap::update (c++ function)": [[42, "_CPPv4N8nervosys11autonomylib11ObstacleMap6updateEA_fA_f"], [42, "_CPPv4N8nervosys11autonomylib11ObstacleMap6updateEfiif"]], "nervosys::autonomylib::physxcarapi (c++ class)": [[43, "_CPPv4N8nervosys11autonomylib11PhysXCarApiE"]], "nervosys::autonomylib::physxcarapi::physxcarapi (c++ function)": [[43, "_CPPv4N8nervosys11autonomylib11PhysXCarApi11PhysXCarApiEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrI13SensorFactoryEERKN10Kinematics5StateERK11Environment"]], "nervosys::autonomylib::physxcarapi::armdisarm (c++ function)": [[43, "_CPPv4N8nervosys11autonomylib11PhysXCarApi9armDisarmEb"]], "nervosys::autonomylib::physxcarapi::enableapicontrol (c++ function)": [[43, "_CPPv4N8nervosys11autonomylib11PhysXCarApi16enableApiControlEb"]], "nervosys::autonomylib::physxcarapi::getcarcontrols (c++ function)": [[43, "_CPPv4NK8nervosys11autonomylib11PhysXCarApi14getCarControlsEv"]], "nervosys::autonomylib::physxcarapi::getcarstate (c++ function)": [[43, "_CPPv4NK8nervosys11autonomylib11PhysXCarApi11getCarStateEv"]], "nervosys::autonomylib::physxcarapi::gethomegeopoint (c++ function)": [[43, "_CPPv4NK8nervosys11autonomylib11PhysXCarApi15getHomeGeoPointEv"]], "nervosys::autonomylib::physxcarapi::getsensors (c++ function)": [[43, "_CPPv4NK8nervosys11autonomylib11PhysXCarApi10getSensorsEv"]], "nervosys::autonomylib::physxcarapi::isapicontrolenabled (c++ function)": [[43, "_CPPv4NK8nervosys11autonomylib11PhysXCarApi19isApiControlEnabledEv"]], "nervosys::autonomylib::physxcarapi::resetimplementation (c++ function)": [[43, "_CPPv4N8nervosys11autonomylib11PhysXCarApi19resetImplementationEv"]], "nervosys::autonomylib::physxcarapi::setcarcontrols (c++ function)": [[43, "_CPPv4N8nervosys11autonomylib11PhysXCarApi14setCarControlsERK11CarControls"]], "nervosys::autonomylib::physxcarapi::update (c++ function)": [[43, "_CPPv4N8nervosys11autonomylib11PhysXCarApi6updateEv"]], "nervosys::autonomylib::physxcarapi::updatecarstate (c++ function)": [[43, "_CPPv4N8nervosys11autonomylib11PhysXCarApi14updateCarStateERK8CarState"]], "nervosys::autonomylib::physxcarapi::~physxcarapi (c++ function)": [[43, "_CPPv4N8nervosys11autonomylib11PhysXCarApiD0Ev"]], "nervosys::autonomylib::physicsbody (c++ class)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBodyE"]], "nervosys::autonomylib::physicsbody::physicsbody (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody11PhysicsBodyE6real_TRK10Matrix3x3rP10KinematicsP11Environment"], [44, "_CPPv4N8nervosys11autonomylib11PhysicsBody11PhysicsBodyEv"]], "nervosys::autonomylib::physicsbody::dragvertexcount (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody15dragVertexCountEv"]], "nervosys::autonomylib::physicsbody::getcollisioninfo (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody16getCollisionInfoEv"]], "nervosys::autonomylib::physicsbody::getcollisionresponseinfo (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody24getCollisionResponseInfoEv"], [44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody24getCollisionResponseInfoEv"]], "nervosys::autonomylib::physicsbody::getdragvertex (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody13getDragVertexE4uint"], [44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody13getDragVertexE4uint"]], "nervosys::autonomylib::physicsbody::getenvironment (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody14getEnvironmentEv"], [44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody14getEnvironmentEv"]], "nervosys::autonomylib::physicsbody::getfriction (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody11getFrictionEv"]], "nervosys::autonomylib::physicsbody::getinertia (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody10getInertiaEv"]], "nervosys::autonomylib::physicsbody::getinertiainv (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody13getInertiaInvEv"]], "nervosys::autonomylib::physicsbody::getinitialkinematics (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody20getInitialKinematicsEv"]], "nervosys::autonomylib::physicsbody::getkinematics (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody13getKinematicsEv"]], "nervosys::autonomylib::physicsbody::getmass (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody7getMassEv"]], "nervosys::autonomylib::physicsbody::getmassinv (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody10getMassInvEv"]], "nervosys::autonomylib::physicsbody::getphysicsbody (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody14getPhysicsBodyEv"]], "nervosys::autonomylib::physicsbody::getpose (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody7getPoseEv"]], "nervosys::autonomylib::physicsbody::getrestitution (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody14getRestitutionEv"]], "nervosys::autonomylib::physicsbody::gettwist (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody8getTwistEv"]], "nervosys::autonomylib::physicsbody::getwrench (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody9getWrenchEv"]], "nervosys::autonomylib::physicsbody::getwrenchvertex (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody15getWrenchVertexE4uint"], [44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody15getWrenchVertexE4uint"]], "nervosys::autonomylib::physicsbody::hasenvironment (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody14hasEnvironmentEv"]], "nervosys::autonomylib::physicsbody::initialize (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody10initializeE6real_TRK10Matrix3x3rP10KinematicsP11Environment"]], "nervosys::autonomylib::physicsbody::isgrounded (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody10isGroundedEv"]], "nervosys::autonomylib::physicsbody::last_kinematics_time (c++ member)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody20last_kinematics_timeE"]], "nervosys::autonomylib::physicsbody::lock (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody4lockEv"]], "nervosys::autonomylib::physicsbody::reportstate (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody11reportStateER13StateReporter"]], "nervosys::autonomylib::physicsbody::resetimplementation (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody19resetImplementationEv"]], "nervosys::autonomylib::physicsbody::setcollisioninfo (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody16setCollisionInfoERK13CollisionInfo"]], "nervosys::autonomylib::physicsbody::setgrounded (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody11setGroundedEb"]], "nervosys::autonomylib::physicsbody::setpose (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody7setPoseERK4Pose"]], "nervosys::autonomylib::physicsbody::settwist (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody8setTwistERK5Twist"]], "nervosys::autonomylib::physicsbody::setwrench (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody9setWrenchERK6Wrench"]], "nervosys::autonomylib::physicsbody::unlock (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody6unlockEv"]], "nervosys::autonomylib::physicsbody::update (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody6updateEv"]], "nervosys::autonomylib::physicsbody::updatekinematics (c++ function)": [[44, "_CPPv4N8nervosys11autonomylib11PhysicsBody16updateKinematicsERKN10Kinematics5StateE"], [44, "_CPPv4N8nervosys11autonomylib11PhysicsBody16updateKinematicsEv"]], "nervosys::autonomylib::physicsbody::wrenchvertexcount (c++ function)": [[44, "_CPPv4NK8nervosys11autonomylib11PhysicsBody17wrenchVertexCountEv"]], "nervosys::autonomylib::physicsbodyvertex (c++ class)": [[45, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertexE"]], "nervosys::autonomylib::physicsbodyvertex::physicsbodyvertex (c++ function)": [[45, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex17PhysicsBodyVertexERK8Vector3rRK8Vector3r6real_T"], [45, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex17PhysicsBodyVertexEv"]], "nervosys::autonomylib::physicsbodyvertex::getdragfactor (c++ function)": [[45, "_CPPv4NK8nervosys11autonomylib17PhysicsBodyVertex13getDragFactorEv"]], "nervosys::autonomylib::physicsbodyvertex::getnormal (c++ function)": [[45, "_CPPv4NK8nervosys11autonomylib17PhysicsBodyVertex9getNormalEv"]], "nervosys::autonomylib::physicsbodyvertex::getposition (c++ function)": [[45, "_CPPv4NK8nervosys11autonomylib17PhysicsBodyVertex11getPositionEv"]], "nervosys::autonomylib::physicsbodyvertex::getwrench (c++ function)": [[45, "_CPPv4NK8nervosys11autonomylib17PhysicsBodyVertex9getWrenchEv"]], "nervosys::autonomylib::physicsbodyvertex::initialize (c++ function)": [[45, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex10initializeERK8Vector3rRK8Vector3r6real_T"]], "nervosys::autonomylib::physicsbodyvertex::resetimplementation (c++ function)": [[45, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex19resetImplementationEv"]], "nervosys::autonomylib::physicsbodyvertex::setdragfactor (c++ function)": [[45, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex13setDragFactorE6real_T"]], "nervosys::autonomylib::physicsbodyvertex::setnormal (c++ function)": [[45, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex9setNormalERK8Vector3r"]], "nervosys::autonomylib::physicsbodyvertex::setposition (c++ function)": [[45, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex11setPositionERK8Vector3r"]], "nervosys::autonomylib::physicsbodyvertex::setwrench (c++ function)": [[45, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex9setWrenchER6Wrench"]], "nervosys::autonomylib::physicsbodyvertex::update (c++ function)": [[45, "_CPPv4N8nervosys11autonomylib17PhysicsBodyVertex6updateEv"]], "nervosys::autonomylib::physicsenginebase (c++ class)": [[46, "_CPPv4N8nervosys11autonomylib17PhysicsEngineBaseE"]], "nervosys::autonomylib::physicsenginebase::reportstate (c++ function)": [[46, "_CPPv4N8nervosys11autonomylib17PhysicsEngineBase11reportStateER13StateReporter"]], "nervosys::autonomylib::physicsenginebase::setextforce (c++ function)": [[46, "_CPPv4N8nervosys11autonomylib17PhysicsEngineBase11setExtForceERK8Vector3r"]], "nervosys::autonomylib::physicsenginebase::setwind (c++ function)": [[46, "_CPPv4N8nervosys11autonomylib17PhysicsEngineBase7setWindERK8Vector3r"]], "nervosys::autonomylib::physicsenginebase::update (c++ function)": [[46, "_CPPv4N8nervosys11autonomylib17PhysicsEngineBase6updateEv"]], "nervosys::autonomylib::physicsworld (c++ class)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorldE"]], "nervosys::autonomylib::physicsworld::physicsworld (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld12PhysicsWorldENSt10unique_ptrI17PhysicsEngineBaseEERKNSt6vectorIP15UpdatableObjectEE8uint64_tbb"]], "nervosys::autonomylib::physicsworld::addbody (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld7addBodyEP15UpdatableObject"]], "nervosys::autonomylib::physicsworld::continueforframes (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld17continueForFramesE8uint32_t"]], "nervosys::autonomylib::physicsworld::continuefortime (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld15continueForTimeEd"]], "nervosys::autonomylib::physicsworld::enablestatereport (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld17enableStateReportEb"]], "nervosys::autonomylib::physicsworld::getdebugreport (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld14getDebugReportEv"]], "nervosys::autonomylib::physicsworld::getupdateperiodnanos (c++ function)": [[47, "_CPPv4NK8nervosys11autonomylib12PhysicsWorld20getUpdatePeriodNanosEv"]], "nervosys::autonomylib::physicsworld::ispaused (c++ function)": [[47, "_CPPv4NK8nervosys11autonomylib12PhysicsWorld8isPausedEv"]], "nervosys::autonomylib::physicsworld::lock (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld4lockEv"]], "nervosys::autonomylib::physicsworld::pause (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld5pauseEb"]], "nervosys::autonomylib::physicsworld::reset (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld5resetEv"]], "nervosys::autonomylib::physicsworld::resetimplementation (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld19resetImplementationEv"]], "nervosys::autonomylib::physicsworld::setframenumber (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld14setFrameNumberE8uint32_t"]], "nervosys::autonomylib::physicsworld::startasyncupdator (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld17startAsyncUpdatorEv"]], "nervosys::autonomylib::physicsworld::stopasyncupdator (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld16stopAsyncUpdatorEv"]], "nervosys::autonomylib::physicsworld::unlock (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld6unlockEv"]], "nervosys::autonomylib::physicsworld::updatestatereport (c++ function)": [[47, "_CPPv4N8nervosys11autonomylib12PhysicsWorld17updateStateReportEv"]], "nervosys::autonomylib::px4multirotorparams (c++ class)": [[48, "_CPPv4N8nervosys11autonomylib19Px4MultirotorParamsE"]], "nervosys::autonomylib::px4multirotorparams::px4multirotorparams (c++ function)": [[48, "_CPPv4N8nervosys11autonomylib19Px4MultirotorParams19Px4MultirotorParamsERKN19AutonomySimSettings21MavLinkVehicleSettingENSt10shared_ptrIK13SensorFactoryEE"]], "nervosys::autonomylib::px4multirotorparams::createmultirotorapi (c++ function)": [[48, "_CPPv4N8nervosys11autonomylib19Px4MultirotorParams19createMultirotorApiEv"]], "nervosys::autonomylib::px4multirotorparams::getsensorfactory (c++ function)": [[48, "_CPPv4NK8nervosys11autonomylib19Px4MultirotorParams16getSensorFactoryEv"]], "nervosys::autonomylib::px4multirotorparams::setupparams (c++ function)": [[48, "_CPPv4N8nervosys11autonomylib19Px4MultirotorParams11setupParamsEv"]], "nervosys::autonomylib::px4multirotorparams::~px4multirotorparams (c++ function)": [[48, "_CPPv4N8nervosys11autonomylib19Px4MultirotorParamsD0Ev"]], "nervosys::autonomylib::rotoractuator (c++ class)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuatorE"]], "nervosys::autonomylib::rotoractuator::output (c++ struct)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuator6OutputE"], [433, "_CPPv4N8nervosys11autonomylib13RotorActuator6OutputE"]], "nervosys::autonomylib::rotoractuator::output::control_signal_filtered (c++ member)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output23control_signal_filteredE"], [433, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output23control_signal_filteredE"]], "nervosys::autonomylib::rotoractuator::output::control_signal_input (c++ member)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output20control_signal_inputE"], [433, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output20control_signal_inputE"]], "nervosys::autonomylib::rotoractuator::output::speed (c++ member)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output5speedE"], [433, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output5speedE"]], "nervosys::autonomylib::rotoractuator::output::thrust (c++ member)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output6thrustE"], [433, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output6thrustE"]], "nervosys::autonomylib::rotoractuator::output::torque_scaler (c++ member)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output13torque_scalerE"], [433, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output13torque_scalerE"]], "nervosys::autonomylib::rotoractuator::output::turning_direction (c++ member)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output17turning_directionE"], [433, "_CPPv4N8nervosys11autonomylib13RotorActuator6Output17turning_directionE"]], "nervosys::autonomylib::rotoractuator::rotoractuator (c++ function)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuator13RotorActuatorERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint"], [49, "_CPPv4N8nervosys11autonomylib13RotorActuator13RotorActuatorEv"]], "nervosys::autonomylib::rotoractuator::getoutput (c++ function)": [[49, "_CPPv4NK8nervosys11autonomylib13RotorActuator9getOutputEv"]], "nervosys::autonomylib::rotoractuator::initialize (c++ function)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuator10initializeERK8Vector3rRK8Vector3r21RotorTurningDirectionRK11RotorParamsPK11Environment4uint"]], "nervosys::autonomylib::rotoractuator::reportstate (c++ function)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuator11reportStateER13StateReporter"]], "nervosys::autonomylib::rotoractuator::resetimplementation (c++ function)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuator19resetImplementationEv"]], "nervosys::autonomylib::rotoractuator::setcontrolsignal (c++ function)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuator16setControlSignalE6real_T"]], "nervosys::autonomylib::rotoractuator::setwrench (c++ function)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuator9setWrenchER6Wrench"]], "nervosys::autonomylib::rotoractuator::update (c++ function)": [[49, "_CPPv4N8nervosys11autonomylib13RotorActuator6updateEv"]], "nervosys::autonomylib::rpclibclientbase (c++ class)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBaseE"]], "nervosys::autonomylib::rpclibclientbase::connectionstate (c++ enum)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15ConnectionStateE"]], "nervosys::autonomylib::rpclibclientbase::connectionstate::connected (c++ enumerator)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15ConnectionState9ConnectedE"]], "nervosys::autonomylib::rpclibclientbase::connectionstate::disconnected (c++ enumerator)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15ConnectionState12DisconnectedE"]], "nervosys::autonomylib::rpclibclientbase::connectionstate::initial (c++ enumerator)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15ConnectionState7InitialE"]], "nervosys::autonomylib::rpclibclientbase::connectionstate::reset (c++ enumerator)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15ConnectionState5ResetE"]], "nervosys::autonomylib::rpclibclientbase::connectionstate::unknown (c++ enumerator)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15ConnectionState7UnknownE"]], "nervosys::autonomylib::rpclibclientbase::rpclibclientbase (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16RpcLibClientBaseERK6string8uint16_tf"]], "nervosys::autonomylib::rpclibclientbase::armdisarm (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase9armDisarmEbRKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::cancellasttask (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14cancelLastTaskERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::confirmconnection (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17confirmConnectionEv"]], "nervosys::autonomylib::rpclibclientbase::enableapicontrol (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16enableApiControlEbRKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::getbarometerdata (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16getBarometerDataERKNSt6stringERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::getclient (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase9getClientEv"], [50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase9getClientEv"]], "nervosys::autonomylib::rpclibclientbase::getclientversion (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16getClientVersionEv"]], "nervosys::autonomylib::rpclibclientbase::getconnectionstate (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18getConnectionStateEv"]], "nervosys::autonomylib::rpclibclientbase::getdistancesensordata (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase21getDistanceSensorDataERKNSt6stringERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::getgpsdata (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase10getGpsDataERKNSt6stringERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::gethomegeopoint (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase15getHomeGeoPointERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::getimudata (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase10getImuDataERKNSt6stringERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::getlidardata (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase12getLidarDataERKNSt6stringERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::getmagnetometerdata (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase19getMagnetometerDataERKNSt6stringERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::getminrequiredclientversion (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase27getMinRequiredClientVersionEv"]], "nervosys::autonomylib::rpclibclientbase::getminrequiredserverversion (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase27getMinRequiredServerVersionEv"]], "nervosys::autonomylib::rpclibclientbase::getserverversion (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16getServerVersionEv"]], "nervosys::autonomylib::rpclibclientbase::getsettingsstring (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase17getSettingsStringEv"]], "nervosys::autonomylib::rpclibclientbase::impl (c++ struct)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase4implE"], [437, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase4implE"]], "nervosys::autonomylib::rpclibclientbase::impl::client (c++ member)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase4impl6clientE"], [437, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase4impl6clientE"]], "nervosys::autonomylib::rpclibclientbase::impl::impl (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase4impl4implERK6string8uint16_tf"], [437, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase4impl4implERK6string8uint16_tf"]], "nervosys::autonomylib::rpclibclientbase::isapicontrolenabled (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase19isApiControlEnabledERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::isrecording (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase11isRecordingEv"]], "nervosys::autonomylib::rpclibclientbase::listvehicles (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase12listVehiclesEv"]], "nervosys::autonomylib::rpclibclientbase::ping (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase4pingEv"]], "nervosys::autonomylib::rpclibclientbase::reset (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase5resetEv"]], "nervosys::autonomylib::rpclibclientbase::simadddetectionfiltermeshname (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase29simAddDetectionFilterMeshNameERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simaddvehicle (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simAddVehicleERKNSt6stringERKNSt6stringERK4PoseRKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::simcleardetectionmeshnames (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simClearDetectionMeshNamesERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simcontinueforframes (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simContinueForFramesE8uint32_t"]], "nervosys::autonomylib::rpclibclientbase::simcontinuefortime (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simContinueForTimeEd"]], "nervosys::autonomylib::rpclibclientbase::simcreatevoxelgrid (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simCreateVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::simdestroyobject (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simDestroyObjectERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::simenablefocusplane (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simEnableFocusPlaneEKbRKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simenablemanualfocus (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simEnableManualFocusEKbRKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simenableweather (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simEnableWeatherEb"]], "nervosys::autonomylib::rpclibclientbase::simflushpersistentmarkers (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase25simFlushPersistentMarkersEv"]], "nervosys::autonomylib::rpclibclientbase::simgetcamerainfo (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16simGetCameraInfoERKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simgetcollisioninfo (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase19simGetCollisionInfoERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::simgetcurrentfieldofview (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simGetCurrentFieldOfViewERKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simgetdetections (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simGetDetectionsERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simgetdistortionparams (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simGetDistortionParamsERKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simgetfilmbacksettings (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simGetFilmbackSettingsERKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simgetfocallength (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simGetFocalLengthERKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simgetfocusaperture (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simGetFocusApertureERKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simgetfocusdistance (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simGetFocusDistanceERKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simgetgroundtruthenvironment (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase28simGetGroundTruthEnvironmentERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::simgetgroundtruthkinematics (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase27simGetGroundTruthKinematicsERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::simgetimage (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase11simGetImageERKNSt6stringEN16ImageCaptureBase9ImageTypeERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simgetimages (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase12simGetImagesE6vectorIN16ImageCaptureBase12ImageRequestEERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simgetlenssettings (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simGetLensSettingsERKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simgetmeshpositionvertexbuffers (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase31simGetMeshPositionVertexBuffersEv"]], "nervosys::autonomylib::rpclibclientbase::simgetobjectpose (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase16simGetObjectPoseERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::simgetobjectscale (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase17simGetObjectScaleERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::simgetpresetfilmbacksettings (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase28simGetPresetFilmbackSettingsERKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simgetpresetlenssettings (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simGetPresetLensSettingsERKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simgetsegmentationobjectid (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase26simGetSegmentationObjectIDERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::simgetvehiclepose (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase17simGetVehiclePoseERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::simgetworldextents (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simGetWorldExtentsEv"]], "nervosys::autonomylib::rpclibclientbase::simispaused (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase11simIsPausedEv"]], "nervosys::autonomylib::rpclibclientbase::simlistassets (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase13simListAssetsEv"]], "nervosys::autonomylib::rpclibclientbase::simlistsceneobjects (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase19simListSceneObjectsERK6string"]], "nervosys::autonomylib::rpclibclientbase::simloadlevel (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase12simLoadLevelERK6string"]], "nervosys::autonomylib::rpclibclientbase::simpause (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase8simPauseEb"]], "nervosys::autonomylib::rpclibclientbase::simplotarrows (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb"]], "nervosys::autonomylib::rpclibclientbase::simplotlinelist (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simPlotLineListERK6vectorI8Vector3rERK6vectorIfEffb"]], "nervosys::autonomylib::rpclibclientbase::simplotlinestrip (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simPlotLineStripERK6vectorI8Vector3rERK6vectorIfEffb"]], "nervosys::autonomylib::rpclibclientbase::simplotpoints (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13simPlotPointsERK6vectorI8Vector3rERK6vectorIfEffb"]], "nervosys::autonomylib::rpclibclientbase::simplotstrings (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14simPlotStringsERK6vectorINSt6stringEERK6vectorI8Vector3rEfRK6vectorIfEf"]], "nervosys::autonomylib::rpclibclientbase::simplottransforms (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simPlotTransformsERK6vectorI4PoseEfffb"]], "nervosys::autonomylib::rpclibclientbase::simplottransformswithnames (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf"]], "nervosys::autonomylib::rpclibclientbase::simprintlogmessage (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase18simPrintLogMessageERKNSt6stringENSt6stringEh"]], "nervosys::autonomylib::rpclibclientbase::simrunconsolecommand (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simRunConsoleCommandERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::simsetcamerafov (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetCameraFovERKNSt6stringEfRKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simsetcamerapose (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetCameraPoseERKNSt6stringERK4PoseRKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simsetdetectionfilterradius (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase27simSetDetectionFilterRadiusERKNSt6stringEN16ImageCaptureBase9ImageTypeEKfRKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simsetdistortionparam (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase21simSetDistortionParamERKNSt6stringERKNSt6stringEfRKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simsetextforce (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase14simSetExtForceERK8Vector3r"]], "nervosys::autonomylib::rpclibclientbase::simsetfilmbacksettings (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simSetFilmbackSettingsEKfKfRKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simsetfocallength (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetFocalLengthEfRKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simsetfocusaperture (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simSetFocusApertureEKfRKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simsetfocusdistance (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase19simSetFocusDistanceEfRKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simsetkinematics (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetKinematicsERKN10Kinematics5StateEbRKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::simsetobjectmaterial (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase20simSetObjectMaterialERKNSt6stringERKNSt6stringEKi"]], "nervosys::autonomylib::rpclibclientbase::simsetobjectmaterialfromtexture (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase31simSetObjectMaterialFromTextureERKNSt6stringERKNSt6stringEKi"]], "nervosys::autonomylib::rpclibclientbase::simsetobjectpose (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase16simSetObjectPoseERKNSt6stringERK4Poseb"]], "nervosys::autonomylib::rpclibclientbase::simsetobjectscale (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetObjectScaleERKNSt6stringERK8Vector3r"]], "nervosys::autonomylib::rpclibclientbase::simsetpresetfilmbacksettings (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase28simSetPresetFilmbackSettingsERKNSt6stringERKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simsetpresetlenssettings (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase24simSetPresetLensSettingsERKNSt6stringERKNSt6stringERKNSt6stringEb"]], "nervosys::autonomylib::rpclibclientbase::simsetsegmentationobjectid (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase26simSetSegmentationObjectIDERKNSt6stringEib"]], "nervosys::autonomylib::rpclibclientbase::simsettimeofday (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetTimeOfDayEbRK6stringbffb"]], "nervosys::autonomylib::rpclibclientbase::simsettraceline (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSetTraceLineERKNSt6vectorIfEEfRKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::simsetvehiclepose (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase17simSetVehiclePoseERK4PosebRKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::simsetweatherparameter (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase22simSetWeatherParameterEN15WorldSimApiBase16WeatherParameterEf"]], "nervosys::autonomylib::rpclibclientbase::simsetwind (c++ function)": [[50, "_CPPv4NK8nervosys11autonomylib16RpcLibClientBase10simSetWindERK8Vector3r"]], "nervosys::autonomylib::rpclibclientbase::simspawnobject (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14simSpawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rb"]], "nervosys::autonomylib::rpclibclientbase::simswaptextures (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase15simSwapTexturesERKNSt6stringEiii"]], "nervosys::autonomylib::rpclibclientbase::simtestlineofsightbetweenpoints (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase31simTestLineOfSightBetweenPointsERKN8nervosys11autonomylib8GeoPointERKN8nervosys11autonomylib8GeoPointE"]], "nervosys::autonomylib::rpclibclientbase::simtestlineofsighttopoint (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase25simTestLineOfSightToPointERKN8nervosys11autonomylib8GeoPointERKNSt6stringE"]], "nervosys::autonomylib::rpclibclientbase::startrecording (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14startRecordingEv"]], "nervosys::autonomylib::rpclibclientbase::stoprecording (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase13stopRecordingEv"]], "nervosys::autonomylib::rpclibclientbase::waitonlasttask (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBase14waitOnLastTaskEPbf"]], "nervosys::autonomylib::rpclibclientbase::~rpclibclientbase (c++ function)": [[50, "_CPPv4N8nervosys11autonomylib16RpcLibClientBaseD0Ev"]], "nervosys::autonomylib::rpclibserverbase (c++ class)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBaseE"]], "nervosys::autonomylib::rpclibserverbase::apinotsupported (c++ class)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase15ApiNotSupportedE"], [52, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase15ApiNotSupportedE"]], "nervosys::autonomylib::rpclibserverbase::apinotsupported::apinotsupported (c++ function)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase15ApiNotSupported15ApiNotSupportedERKNSt6stringE"], [52, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase15ApiNotSupported15ApiNotSupportedERKNSt6stringE"]], "nervosys::autonomylib::rpclibserverbase::rpclibserverbase (c++ function)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase16RpcLibServerBaseEP11ApiProviderRKNSt6stringE8uint16_t"]], "nervosys::autonomylib::rpclibserverbase::getserver (c++ function)": [[51, "_CPPv4NK8nervosys11autonomylib16RpcLibServerBase9getServerEv"]], "nervosys::autonomylib::rpclibserverbase::getvehicleapi (c++ function)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase13getVehicleApiERKNSt6stringE"]], "nervosys::autonomylib::rpclibserverbase::getvehiclesimapi (c++ function)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase16getVehicleSimApiERKNSt6stringE"]], "nervosys::autonomylib::rpclibserverbase::getworldsimapi (c++ function)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase14getWorldSimApiEv"]], "nervosys::autonomylib::rpclibserverbase::impl (c++ struct)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4implE"], [438, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4implE"]], "nervosys::autonomylib::rpclibserverbase::impl::impl (c++ function)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl4implE6string8uint16_t"], [51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl4implE8uint16_t"], [438, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl4implE6string8uint16_t"], [438, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl4implE8uint16_t"]], "nervosys::autonomylib::rpclibserverbase::impl::is_async_ (c++ member)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl9is_async_E"], [438, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl9is_async_E"]], "nervosys::autonomylib::rpclibserverbase::impl::run (c++ function)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl3runEbNSt6size_tE"], [438, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl3runEbNSt6size_tE"]], "nervosys::autonomylib::rpclibserverbase::impl::server (c++ member)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl6serverE"], [438, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl6serverE"]], "nervosys::autonomylib::rpclibserverbase::impl::stop (c++ function)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl4stopEv"], [438, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4impl4stopEv"]], "nervosys::autonomylib::rpclibserverbase::impl::~impl (c++ function)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4implD0Ev"], [438, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4implD0Ev"]], "nervosys::autonomylib::rpclibserverbase::start (c++ function)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase5startEbNSt6size_tE"]], "nervosys::autonomylib::rpclibserverbase::stop (c++ function)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBase4stopEv"]], "nervosys::autonomylib::rpclibserverbase::~rpclibserverbase (c++ function)": [[51, "_CPPv4N8nervosys11autonomylib16RpcLibServerBaseD0Ev"]], "nervosys::autonomylib::safetyeval (c++ class)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEvalE"]], "nervosys::autonomylib::safetyeval::evalresult (c++ struct)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResultE"], [439, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResultE"]], "nervosys::autonomylib::safetyeval::evalresult::evalresult (c++ function)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult10EvalResultEv"], [439, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult10EvalResultEv"]], "nervosys::autonomylib::safetyeval::evalresult::cur_dest_body (c++ member)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult13cur_dest_bodyE"], [439, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult13cur_dest_bodyE"]], "nervosys::autonomylib::safetyeval::evalresult::cur_obs (c++ member)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult7cur_obsE"], [439, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult7cur_obsE"]], "nervosys::autonomylib::safetyeval::evalresult::cur_pos (c++ member)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult7cur_posE"], [439, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult7cur_posE"]], "nervosys::autonomylib::safetyeval::evalresult::cur_risk_dist (c++ member)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult13cur_risk_distE"], [439, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult13cur_risk_distE"]], "nervosys::autonomylib::safetyeval::evalresult::dest_obs (c++ member)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult8dest_obsE"], [439, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult8dest_obsE"]], "nervosys::autonomylib::safetyeval::evalresult::dest_pos (c++ member)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult8dest_posE"], [439, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult8dest_posE"]], "nervosys::autonomylib::safetyeval::evalresult::dest_risk_dist (c++ member)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult14dest_risk_distE"], [439, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult14dest_risk_distE"]], "nervosys::autonomylib::safetyeval::evalresult::is_safe (c++ member)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult7is_safeE"], [439, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult7is_safeE"]], "nervosys::autonomylib::safetyeval::evalresult::message (c++ member)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult7messageE"], [439, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult7messageE"]], "nervosys::autonomylib::safetyeval::evalresult::reason (c++ member)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult6reasonE"], [439, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult6reasonE"]], "nervosys::autonomylib::safetyeval::evalresult::suggested_obs (c++ member)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult13suggested_obsE"], [439, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult13suggested_obsE"]], "nervosys::autonomylib::safetyeval::evalresult::suggested_vec (c++ member)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult13suggested_vecE"], [439, "_CPPv4N8nervosys11autonomylib10SafetyEval10EvalResult13suggested_vecE"]], "nervosys::autonomylib::safetyeval::evalresult::tostring (c++ function)": [[53, "_CPPv4NK8nervosys11autonomylib10SafetyEval10EvalResult8toStringEv"], [439, "_CPPv4NK8nervosys11autonomylib10SafetyEval10EvalResult8toStringEv"]], "nervosys::autonomylib::safetyeval::obsavoidancestrategy (c++ enum)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval20ObsAvoidanceStrategyE"]], "nervosys::autonomylib::safetyeval::obsavoidancestrategy::closestmove (c++ enumerator)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval20ObsAvoidanceStrategy11ClosestMoveE"]], "nervosys::autonomylib::safetyeval::obsavoidancestrategy::oppositemove (c++ enumerator)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval20ObsAvoidanceStrategy12OppositeMoveE"]], "nervosys::autonomylib::safetyeval::obsavoidancestrategy::raiseexception (c++ enumerator)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval20ObsAvoidanceStrategy14RaiseExceptionE"]], "nervosys::autonomylib::safetyeval::safetyeval (c++ function)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval10SafetyEvalE19MultirotorApiParams10shared_ptrI9IGeoFenceE10shared_ptrI11ObstacleMapE"]], "nervosys::autonomylib::safetyeval::safetyviolationtype (c++ type)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval19SafetyViolationTypeE"]], "nervosys::autonomylib::safetyeval::safetyviolationtype_ (c++ enum)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval20SafetyViolationType_E"]], "nervosys::autonomylib::safetyeval::safetyviolationtype_::all (c++ enumerator)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval20SafetyViolationType_3AllE"]], "nervosys::autonomylib::safetyeval::safetyviolationtype_::geofence (c++ enumerator)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval20SafetyViolationType_8GeoFenceE"]], "nervosys::autonomylib::safetyeval::safetyviolationtype_::nosafetyviolation (c++ enumerator)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval20SafetyViolationType_17NoSafetyViolationE"]], "nervosys::autonomylib::safetyeval::safetyviolationtype_::obstacle (c++ enumerator)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval20SafetyViolationType_8ObstacleE"]], "nervosys::autonomylib::safetyeval::safetyviolationtype_::velocitylimit (c++ enumerator)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval20SafetyViolationType_13VelocityLimitE"]], "nervosys::autonomylib::safetyeval::getobsavoidancestrategy (c++ function)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval23getObsAvoidanceStrategyEv"]], "nervosys::autonomylib::safetyeval::issafedestination (c++ function)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval17isSafeDestinationERK8Vector3rRK8Vector3rRK11Quaternionr"]], "nervosys::autonomylib::safetyeval::issafeposition (c++ function)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval14isSafePositionERK8Vector3rRK11Quaternionr"]], "nervosys::autonomylib::safetyeval::issafevelocity (c++ function)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval14isSafeVelocityERK8Vector3rRK8Vector3rRK11Quaternionr"]], "nervosys::autonomylib::safetyeval::issafevelocityz (c++ function)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval15isSafeVelocityZERK8Vector3rfffRK11Quaternionr"]], "nervosys::autonomylib::safetyeval::setobsavoidancestrategy (c++ function)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval23setObsAvoidanceStrategyEN10SafetyEval20ObsAvoidanceStrategyE"]], "nervosys::autonomylib::safetyeval::setsafety (c++ function)": [[53, "_CPPv4N8nervosys11autonomylib10SafetyEval9setSafetyE19SafetyViolationTypefN10SafetyEval20ObsAvoidanceStrategyERK8Vector3rfff"]], "nervosys::autonomylib::sensorbase (c++ class)": [[54, "_CPPv4N8nervosys11autonomylib10SensorBaseE"]], "nervosys::autonomylib::sensorbase::groundtruth (c++ struct)": [[54, "_CPPv4N8nervosys11autonomylib10SensorBase11GroundTruthE"], [440, "_CPPv4N8nervosys11autonomylib10SensorBase11GroundTruthE"]], "nervosys::autonomylib::sensorbase::groundtruth::environment (c++ member)": [[54, "_CPPv4N8nervosys11autonomylib10SensorBase11GroundTruth11environmentE"], [440, "_CPPv4N8nervosys11autonomylib10SensorBase11GroundTruth11environmentE"]], "nervosys::autonomylib::sensorbase::groundtruth::kinematics (c++ member)": [[54, "_CPPv4N8nervosys11autonomylib10SensorBase11GroundTruth10kinematicsE"], [440, "_CPPv4N8nervosys11autonomylib10SensorBase11GroundTruth10kinematicsE"]], "nervosys::autonomylib::sensorbase::sensorbase (c++ function)": [[54, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorBaseERKNSt6stringE"]], "nervosys::autonomylib::sensorbase::sensortype (c++ enum)": [[54, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorTypeE"]], "nervosys::autonomylib::sensorbase::sensortype::barometer (c++ enumerator)": [[54, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorType9BarometerE"]], "nervosys::autonomylib::sensorbase::sensortype::distance (c++ enumerator)": [[54, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorType8DistanceE"]], "nervosys::autonomylib::sensorbase::sensortype::gps (c++ enumerator)": [[54, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorType3GpsE"]], "nervosys::autonomylib::sensorbase::sensortype::imu (c++ enumerator)": [[54, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorType3ImuE"]], "nervosys::autonomylib::sensorbase::sensortype::lidar (c++ enumerator)": [[54, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorType5LidarE"]], "nervosys::autonomylib::sensorbase::sensortype::magnetometer (c++ enumerator)": [[54, "_CPPv4N8nervosys11autonomylib10SensorBase10SensorType12MagnetometerE"]], "nervosys::autonomylib::sensorbase::getgroundtruth (c++ function)": [[54, "_CPPv4NK8nervosys11autonomylib10SensorBase14getGroundTruthEv"]], "nervosys::autonomylib::sensorbase::getname (c++ function)": [[54, "_CPPv4NK8nervosys11autonomylib10SensorBase7getNameEv"]], "nervosys::autonomylib::sensorbase::initialize (c++ function)": [[54, "_CPPv4N8nervosys11autonomylib10SensorBase10initializeEPKN10Kinematics5StateEPK11Environment"]], "nervosys::autonomylib::sensorbase::~sensorbase (c++ function)": [[54, "_CPPv4N8nervosys11autonomylib10SensorBaseD0Ev"]], "nervosys::autonomylib::sensorcollection (c++ class)": [[55, "_CPPv4N8nervosys11autonomylib16SensorCollectionE"]], "nervosys::autonomylib::sensorcollection::sensorbaseptr (c++ type)": [[55, "_CPPv4N8nervosys11autonomylib16SensorCollection13SensorBasePtrE"]], "nervosys::autonomylib::sensorcollection::clear (c++ function)": [[55, "_CPPv4N8nervosys11autonomylib16SensorCollection5clearEv"]], "nervosys::autonomylib::sensorcollection::getbytype (c++ function)": [[55, "_CPPv4NK8nervosys11autonomylib16SensorCollection9getByTypeEN10SensorBase10SensorTypeE4uint"]], "nervosys::autonomylib::sensorcollection::initialize (c++ function)": [[55, "_CPPv4N8nervosys11autonomylib16SensorCollection10initializeEPKN10Kinematics5StateEPK11Environment"]], "nervosys::autonomylib::sensorcollection::insert (c++ function)": [[55, "_CPPv4N8nervosys11autonomylib16SensorCollection6insertE13SensorBasePtrN10SensorBase10SensorTypeE"]], "nervosys::autonomylib::sensorcollection::reportstate (c++ function)": [[55, "_CPPv4N8nervosys11autonomylib16SensorCollection11reportStateER13StateReporter"]], "nervosys::autonomylib::sensorcollection::resetimplementation (c++ function)": [[55, "_CPPv4N8nervosys11autonomylib16SensorCollection19resetImplementationEv"]], "nervosys::autonomylib::sensorcollection::size (c++ function)": [[55, "_CPPv4NK8nervosys11autonomylib16SensorCollection4sizeEN10SensorBase10SensorTypeE"]], "nervosys::autonomylib::sensorcollection::update (c++ function)": [[55, "_CPPv4N8nervosys11autonomylib16SensorCollection6updateEv"]], "nervosys::autonomylib::sensorfactory (c++ class)": [[56, "_CPPv4N8nervosys11autonomylib13SensorFactoryE"]], "nervosys::autonomylib::sensorfactory::createsensorfromsettings (c++ function)": [[56, "_CPPv4NK8nervosys11autonomylib13SensorFactory24createSensorFromSettingsEPKN19AutonomySimSettings13SensorSettingE"]], "nervosys::autonomylib::sensorfactory::createsensorsfromsettings (c++ function)": [[56, "_CPPv4NK8nervosys11autonomylib13SensorFactory25createSensorsFromSettingsERKNSt3mapINSt6stringENSt10shared_ptrIN19AutonomySimSettings13SensorSettingEEEEER16SensorCollectionR6vectorI10shared_ptrI10SensorBaseEE"]], "nervosys::autonomylib::sensorfactory::~sensorfactory (c++ function)": [[56, "_CPPv4N8nervosys11autonomylib13SensorFactoryD0Ev"]], "nervosys::autonomylib::simpleflightapi (c++ class)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApiE"]], "nervosys::autonomylib::simpleflightapi::simpleflightapi (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15SimpleFlightApiEPK16MultirotorParamsPKN19AutonomySimSettings14VehicleSettingE"]], "nervosys::autonomylib::simpleflightapi::armdisarm (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi9armDisarmEb"]], "nervosys::autonomylib::simpleflightapi::commandangleratesthrottle (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi25commandAngleRatesThrottleEffff"]], "nervosys::autonomylib::simpleflightapi::commandangleratesz (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi18commandAngleRatesZEffff"]], "nervosys::autonomylib::simpleflightapi::commandmotorpwms (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16commandMotorPWMsEffff"]], "nervosys::autonomylib::simpleflightapi::commandposition (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15commandPositionEfffRK7YawMode"]], "nervosys::autonomylib::simpleflightapi::commandrollpitchyawthrottle (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi27commandRollPitchYawThrottleEffff"]], "nervosys::autonomylib::simpleflightapi::commandrollpitchyawz (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi20commandRollPitchYawZEffff"]], "nervosys::autonomylib::simpleflightapi::commandrollpitchyawratethrottle (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi31commandRollPitchYawrateThrottleEffff"]], "nervosys::autonomylib::simpleflightapi::commandrollpitchyawratez (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi24commandRollPitchYawrateZEffff"]], "nervosys::autonomylib::simpleflightapi::commandvelocity (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi15commandVelocityEfffRK7YawMode"]], "nervosys::autonomylib::simpleflightapi::commandvelocityz (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16commandVelocityZEfffRK7YawMode"]], "nervosys::autonomylib::simpleflightapi::enableapicontrol (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi16enableApiControlEb"]], "nervosys::autonomylib::simpleflightapi::getactuation (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi12getActuationEj"]], "nervosys::autonomylib::simpleflightapi::getactuatorcount (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi16getActuatorCountEv"]], "nervosys::autonomylib::simpleflightapi::getcommandperiod (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi16getCommandPeriodEv"]], "nervosys::autonomylib::simpleflightapi::getdistanceaccuracy (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi19getDistanceAccuracyEv"]], "nervosys::autonomylib::simpleflightapi::getgpslocation (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi14getGpsLocationEv"]], "nervosys::autonomylib::simpleflightapi::gethomegeopoint (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi15getHomeGeoPointEv"]], "nervosys::autonomylib::simpleflightapi::getkinematicsestimated (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi22getKinematicsEstimatedEv"]], "nervosys::autonomylib::simpleflightapi::getlandedstate (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi14getLandedStateEv"]], "nervosys::autonomylib::simpleflightapi::getmultirotorapiparams (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi22getMultirotorApiParamsEv"]], "nervosys::autonomylib::simpleflightapi::getorientation (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi14getOrientationEv"]], "nervosys::autonomylib::simpleflightapi::getposition (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi11getPositionEv"]], "nervosys::autonomylib::simpleflightapi::getrcdata (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi9getRCDataEv"]], "nervosys::autonomylib::simpleflightapi::getsensors (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi10getSensorsEv"]], "nervosys::autonomylib::simpleflightapi::getstatusmessages (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi17getStatusMessagesERNSt6vectorINSt6stringEEE"]], "nervosys::autonomylib::simpleflightapi::gettakeoffz (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi11getTakeoffZEv"]], "nervosys::autonomylib::simpleflightapi::getvelocity (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi11getVelocityEv"]], "nervosys::autonomylib::simpleflightapi::isapicontrolenabled (c++ function)": [[57, "_CPPv4NK8nervosys11autonomylib15SimpleFlightApi19isApiControlEnabledEv"]], "nervosys::autonomylib::simpleflightapi::movebyrc (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi8moveByRCERK6RCData"]], "nervosys::autonomylib::simpleflightapi::resetimplementation (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi19resetImplementationEv"]], "nervosys::autonomylib::simpleflightapi::setcontrollergains (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi18setControllerGainsE7uint8_tRK6vectorIfERK6vectorIfERK6vectorIfE"]], "nervosys::autonomylib::simpleflightapi::setrcdata (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi9setRCDataERK6RCData"]], "nervosys::autonomylib::simpleflightapi::setsimulatedgroundtruth (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi23setSimulatedGroundTruthEPKN10Kinematics5StateEPK11Environment"]], "nervosys::autonomylib::simpleflightapi::update (c++ function)": [[57, "_CPPv4N8nervosys11autonomylib15SimpleFlightApi6updateEv"]], "nervosys::autonomylib::simpleflightboard (c++ class)": [[58, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoardE"]], "nervosys::autonomylib::simpleflightboard::simpleflightboard (c++ function)": [[58, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard17SimpleFlightBoardEPKN13simple_flight6ParamsE"]], "nervosys::autonomylib::simpleflightboard::getavgmotoroutput (c++ function)": [[58, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard17getAvgMotorOutputEv"]], "nervosys::autonomylib::simpleflightboard::getmotorcontrolsignal (c++ function)": [[58, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard21getMotorControlSignalE4uint"]], "nervosys::autonomylib::simpleflightboard::isrcconnected (c++ function)": [[58, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard13isRcConnectedEv"]], "nervosys::autonomylib::simpleflightboard::micros (c++ function)": [[58, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard6microsEv"]], "nervosys::autonomylib::simpleflightboard::millis (c++ function)": [[58, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard6millisEv"]], "nervosys::autonomylib::simpleflightboard::readaccel (c++ function)": [[58, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard9readAccelEAL3E_f"]], "nervosys::autonomylib::simpleflightboard::readchannel (c++ function)": [[58, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard11readChannelE8uint16_t"]], "nervosys::autonomylib::simpleflightboard::readgyro (c++ function)": [[58, "_CPPv4NK8nervosys11autonomylib17SimpleFlightBoard8readGyroEAL3E_f"]], "nervosys::autonomylib::simpleflightboard::reset (c++ function)": [[58, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard5resetEv"]], "nervosys::autonomylib::simpleflightboard::setgroundtruthkinematics (c++ function)": [[58, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard24setGroundTruthKinematicsEPKN10Kinematics5StateE"]], "nervosys::autonomylib::simpleflightboard::setinputchannel (c++ function)": [[58, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard15setInputChannelE4uint6real_T"]], "nervosys::autonomylib::simpleflightboard::setisrcconnected (c++ function)": [[58, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard16setIsRcConnectedEb"]], "nervosys::autonomylib::simpleflightboard::setled (c++ function)": [[58, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard6setLedE7uint8_t7int32_t"]], "nervosys::autonomylib::simpleflightboard::update (c++ function)": [[58, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard6updateEv"]], "nervosys::autonomylib::simpleflightboard::writeoutput (c++ function)": [[58, "_CPPv4N8nervosys11autonomylib17SimpleFlightBoard11writeOutputE8uint16_tf"]], "nervosys::autonomylib::simpleflightcommlink (c++ class)": [[59, "_CPPv4N8nervosys11autonomylib20SimpleFlightCommLinkE"]], "nervosys::autonomylib::simpleflightcommlink::getstatusmessages (c++ function)": [[59, "_CPPv4N8nervosys11autonomylib20SimpleFlightCommLink17getStatusMessagesERNSt6vectorINSt6stringEEE"]], "nervosys::autonomylib::simpleflightcommlink::log (c++ function)": [[59, "_CPPv4N8nervosys11autonomylib20SimpleFlightCommLink3logERKNSt6stringE7int32_t"]], "nervosys::autonomylib::simpleflightcommlink::reset (c++ function)": [[59, "_CPPv4N8nervosys11autonomylib20SimpleFlightCommLink5resetEv"]], "nervosys::autonomylib::simpleflightcommlink::update (c++ function)": [[59, "_CPPv4N8nervosys11autonomylib20SimpleFlightCommLink6updateEv"]], "nervosys::autonomylib::simpleflightcommon (c++ class)": [[60, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommonE"]], "nervosys::autonomylib::simpleflightcommon::makeconstant (c++ function)": [[60, "_CPPv4I0EN8nervosys11autonomylib18SimpleFlightCommon12makeConstantERK1TR1T"]], "nervosys::autonomylib::simpleflightcommon::makevariable (c++ function)": [[60, "_CPPv4I0EN8nervosys11autonomylib18SimpleFlightCommon12makeVariableER1TRK1T"]], "nervosys::autonomylib::simpleflightcommon::toaxis3r (c++ function)": [[60, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon8toAxis3rERK8Vector3r"]], "nervosys::autonomylib::simpleflightcommon::toaxis4r (c++ function)": [[60, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon8toAxis4rERK11Quaternionr"]], "nervosys::autonomylib::simpleflightcommon::togeopoint (c++ function)": [[60, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon10toGeoPointERKN13simple_flight8GeoPointE"]], "nervosys::autonomylib::simpleflightcommon::tokinematicsstate3r (c++ function)": [[60, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon19toKinematicsState3rERKN13simple_flight15KinematicsStateE"]], "nervosys::autonomylib::simpleflightcommon::toquaternion (c++ function)": [[60, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon12toQuaternionERKN13simple_flight6Axis4rE"]], "nervosys::autonomylib::simpleflightcommon::tosimpleflightgeopoint (c++ function)": [[60, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon22toSimpleFlightGeoPointERK8GeoPoint"]], "nervosys::autonomylib::simpleflightcommon::tovector3r (c++ function)": [[60, "_CPPv4N8nervosys11autonomylib18SimpleFlightCommon10toVector3rERKN13simple_flight6Axis3rE"]], "nervosys::autonomylib::simpleflightestimator (c++ class)": [[61, "_CPPv4N8nervosys11autonomylib21SimpleFlightEstimatorE"]], "nervosys::autonomylib::simpleflightestimator::getangles (c++ function)": [[61, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator9getAnglesEv"]], "nervosys::autonomylib::simpleflightestimator::getangularvelocity (c++ function)": [[61, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator18getAngularVelocityEv"]], "nervosys::autonomylib::simpleflightestimator::getgeopoint (c++ function)": [[61, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator11getGeoPointEv"]], "nervosys::autonomylib::simpleflightestimator::gethomegeopoint (c++ function)": [[61, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator15getHomeGeoPointEv"]], "nervosys::autonomylib::simpleflightestimator::getkinematicsestimated (c++ function)": [[61, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator22getKinematicsEstimatedEv"]], "nervosys::autonomylib::simpleflightestimator::getlinearvelocity (c++ function)": [[61, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator17getLinearVelocityEv"]], "nervosys::autonomylib::simpleflightestimator::getorientation (c++ function)": [[61, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator14getOrientationEv"]], "nervosys::autonomylib::simpleflightestimator::getposition (c++ function)": [[61, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator11getPositionEv"]], "nervosys::autonomylib::simpleflightestimator::setgroundtruthkinematics (c++ function)": [[61, "_CPPv4N8nervosys11autonomylib21SimpleFlightEstimator24setGroundTruthKinematicsEPKN10Kinematics5StateEPK11Environment"]], "nervosys::autonomylib::simpleflightestimator::transformtobodyframe (c++ function)": [[61, "_CPPv4NK8nervosys11autonomylib21SimpleFlightEstimator20transformToBodyFrameERKN13simple_flight6Axis3rE"]], "nervosys::autonomylib::simpleflightestimator::~simpleflightestimator (c++ function)": [[61, "_CPPv4N8nervosys11autonomylib21SimpleFlightEstimatorD0Ev"]], "nervosys::autonomylib::simpleflightquadxparams (c++ class)": [[62, "_CPPv4N8nervosys11autonomylib23SimpleFlightQuadXParamsE"]], "nervosys::autonomylib::simpleflightquadxparams::simpleflightquadxparams (c++ function)": [[62, "_CPPv4N8nervosys11autonomylib23SimpleFlightQuadXParams23SimpleFlightQuadXParamsEPKN19AutonomySimSettings14VehicleSettingENSt10shared_ptrIK13SensorFactoryEE"]], "nervosys::autonomylib::simpleflightquadxparams::createmultirotorapi (c++ function)": [[62, "_CPPv4N8nervosys11autonomylib23SimpleFlightQuadXParams19createMultirotorApiEv"]], "nervosys::autonomylib::simpleflightquadxparams::getsensorfactory (c++ function)": [[62, "_CPPv4NK8nervosys11autonomylib23SimpleFlightQuadXParams16getSensorFactoryEv"]], "nervosys::autonomylib::simpleflightquadxparams::setupparams (c++ function)": [[62, "_CPPv4N8nervosys11autonomylib23SimpleFlightQuadXParams11setupParamsEv"]], "nervosys::autonomylib::simpleflightquadxparams::~simpleflightquadxparams (c++ function)": [[62, "_CPPv4N8nervosys11autonomylib23SimpleFlightQuadXParamsD0Ev"]], "nervosys::autonomylib::spheregeofence (c++ class)": [[63, "_CPPv4N8nervosys11autonomylib14SphereGeoFenceE"]], "nervosys::autonomylib::spheregeofence::spheregeofence (c++ function)": [[63, "_CPPv4N8nervosys11autonomylib14SphereGeoFence14SphereGeoFenceERK8Vector3rffff"]], "nervosys::autonomylib::spheregeofence::checkfence (c++ function)": [[63, "_CPPv4N8nervosys11autonomylib14SphereGeoFence10checkFenceERK8Vector3rRK8Vector3rRbRb"]], "nervosys::autonomylib::spheregeofence::setboundry (c++ function)": [[63, "_CPPv4N8nervosys11autonomylib14SphereGeoFence10setBoundryERK8Vector3rfff"]], "nervosys::autonomylib::spheregeofence::tostring (c++ function)": [[63, "_CPPv4NK8nervosys11autonomylib14SphereGeoFence8toStringEv"]], "nervosys::autonomylib::spheregeofence::~spheregeofence (c++ function)": [[63, "_CPPv4N8nervosys11autonomylib14SphereGeoFenceD0Ev"]], "nervosys::autonomylib::vehicleapibase (c++ class)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBaseE"]], "nervosys::autonomylib::vehicleapibase::vehiclecommandnotimplementedexception (c++ class)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBase37VehicleCommandNotImplementedExceptionE"], [65, "_CPPv4N8nervosys11autonomylib14VehicleApiBase37VehicleCommandNotImplementedExceptionE"]], "nervosys::autonomylib::vehicleapibase::vehiclecommandnotimplementedexception::vehiclecommandnotimplementedexception (c++ function)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBase37VehicleCommandNotImplementedException37VehicleCommandNotImplementedExceptionERKNSt6stringE"], [65, "_CPPv4N8nervosys11autonomylib14VehicleApiBase37VehicleCommandNotImplementedException37VehicleCommandNotImplementedExceptionERKNSt6stringE"]], "nervosys::autonomylib::vehicleapibase::vehiclecontrollerexception (c++ class)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBase26VehicleControllerExceptionE"], [66, "_CPPv4N8nervosys11autonomylib14VehicleApiBase26VehicleControllerExceptionE"]], "nervosys::autonomylib::vehicleapibase::vehiclecontrollerexception::vehiclecontrollerexception (c++ function)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBase26VehicleControllerException26VehicleControllerExceptionERKNSt6stringE"], [66, "_CPPv4N8nervosys11autonomylib14VehicleApiBase26VehicleControllerException26VehicleControllerExceptionERKNSt6stringE"]], "nervosys::autonomylib::vehicleapibase::vehiclemoveexception (c++ class)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBase20VehicleMoveExceptionE"], [67, "_CPPv4N8nervosys11autonomylib14VehicleApiBase20VehicleMoveExceptionE"]], "nervosys::autonomylib::vehicleapibase::vehiclemoveexception::vehiclemoveexception (c++ function)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBase20VehicleMoveException20VehicleMoveExceptionERKNSt6stringE"], [67, "_CPPv4N8nervosys11autonomylib14VehicleApiBase20VehicleMoveException20VehicleMoveExceptionERKNSt6stringE"]], "nervosys::autonomylib::vehicleapibase::armdisarm (c++ function)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBase9armDisarmEb"]], "nervosys::autonomylib::vehicleapibase::canarm (c++ function)": [[64, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase6canArmEv"]], "nervosys::autonomylib::vehicleapibase::cancellasttask (c++ function)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBase14cancelLastTaskEv"]], "nervosys::autonomylib::vehicleapibase::enableapicontrol (c++ function)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBase16enableApiControlEb"]], "nervosys::autonomylib::vehicleapibase::getactuation (c++ function)": [[64, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase12getActuationEj"]], "nervosys::autonomylib::vehicleapibase::getactuatorcount (c++ function)": [[64, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase16getActuatorCountEv"]], "nervosys::autonomylib::vehicleapibase::getbarometerdata (c++ function)": [[64, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase16getBarometerDataERKNSt6stringE"]], "nervosys::autonomylib::vehicleapibase::getdistancesensordata (c++ function)": [[64, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase21getDistanceSensorDataERKNSt6stringE"]], "nervosys::autonomylib::vehicleapibase::getgpsdata (c++ function)": [[64, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase10getGpsDataERKNSt6stringE"]], "nervosys::autonomylib::vehicleapibase::gethomegeopoint (c++ function)": [[64, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase15getHomeGeoPointEv"]], "nervosys::autonomylib::vehicleapibase::getimudata (c++ function)": [[64, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase10getImuDataERKNSt6stringE"]], "nervosys::autonomylib::vehicleapibase::getlidardata (c++ function)": [[64, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase12getLidarDataERKNSt6stringE"]], "nervosys::autonomylib::vehicleapibase::getmagnetometerdata (c++ function)": [[64, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase19getMagnetometerDataERKNSt6stringE"]], "nervosys::autonomylib::vehicleapibase::getrcdata (c++ function)": [[64, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase9getRCDataEv"]], "nervosys::autonomylib::vehicleapibase::getsensors (c++ function)": [[64, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase10getSensorsEv"]], "nervosys::autonomylib::vehicleapibase::getstatusmessages (c++ function)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBase17getStatusMessagesERNSt6vectorINSt6stringEEE"]], "nervosys::autonomylib::vehicleapibase::isapicontrolenabled (c++ function)": [[64, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase19isApiControlEnabledEv"]], "nervosys::autonomylib::vehicleapibase::isready (c++ function)": [[64, "_CPPv4NK8nervosys11autonomylib14VehicleApiBase7isReadyERNSt6stringE"]], "nervosys::autonomylib::vehicleapibase::sendtelemetry (c++ function)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBase13sendTelemetryEf"]], "nervosys::autonomylib::vehicleapibase::setrcdata (c++ function)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBase9setRCDataERK6RCData"]], "nervosys::autonomylib::vehicleapibase::update (c++ function)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBase6updateEv"]], "nervosys::autonomylib::vehicleapibase::~vehicleapibase (c++ function)": [[64, "_CPPv4N8nervosys11autonomylib14VehicleApiBaseD0Ev"]], "nervosys::autonomylib::vehiclesimapibase (c++ class)": [[68, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBaseE"]], "nervosys::autonomylib::vehiclesimapibase::getcollisioninfo (c++ function)": [[68, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase16getCollisionInfoEv"]], "nervosys::autonomylib::vehiclesimapibase::getcollisioninfoandreset (c++ function)": [[68, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase24getCollisionInfoAndResetEv"]], "nervosys::autonomylib::vehiclesimapibase::getgroundtruthenvironment (c++ function)": [[68, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase25getGroundTruthEnvironmentEv"]], "nervosys::autonomylib::vehiclesimapibase::getgroundtruthkinematics (c++ function)": [[68, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase24getGroundTruthKinematicsEv"]], "nervosys::autonomylib::vehiclesimapibase::getimagecapture (c++ function)": [[68, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase15getImageCaptureEv"], [68, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase15getImageCaptureEv"]], "nervosys::autonomylib::vehiclesimapibase::getpose (c++ function)": [[68, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase7getPoseEv"]], "nervosys::autonomylib::vehiclesimapibase::getrcdata (c++ function)": [[68, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase9getRCDataEv"]], "nervosys::autonomylib::vehiclesimapibase::getrecordfileline (c++ function)": [[68, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase17getRecordFileLineEb"]], "nervosys::autonomylib::vehiclesimapibase::getremotecontrolid (c++ function)": [[68, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase18getRemoteControlIDEv"]], "nervosys::autonomylib::vehiclesimapibase::getvehiclename (c++ function)": [[68, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase14getVehicleNameEv"]], "nervosys::autonomylib::vehiclesimapibase::getvehiclesetting (c++ function)": [[68, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase17getVehicleSettingEv"]], "nervosys::autonomylib::vehiclesimapibase::initialize (c++ function)": [[68, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase10initializeEv"]], "nervosys::autonomylib::vehiclesimapibase::setkinematics (c++ function)": [[68, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase13setKinematicsERKN10Kinematics5StateEb"]], "nervosys::autonomylib::vehiclesimapibase::setpose (c++ function)": [[68, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase7setPoseERK4Poseb"]], "nervosys::autonomylib::vehiclesimapibase::settraceline (c++ function)": [[68, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase12setTraceLineERKNSt6vectorIfEEf"]], "nervosys::autonomylib::vehiclesimapibase::testlineofsighttopoint (c++ function)": [[68, "_CPPv4NK8nervosys11autonomylib17VehicleSimApiBase22testLineOfSightToPointERK8GeoPoint"]], "nervosys::autonomylib::vehiclesimapibase::toggletrace (c++ function)": [[68, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase11toggleTraceEv"]], "nervosys::autonomylib::vehiclesimapibase::update (c++ function)": [[68, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase6updateEv"]], "nervosys::autonomylib::vehiclesimapibase::updaterenderedstate (c++ function)": [[68, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase19updateRenderedStateEf"]], "nervosys::autonomylib::vehiclesimapibase::updaterendering (c++ function)": [[68, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBase15updateRenderingEf"]], "nervosys::autonomylib::vehiclesimapibase::~vehiclesimapibase (c++ function)": [[68, "_CPPv4N8nervosys11autonomylib17VehicleSimApiBaseD0Ev"]], "nervosys::autonomylib::world (c++ class)": [[69, "_CPPv4N8nervosys11autonomylib5WorldE"]], "nervosys::autonomylib::world::world (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World5WorldENSt10unique_ptrI17PhysicsEngineBaseEE"]], "nervosys::autonomylib::world::clear (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World5clearEv"]], "nervosys::autonomylib::world::continueforframes (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World17continueForFramesE8uint32_t"]], "nervosys::autonomylib::world::continuefortime (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World15continueForTimeEd"]], "nervosys::autonomylib::world::erase_remove (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World12erase_removeEP15UpdatableObject"]], "nervosys::autonomylib::world::insert (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World6insertEP15UpdatableObject"]], "nervosys::autonomylib::world::ispaused (c++ function)": [[69, "_CPPv4NK8nervosys11autonomylib5World8isPausedEv"]], "nervosys::autonomylib::world::lock (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World4lockEv"]], "nervosys::autonomylib::world::pause (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World5pauseEb"]], "nervosys::autonomylib::world::pausefortime (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World12pauseForTimeEd"]], "nervosys::autonomylib::world::reportstate (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World11reportStateER13StateReporter"]], "nervosys::autonomylib::world::resetimplementation (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World19resetImplementationEv"]], "nervosys::autonomylib::world::setframenumber (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World14setFrameNumberE8uint32_t"]], "nervosys::autonomylib::world::startasyncupdator (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World17startAsyncUpdatorE8uint64_t"]], "nervosys::autonomylib::world::stopasyncupdator (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World16stopAsyncUpdatorEv"]], "nervosys::autonomylib::world::unlock (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World6unlockEv"]], "nervosys::autonomylib::world::update (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5World6updateEv"]], "nervosys::autonomylib::world::~world (c++ function)": [[69, "_CPPv4N8nervosys11autonomylib5WorldD0Ev"]], "nervosys::autonomylib::worldsimapibase (c++ class)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBaseE"]], "nervosys::autonomylib::worldsimapibase::weatherparameter (c++ enum)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameterE"]], "nervosys::autonomylib::worldsimapibase::weatherparameter::dust (c++ enumerator)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter4DustE"]], "nervosys::autonomylib::worldsimapibase::weatherparameter::enabled (c++ enumerator)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter7EnabledE"]], "nervosys::autonomylib::worldsimapibase::weatherparameter::fog (c++ enumerator)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter3FogE"]], "nervosys::autonomylib::worldsimapibase::weatherparameter::mapleleaf (c++ enumerator)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter9MapleLeafE"]], "nervosys::autonomylib::worldsimapibase::weatherparameter::rain (c++ enumerator)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter4RainE"]], "nervosys::autonomylib::worldsimapibase::weatherparameter::roadleaf (c++ enumerator)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter8RoadLeafE"]], "nervosys::autonomylib::worldsimapibase::weatherparameter::roadsnow (c++ enumerator)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter8RoadSnowE"]], "nervosys::autonomylib::worldsimapibase::weatherparameter::roadwetness (c++ enumerator)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter11RoadwetnessE"]], "nervosys::autonomylib::worldsimapibase::weatherparameter::snow (c++ enumerator)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16WeatherParameter4SnowE"]], "nervosys::autonomylib::worldsimapibase::adddetectionfiltermeshname (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase26addDetectionFilterMeshNameEN16ImageCaptureBase9ImageTypeERKNSt6stringERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::addvehicle (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase10addVehicleERKNSt6stringERKNSt6stringERK4PoseRKNSt6stringE"]], "nervosys::autonomylib::worldsimapibase::cleardetectionmeshnames (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase23clearDetectionMeshNamesEN16ImageCaptureBase9ImageTypeERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::continueforframes (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17continueForFramesE8uint32_t"]], "nervosys::autonomylib::worldsimapibase::continuefortime (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15continueForTimeEd"]], "nervosys::autonomylib::worldsimapibase::createvoxelgrid (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15createVoxelGridERK8Vector3rRKiRKiRKiRKfRKNSt6stringE"]], "nervosys::autonomylib::worldsimapibase::destroyobject (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13destroyObjectERKNSt6stringE"]], "nervosys::autonomylib::worldsimapibase::enablefocusplane (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16enableFocusPlaneEbRK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::enablemanualfocus (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17enableManualFocusEbRK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::enableweather (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13enableWeatherEb"]], "nervosys::autonomylib::worldsimapibase::getcamerainfo (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase13getCameraInfoERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::getcurrentfieldofview (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase21getCurrentFieldOfViewERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::getdetections (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13getDetectionsEN16ImageCaptureBase9ImageTypeERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::getdistortionparams (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase19getDistortionParamsERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::getfilmbacksettings (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase19getFilmbackSettingsERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::getfocallength (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14getFocalLengthERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::getfocusaperture (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16getFocusApertureERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::getfocusdistance (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16getFocusDistanceERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::getimage (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase8getImageEN16ImageCaptureBase9ImageTypeERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::getimages (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase9getImagesERKNSt6vectorIN16ImageCaptureBase12ImageRequestEEERKNSt6stringEb"]], "nervosys::autonomylib::worldsimapibase::getlenssettings (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15getLensSettingsERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::getmeshpositionvertexbuffers (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase28getMeshPositionVertexBuffersEv"]], "nervosys::autonomylib::worldsimapibase::getobjectpose (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase13getObjectPoseERKNSt6stringE"]], "nervosys::autonomylib::worldsimapibase::getobjectscale (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase14getObjectScaleERKNSt6stringE"]], "nervosys::autonomylib::worldsimapibase::getpresetfilmbacksettings (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase25getPresetFilmbackSettingsERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::getpresetlenssettings (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase21getPresetLensSettingsERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::getsegmentationobjectid (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase23getSegmentationObjectIDERKNSt6stringE"]], "nervosys::autonomylib::worldsimapibase::getsettingsstring (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase17getSettingsStringEv"]], "nervosys::autonomylib::worldsimapibase::getworldextents (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase15getWorldExtentsEv"]], "nervosys::autonomylib::worldsimapibase::ispaused (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase8isPausedEv"]], "nervosys::autonomylib::worldsimapibase::isrecording (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase11isRecordingEv"]], "nervosys::autonomylib::worldsimapibase::listassets (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase10listAssetsEv"]], "nervosys::autonomylib::worldsimapibase::listsceneobjects (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase16listSceneObjectsERKNSt6stringE"]], "nervosys::autonomylib::worldsimapibase::listvehicles (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase12listVehiclesEv"]], "nervosys::autonomylib::worldsimapibase::loadlevel (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase9loadLevelERKNSt6stringE"]], "nervosys::autonomylib::worldsimapibase::pause (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase5pauseEb"]], "nervosys::autonomylib::worldsimapibase::printlogmessage (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15printLogMessageERKNSt6stringERKNSt6stringEh"]], "nervosys::autonomylib::worldsimapibase::reset (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase5resetEv"]], "nervosys::autonomylib::worldsimapibase::runconsolecommand (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17runConsoleCommandERKNSt6stringE"]], "nervosys::autonomylib::worldsimapibase::setcamerafov (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12setCameraFoVEfRK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::setcamerapose (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13setCameraPoseERKN8nervosys11autonomylib4PoseERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::setdetectionfilterradius (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase24setDetectionFilterRadiusEN16ImageCaptureBase9ImageTypeEfRK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::setdistortionparam (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase18setDistortionParamERKNSt6stringEfRK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::setextforce (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase11setExtForceERK8Vector3r"]], "nervosys::autonomylib::worldsimapibase::setfilmbacksettings (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase19setFilmbackSettingsEffRK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::setfocallength (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14setFocalLengthEfRK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::setfocusaperture (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16setFocusApertureEfRK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::setfocusdistance (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16setFocusDistanceEfRK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::setlightintensity (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17setLightIntensityERKNSt6stringEf"]], "nervosys::autonomylib::worldsimapibase::setobjectmaterial (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17setObjectMaterialERKNSt6stringERKNSt6stringEKi"]], "nervosys::autonomylib::worldsimapibase::setobjectmaterialfromtexture (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase28setObjectMaterialFromTextureERKNSt6stringERKNSt6stringEKi"]], "nervosys::autonomylib::worldsimapibase::setobjectpose (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13setObjectPoseERKNSt6stringERK4Poseb"]], "nervosys::autonomylib::worldsimapibase::setobjectscale (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14setObjectScaleERKNSt6stringERK8Vector3r"]], "nervosys::autonomylib::worldsimapibase::setpresetfilmbacksettings (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase25setPresetFilmbackSettingsENSt6stringERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::setpresetlenssettings (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase21setPresetLensSettingsENSt6stringERK13CameraDetails"]], "nervosys::autonomylib::worldsimapibase::setsegmentationobjectid (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase23setSegmentationObjectIDERKNSt6stringEib"]], "nervosys::autonomylib::worldsimapibase::settimeofday (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12setTimeOfDayEbRKNSt6stringEbffb"]], "nervosys::autonomylib::worldsimapibase::setweatherparameter (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase19setWeatherParameterE16WeatherParameterf"]], "nervosys::autonomylib::worldsimapibase::setwind (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase7setWindERK8Vector3r"]], "nervosys::autonomylib::worldsimapibase::simflushpersistentmarkers (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase25simFlushPersistentMarkersEv"]], "nervosys::autonomylib::worldsimapibase::simplotarrows (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotArrowsERK6vectorI8Vector3rERK6vectorI8Vector3rERK6vectorIfEfffb"]], "nervosys::autonomylib::worldsimapibase::simplotlinelist (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase15simPlotLineListERK6vectorI8Vector3rERK6vectorIfEffb"]], "nervosys::autonomylib::worldsimapibase::simplotlinestrip (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase16simPlotLineStripERK6vectorI8Vector3rERK6vectorIfEffb"]], "nervosys::autonomylib::worldsimapibase::simplotpoints (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13simPlotPointsERK6vectorI8Vector3rERK6vectorIfEffb"]], "nervosys::autonomylib::worldsimapibase::simplotstrings (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14simPlotStringsERK6vectorINSt6stringEERK6vectorI8Vector3rEfRK6vectorIfEf"]], "nervosys::autonomylib::worldsimapibase::simplottransforms (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase17simPlotTransformsERK6vectorI4PoseEfffb"]], "nervosys::autonomylib::worldsimapibase::simplottransformswithnames (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase26simPlotTransformsWithNamesERK6vectorI4PoseERK6vectorINSt6stringEEfffRK6vectorIfEf"]], "nervosys::autonomylib::worldsimapibase::spawnobject (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase11spawnObjectERKNSt6stringERKNSt6stringERK4PoseRK8Vector3rbb"]], "nervosys::autonomylib::worldsimapibase::startrecording (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase14startRecordingEv"]], "nervosys::autonomylib::worldsimapibase::stoprecording (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase13stopRecordingEv"]], "nervosys::autonomylib::worldsimapibase::swaptextures (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBase12swapTexturesERKNSt6stringEiii"]], "nervosys::autonomylib::worldsimapibase::testlineofsightbetweenpoints (c++ function)": [[70, "_CPPv4NK8nervosys11autonomylib15WorldSimApiBase28testLineOfSightBetweenPointsERKN8nervosys11autonomylib8GeoPointERKN8nervosys11autonomylib8GeoPointE"]], "nervosys::autonomylib::worldsimapibase::~worldsimapibase (c++ function)": [[70, "_CPPv4N8nervosys11autonomylib15WorldSimApiBaseD0Ev"]], "nervosys::autonomylib_rpclib::carrpclibadaptors (c++ class)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptorsE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carcontrols (c++ struct)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControlsE"], [442, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControlsE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carcontrols::carcontrols (c++ function)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls11CarControlsERKN8nervosys11autonomylib10CarApiBase11CarControlsE"], [71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls11CarControlsEv"], [442, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls11CarControlsERKN8nervosys11autonomylib10CarApiBase11CarControlsE"], [442, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls11CarControlsEv"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carcontrols::msgpack_define_map (c++ function)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls18MSGPACK_DEFINE_MAPE8throttle8steering5brake9handbrake14is_manual_gear11manual_gear14gear_immediate"], [442, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls18MSGPACK_DEFINE_MAPE8throttle8steering5brake9handbrake14is_manual_gear11manual_gear14gear_immediate"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carcontrols::brake (c++ member)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls5brakeE"], [442, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls5brakeE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carcontrols::gear_immediate (c++ member)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls14gear_immediateE"], [442, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls14gear_immediateE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carcontrols::handbrake (c++ member)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls9handbrakeE"], [442, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls9handbrakeE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carcontrols::is_manual_gear (c++ member)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls14is_manual_gearE"], [442, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls14is_manual_gearE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carcontrols::manual_gear (c++ member)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls11manual_gearE"], [442, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls11manual_gearE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carcontrols::steering (c++ member)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls8steeringE"], [442, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls8steeringE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carcontrols::throttle (c++ member)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls8throttleE"], [442, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls8throttleE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carcontrols::to (c++ function)": [[71, "_CPPv4NK8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls2toEv"], [442, "_CPPv4NK8nervosys18autonomylib_rpclib17CarRpcLibAdaptors11CarControls2toEv"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carstate (c++ struct)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarStateE"], [443, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarStateE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carstate::carstate (c++ function)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState8CarStateERKN8nervosys11autonomylib10CarApiBase8CarStateE"], [71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState8CarStateEv"], [443, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState8CarStateERKN8nervosys11autonomylib10CarApiBase8CarStateE"], [443, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState8CarStateEv"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carstate::msgpack_define_map (c++ function)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState18MSGPACK_DEFINE_MAPE5speed4gear3rpm6maxrpm9handbrake20kinematics_estimated9timestamp"], [443, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState18MSGPACK_DEFINE_MAPE5speed4gear3rpm6maxrpm9handbrake20kinematics_estimated9timestamp"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carstate::gear (c++ member)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState4gearE"], [443, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState4gearE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carstate::handbrake (c++ member)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState9handbrakeE"], [443, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState9handbrakeE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carstate::kinematics_estimated (c++ member)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState20kinematics_estimatedE"], [443, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState20kinematics_estimatedE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carstate::maxrpm (c++ member)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState6maxrpmE"], [443, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState6maxrpmE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carstate::rpm (c++ member)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState3rpmE"], [443, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState3rpmE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carstate::speed (c++ member)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState5speedE"], [443, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState5speedE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carstate::timestamp (c++ member)": [[71, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState9timestampE"], [443, "_CPPv4N8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState9timestampE"]], "nervosys::autonomylib_rpclib::carrpclibadaptors::carstate::to (c++ function)": [[71, "_CPPv4NK8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState2toEv"], [443, "_CPPv4NK8nervosys18autonomylib_rpclib17CarRpcLibAdaptors8CarState2toEv"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors (c++ class)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptorsE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate (c++ struct)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorStateE"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorStateE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate::msgpack_define_map (c++ function)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState18MSGPACK_DEFINE_MAPE9collision20kinematics_estimated12gps_location9timestamp12landed_state7rc_data"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState18MSGPACK_DEFINE_MAPE9collision20kinematics_estimated12gps_location9timestamp12landed_state7rc_data"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate::multirotorstate (c++ function)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState15MultirotorStateERKN8nervosys11autonomylib15MultirotorStateE"], [72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState15MultirotorStateEv"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState15MultirotorStateERKN8nervosys11autonomylib15MultirotorStateE"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState15MultirotorStateEv"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate::can_arm (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState7can_armE"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState7can_armE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate::collision (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState9collisionE"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState9collisionE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate::controller_messages (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState19controller_messagesE"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState19controller_messagesE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate::gps_location (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState12gps_locationE"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState12gps_locationE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate::kinematics_estimated (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState20kinematics_estimatedE"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState20kinematics_estimatedE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate::kinematics_true (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState15kinematics_trueE"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState15kinematics_trueE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate::landed_state (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState12landed_stateE"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState12landed_stateE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate::rc_data (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState7rc_dataE"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState7rc_dataE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate::ready (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState5readyE"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState5readyE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate::ready_message (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState13ready_messageE"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState13ready_messageE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate::timestamp (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState9timestampE"], [444, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState9timestampE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::multirotorstate::to (c++ function)": [[72, "_CPPv4NK8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState2toEv"], [444, "_CPPv4NK8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15MultirotorState2toEv"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::rotorparameters (c++ struct)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParametersE"], [445, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParametersE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::rotorparameters::msgpack_define_map (c++ function)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters18MSGPACK_DEFINE_MAPE6thrust13torque_scaler5speed"], [445, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters18MSGPACK_DEFINE_MAPE6thrust13torque_scaler5speed"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::rotorparameters::rotorparameters (c++ function)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters15RotorParametersERKN8nervosys11autonomylib15RotorParametersE"], [72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters15RotorParametersEv"], [445, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters15RotorParametersERKN8nervosys11autonomylib15RotorParametersE"], [445, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters15RotorParametersEv"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::rotorparameters::speed (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters5speedE"], [445, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters5speedE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::rotorparameters::thrust (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters6thrustE"], [445, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters6thrustE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::rotorparameters::to (c++ function)": [[72, "_CPPv4NK8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters2toEv"], [445, "_CPPv4NK8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters2toEv"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::rotorparameters::torque_scaler (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters13torque_scalerE"], [445, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors15RotorParameters13torque_scalerE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::rotorstates (c++ struct)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStatesE"], [446, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStatesE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::rotorstates::msgpack_define_map (c++ function)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates18MSGPACK_DEFINE_MAPE6rotors9timestamp"], [446, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates18MSGPACK_DEFINE_MAPE6rotors9timestamp"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::rotorstates::rotorstates (c++ function)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates11RotorStatesERKN8nervosys11autonomylib11RotorStatesE"], [72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates11RotorStatesEv"], [446, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates11RotorStatesERKN8nervosys11autonomylib11RotorStatesE"], [446, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates11RotorStatesEv"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::rotorstates::rotors (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates6rotorsE"], [446, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates6rotorsE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::rotorstates::timestamp (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates9timestampE"], [446, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates9timestampE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::rotorstates::to (c++ function)": [[72, "_CPPv4NK8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates2toEv"], [446, "_CPPv4NK8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors11RotorStates2toEv"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::yawmode (c++ struct)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawModeE"], [447, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawModeE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::yawmode::msgpack_define_map (c++ function)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode18MSGPACK_DEFINE_MAPE7is_rate11yaw_or_rate"], [447, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode18MSGPACK_DEFINE_MAPE7is_rate11yaw_or_rate"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::yawmode::yawmode (c++ function)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode7YawModeERKN8nervosys11autonomylib7YawModeE"], [72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode7YawModeEv"], [447, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode7YawModeERKN8nervosys11autonomylib7YawModeE"], [447, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode7YawModeEv"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::yawmode::is_rate (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode7is_rateE"], [447, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode7is_rateE"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::yawmode::to (c++ function)": [[72, "_CPPv4NK8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode2toEv"], [447, "_CPPv4NK8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode2toEv"]], "nervosys::autonomylib_rpclib::multirotorrpclibadaptors::yawmode::yaw_or_rate (c++ member)": [[72, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode11yaw_or_rateE"], [447, "_CPPv4N8nervosys18autonomylib_rpclib24MultirotorRpcLibAdaptors7YawMode11yaw_or_rateE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase (c++ class)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBaseE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::barometerdata (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerDataE"], [448, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerDataE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::barometerdata::barometerdata (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData13BarometerDataERKN8nervosys11autonomylib13BarometerBase6OutputE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData13BarometerDataEv"], [448, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData13BarometerDataERKN8nervosys11autonomylib13BarometerBase6OutputE"], [448, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData13BarometerDataEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::barometerdata::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData18MSGPACK_DEFINE_MAPE10time_stamp8altitude8pressure3qnh"], [448, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData18MSGPACK_DEFINE_MAPE10time_stamp8altitude8pressure3qnh"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::barometerdata::altitude (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData8altitudeE"], [448, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData8altitudeE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::barometerdata::pressure (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData8pressureE"], [448, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData8pressureE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::barometerdata::qnh (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData3qnhE"], [448, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData3qnhE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::barometerdata::time_stamp (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData10time_stampE"], [448, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData10time_stampE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::barometerdata::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData2toEv"], [448, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13BarometerData2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::box2d (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2DE"], [449, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2DE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::box2d::box2d (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D5Box2DERKN8nervosys11autonomylib5Box2DE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D5Box2DEv"], [449, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D5Box2DERKN8nervosys11autonomylib5Box2DE"], [449, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D5Box2DEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::box2d::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D18MSGPACK_DEFINE_MAPE3min3max"], [449, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D18MSGPACK_DEFINE_MAPE3min3max"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::box2d::max (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D3maxE"], [449, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D3maxE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::box2d::min (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D3minE"], [449, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D3minE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::box2d::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D2toEv"], [449, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box2D2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::box3d (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3DE"], [450, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3DE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::box3d::box3d (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D5Box3DERKN8nervosys11autonomylib5Box3DE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D5Box3DEv"], [450, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D5Box3DERKN8nervosys11autonomylib5Box3DE"], [450, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D5Box3DEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::box3d::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D18MSGPACK_DEFINE_MAPE3min3max"], [450, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D18MSGPACK_DEFINE_MAPE3min3max"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::box3d::max (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D3maxE"], [450, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D3maxE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::box3d::min (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D3minE"], [450, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D3minE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::box3d::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D2toEv"], [450, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase5Box3D2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::camerainfo (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfoE"], [451, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfoE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::camerainfo::camerainfo (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo10CameraInfoERKN8nervosys11autonomylib10CameraInfoE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo10CameraInfoEv"], [451, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo10CameraInfoERKN8nervosys11autonomylib10CameraInfoE"], [451, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo10CameraInfoEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::camerainfo::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo18MSGPACK_DEFINE_MAPE4pose3fov8proj_mat"], [451, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo18MSGPACK_DEFINE_MAPE4pose3fov8proj_mat"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::camerainfo::fov (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo3fovE"], [451, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo3fovE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::camerainfo::pose (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo4poseE"], [451, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo4poseE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::camerainfo::proj_mat (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo8proj_matE"], [451, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo8proj_matE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::camerainfo::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo2toEv"], [451, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10CameraInfo2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::collisioninfo (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfoE"], [452, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfoE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::collisioninfo::collisioninfo (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo13CollisionInfoERKN8nervosys11autonomylib13CollisionInfoE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo13CollisionInfoEv"], [452, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo13CollisionInfoERKN8nervosys11autonomylib13CollisionInfoE"], [452, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo13CollisionInfoEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::collisioninfo::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo18MSGPACK_DEFINE_MAPE12has_collided17penetration_depth10time_stamp6normal12impact_point8position11object_name9object_id"], [452, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo18MSGPACK_DEFINE_MAPE12has_collided17penetration_depth10time_stamp6normal12impact_point8position11object_name9object_id"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::collisioninfo::has_collided (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo12has_collidedE"], [452, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo12has_collidedE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::collisioninfo::impact_point (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo12impact_pointE"], [452, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo12impact_pointE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::collisioninfo::normal (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo6normalE"], [452, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo6normalE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::collisioninfo::object_id (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo9object_idE"], [452, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo9object_idE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::collisioninfo::object_name (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo11object_nameE"], [452, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo11object_nameE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::collisioninfo::penetration_depth (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo17penetration_depthE"], [452, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo17penetration_depthE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::collisioninfo::position (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo8positionE"], [452, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo8positionE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::collisioninfo::time_stamp (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo10time_stampE"], [452, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo10time_stampE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::collisioninfo::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo2toEv"], [452, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13CollisionInfo2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::detectioninfo (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfoE"], [453, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfoE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::detectioninfo::detectioninfo (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo13DetectionInfoERKN8nervosys11autonomylib13DetectionInfoE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo13DetectionInfoEv"], [453, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo13DetectionInfoERKN8nervosys11autonomylib13DetectionInfoE"], [453, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo13DetectionInfoEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::detectioninfo::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo18MSGPACK_DEFINE_MAPE4name9geo_point5box2D5box3D13relative_pose"], [453, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo18MSGPACK_DEFINE_MAPE4name9geo_point5box2D5box3D13relative_pose"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::detectioninfo::box2d (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo5box2DE"], [453, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo5box2DE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::detectioninfo::box3d (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo5box3DE"], [453, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo5box3DE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::detectioninfo::from (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo4fromERKNSt6vectorIN8nervosys11autonomylib13DetectionInfoEEE"], [453, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo4fromERKNSt6vectorIN8nervosys11autonomylib13DetectionInfoEEE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::detectioninfo::geo_point (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo9geo_pointE"], [453, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo9geo_pointE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::detectioninfo::name (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo4nameE"], [453, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo4nameE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::detectioninfo::relative_pose (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo13relative_poseE"], [453, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo13relative_poseE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::detectioninfo::to (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo2toERKNSt6vectorI13DetectionInfoEE"], [73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo2toEv"], [453, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo2toERKNSt6vectorI13DetectionInfoEE"], [453, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13DetectionInfo2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::distancesensordata (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorDataE"], [454, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorDataE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::distancesensordata::distancesensordata (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData18DistanceSensorDataERKN8nervosys11autonomylib18DistanceSensorDataE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData18DistanceSensorDataEv"], [454, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData18DistanceSensorDataERKN8nervosys11autonomylib18DistanceSensorDataE"], [454, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData18DistanceSensorDataEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::distancesensordata::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData18MSGPACK_DEFINE_MAPE10time_stamp8distance12min_distance12max_distance13relative_pose"], [454, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData18MSGPACK_DEFINE_MAPE10time_stamp8distance12min_distance12max_distance13relative_pose"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::distancesensordata::distance (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData8distanceE"], [454, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData8distanceE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::distancesensordata::max_distance (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData12max_distanceE"], [454, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData12max_distanceE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::distancesensordata::min_distance (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData12min_distanceE"], [454, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData12min_distanceE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::distancesensordata::relative_pose (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData13relative_poseE"], [454, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData13relative_poseE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::distancesensordata::time_stamp (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData10time_stampE"], [454, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData10time_stampE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::distancesensordata::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData2toEv"], [454, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase18DistanceSensorData2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::environmentstate (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentStateE"], [455, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentStateE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::environmentstate::environmentstate (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState16EnvironmentStateERKN8nervosys11autonomylib11Environment5StateE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState16EnvironmentStateEv"], [455, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState16EnvironmentStateERKN8nervosys11autonomylib11Environment5StateE"], [455, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState16EnvironmentStateEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::environmentstate::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState18MSGPACK_DEFINE_MAPE8position9geo_point7gravity12air_pressure11temperature11air_density"], [455, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState18MSGPACK_DEFINE_MAPE8position9geo_point7gravity12air_pressure11temperature11air_density"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::environmentstate::air_density (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState11air_densityE"], [455, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState11air_densityE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::environmentstate::air_pressure (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState12air_pressureE"], [455, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState12air_pressureE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::environmentstate::geo_point (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState9geo_pointE"], [455, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState9geo_pointE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::environmentstate::gravity (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState7gravityE"], [455, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState7gravityE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::environmentstate::position (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState8positionE"], [455, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState8positionE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::environmentstate::temperature (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState11temperatureE"], [455, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState11temperatureE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::environmentstate::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState2toEv"], [455, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16EnvironmentState2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::geopoint (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPointE"], [456, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPointE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::geopoint::geopoint (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint8GeoPointERKN8nervosys11autonomylib8GeoPointE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint8GeoPointEv"], [456, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint8GeoPointERKN8nervosys11autonomylib8GeoPointE"], [456, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint8GeoPointEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::geopoint::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint18MSGPACK_DEFINE_MAPE8latitude9longitude8altitude"], [456, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint18MSGPACK_DEFINE_MAPE8latitude9longitude8altitude"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::geopoint::altitude (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint8altitudeE"], [456, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint8altitudeE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::geopoint::latitude (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint8latitudeE"], [456, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint8latitudeE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::geopoint::longitude (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint9longitudeE"], [456, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint9longitudeE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::geopoint::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint2toEv"], [456, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8GeoPoint2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gnssreport (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReportE"], [457, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReportE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gnssreport::gnssreport (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport10GnssReportERKN8nervosys11autonomylib7GpsBase10GnssReportE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport10GnssReportEv"], [457, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport10GnssReportERKN8nervosys11autonomylib7GpsBase10GnssReportE"], [457, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport10GnssReportEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gnssreport::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport18MSGPACK_DEFINE_MAPE9geo_point3eph3epv8velocity8fix_type8time_utc"], [457, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport18MSGPACK_DEFINE_MAPE9geo_point3eph3epv8velocity8fix_type8time_utc"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gnssreport::eph (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport3ephE"], [457, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport3ephE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gnssreport::epv (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport3epvE"], [457, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport3epvE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gnssreport::fix_type (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport8fix_typeE"], [457, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport8fix_typeE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gnssreport::geo_point (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport9geo_pointE"], [457, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport9geo_pointE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gnssreport::time_utc (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport8time_utcE"], [457, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport8time_utcE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gnssreport::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport2toEv"], [457, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gnssreport::velocity (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport8velocityE"], [457, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase10GnssReport8velocityE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gpsdata (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsDataE"], [458, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsDataE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gpsdata::gpsdata (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData7GpsDataERKN8nervosys11autonomylib7GpsBase6OutputE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData7GpsDataEv"], [458, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData7GpsDataERKN8nervosys11autonomylib7GpsBase6OutputE"], [458, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData7GpsDataEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gpsdata::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData18MSGPACK_DEFINE_MAPE10time_stamp4gnss8is_valid"], [458, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData18MSGPACK_DEFINE_MAPE10time_stamp4gnss8is_valid"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gpsdata::gnss (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData4gnssE"], [458, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData4gnssE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gpsdata::is_valid (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData8is_validE"], [458, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData8is_validE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gpsdata::time_stamp (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData10time_stampE"], [458, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData10time_stampE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::gpsdata::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData2toEv"], [458, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7GpsData2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imagerequest (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequestE"], [459, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequestE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imagerequest::imagerequest (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest12ImageRequestERKN8nervosys11autonomylib16ImageCaptureBase12ImageRequestE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest12ImageRequestEv"], [459, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest12ImageRequestERKN8nervosys11autonomylib16ImageCaptureBase12ImageRequestE"], [459, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest12ImageRequestEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imagerequest::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest18MSGPACK_DEFINE_MAPE11camera_name10image_type15pixels_as_float8compress"], [459, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest18MSGPACK_DEFINE_MAPE11camera_name10image_type15pixels_as_float8compress"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imagerequest::camera_name (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest11camera_nameE"], [459, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest11camera_nameE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imagerequest::compress (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest8compressE"], [459, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest8compressE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imagerequest::from (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest4fromERKNSt6vectorIN8nervosys11autonomylib16ImageCaptureBase12ImageRequestEEE"], [459, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest4fromERKNSt6vectorIN8nervosys11autonomylib16ImageCaptureBase12ImageRequestEEE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imagerequest::image_type (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest10image_typeE"], [459, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest10image_typeE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imagerequest::pixels_as_float (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest15pixels_as_floatE"], [459, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest15pixels_as_floatE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imagerequest::to (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest2toERKNSt6vectorI12ImageRequestEE"], [73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest2toEv"], [459, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest2toERKNSt6vectorI12ImageRequestEE"], [459, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase12ImageRequest2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponseE"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponseE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::imageresponse (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse13ImageResponseERKN8nervosys11autonomylib16ImageCaptureBase13ImageResponseE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse13ImageResponseEv"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse13ImageResponseERKN8nervosys11autonomylib16ImageCaptureBase13ImageResponseE"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse13ImageResponseEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse18MSGPACK_DEFINE_MAPE16image_data_uint816image_data_float15camera_position11camera_name18camera_orientation10time_stamp7message15pixels_as_float8compress5width6height10image_type"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse18MSGPACK_DEFINE_MAPE16image_data_uint816image_data_float15camera_position11camera_name18camera_orientation10time_stamp7message15pixels_as_float8compress5width6height10image_type"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::camera_name (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse11camera_nameE"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse11camera_nameE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::camera_orientation (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse18camera_orientationE"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse18camera_orientationE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::camera_position (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse15camera_positionE"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse15camera_positionE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::compress (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse8compressE"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse8compressE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::from (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse4fromERKNSt6vectorIN8nervosys11autonomylib16ImageCaptureBase13ImageResponseEEE"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse4fromERKNSt6vectorIN8nervosys11autonomylib16ImageCaptureBase13ImageResponseEEE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::height (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse6heightE"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse6heightE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::image_data_float (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse16image_data_floatE"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse16image_data_floatE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::image_data_uint8 (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse16image_data_uint8E"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse16image_data_uint8E"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::image_type (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse10image_typeE"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse10image_typeE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::message (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse7messageE"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse7messageE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::pixels_as_float (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse15pixels_as_floatE"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse15pixels_as_floatE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::time_stamp (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse10time_stampE"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse10time_stampE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::to (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse2toERKNSt6vectorI13ImageResponseEE"], [73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse2toEv"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse2toERKNSt6vectorI13ImageResponseEE"], [460, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imageresponse::width (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse5widthE"], [460, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase13ImageResponse5widthE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imudata (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuDataE"], [461, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuDataE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imudata::imudata (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData7ImuDataERKN8nervosys11autonomylib7ImuBase6OutputE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData7ImuDataEv"], [461, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData7ImuDataERKN8nervosys11autonomylib7ImuBase6OutputE"], [461, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData7ImuDataEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imudata::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData18MSGPACK_DEFINE_MAPE10time_stamp11orientation16angular_velocity19linear_acceleration"], [461, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData18MSGPACK_DEFINE_MAPE10time_stamp11orientation16angular_velocity19linear_acceleration"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imudata::angular_velocity (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData16angular_velocityE"], [461, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData16angular_velocityE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imudata::linear_acceleration (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData19linear_accelerationE"], [461, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData19linear_accelerationE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imudata::orientation (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData11orientationE"], [461, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData11orientationE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imudata::time_stamp (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData10time_stampE"], [461, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData10time_stampE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::imudata::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData2toEv"], [461, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase7ImuData2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::kinematicsstate (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsStateE"], [462, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsStateE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::kinematicsstate::kinematicsstate (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState15KinematicsStateERKN8nervosys11autonomylib10Kinematics5StateE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState15KinematicsStateEv"], [462, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState15KinematicsStateERKN8nervosys11autonomylib10Kinematics5StateE"], [462, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState15KinematicsStateEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::kinematicsstate::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState18MSGPACK_DEFINE_MAPE8position11orientation15linear_velocity16angular_velocity19linear_acceleration20angular_acceleration"], [462, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState18MSGPACK_DEFINE_MAPE8position11orientation15linear_velocity16angular_velocity19linear_acceleration20angular_acceleration"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::kinematicsstate::angular_acceleration (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState20angular_accelerationE"], [462, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState20angular_accelerationE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::kinematicsstate::angular_velocity (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState16angular_velocityE"], [462, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState16angular_velocityE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::kinematicsstate::linear_acceleration (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState19linear_accelerationE"], [462, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState19linear_accelerationE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::kinematicsstate::linear_velocity (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState15linear_velocityE"], [462, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState15linear_velocityE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::kinematicsstate::orientation (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState11orientationE"], [462, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState11orientationE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::kinematicsstate::position (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState8positionE"], [462, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState8positionE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::kinematicsstate::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState2toEv"], [462, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase15KinematicsState2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::lidardata (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarDataE"], [463, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarDataE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::lidardata::lidardata (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData9LidarDataERKN8nervosys11autonomylib9LidarDataE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData9LidarDataEv"], [463, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData9LidarDataERKN8nervosys11autonomylib9LidarDataE"], [463, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData9LidarDataEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::lidardata::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData18MSGPACK_DEFINE_MAPE10time_stamp11point_cloud4pose12segmentation"], [463, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData18MSGPACK_DEFINE_MAPE10time_stamp11point_cloud4pose12segmentation"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::lidardata::point_cloud (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData11point_cloudE"], [463, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData11point_cloudE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::lidardata::pose (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData4poseE"], [463, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData4poseE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::lidardata::segmentation (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData12segmentationE"], [463, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData12segmentationE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::lidardata::time_stamp (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData10time_stampE"], [463, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData10time_stampE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::lidardata::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData2toEv"], [463, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase9LidarData2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::magnetometerdata (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerDataE"], [464, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerDataE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::magnetometerdata::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData18MSGPACK_DEFINE_MAPE10time_stamp19magnetic_field_body25magnetic_field_covariance"], [464, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData18MSGPACK_DEFINE_MAPE10time_stamp19magnetic_field_body25magnetic_field_covariance"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::magnetometerdata::magnetometerdata (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData16MagnetometerDataERKN8nervosys11autonomylib16MagnetometerBase6OutputE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData16MagnetometerDataEv"], [464, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData16MagnetometerDataERKN8nervosys11autonomylib16MagnetometerBase6OutputE"], [464, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData16MagnetometerDataEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::magnetometerdata::magnetic_field_body (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData19magnetic_field_bodyE"], [464, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData19magnetic_field_bodyE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::magnetometerdata::magnetic_field_covariance (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData25magnetic_field_covarianceE"], [464, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData25magnetic_field_covarianceE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::magnetometerdata::time_stamp (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData10time_stampE"], [464, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData10time_stampE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::magnetometerdata::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData2toEv"], [464, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16MagnetometerData2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::meshpositionvertexbuffersresponse (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponseE"], [465, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponseE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::meshpositionvertexbuffersresponse::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse18MSGPACK_DEFINE_MAPE8position11orientation8vertices7indices4name"], [465, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse18MSGPACK_DEFINE_MAPE8position11orientation8vertices7indices4name"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::meshpositionvertexbuffersresponse::meshpositionvertexbuffersresponse (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse33MeshPositionVertexBuffersResponseERKN8nervosys11autonomylib33MeshPositionVertexBuffersResponseE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse33MeshPositionVertexBuffersResponseEv"], [465, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse33MeshPositionVertexBuffersResponseERKN8nervosys11autonomylib33MeshPositionVertexBuffersResponseE"], [465, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse33MeshPositionVertexBuffersResponseEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::meshpositionvertexbuffersresponse::from (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse4fromERKNSt6vectorIN8nervosys11autonomylib33MeshPositionVertexBuffersResponseEEE"], [465, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse4fromERKNSt6vectorIN8nervosys11autonomylib33MeshPositionVertexBuffersResponseEEE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::meshpositionvertexbuffersresponse::indices (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse7indicesE"], [465, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse7indicesE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::meshpositionvertexbuffersresponse::name (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse4nameE"], [465, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse4nameE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::meshpositionvertexbuffersresponse::orientation (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse11orientationE"], [465, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse11orientationE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::meshpositionvertexbuffersresponse::position (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse8positionE"], [465, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse8positionE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::meshpositionvertexbuffersresponse::to (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse2toERKNSt6vectorI33MeshPositionVertexBuffersResponseEE"], [73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse2toEv"], [465, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse2toERKNSt6vectorI33MeshPositionVertexBuffersResponseEE"], [465, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::meshpositionvertexbuffersresponse::vertices (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse8verticesE"], [465, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase33MeshPositionVertexBuffersResponse8verticesE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::pose (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4PoseE"], [466, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4PoseE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::pose::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose18MSGPACK_DEFINE_MAPE8position11orientation"], [466, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose18MSGPACK_DEFINE_MAPE8position11orientation"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::pose::pose (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose4PoseERKN8nervosys11autonomylib4PoseE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose4PoseEv"], [466, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose4PoseERKN8nervosys11autonomylib4PoseE"], [466, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose4PoseEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::pose::orientation (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose11orientationE"], [466, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose11orientationE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::pose::position (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose8positionE"], [466, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose8positionE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::pose::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose2toEv"], [466, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4Pose2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::projectionmatrix (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrixE"], [467, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrixE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::projectionmatrix::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix18MSGPACK_DEFINE_MAPE6matrix"], [467, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix18MSGPACK_DEFINE_MAPE6matrix"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::projectionmatrix::projectionmatrix (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix16ProjectionMatrixERKN8nervosys11autonomylib16ProjectionMatrixE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix16ProjectionMatrixEv"], [467, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix16ProjectionMatrixERKN8nervosys11autonomylib16ProjectionMatrixE"], [467, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix16ProjectionMatrixEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::projectionmatrix::matrix (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix6matrixE"], [467, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix6matrixE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::projectionmatrix::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix2toEv"], [467, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase16ProjectionMatrix2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::quaternionr (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11QuaternionrE"], [468, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11QuaternionrE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::quaternionr::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr18MSGPACK_DEFINE_MAPE5w_val5x_val5y_val5z_val"], [468, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr18MSGPACK_DEFINE_MAPE5w_val5x_val5y_val5z_val"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::quaternionr::quaternionr (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr11QuaternionrERKN8nervosys11autonomylib11QuaternionrE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr11QuaternionrEv"], [468, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr11QuaternionrERKN8nervosys11autonomylib11QuaternionrE"], [468, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr11QuaternionrEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::quaternionr::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr2toEv"], [468, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::quaternionr::w_val (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr5w_valE"], [468, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr5w_valE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::quaternionr::x_val (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr5x_valE"], [468, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr5x_valE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::quaternionr::y_val (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr5y_valE"], [468, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr5y_valE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::quaternionr::z_val (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr5z_valE"], [468, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase11Quaternionr5z_valE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCDataE"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCDataE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData18MSGPACK_DEFINE_MAPE9timestamp5pitch4roll8throttle3yaw6left_z7right_z8switches9vendor_id14is_initialized8is_valid"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData18MSGPACK_DEFINE_MAPE9timestamp5pitch4roll8throttle3yaw6left_z7right_z8switches9vendor_id14is_initialized8is_valid"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata::rcdata (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData6RCDataERKN8nervosys11autonomylib6RCDataE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData6RCDataEv"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData6RCDataERKN8nervosys11autonomylib6RCDataE"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData6RCDataEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata::is_initialized (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData14is_initializedE"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData14is_initializedE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata::is_valid (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData8is_validE"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData8is_validE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata::left_z (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData6left_zE"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData6left_zE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata::pitch (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData5pitchE"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData5pitchE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata::right_z (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData7right_zE"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData7right_zE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata::roll (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData4rollE"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData4rollE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata::switches (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData8switchesE"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData8switchesE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata::throttle (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData8throttleE"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData8throttleE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata::timestamp (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData9timestampE"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData9timestampE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData2toEv"], [469, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata::vendor_id (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData9vendor_idE"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData9vendor_idE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::rcdata::yaw (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData3yawE"], [469, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase6RCData3yawE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::vector2r (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2rE"], [470, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2rE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::vector2r::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r18MSGPACK_DEFINE_MAPE5x_val5y_val"], [470, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r18MSGPACK_DEFINE_MAPE5x_val5y_val"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::vector2r::vector2r (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r8Vector2rERKN8nervosys11autonomylib8Vector2rE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r8Vector2rEv"], [470, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r8Vector2rERKN8nervosys11autonomylib8Vector2rE"], [470, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r8Vector2rEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::vector2r::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r2toEv"], [470, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::vector2r::x_val (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r5x_valE"], [470, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r5x_valE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::vector2r::y_val (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r5y_valE"], [470, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector2r5y_valE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::vector3r (c++ struct)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3rE"], [471, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3rE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::vector3r::msgpack_define_map (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r18MSGPACK_DEFINE_MAPE5x_val5y_val5z_val"], [471, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r18MSGPACK_DEFINE_MAPE5x_val5y_val5z_val"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::vector3r::vector3r (c++ function)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r8Vector3rERKN8nervosys11autonomylib8Vector3rE"], [73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r8Vector3rEv"], [471, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r8Vector3rERKN8nervosys11autonomylib8Vector3rE"], [471, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r8Vector3rEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::vector3r::to (c++ function)": [[73, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r2toEv"], [471, "_CPPv4NK8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r2toEv"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::vector3r::x_val (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r5x_valE"], [471, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r5x_valE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::vector3r::y_val (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r5y_valE"], [471, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r5y_valE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::vector3r::z_val (c++ member)": [[73, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r5z_valE"], [471, "_CPPv4N8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase8Vector3r5z_valE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::from (c++ function)": [[73, "_CPPv4I00EN8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase4fromEvRKNSt6vectorI4TSrcEERNSt6vectorI5TDestEE"]], "nervosys::autonomylib_rpclib::rpclibadaptorsbase::to (c++ function)": [[73, "_CPPv4I00EN8nervosys18autonomylib_rpclib18RpcLibAdaptorsBase2toEvRKNSt6vectorI4TSrcEERNSt6vectorI5TDestEE"]], "simple_flight::adaptivecontroller (c++ class)": [[74, "_CPPv4N13simple_flight18AdaptiveControllerE"]], "simple_flight::adaptivecontroller::getoutput (c++ function)": [[74, "_CPPv4N13simple_flight18AdaptiveController9getOutputEv"]], "simple_flight::adaptivecontroller::initialize (c++ function)": [[74, "_CPPv4N13simple_flight18AdaptiveController10initializeEPK5IGoalPK15IStateEstimator"]], "simple_flight::adaptivecontroller::islastgoalmodeallpassthrough (c++ function)": [[74, "_CPPv4N13simple_flight18AdaptiveController28isLastGoalModeAllPassthroughEv"]], "simple_flight::anglelevelcontroller (c++ class)": [[75, "_CPPv4N13simple_flight20AngleLevelControllerE"]], "simple_flight::anglelevelcontroller::anglelevelcontroller (c++ function)": [[75, "_CPPv4N13simple_flight20AngleLevelController20AngleLevelControllerEP6ParamsPK11IBoardClock"]], "simple_flight::anglelevelcontroller::getgoalmode (c++ function)": [[75, "_CPPv4NK13simple_flight20AngleLevelController11getGoalModeEv"]], "simple_flight::anglelevelcontroller::getgoalvalue (c++ function)": [[75, "_CPPv4NK13simple_flight20AngleLevelController12getGoalValueEv"]], "simple_flight::anglelevelcontroller::getoutput (c++ function)": [[75, "_CPPv4N13simple_flight20AngleLevelController9getOutputEv"]], "simple_flight::anglelevelcontroller::initialize (c++ function)": [[75, "_CPPv4N13simple_flight20AngleLevelController10initializeEjPK5IGoalPK15IStateEstimator"]], "simple_flight::anglelevelcontroller::reset (c++ function)": [[75, "_CPPv4N13simple_flight20AngleLevelController5resetEv"]], "simple_flight::anglelevelcontroller::update (c++ function)": [[75, "_CPPv4N13simple_flight20AngleLevelController6updateEv"]], "simple_flight::angleratecontroller (c++ class)": [[76, "_CPPv4N13simple_flight19AngleRateControllerE"]], "simple_flight::angleratecontroller::angleratecontroller (c++ function)": [[76, "_CPPv4N13simple_flight19AngleRateController19AngleRateControllerEP6ParamsPK11IBoardClock"]], "simple_flight::angleratecontroller::getoutput (c++ function)": [[76, "_CPPv4N13simple_flight19AngleRateController9getOutputEv"]], "simple_flight::angleratecontroller::initialize (c++ function)": [[76, "_CPPv4N13simple_flight19AngleRateController10initializeEjPK5IGoalPK15IStateEstimator"]], "simple_flight::angleratecontroller::reset (c++ function)": [[76, "_CPPv4N13simple_flight19AngleRateController5resetEv"]], "simple_flight::angleratecontroller::update (c++ function)": [[76, "_CPPv4N13simple_flight19AngleRateController6updateEv"]], "simple_flight::axis3 (c++ class)": [[77, "_CPPv4I0EN13simple_flight5Axis3E"]], "simple_flight::axis3::axis3 (c++ function)": [[77, "_CPPv4N13simple_flight5Axis35Axis3ERK1TRK1TRK1T"]], "simple_flight::axis3::axiscount (c++ function)": [[77, "_CPPv4N13simple_flight5Axis39AxisCountEv"]], "simple_flight::axis3::colwisemultiply3 (c++ function)": [[77, "_CPPv4NK13simple_flight5Axis316colWiseMultiply3ERK5Axis3I1TE"]], "simple_flight::axis3::equals3 (c++ function)": [[77, "_CPPv4NK13simple_flight5Axis37equals3ERK5Axis3I1TE"]], "simple_flight::axis3::operator[] (c++ function)": [[77, "_CPPv4N13simple_flight5Axis3ixEj"], [77, "_CPPv4NK13simple_flight5Axis3ixEj"]], "simple_flight::axis3::pitch (c++ function)": [[77, "_CPPv4N13simple_flight5Axis35pitchEv"], [77, "_CPPv4NK13simple_flight5Axis35pitchEv"]], "simple_flight::axis3::roll (c++ function)": [[77, "_CPPv4N13simple_flight5Axis34rollEv"], [77, "_CPPv4NK13simple_flight5Axis34rollEv"]], "simple_flight::axis3::tostring (c++ function)": [[77, "_CPPv4NK13simple_flight5Axis38toStringEv"]], "simple_flight::axis3::x (c++ function)": [[77, "_CPPv4N13simple_flight5Axis31xEv"], [77, "_CPPv4NK13simple_flight5Axis31xEv"]], "simple_flight::axis3::y (c++ function)": [[77, "_CPPv4N13simple_flight5Axis31yEv"], [77, "_CPPv4NK13simple_flight5Axis31yEv"]], "simple_flight::axis3::yaw (c++ function)": [[77, "_CPPv4N13simple_flight5Axis33yawEv"], [77, "_CPPv4NK13simple_flight5Axis33yawEv"]], "simple_flight::axis3::z (c++ function)": [[77, "_CPPv4N13simple_flight5Axis31zEv"], [77, "_CPPv4NK13simple_flight5Axis31zEv"]], "simple_flight::axis3::zero (c++ function)": [[77, "_CPPv4N13simple_flight5Axis34zeroEv"]], "simple_flight::axis3::~axis3 (c++ function)": [[77, "_CPPv4N13simple_flight5Axis3D0Ev"]], "simple_flight::axis4 (c++ class)": [[78, "_CPPv4I0EN13simple_flight5Axis4E"]], "simple_flight::axis4::axis4 (c++ function)": [[78, "_CPPv4N13simple_flight5Axis45Axis4ERK1TRK1TRK1TRK1T"], [78, "_CPPv4N13simple_flight5Axis45Axis4ERK5Axis3I1TERK1T"]], "simple_flight::axis4::axiscount (c++ function)": [[78, "_CPPv4N13simple_flight5Axis49AxisCountEv"]], "simple_flight::axis4::axis4toxyz (c++ function)": [[78, "_CPPv4N13simple_flight5Axis410axis4ToXyzEK5Axis4I1TEb"]], "simple_flight::axis4::colwisemultiply4 (c++ function)": [[78, "_CPPv4NK13simple_flight5Axis416colWiseMultiply4ERK5Axis4I1TE"]], "simple_flight::axis4::equals4 (c++ function)": [[78, "_CPPv4NK13simple_flight5Axis47equals4ERK5Axis4I1TE"]], "simple_flight::axis4::operator[] (c++ function)": [[78, "_CPPv4N13simple_flight5Axis4ixEj"], [78, "_CPPv4NK13simple_flight5Axis4ixEj"]], "simple_flight::axis4::setaxis3 (c++ function)": [[78, "_CPPv4N13simple_flight5Axis48setAxis3ERK5Axis3I1TE"]], "simple_flight::axis4::setvalues (c++ function)": [[78, "_CPPv4N13simple_flight5Axis49setValuesERKNSt6vectorI1TEE"]], "simple_flight::axis4::throttle (c++ function)": [[78, "_CPPv4N13simple_flight5Axis48throttleEv"], [78, "_CPPv4NK13simple_flight5Axis48throttleEv"]], "simple_flight::axis4::tostring (c++ function)": [[78, "_CPPv4NK13simple_flight5Axis48toStringEv"]], "simple_flight::axis4::val4 (c++ function)": [[78, "_CPPv4N13simple_flight5Axis44val4Ev"], [78, "_CPPv4NK13simple_flight5Axis44val4Ev"]], "simple_flight::axis4::xyztoaxis4 (c++ function)": [[78, "_CPPv4N13simple_flight5Axis410xyzToAxis4EK5Axis3I1TEb"]], "simple_flight::axis4::zero (c++ function)": [[78, "_CPPv4N13simple_flight5Axis44zeroEv"]], "simple_flight::cascadecontroller (c++ class)": [[79, "_CPPv4N13simple_flight17CascadeControllerE"]], "simple_flight::cascadecontroller::cascadecontroller (c++ function)": [[79, "_CPPv4N13simple_flight17CascadeController17CascadeControllerEP6ParamsPK11IBoardClockP9ICommLink"]], "simple_flight::cascadecontroller::getoutput (c++ function)": [[79, "_CPPv4N13simple_flight17CascadeController9getOutputEv"]], "simple_flight::cascadecontroller::initialize (c++ function)": [[79, "_CPPv4N13simple_flight17CascadeController10initializeEPK5IGoalPK15IStateEstimator"]], "simple_flight::cascadecontroller::islastgoalmodeallpassthrough (c++ function)": [[79, "_CPPv4N13simple_flight17CascadeController28isLastGoalModeAllPassthroughEv"]], "simple_flight::cascadecontroller::reset (c++ function)": [[79, "_CPPv4N13simple_flight17CascadeController5resetEv"]], "simple_flight::cascadecontroller::update (c++ function)": [[79, "_CPPv4N13simple_flight17CascadeController6updateEv"]], "simple_flight::constantoutputcontroller (c++ class)": [[80, "_CPPv4N13simple_flight24ConstantOutputControllerE"]], "simple_flight::constantoutputcontroller::constantoutputcontroller (c++ function)": [[80, "_CPPv4N13simple_flight24ConstantOutputController24ConstantOutputControllerE5TReal5TReal"]], "simple_flight::constantoutputcontroller::getoutput (c++ function)": [[80, "_CPPv4N13simple_flight24ConstantOutputController9getOutputEv"]], "simple_flight::constantoutputcontroller::initialize (c++ function)": [[80, "_CPPv4N13simple_flight24ConstantOutputController10initializeEjPK5IGoalPK15IStateEstimator"]], "simple_flight::constantoutputcontroller::reset (c++ function)": [[80, "_CPPv4N13simple_flight24ConstantOutputController5resetEv"]], "simple_flight::constantoutputcontroller::update (c++ function)": [[80, "_CPPv4N13simple_flight24ConstantOutputController6updateEv"]], "simple_flight::firmware (c++ class)": [[81, "_CPPv4N13simple_flight8FirmwareE"]], "simple_flight::firmware::firmware (c++ function)": [[81, "_CPPv4N13simple_flight8Firmware8FirmwareEP6ParamsP6IBoardP9ICommLinkP15IStateEstimator"]], "simple_flight::firmware::offboardapi (c++ function)": [[81, "_CPPv4N13simple_flight8Firmware11offboardApiEv"]], "simple_flight::firmware::reset (c++ function)": [[81, "_CPPv4N13simple_flight8Firmware5resetEv"]], "simple_flight::firmware::update (c++ function)": [[81, "_CPPv4N13simple_flight8Firmware6updateEv"]], "simple_flight::goalmode (c++ class)": [[82, "_CPPv4N13simple_flight8GoalModeE"]], "simple_flight::goalmode::goalmode (c++ function)": [[82, "_CPPv4N13simple_flight8GoalMode8GoalModeE12GoalModeType12GoalModeType12GoalModeType12GoalModeType"]], "simple_flight::goalmode::getallratemode (c++ function)": [[82, "_CPPv4N13simple_flight8GoalMode14getAllRateModeEv"]], "simple_flight::goalmode::getpositionmode (c++ function)": [[82, "_CPPv4N13simple_flight8GoalMode15getPositionModeEv"]], "simple_flight::goalmode::getstandardanglemode (c++ function)": [[82, "_CPPv4N13simple_flight8GoalMode20getStandardAngleModeEv"]], "simple_flight::goalmode::getunknown (c++ function)": [[82, "_CPPv4N13simple_flight8GoalMode10getUnknownEv"]], "simple_flight::goalmode::getvelocitymode (c++ function)": [[82, "_CPPv4N13simple_flight8GoalMode15getVelocityModeEv"]], "simple_flight::goalmode::getvelocityxyposzmode (c++ function)": [[82, "_CPPv4N13simple_flight8GoalMode21getVelocityXYPosZModeEv"]], "simple_flight::iaxiscontroller (c++ class)": [[83, "_CPPv4N13simple_flight15IAxisControllerE"]], "simple_flight::iaxiscontroller::getoutput (c++ function)": [[83, "_CPPv4N13simple_flight15IAxisController9getOutputEv"]], "simple_flight::iaxiscontroller::initialize (c++ function)": [[83, "_CPPv4N13simple_flight15IAxisController10initializeEjPK5IGoalPK15IStateEstimator"]], "simple_flight::iaxiscontroller::reset (c++ function)": [[83, "_CPPv4N13simple_flight15IAxisController5resetEv"]], "simple_flight::iboard (c++ class)": [[84, "_CPPv4N13simple_flight6IBoardE"]], "simple_flight::iboardclock (c++ class)": [[85, "_CPPv4N13simple_flight11IBoardClockE"]], "simple_flight::iboardclock::micros (c++ function)": [[85, "_CPPv4NK13simple_flight11IBoardClock6microsEv"]], "simple_flight::iboardclock::millis (c++ function)": [[85, "_CPPv4NK13simple_flight11IBoardClock6millisEv"]], "simple_flight::iboardclock::~iboardclock (c++ function)": [[85, "_CPPv4N13simple_flight11IBoardClockD0Ev"]], "simple_flight::iboardinputpins (c++ class)": [[86, "_CPPv4N13simple_flight15IBoardInputPinsE"]], "simple_flight::iboardinputpins::getavgmotoroutput (c++ function)": [[86, "_CPPv4NK13simple_flight15IBoardInputPins17getAvgMotorOutputEv"]], "simple_flight::iboardinputpins::isrcconnected (c++ function)": [[86, "_CPPv4NK13simple_flight15IBoardInputPins13isRcConnectedEv"]], "simple_flight::iboardinputpins::readchannel (c++ function)": [[86, "_CPPv4NK13simple_flight15IBoardInputPins11readChannelE8uint16_t"]], "simple_flight::iboardinputpins::~iboardinputpins (c++ function)": [[86, "_CPPv4N13simple_flight15IBoardInputPinsD0Ev"]], "simple_flight::iboardoutputpins (c++ class)": [[87, "_CPPv4N13simple_flight16IBoardOutputPinsE"]], "simple_flight::iboardoutputpins::setled (c++ function)": [[87, "_CPPv4N13simple_flight16IBoardOutputPins6setLedE7uint8_t7int32_t"]], "simple_flight::iboardoutputpins::writeoutput (c++ function)": [[87, "_CPPv4N13simple_flight16IBoardOutputPins11writeOutputE8uint16_tf"]], "simple_flight::iboardoutputpins::~iboardoutputpins (c++ function)": [[87, "_CPPv4N13simple_flight16IBoardOutputPinsD0Ev"]], "simple_flight::iboardsensors (c++ class)": [[88, "_CPPv4N13simple_flight13IBoardSensorsE"]], "simple_flight::iboardsensors::readaccel (c++ function)": [[88, "_CPPv4NK13simple_flight13IBoardSensors9readAccelEAL3E_f"]], "simple_flight::iboardsensors::readgyro (c++ function)": [[88, "_CPPv4NK13simple_flight13IBoardSensors8readGyroEAL3E_f"]], "simple_flight::iboardsensors::~iboardsensors (c++ function)": [[88, "_CPPv4N13simple_flight13IBoardSensorsD0Ev"]], "simple_flight::icommlink (c++ class)": [[89, "_CPPv4N13simple_flight9ICommLinkE"]], "simple_flight::icommlink::kloglevelerror (c++ member)": [[89, "_CPPv4N13simple_flight9ICommLink14kLogLevelErrorE"]], "simple_flight::icommlink::kloglevelinfo (c++ member)": [[89, "_CPPv4N13simple_flight9ICommLink13kLogLevelInfoE"]], "simple_flight::icommlink::kloglevelwarn (c++ member)": [[89, "_CPPv4N13simple_flight9ICommLink13kLogLevelWarnE"]], "simple_flight::icommlink::log (c++ function)": [[89, "_CPPv4N13simple_flight9ICommLink3logERKNSt6stringE7int32_t"]], "simple_flight::icontroller (c++ class)": [[90, "_CPPv4N13simple_flight11IControllerE"]], "simple_flight::icontroller::getoutput (c++ function)": [[90, "_CPPv4N13simple_flight11IController9getOutputEv"]], "simple_flight::icontroller::initialize (c++ function)": [[90, "_CPPv4N13simple_flight11IController10initializeEPK5IGoalPK15IStateEstimator"]], "simple_flight::icontroller::islastgoalmodeallpassthrough (c++ function)": [[90, "_CPPv4N13simple_flight11IController28isLastGoalModeAllPassthroughEv"]], "simple_flight::ifirmware (c++ class)": [[91, "_CPPv4N13simple_flight9IFirmwareE"]], "simple_flight::ifirmware::offboardapi (c++ function)": [[91, "_CPPv4N13simple_flight9IFirmware11offboardApiEv"]], "simple_flight::igoal (c++ class)": [[92, "_CPPv4N13simple_flight5IGoalE"]], "simple_flight::igoal::getgoalmode (c++ function)": [[92, "_CPPv4NK13simple_flight5IGoal11getGoalModeEv"]], "simple_flight::igoal::getgoalvalue (c++ function)": [[92, "_CPPv4NK13simple_flight5IGoal12getGoalValueEv"]], "simple_flight::igoal::~igoal (c++ function)": [[92, "_CPPv4N13simple_flight5IGoalD0Ev"]], "simple_flight::ioffboardapi (c++ class)": [[93, "_CPPv4N13simple_flight12IOffboardApiE"]], "simple_flight::ioffboardapi::arm (c++ function)": [[93, "_CPPv4N13simple_flight12IOffboardApi3armERNSt6stringE"]], "simple_flight::ioffboardapi::canrequestapicontrol (c++ function)": [[93, "_CPPv4N13simple_flight12IOffboardApi20canRequestApiControlERNSt6stringE"]], "simple_flight::ioffboardapi::disarm (c++ function)": [[93, "_CPPv4N13simple_flight12IOffboardApi6disarmERNSt6stringE"]], "simple_flight::ioffboardapi::getgeopoint (c++ function)": [[93, "_CPPv4NK13simple_flight12IOffboardApi11getGeoPointEv"]], "simple_flight::ioffboardapi::gethomegeopoint (c++ function)": [[93, "_CPPv4NK13simple_flight12IOffboardApi15getHomeGeoPointEv"]], "simple_flight::ioffboardapi::getlandedstate (c++ function)": [[93, "_CPPv4NK13simple_flight12IOffboardApi14getLandedStateEv"]], "simple_flight::ioffboardapi::getstateestimator (c++ function)": [[93, "_CPPv4N13simple_flight12IOffboardApi17getStateEstimatorEv"]], "simple_flight::ioffboardapi::getvehiclestate (c++ function)": [[93, "_CPPv4NK13simple_flight12IOffboardApi15getVehicleStateEv"]], "simple_flight::ioffboardapi::hasapicontrol (c++ function)": [[93, "_CPPv4N13simple_flight12IOffboardApi13hasApiControlEv"]], "simple_flight::ioffboardapi::releaseapicontrol (c++ function)": [[93, "_CPPv4N13simple_flight12IOffboardApi17releaseApiControlEv"]], "simple_flight::ioffboardapi::requestapicontrol (c++ function)": [[93, "_CPPv4N13simple_flight12IOffboardApi17requestApiControlERNSt6stringE"]], "simple_flight::ioffboardapi::setgoalandmode (c++ function)": [[93, "_CPPv4N13simple_flight12IOffboardApi14setGoalAndModeEPK6Axis4rPK8GoalModeRNSt6stringE"]], "simple_flight::ipidintegrator (c++ class)": [[94, "_CPPv4I0EN13simple_flight14IPidIntegratorE"]], "simple_flight::ipidintegrator::getoutput (c++ function)": [[94, "_CPPv4N13simple_flight14IPidIntegrator9getOutputEv"]], "simple_flight::ipidintegrator::reset (c++ function)": [[94, "_CPPv4N13simple_flight14IPidIntegrator5resetEv"]], "simple_flight::ipidintegrator::set (c++ function)": [[94, "_CPPv4N13simple_flight14IPidIntegrator3setE1T"]], "simple_flight::ipidintegrator::update (c++ function)": [[94, "_CPPv4N13simple_flight14IPidIntegrator6updateEf1T8uint64_t"]], "simple_flight::ipidintegrator::~ipidintegrator (c++ function)": [[94, "_CPPv4N13simple_flight14IPidIntegratorD0Ev"]], "simple_flight::istateestimator (c++ class)": [[95, "_CPPv4N13simple_flight15IStateEstimatorE"]], "simple_flight::istateestimator::getangles (c++ function)": [[95, "_CPPv4NK13simple_flight15IStateEstimator9getAnglesEv"]], "simple_flight::istateestimator::getangularvelocity (c++ function)": [[95, "_CPPv4NK13simple_flight15IStateEstimator18getAngularVelocityEv"]], "simple_flight::istateestimator::getgeopoint (c++ function)": [[95, "_CPPv4NK13simple_flight15IStateEstimator11getGeoPointEv"]], "simple_flight::istateestimator::gethomegeopoint (c++ function)": [[95, "_CPPv4NK13simple_flight15IStateEstimator15getHomeGeoPointEv"]], "simple_flight::istateestimator::getkinematicsestimated (c++ function)": [[95, "_CPPv4NK13simple_flight15IStateEstimator22getKinematicsEstimatedEv"]], "simple_flight::istateestimator::getlinearvelocity (c++ function)": [[95, "_CPPv4NK13simple_flight15IStateEstimator17getLinearVelocityEv"]], "simple_flight::istateestimator::getorientation (c++ function)": [[95, "_CPPv4NK13simple_flight15IStateEstimator14getOrientationEv"]], "simple_flight::istateestimator::getposition (c++ function)": [[95, "_CPPv4NK13simple_flight15IStateEstimator11getPositionEv"]], "simple_flight::istateestimator::transformtobodyframe (c++ function)": [[95, "_CPPv4NK13simple_flight15IStateEstimator20transformToBodyFrameERK6Axis3r"]], "simple_flight::istateestimator::~istateestimator (c++ function)": [[95, "_CPPv4N13simple_flight15IStateEstimatorD0Ev"]], "simple_flight::iupdatable (c++ class)": [[96, "_CPPv4N13simple_flight10IUpdatableE"]], "simple_flight::iupdatable::clearresetupdateasserts (c++ function)": [[96, "_CPPv4N13simple_flight10IUpdatable23clearResetUpdateAssertsEv"]], "simple_flight::iupdatable::reset (c++ function)": [[96, "_CPPv4N13simple_flight10IUpdatable5resetEv"]], "simple_flight::iupdatable::update (c++ function)": [[96, "_CPPv4N13simple_flight10IUpdatable6updateEv"]], "simple_flight::iupdatable::~iupdatable (c++ function)": [[96, "_CPPv4N13simple_flight10IUpdatableD0Ev"]], "simple_flight::mixer (c++ class)": [[97, "_CPPv4N13simple_flight5MixerE"]], "simple_flight::mixer::mixer (c++ function)": [[97, "_CPPv4N13simple_flight5Mixer5MixerEPK6Params"]], "simple_flight::mixer::getmotoroutput (c++ function)": [[97, "_CPPv4NK13simple_flight5Mixer14getMotorOutputERK6Axis4rRNSt6vectorIfEE"]], "simple_flight::offboardapi (c++ class)": [[98, "_CPPv4N13simple_flight11OffboardApiE"]], "simple_flight::offboardapi::offboardapi (c++ function)": [[98, "_CPPv4N13simple_flight11OffboardApi11OffboardApiEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP15IStateEstimatorP9ICommLink"]], "simple_flight::offboardapi::arm (c++ function)": [[98, "_CPPv4N13simple_flight11OffboardApi3armERNSt6stringE"]], "simple_flight::offboardapi::canrequestapicontrol (c++ function)": [[98, "_CPPv4N13simple_flight11OffboardApi20canRequestApiControlERNSt6stringE"]], "simple_flight::offboardapi::disarm (c++ function)": [[98, "_CPPv4N13simple_flight11OffboardApi6disarmERNSt6stringE"]], "simple_flight::offboardapi::getgeopoint (c++ function)": [[98, "_CPPv4NK13simple_flight11OffboardApi11getGeoPointEv"]], "simple_flight::offboardapi::getgoalmode (c++ function)": [[98, "_CPPv4NK13simple_flight11OffboardApi11getGoalModeEv"]], "simple_flight::offboardapi::getgoalvalue (c++ function)": [[98, "_CPPv4NK13simple_flight11OffboardApi12getGoalValueEv"]], "simple_flight::offboardapi::gethomegeopoint (c++ function)": [[98, "_CPPv4NK13simple_flight11OffboardApi15getHomeGeoPointEv"]], "simple_flight::offboardapi::getlandedstate (c++ function)": [[98, "_CPPv4NK13simple_flight11OffboardApi14getLandedStateEv"]], "simple_flight::offboardapi::getstateestimator (c++ function)": [[98, "_CPPv4N13simple_flight11OffboardApi17getStateEstimatorEv"]], "simple_flight::offboardapi::getvehiclestate (c++ function)": [[98, "_CPPv4NK13simple_flight11OffboardApi15getVehicleStateEv"]], "simple_flight::offboardapi::hasapicontrol (c++ function)": [[98, "_CPPv4N13simple_flight11OffboardApi13hasApiControlEv"]], "simple_flight::offboardapi::releaseapicontrol (c++ function)": [[98, "_CPPv4N13simple_flight11OffboardApi17releaseApiControlEv"]], "simple_flight::offboardapi::requestapicontrol (c++ function)": [[98, "_CPPv4N13simple_flight11OffboardApi17requestApiControlERNSt6stringE"]], "simple_flight::offboardapi::reset (c++ function)": [[98, "_CPPv4N13simple_flight11OffboardApi5resetEv"]], "simple_flight::offboardapi::setgoalandmode (c++ function)": [[98, "_CPPv4N13simple_flight11OffboardApi14setGoalAndModeEPK6Axis4rPK8GoalModeRNSt6stringE"]], "simple_flight::offboardapi::update (c++ function)": [[98, "_CPPv4N13simple_flight11OffboardApi6updateEv"]], "simple_flight::passthroughcontroller (c++ class)": [[99, "_CPPv4N13simple_flight21PassthroughControllerE"]], "simple_flight::passthroughcontroller::getoutput (c++ function)": [[99, "_CPPv4N13simple_flight21PassthroughController9getOutputEv"]], "simple_flight::passthroughcontroller::initialize (c++ function)": [[99, "_CPPv4N13simple_flight21PassthroughController10initializeEjPK5IGoalPK15IStateEstimator"]], "simple_flight::passthroughcontroller::reset (c++ function)": [[99, "_CPPv4N13simple_flight21PassthroughController5resetEv"]], "simple_flight::passthroughcontroller::update (c++ function)": [[99, "_CPPv4N13simple_flight21PassthroughController6updateEv"]], "simple_flight::pidcontroller (c++ class)": [[100, "_CPPv4I0EN13simple_flight13PidControllerE"]], "simple_flight::pidcontroller::pidcontroller (c++ function)": [[100, "_CPPv4N13simple_flight13PidController13PidControllerEPK11IBoardClockRK9PidConfigI1TE"]], "simple_flight::pidcontroller::getconfig (c++ function)": [[100, "_CPPv4NK13simple_flight13PidController9getConfigEv"]], "simple_flight::pidcontroller::getgoal (c++ function)": [[100, "_CPPv4NK13simple_flight13PidController7getGoalEv"]], "simple_flight::pidcontroller::getmeasured (c++ function)": [[100, "_CPPv4NK13simple_flight13PidController11getMeasuredEv"]], "simple_flight::pidcontroller::getoutput (c++ function)": [[100, "_CPPv4N13simple_flight13PidController9getOutputEv"]], "simple_flight::pidcontroller::reset (c++ function)": [[100, "_CPPv4N13simple_flight13PidController5resetEv"]], "simple_flight::pidcontroller::setconfig (c++ function)": [[100, "_CPPv4N13simple_flight13PidController9setConfigERK9PidConfigI1TE"]], "simple_flight::pidcontroller::setgoal (c++ function)": [[100, "_CPPv4N13simple_flight13PidController7setGoalERK1T"]], "simple_flight::pidcontroller::setmeasured (c++ function)": [[100, "_CPPv4N13simple_flight13PidController11setMeasuredERK1T"]], "simple_flight::pidcontroller::update (c++ function)": [[100, "_CPPv4N13simple_flight13PidController6updateEv"]], "simple_flight::positioncontroller (c++ class)": [[101, "_CPPv4N13simple_flight18PositionControllerE"]], "simple_flight::positioncontroller::positioncontroller (c++ function)": [[101, "_CPPv4N13simple_flight18PositionController18PositionControllerEP6ParamsPK11IBoardClock"]], "simple_flight::positioncontroller::getgoalmode (c++ function)": [[101, "_CPPv4NK13simple_flight18PositionController11getGoalModeEv"]], "simple_flight::positioncontroller::getgoalvalue (c++ function)": [[101, "_CPPv4NK13simple_flight18PositionController12getGoalValueEv"]], "simple_flight::positioncontroller::getoutput (c++ function)": [[101, "_CPPv4N13simple_flight18PositionController9getOutputEv"]], "simple_flight::positioncontroller::initialize (c++ function)": [[101, "_CPPv4N13simple_flight18PositionController10initializeEjPK5IGoalPK15IStateEstimator"]], "simple_flight::positioncontroller::reset (c++ function)": [[101, "_CPPv4N13simple_flight18PositionController5resetEv"]], "simple_flight::positioncontroller::update (c++ function)": [[101, "_CPPv4N13simple_flight18PositionController6updateEv"]], "simple_flight::remotecontrol (c++ class)": [[102, "_CPPv4N13simple_flight13RemoteControlE"]], "simple_flight::remotecontrol::remotecontrol (c++ function)": [[102, "_CPPv4N13simple_flight13RemoteControl13RemoteControlEPK6ParamsPK11IBoardClockPK15IBoardInputPinsP12VehicleStateP15IStateEstimatorP9ICommLink"]], "simple_flight::remotecontrol::allowapicontrol (c++ function)": [[102, "_CPPv4N13simple_flight13RemoteControl15allowApiControlEv"]], "simple_flight::remotecontrol::getgoalmode (c++ function)": [[102, "_CPPv4NK13simple_flight13RemoteControl11getGoalModeEv"]], "simple_flight::remotecontrol::getgoalvalue (c++ function)": [[102, "_CPPv4NK13simple_flight13RemoteControl12getGoalValueEv"]], "simple_flight::remotecontrol::getmotoroutput (c++ function)": [[102, "_CPPv4N13simple_flight13RemoteControl14getMotorOutputEv"]], "simple_flight::remotecontrol::reset (c++ function)": [[102, "_CPPv4N13simple_flight13RemoteControl5resetEv"]], "simple_flight::remotecontrol::update (c++ function)": [[102, "_CPPv4N13simple_flight13RemoteControl6updateEv"]], "simple_flight::rungkuttapidintegrator (c++ class)": [[103, "_CPPv4I0EN13simple_flight22RungKuttaPidIntegratorE"]], "simple_flight::rungkuttapidintegrator::rungkuttapidintegrator (c++ function)": [[103, "_CPPv4N13simple_flight22RungKuttaPidIntegrator22RungKuttaPidIntegratorERK9PidConfigI1TE"]], "simple_flight::rungkuttapidintegrator::getoutput (c++ function)": [[103, "_CPPv4N13simple_flight22RungKuttaPidIntegrator9getOutputEv"]], "simple_flight::rungkuttapidintegrator::reset (c++ function)": [[103, "_CPPv4N13simple_flight22RungKuttaPidIntegrator5resetEv"]], "simple_flight::rungkuttapidintegrator::set (c++ function)": [[103, "_CPPv4N13simple_flight22RungKuttaPidIntegrator3setE1T"]], "simple_flight::rungkuttapidintegrator::update (c++ function)": [[103, "_CPPv4N13simple_flight22RungKuttaPidIntegrator6updateEf1T8uint64_t"]], "simple_flight::rungkuttapidintegrator::~rungkuttapidintegrator (c++ function)": [[103, "_CPPv4N13simple_flight22RungKuttaPidIntegratorD0Ev"]], "simple_flight::stdpidintegrator (c++ class)": [[104, "_CPPv4I0EN13simple_flight16StdPidIntegratorE"]], "simple_flight::stdpidintegrator::stdpidintegrator (c++ function)": [[104, "_CPPv4N13simple_flight16StdPidIntegrator16StdPidIntegratorERK9PidConfigI1TE"]], "simple_flight::stdpidintegrator::getoutput (c++ function)": [[104, "_CPPv4N13simple_flight16StdPidIntegrator9getOutputEv"]], "simple_flight::stdpidintegrator::reset (c++ function)": [[104, "_CPPv4N13simple_flight16StdPidIntegrator5resetEv"]], "simple_flight::stdpidintegrator::set (c++ function)": [[104, "_CPPv4N13simple_flight16StdPidIntegrator3setE1T"]], "simple_flight::stdpidintegrator::update (c++ function)": [[104, "_CPPv4N13simple_flight16StdPidIntegrator6updateEf1T8uint64_t"]], "simple_flight::stdpidintegrator::~stdpidintegrator (c++ function)": [[104, "_CPPv4N13simple_flight16StdPidIntegratorD0Ev"]], "simple_flight::vehiclestate (c++ class)": [[105, "_CPPv4N13simple_flight12VehicleStateE"]], "simple_flight::vehiclestate::fromstring (c++ function)": [[105, "_CPPv4N13simple_flight12VehicleState10fromStringERKNSt6stringE"]], "simple_flight::vehiclestate::gethomegeopoint (c++ function)": [[105, "_CPPv4NK13simple_flight12VehicleState15getHomeGeoPointEv"]], "simple_flight::vehiclestate::getstate (c++ function)": [[105, "_CPPv4NK13simple_flight12VehicleState8getStateEv"]], "simple_flight::vehiclestate::setstate (c++ function)": [[105, "_CPPv4N13simple_flight12VehicleState8setStateE16VehicleStateTypeRK8GeoPoint"]], "simple_flight::velocitycontroller (c++ class)": [[106, "_CPPv4N13simple_flight18VelocityControllerE"]], "simple_flight::velocitycontroller::velocitycontroller (c++ function)": [[106, "_CPPv4N13simple_flight18VelocityController18VelocityControllerEP6ParamsPK11IBoardClock"]], "simple_flight::velocitycontroller::getgoalmode (c++ function)": [[106, "_CPPv4NK13simple_flight18VelocityController11getGoalModeEv"]], "simple_flight::velocitycontroller::getgoalvalue (c++ function)": [[106, "_CPPv4NK13simple_flight18VelocityController12getGoalValueEv"]], "simple_flight::velocitycontroller::getoutput (c++ function)": [[106, "_CPPv4N13simple_flight18VelocityController9getOutputEv"]], "simple_flight::velocitycontroller::initialize (c++ function)": [[106, "_CPPv4N13simple_flight18VelocityController10initializeEjPK5IGoalPK15IStateEstimator"]], "simple_flight::velocitycontroller::reset (c++ function)": [[106, "_CPPv4N13simple_flight18VelocityController5resetEv"]], "simple_flight::velocitycontroller::update (c++ function)": [[106, "_CPPv4N13simple_flight18VelocityController6updateEv"]], "nervosys::autonomylib::drivetraintype (c++ enum)": [[154, "_CPPv4N8nervosys11autonomylib14DrivetrainTypeE"]], "nervosys::autonomylib::drivetraintype::forwardonly (c++ enumerator)": [[154, "_CPPv4N8nervosys11autonomylib14DrivetrainType11ForwardOnlyE"]], "nervosys::autonomylib::drivetraintype::maxdegreeoffreedom (c++ enumerator)": [[154, "_CPPv4N8nervosys11autonomylib14DrivetrainType18MaxDegreeOfFreedomE"]], "nervosys::autonomylib::landedstate (c++ enum)": [[155, "_CPPv4N8nervosys11autonomylib11LandedStateE"]], "nervosys::autonomylib::landedstate::flying (c++ enumerator)": [[155, "_CPPv4N8nervosys11autonomylib11LandedState6FlyingE"]], "nervosys::autonomylib::landedstate::landed (c++ enumerator)": [[155, "_CPPv4N8nervosys11autonomylib11LandedState6LandedE"]], "nervosys::autonomylib::rotorturningdirection (c++ enum)": [[156, "_CPPv4N8nervosys11autonomylib21RotorTurningDirectionE"]], "nervosys::autonomylib::rotorturningdirection::rotorturningdirectionccw (c++ enumerator)": [[156, "_CPPv4N8nervosys11autonomylib21RotorTurningDirection24RotorTurningDirectionCCWE"]], "nervosys::autonomylib::rotorturningdirection::rotorturningdirectioncw (c++ enumerator)": [[156, "_CPPv4N8nervosys11autonomylib21RotorTurningDirection23RotorTurningDirectionCWE"]], "simple_flight::goalmodetype (c++ enum)": [[157, "_CPPv4N13simple_flight12GoalModeTypeE"]], "simple_flight::goalmodetype::anglelevel (c++ enumerator)": [[157, "_CPPv4N13simple_flight12GoalModeType10AngleLevelE"]], "simple_flight::goalmodetype::anglerate (c++ enumerator)": [[157, "_CPPv4N13simple_flight12GoalModeType9AngleRateE"]], "simple_flight::goalmodetype::constantoutput (c++ enumerator)": [[157, "_CPPv4N13simple_flight12GoalModeType14ConstantOutputE"]], "simple_flight::goalmodetype::passthrough (c++ enumerator)": [[157, "_CPPv4N13simple_flight12GoalModeType11PassthroughE"]], "simple_flight::goalmodetype::positionworld (c++ enumerator)": [[157, "_CPPv4N13simple_flight12GoalModeType13PositionWorldE"]], "simple_flight::goalmodetype::unknown (c++ enumerator)": [[157, "_CPPv4N13simple_flight12GoalModeType7UnknownE"]], "simple_flight::goalmodetype::velocityworld (c++ enumerator)": [[157, "_CPPv4N13simple_flight12GoalModeType13VelocityWorldE"]], "simple_flight::vehiclestatetype (c++ enum)": [[158, "_CPPv4N13simple_flight16VehicleStateTypeE"]], "simple_flight::vehiclestatetype::active (c++ enumerator)": [[158, "_CPPv4N13simple_flight16VehicleStateType6ActiveE"]], "simple_flight::vehiclestatetype::armed (c++ enumerator)": [[158, "_CPPv4N13simple_flight16VehicleStateType5ArmedE"]], "simple_flight::vehiclestatetype::beingarmed (c++ enumerator)": [[158, "_CPPv4N13simple_flight16VehicleStateType10BeingArmedE"]], "simple_flight::vehiclestatetype::beingdisarmed (c++ enumerator)": [[158, "_CPPv4N13simple_flight16VehicleStateType13BeingDisarmedE"]], "simple_flight::vehiclestatetype::disarmed (c++ enumerator)": [[158, "_CPPv4N13simple_flight16VehicleStateType8DisarmedE"]], "simple_flight::vehiclestatetype::inactive (c++ enumerator)": [[158, "_CPPv4N13simple_flight16VehicleStateType8InactiveE"]], "simple_flight::vehiclestatetype::unknown (c++ enumerator)": [[158, "_CPPv4N13simple_flight16VehicleStateType7UnknownE"]], "msgpack_add_enum (c++ function)": [[272, "_CPPv416MSGPACK_ADD_ENUMN8nervosys11autonomylib14DrivetrainTypeE"], [273, "_CPPv416MSGPACK_ADD_ENUMN8nervosys11autonomylib11LandedStateE"], [274, "_CPPv416MSGPACK_ADD_ENUMN8nervosys11autonomylib7GpsBase11GnssFixTypeE"], [275, "_CPPv416MSGPACK_ADD_ENUMN8nervosys11autonomylib10SafetyEval20ObsAvoidanceStrategyE"], [276, "_CPPv416MSGPACK_ADD_ENUMN8nervosys11autonomylib10SafetyEval20SafetyViolationType_E"], [277, "_CPPv416MSGPACK_ADD_ENUMN8nervosys11autonomylib15WorldSimApiBase16WeatherParameterE"], [278, "_CPPv416MSGPACK_ADD_ENUMN8nervosys11autonomylib16ImageCaptureBase9ImageTypeE"]], "nervosys::autonomylib::arducopterapi::rotorcontrolmessage (c++ struct)": [[400, "_CPPv4N8nervosys11autonomylib13ArduCopterApi19RotorControlMessageE"]], "nervosys::autonomylib::arducopterapi::rotorcontrolmessage::pwm (c++ member)": [[400, "_CPPv4N8nervosys11autonomylib13ArduCopterApi19RotorControlMessage3pwmE"]], "nervosys::autonomylib::arducoptersoloapi::rotorcontrolmessage (c++ struct)": [[401, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi19RotorControlMessageE"]], "nervosys::autonomylib::arducoptersoloapi::rotorcontrolmessage::direction (c++ member)": [[401, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi19RotorControlMessage9directionE"]], "nervosys::autonomylib::arducoptersoloapi::rotorcontrolmessage::pwm (c++ member)": [[401, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi19RotorControlMessage3pwmE"]], "nervosys::autonomylib::arducoptersoloapi::rotorcontrolmessage::speed (c++ member)": [[401, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi19RotorControlMessage5speedE"]], "nervosys::autonomylib::arducoptersoloapi::rotorcontrolmessage::turbulance (c++ member)": [[401, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi19RotorControlMessage10turbulanceE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage (c++ struct)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessageE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::airspeed (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage8airspeedE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::altitude (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage8altitudeE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::heading (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage7headingE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::latitude (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage8latitudeE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::longitude (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage9longitudeE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::magic (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage5magicE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::pitchdeg (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage8pitchDegE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::pitchrate (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage9pitchRateE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::rolldeg (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage7rollDegE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::rollrate (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage8rollRateE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::speedd (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage6speedDE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::speede (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage6speedEE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::speedn (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage6speedNE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::timestamp (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage9timestampE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::xaccel (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage6xAccelE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::yaccel (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage6yAccelE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::yawdeg (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage6yawDegE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::yawrate (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage7yawRateE"]], "nervosys::autonomylib::arducoptersoloapi::sensormessage::zaccel (c++ member)": [[402, "_CPPv4N8nervosys11autonomylib17ArduCopterSoloApi13SensorMessage6zAccelE"]], "nervosys::autonomylib::arduroverapi::rovercontrolmessage (c++ struct)": [[403, "_CPPv4N8nervosys11autonomylib12ArduRoverApi19RoverControlMessageE"]], "nervosys::autonomylib::arduroverapi::rovercontrolmessage::steering (c++ member)": [[403, "_CPPv4N8nervosys11autonomylib12ArduRoverApi19RoverControlMessage8steeringE"]], "nervosys::autonomylib::arduroverapi::rovercontrolmessage::throttle (c++ member)": [[403, "_CPPv4N8nervosys11autonomylib12ArduRoverApi19RoverControlMessage8throttleE"]], "nervosys::autonomylib::barometersimpleparams (c++ struct)": [[405, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParamsE"]], "nervosys::autonomylib::barometersimpleparams::initializefromsettings (c++ function)": [[405, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams22initializeFromSettingsERKN19AutonomySimSettings16BarometerSettingE"]], "nervosys::autonomylib::barometersimpleparams::pressure_factor_sigma (c++ member)": [[405, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams21pressure_factor_sigmaE"]], "nervosys::autonomylib::barometersimpleparams::pressure_factor_tau (c++ member)": [[405, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams19pressure_factor_tauE"]], "nervosys::autonomylib::barometersimpleparams::qnh (c++ member)": [[405, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams3qnhE"]], "nervosys::autonomylib::barometersimpleparams::startup_delay (c++ member)": [[405, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams13startup_delayE"]], "nervosys::autonomylib::barometersimpleparams::uncorrelated_noise_sigma (c++ member)": [[405, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams24uncorrelated_noise_sigmaE"]], "nervosys::autonomylib::barometersimpleparams::update_frequency (c++ member)": [[405, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams16update_frequencyE"]], "nervosys::autonomylib::barometersimpleparams::update_latency (c++ member)": [[405, "_CPPv4N8nervosys11autonomylib21BarometerSimpleParams14update_latencyE"]], "nervosys::autonomylib::distancesimpleparams (c++ struct)": [[408, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParamsE"]], "nervosys::autonomylib::distancesimpleparams::draw_debug_points (c++ member)": [[408, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams17draw_debug_pointsE"]], "nervosys::autonomylib::distancesimpleparams::external_controller (c++ member)": [[408, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams19external_controllerE"]], "nervosys::autonomylib::distancesimpleparams::initializefromsettings (c++ function)": [[408, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams22initializeFromSettingsERKN19AutonomySimSettings15DistanceSettingE"]], "nervosys::autonomylib::distancesimpleparams::max_distance (c++ member)": [[408, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams12max_distanceE"]], "nervosys::autonomylib::distancesimpleparams::min_distance (c++ member)": [[408, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams12min_distanceE"]], "nervosys::autonomylib::distancesimpleparams::relative_pose (c++ member)": [[408, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams13relative_poseE"]], "nervosys::autonomylib::distancesimpleparams::startup_delay (c++ member)": [[408, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams13startup_delayE"]], "nervosys::autonomylib::distancesimpleparams::uncorrelated_noise_sigma (c++ member)": [[408, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams24uncorrelated_noise_sigmaE"]], "nervosys::autonomylib::distancesimpleparams::update_frequency (c++ member)": [[408, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams16update_frequencyE"]], "nervosys::autonomylib::distancesimpleparams::update_latency (c++ member)": [[408, "_CPPv4N8nervosys11autonomylib20DistanceSimpleParams14update_latencyE"]], "nervosys::autonomylib::gpssimpleparams (c++ struct)": [[415, "_CPPv4N8nervosys11autonomylib15GpsSimpleParamsE"]], "nervosys::autonomylib::gpssimpleparams::eph_final (c++ member)": [[415, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams9eph_finalE"]], "nervosys::autonomylib::gpssimpleparams::eph_initial (c++ member)": [[415, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams11eph_initialE"]], "nervosys::autonomylib::gpssimpleparams::eph_min_2d (c++ member)": [[415, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams10eph_min_2dE"]], "nervosys::autonomylib::gpssimpleparams::eph_min_3d (c++ member)": [[415, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams10eph_min_3dE"]], "nervosys::autonomylib::gpssimpleparams::eph_time_constant (c++ member)": [[415, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams17eph_time_constantE"]], "nervosys::autonomylib::gpssimpleparams::epv_final (c++ member)": [[415, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams9epv_finalE"]], "nervosys::autonomylib::gpssimpleparams::epv_initial (c++ member)": [[415, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams11epv_initialE"]], "nervosys::autonomylib::gpssimpleparams::epv_time_constant (c++ member)": [[415, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams17epv_time_constantE"]], "nervosys::autonomylib::gpssimpleparams::initializefromsettings (c++ function)": [[415, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams22initializeFromSettingsERKN19AutonomySimSettings10GpsSettingE"]], "nervosys::autonomylib::gpssimpleparams::startup_delay (c++ member)": [[415, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams13startup_delayE"]], "nervosys::autonomylib::gpssimpleparams::update_frequency (c++ member)": [[415, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams16update_frequencyE"]], "nervosys::autonomylib::gpssimpleparams::update_latency (c++ member)": [[415, "_CPPv4N8nervosys11autonomylib15GpsSimpleParams14update_latencyE"]], "nervosys::autonomylib::imusimpleparams (c++ struct)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParamsE"]], "nervosys::autonomylib::imusimpleparams::accelerometer (c++ struct)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13AccelerometerE"], [417, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13AccelerometerE"]], "nervosys::autonomylib::imusimpleparams::accelerometer::bias_stability (c++ member)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13Accelerometer14bias_stabilityE"], [417, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13Accelerometer14bias_stabilityE"]], "nervosys::autonomylib::imusimpleparams::accelerometer::tau (c++ member)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13Accelerometer3tauE"], [417, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13Accelerometer3tauE"]], "nervosys::autonomylib::imusimpleparams::accelerometer::turn_on_bias (c++ member)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13Accelerometer12turn_on_biasE"], [417, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13Accelerometer12turn_on_biasE"]], "nervosys::autonomylib::imusimpleparams::accelerometer::vrw (c++ member)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13Accelerometer3vrwE"], [417, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams13Accelerometer3vrwE"]], "nervosys::autonomylib::imusimpleparams::gyroscope (c++ struct)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9GyroscopeE"], [418, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9GyroscopeE"]], "nervosys::autonomylib::imusimpleparams::gyroscope::arw (c++ member)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9Gyroscope3arwE"], [418, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9Gyroscope3arwE"]], "nervosys::autonomylib::imusimpleparams::gyroscope::bias_stability (c++ member)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9Gyroscope14bias_stabilityE"], [418, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9Gyroscope14bias_stabilityE"]], "nervosys::autonomylib::imusimpleparams::gyroscope::tau (c++ member)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9Gyroscope3tauE"], [418, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9Gyroscope3tauE"]], "nervosys::autonomylib::imusimpleparams::gyroscope::turn_on_bias (c++ member)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9Gyroscope12turn_on_biasE"], [418, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams9Gyroscope12turn_on_biasE"]], "nervosys::autonomylib::imusimpleparams::accel (c++ member)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams5accelE"]], "nervosys::autonomylib::imusimpleparams::gyro (c++ member)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams4gyroE"]], "nervosys::autonomylib::imusimpleparams::initializefromsettings (c++ function)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams22initializeFromSettingsERKN19AutonomySimSettings10ImuSettingE"]], "nervosys::autonomylib::imusimpleparams::min_sample_time (c++ member)": [[416, "_CPPv4N8nervosys11autonomylib15ImuSimpleParams15min_sample_timeE"]], "nervosys::autonomylib::imusimple::state (c++ struct)": [[419, "_CPPv4N8nervosys11autonomylib9ImuSimple5StateE"]], "nervosys::autonomylib::imusimple::state::accelerometer_bias (c++ member)": [[419, "_CPPv4N8nervosys11autonomylib9ImuSimple5State18accelerometer_biasE"]], "nervosys::autonomylib::imusimple::state::gyroscope_bias (c++ member)": [[419, "_CPPv4N8nervosys11autonomylib9ImuSimple5State14gyroscope_biasE"]], "nervosys::autonomylib::lidarsimpleparams (c++ struct)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParamsE"]], "nervosys::autonomylib::lidarsimpleparams::data_frame (c++ member)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams10data_frameE"]], "nervosys::autonomylib::lidarsimpleparams::draw_debug_points (c++ member)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams17draw_debug_pointsE"]], "nervosys::autonomylib::lidarsimpleparams::external_controller (c++ member)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams19external_controllerE"]], "nervosys::autonomylib::lidarsimpleparams::horizontal_fov_end (c++ member)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams18horizontal_FOV_endE"]], "nervosys::autonomylib::lidarsimpleparams::horizontal_fov_start (c++ member)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams20horizontal_FOV_startE"]], "nervosys::autonomylib::lidarsimpleparams::horizontal_rotation_frequency (c++ member)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams29horizontal_rotation_frequencyE"]], "nervosys::autonomylib::lidarsimpleparams::initializefromsettings (c++ function)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams22initializeFromSettingsERKN19AutonomySimSettings12LidarSettingE"]], "nervosys::autonomylib::lidarsimpleparams::number_of_channels (c++ member)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams18number_of_channelsE"]], "nervosys::autonomylib::lidarsimpleparams::points_per_second (c++ member)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams17points_per_secondE"]], "nervosys::autonomylib::lidarsimpleparams::range (c++ member)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams5rangeE"]], "nervosys::autonomylib::lidarsimpleparams::relative_pose (c++ member)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams13relative_poseE"]], "nervosys::autonomylib::lidarsimpleparams::startup_delay (c++ member)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams13startup_delayE"]], "nervosys::autonomylib::lidarsimpleparams::update_frequency (c++ member)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams16update_frequencyE"]], "nervosys::autonomylib::lidarsimpleparams::vertical_fov_lower (c++ member)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams18vertical_FOV_lowerE"]], "nervosys::autonomylib::lidarsimpleparams::vertical_fov_upper (c++ member)": [[421, "_CPPv4N8nervosys11autonomylib17LidarSimpleParams18vertical_FOV_upperE"]], "nervosys::autonomylib::magnetometersimpleparams (c++ struct)": [[423, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParamsE"]], "nervosys::autonomylib::magnetometersimpleparams::referencesource (c++ enum)": [[423, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams15ReferenceSourceE"]], "nervosys::autonomylib::magnetometersimpleparams::referencesource::referencesource_constant (c++ enumerator)": [[423, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams15ReferenceSource24ReferenceSource_ConstantE"]], "nervosys::autonomylib::magnetometersimpleparams::referencesource::referencesource_dipolemodel (c++ enumerator)": [[423, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams15ReferenceSource27ReferenceSource_DipoleModelE"]], "nervosys::autonomylib::magnetometersimpleparams::dynamic_reference_source (c++ member)": [[423, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams24dynamic_reference_sourceE"]], "nervosys::autonomylib::magnetometersimpleparams::initializefromsettings (c++ function)": [[423, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams22initializeFromSettingsERKN19AutonomySimSettings19MagnetometerSettingE"]], "nervosys::autonomylib::magnetometersimpleparams::noise_bias (c++ member)": [[423, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams10noise_biasE"]], "nervosys::autonomylib::magnetometersimpleparams::noise_sigma (c++ member)": [[423, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams11noise_sigmaE"]], "nervosys::autonomylib::magnetometersimpleparams::ref_source (c++ member)": [[423, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams10ref_sourceE"]], "nervosys::autonomylib::magnetometersimpleparams::ref_update_frequency (c++ member)": [[423, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams20ref_update_frequencyE"]], "nervosys::autonomylib::magnetometersimpleparams::scale_factor (c++ member)": [[423, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams12scale_factorE"]], "nervosys::autonomylib::magnetometersimpleparams::startup_delay (c++ member)": [[423, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams13startup_delayE"]], "nervosys::autonomylib::magnetometersimpleparams::update_frequency (c++ member)": [[423, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams16update_frequencyE"]], "nervosys::autonomylib::magnetometersimpleparams::update_latency (c++ member)": [[423, "_CPPv4N8nervosys11autonomylib24MagnetometerSimpleParams14update_latencyE"]], "nervosys::autonomylib::multirotorapibase::pathposition (c++ struct)": [[424, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12PathPositionE"]], "nervosys::autonomylib::multirotorapibase::pathposition::offset (c++ member)": [[424, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12PathPosition6offsetE"]], "nervosys::autonomylib::multirotorapibase::pathposition::position (c++ member)": [[424, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12PathPosition8positionE"]], "nervosys::autonomylib::multirotorapibase::pathposition::seg_index (c++ member)": [[424, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase12PathPosition9seg_indexE"]], "nervosys::autonomylib::multirotorapibase::pathsegment (c++ struct)": [[425, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegmentE"]], "nervosys::autonomylib::multirotorapibase::pathsegment::pathsegment (c++ function)": [[425, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment11PathSegmentERK8Vector3rRK8Vector3rff"]], "nervosys::autonomylib::multirotorapibase::pathsegment::seg (c++ member)": [[425, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment3segE"]], "nervosys::autonomylib::multirotorapibase::pathsegment::seg_length (c++ member)": [[425, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment10seg_lengthE"]], "nervosys::autonomylib::multirotorapibase::pathsegment::seg_normalized (c++ member)": [[425, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment14seg_normalizedE"]], "nervosys::autonomylib::multirotorapibase::pathsegment::seg_path_length (c++ member)": [[425, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment15seg_path_lengthE"]], "nervosys::autonomylib::multirotorapibase::pathsegment::seg_velocity (c++ member)": [[425, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment12seg_velocityE"]], "nervosys::autonomylib::multirotorapibase::pathsegment::start_z (c++ member)": [[425, "_CPPv4N8nervosys11autonomylib17MultirotorApiBase11PathSegment7start_zE"]], "nervosys::autonomylib::multirotorapiparams (c++ struct)": [[427, "_CPPv4N8nervosys11autonomylib19MultirotorApiParamsE"]], "nervosys::autonomylib::multirotorapiparams::multirotorapiparams (c++ function)": [[427, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams19MultirotorApiParamsEv"]], "nervosys::autonomylib::multirotorapiparams::breaking_vel (c++ member)": [[427, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams12breaking_velE"]], "nervosys::autonomylib::multirotorapiparams::distance_accuracy (c++ member)": [[427, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams17distance_accuracyE"]], "nervosys::autonomylib::multirotorapiparams::max_breaking_dist (c++ member)": [[427, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams17max_breaking_distE"]], "nervosys::autonomylib::multirotorapiparams::min_breaking_dist (c++ member)": [[427, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams17min_breaking_distE"]], "nervosys::autonomylib::multirotorapiparams::min_vel_for_breaking (c++ member)": [[427, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams20min_vel_for_breakingE"]], "nervosys::autonomylib::multirotorapiparams::obs_clearance (c++ member)": [[427, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams13obs_clearanceE"]], "nervosys::autonomylib::multirotorapiparams::obs_window (c++ member)": [[427, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams10obs_windowE"]], "nervosys::autonomylib::multirotorapiparams::vel_to_breaking_dist (c++ member)": [[427, "_CPPv4N8nervosys11autonomylib19MultirotorApiParams20vel_to_breaking_distE"]], "nervosys::autonomylib::multirotorstate (c++ struct)": [[431, "_CPPv4N8nervosys11autonomylib15MultirotorStateE"]], "nervosys::autonomylib::multirotorstate::multirotorstate (c++ function)": [[431, "_CPPv4N8nervosys11autonomylib15MultirotorState15MultirotorStateERK13CollisionInfoRKN10Kinematics5StateERK8GeoPoint8uint64_t11LandedStateRK6RCDatabRKNSt6stringEb"], [431, "_CPPv4N8nervosys11autonomylib15MultirotorState15MultirotorStateEv"]], "nervosys::autonomylib::multirotorstate::can_arm (c++ member)": [[431, "_CPPv4N8nervosys11autonomylib15MultirotorState7can_armE"]], "nervosys::autonomylib::multirotorstate::collision (c++ member)": [[431, "_CPPv4N8nervosys11autonomylib15MultirotorState9collisionE"]], "nervosys::autonomylib::multirotorstate::getorientation (c++ function)": [[431, "_CPPv4NK8nervosys11autonomylib15MultirotorState14getOrientationEv"]], "nervosys::autonomylib::multirotorstate::getposition (c++ function)": [[431, "_CPPv4NK8nervosys11autonomylib15MultirotorState11getPositionEv"]], "nervosys::autonomylib::multirotorstate::gps_location (c++ member)": [[431, "_CPPv4N8nervosys11autonomylib15MultirotorState12gps_locationE"]], "nervosys::autonomylib::multirotorstate::kinematics_estimated (c++ member)": [[431, "_CPPv4N8nervosys11autonomylib15MultirotorState20kinematics_estimatedE"]], "nervosys::autonomylib::multirotorstate::landed_state (c++ member)": [[431, "_CPPv4N8nervosys11autonomylib15MultirotorState12landed_stateE"]], "nervosys::autonomylib::multirotorstate::rc_data (c++ member)": [[431, "_CPPv4N8nervosys11autonomylib15MultirotorState7rc_dataE"]], "nervosys::autonomylib::multirotorstate::ready (c++ member)": [[431, "_CPPv4N8nervosys11autonomylib15MultirotorState5readyE"]], "nervosys::autonomylib::multirotorstate::ready_message (c++ member)": [[431, "_CPPv4N8nervosys11autonomylib15MultirotorState13ready_messageE"]], "nervosys::autonomylib::multirotorstate::timestamp (c++ member)": [[431, "_CPPv4N8nervosys11autonomylib15MultirotorState9timestampE"]], "nervosys::autonomylib::rotorparameters (c++ struct)": [[434, "_CPPv4N8nervosys11autonomylib15RotorParametersE"]], "nervosys::autonomylib::rotorparameters::rotorparameters (c++ function)": [[434, "_CPPv4N8nervosys11autonomylib15RotorParameters15RotorParametersERK6real_TRK6real_TRK6real_T"], [434, "_CPPv4N8nervosys11autonomylib15RotorParameters15RotorParametersEv"]], "nervosys::autonomylib::rotorparameters::speed (c++ member)": [[434, "_CPPv4N8nervosys11autonomylib15RotorParameters5speedE"]], "nervosys::autonomylib::rotorparameters::thrust (c++ member)": [[434, "_CPPv4N8nervosys11autonomylib15RotorParameters6thrustE"]], "nervosys::autonomylib::rotorparameters::torque_scaler (c++ member)": [[434, "_CPPv4N8nervosys11autonomylib15RotorParameters13torque_scalerE"]], "nervosys::autonomylib::rotorparameters::update (c++ function)": [[434, "_CPPv4N8nervosys11autonomylib15RotorParameters6updateERK6real_TRK6real_TRK6real_T"]], "nervosys::autonomylib::rotorparams (c++ struct)": [[435, "_CPPv4N8nervosys11autonomylib11RotorParamsE"]], "nervosys::autonomylib::rotorparams::c_p (c++ member)": [[435, "_CPPv4N8nervosys11autonomylib11RotorParams3C_PE"]], "nervosys::autonomylib::rotorparams::c_t (c++ member)": [[435, "_CPPv4N8nervosys11autonomylib11RotorParams3C_TE"]], "nervosys::autonomylib::rotorparams::air_density (c++ member)": [[435, "_CPPv4N8nervosys11autonomylib11RotorParams11air_densityE"]], "nervosys::autonomylib::rotorparams::calculatemaxthrust (c++ function)": [[435, "_CPPv4N8nervosys11autonomylib11RotorParams18calculateMaxThrustEv"]], "nervosys::autonomylib::rotorparams::control_signal_filter_tc (c++ member)": [[435, "_CPPv4N8nervosys11autonomylib11RotorParams24control_signal_filter_tcE"]], "nervosys::autonomylib::rotorparams::max_rpm (c++ member)": [[435, "_CPPv4N8nervosys11autonomylib11RotorParams7max_rpmE"]], "nervosys::autonomylib::rotorparams::max_speed (c++ member)": [[435, "_CPPv4N8nervosys11autonomylib11RotorParams9max_speedE"]], "nervosys::autonomylib::rotorparams::max_speed_square (c++ member)": [[435, "_CPPv4N8nervosys11autonomylib11RotorParams16max_speed_squareE"]], "nervosys::autonomylib::rotorparams::max_thrust (c++ member)": [[435, "_CPPv4N8nervosys11autonomylib11RotorParams10max_thrustE"]], "nervosys::autonomylib::rotorparams::max_torque (c++ member)": [[435, "_CPPv4N8nervosys11autonomylib11RotorParams10max_torqueE"]], "nervosys::autonomylib::rotorparams::propeller_diameter (c++ member)": [[435, "_CPPv4N8nervosys11autonomylib11RotorParams18propeller_diameterE"]], "nervosys::autonomylib::rotorparams::propeller_height (c++ member)": [[435, "_CPPv4N8nervosys11autonomylib11RotorParams16propeller_heightE"]], "nervosys::autonomylib::rotorparams::revolutions_per_second (c++ member)": [[435, "_CPPv4N8nervosys11autonomylib11RotorParams22revolutions_per_secondE"]], "nervosys::autonomylib::rotorstates (c++ struct)": [[436, "_CPPv4N8nervosys11autonomylib11RotorStatesE"]], "nervosys::autonomylib::rotorstates::rotorstates (c++ function)": [[436, "_CPPv4N8nervosys11autonomylib11RotorStates11RotorStatesERKNSt6vectorI15RotorParametersEE8uint64_t"], [436, "_CPPv4N8nervosys11autonomylib11RotorStates11RotorStatesEv"]], "nervosys::autonomylib::rotorstates::rotors (c++ member)": [[436, "_CPPv4N8nervosys11autonomylib11RotorStates6rotorsE"]], "nervosys::autonomylib::rotorstates::timestamp (c++ member)": [[436, "_CPPv4N8nervosys11autonomylib11RotorStates9timestampE"]], "nervosys::autonomylib::yawmode (c++ struct)": [[441, "_CPPv4N8nervosys11autonomylib7YawModeE"]], "nervosys::autonomylib::yawmode::yawmode (c++ function)": [[441, "_CPPv4N8nervosys11autonomylib7YawMode7YawModeEbf"], [441, "_CPPv4N8nervosys11autonomylib7YawMode7YawModeEv"]], "nervosys::autonomylib::yawmode::zero (c++ function)": [[441, "_CPPv4N8nervosys11autonomylib7YawMode4ZeroEv"]], "nervosys::autonomylib::yawmode::is_rate (c++ member)": [[441, "_CPPv4N8nervosys11autonomylib7YawMode7is_rateE"]], "nervosys::autonomylib::yawmode::setzerorate (c++ function)": [[441, "_CPPv4N8nervosys11autonomylib7YawMode11setZeroRateEv"]], "nervosys::autonomylib::yawmode::yaw_or_rate (c++ member)": [[441, "_CPPv4N8nervosys11autonomylib7YawMode11yaw_or_rateE"]], "simple_flight::geopoint (c++ struct)": [[472, "_CPPv4N13simple_flight8GeoPointE"]], "simple_flight::geopoint::geopoint (c++ function)": [[472, "_CPPv4N13simple_flight8GeoPoint8GeoPointEv"]], "simple_flight::geopoint::altiude (c++ member)": [[472, "_CPPv4N13simple_flight8GeoPoint7altiudeE"]], "simple_flight::geopoint::latitude (c++ member)": [[472, "_CPPv4N13simple_flight8GeoPoint8latitudeE"]], "simple_flight::geopoint::longitude (c++ member)": [[472, "_CPPv4N13simple_flight8GeoPoint9longitudeE"]], "simple_flight::geopoint::nan (c++ function)": [[472, "_CPPv4N13simple_flight8GeoPoint3nanEv"]], "simple_flight::kinematicsstate (c++ struct)": [[473, "_CPPv4N13simple_flight15KinematicsStateE"]], "simple_flight::kinematicsstate::angular_acceleration (c++ member)": [[473, "_CPPv4N13simple_flight15KinematicsState20angular_accelerationE"]], "simple_flight::kinematicsstate::angular_velocity (c++ member)": [[473, "_CPPv4N13simple_flight15KinematicsState16angular_velocityE"]], "simple_flight::kinematicsstate::linear_acceleration (c++ member)": [[473, "_CPPv4N13simple_flight15KinematicsState19linear_accelerationE"]], "simple_flight::kinematicsstate::linear_velocity (c++ member)": [[473, "_CPPv4N13simple_flight15KinematicsState15linear_velocityE"]], "simple_flight::kinematicsstate::orientation (c++ member)": [[473, "_CPPv4N13simple_flight15KinematicsState11orientationE"]], "simple_flight::kinematicsstate::position (c++ member)": [[473, "_CPPv4N13simple_flight15KinematicsState8positionE"]], "simple_flight::mixer::motormixer_t (c++ struct)": [[474, "_CPPv4N13simple_flight5Mixer12motorMixer_tE"]], "simple_flight::mixer::motormixer_t::pitch (c++ member)": [[474, "_CPPv4N13simple_flight5Mixer12motorMixer_t5pitchE"]], "simple_flight::mixer::motormixer_t::roll (c++ member)": [[474, "_CPPv4N13simple_flight5Mixer12motorMixer_t4rollE"]], "simple_flight::mixer::motormixer_t::throttle (c++ member)": [[474, "_CPPv4N13simple_flight5Mixer12motorMixer_t8throttleE"]], "simple_flight::mixer::motormixer_t::yaw (c++ member)": [[474, "_CPPv4N13simple_flight5Mixer12motorMixer_t3yawE"]], "simple_flight::params (c++ struct)": [[475, "_CPPv4N13simple_flight6ParamsE"]], "simple_flight::params::anglelevelpid (c++ struct)": [[475, "_CPPv4N13simple_flight6Params13AngleLevelPidE"], [476, "_CPPv4N13simple_flight6Params13AngleLevelPidE"]], "simple_flight::params::anglelevelpid::d (c++ member)": [[475, "_CPPv4N13simple_flight6Params13AngleLevelPid1dE"], [476, "_CPPv4N13simple_flight6Params13AngleLevelPid1dE"]], "simple_flight::params::anglelevelpid::i (c++ member)": [[475, "_CPPv4N13simple_flight6Params13AngleLevelPid1iE"], [476, "_CPPv4N13simple_flight6Params13AngleLevelPid1iE"]], "simple_flight::params::anglelevelpid::kd (c++ member)": [[475, "_CPPv4N13simple_flight6Params13AngleLevelPid2kDE"], [476, "_CPPv4N13simple_flight6Params13AngleLevelPid2kDE"]], "simple_flight::params::anglelevelpid::ki (c++ member)": [[475, "_CPPv4N13simple_flight6Params13AngleLevelPid2kIE"], [476, "_CPPv4N13simple_flight6Params13AngleLevelPid2kIE"]], "simple_flight::params::anglelevelpid::kp (c++ member)": [[475, "_CPPv4N13simple_flight6Params13AngleLevelPid2kPE"], [476, "_CPPv4N13simple_flight6Params13AngleLevelPid2kPE"]], "simple_flight::params::anglelevelpid::max_limit (c++ member)": [[475, "_CPPv4N13simple_flight6Params13AngleLevelPid9max_limitE"], [476, "_CPPv4N13simple_flight6Params13AngleLevelPid9max_limitE"]], "simple_flight::params::anglelevelpid::p (c++ member)": [[475, "_CPPv4N13simple_flight6Params13AngleLevelPid1pE"], [476, "_CPPv4N13simple_flight6Params13AngleLevelPid1pE"]], "simple_flight::params::anglelevelpid::pi (c++ member)": [[475, "_CPPv4N13simple_flight6Params13AngleLevelPid2piE"], [476, "_CPPv4N13simple_flight6Params13AngleLevelPid2piE"]], "simple_flight::params::angleratepid (c++ struct)": [[475, "_CPPv4N13simple_flight6Params12AngleRatePidE"], [477, "_CPPv4N13simple_flight6Params12AngleRatePidE"]], "simple_flight::params::angleratepid::d (c++ member)": [[475, "_CPPv4N13simple_flight6Params12AngleRatePid1dE"], [477, "_CPPv4N13simple_flight6Params12AngleRatePid1dE"]], "simple_flight::params::angleratepid::i (c++ member)": [[475, "_CPPv4N13simple_flight6Params12AngleRatePid1iE"], [477, "_CPPv4N13simple_flight6Params12AngleRatePid1iE"]], "simple_flight::params::angleratepid::kd (c++ member)": [[475, "_CPPv4N13simple_flight6Params12AngleRatePid2kDE"], [477, "_CPPv4N13simple_flight6Params12AngleRatePid2kDE"]], "simple_flight::params::angleratepid::ki (c++ member)": [[475, "_CPPv4N13simple_flight6Params12AngleRatePid2kIE"], [477, "_CPPv4N13simple_flight6Params12AngleRatePid2kIE"]], "simple_flight::params::angleratepid::kmaxlimit (c++ member)": [[475, "_CPPv4N13simple_flight6Params12AngleRatePid9kMaxLimitE"], [477, "_CPPv4N13simple_flight6Params12AngleRatePid9kMaxLimitE"]], "simple_flight::params::angleratepid::kp (c++ member)": [[475, "_CPPv4N13simple_flight6Params12AngleRatePid2kPE"], [477, "_CPPv4N13simple_flight6Params12AngleRatePid2kPE"]], "simple_flight::params::angleratepid::max_limit (c++ member)": [[475, "_CPPv4N13simple_flight6Params12AngleRatePid9max_limitE"], [477, "_CPPv4N13simple_flight6Params12AngleRatePid9max_limitE"]], "simple_flight::params::angleratepid::p (c++ member)": [[475, "_CPPv4N13simple_flight6Params12AngleRatePid1pE"], [477, "_CPPv4N13simple_flight6Params12AngleRatePid1pE"]], "simple_flight::params::controllertype (c++ enum)": [[475, "_CPPv4N13simple_flight6Params14ControllerTypeE"]], "simple_flight::params::controllertype::adaptive (c++ enumerator)": [[475, "_CPPv4N13simple_flight6Params14ControllerType8AdaptiveE"]], "simple_flight::params::controllertype::cascade (c++ enumerator)": [[475, "_CPPv4N13simple_flight6Params14ControllerType7CascadeE"]], "simple_flight::params::motor (c++ struct)": [[475, "_CPPv4N13simple_flight6Params5MotorE"], [478, "_CPPv4N13simple_flight6Params5MotorE"]], "simple_flight::params::motor::max_motor_output (c++ member)": [[475, "_CPPv4N13simple_flight6Params5Motor16max_motor_outputE"], [478, "_CPPv4N13simple_flight6Params5Motor16max_motor_outputE"]], "simple_flight::params::motor::min_angling_throttle (c++ member)": [[475, "_CPPv4N13simple_flight6Params5Motor20min_angling_throttleE"], [478, "_CPPv4N13simple_flight6Params5Motor20min_angling_throttleE"]], "simple_flight::params::motor::min_motor_output (c++ member)": [[475, "_CPPv4N13simple_flight6Params5Motor16min_motor_outputE"], [478, "_CPPv4N13simple_flight6Params5Motor16min_motor_outputE"]], "simple_flight::params::motor::motor_count (c++ member)": [[475, "_CPPv4N13simple_flight6Params5Motor11motor_countE"], [478, "_CPPv4N13simple_flight6Params5Motor11motor_countE"]], "simple_flight::params::positionpid (c++ struct)": [[475, "_CPPv4N13simple_flight6Params11PositionPidE"], [479, "_CPPv4N13simple_flight6Params11PositionPidE"]], "simple_flight::params::positionpid::d (c++ member)": [[475, "_CPPv4N13simple_flight6Params11PositionPid1dE"], [479, "_CPPv4N13simple_flight6Params11PositionPid1dE"]], "simple_flight::params::positionpid::i (c++ member)": [[475, "_CPPv4N13simple_flight6Params11PositionPid1iE"], [479, "_CPPv4N13simple_flight6Params11PositionPid1iE"]], "simple_flight::params::positionpid::kd (c++ member)": [[475, "_CPPv4N13simple_flight6Params11PositionPid2kDE"], [479, "_CPPv4N13simple_flight6Params11PositionPid2kDE"]], "simple_flight::params::positionpid::ki (c++ member)": [[475, "_CPPv4N13simple_flight6Params11PositionPid2kIE"], [479, "_CPPv4N13simple_flight6Params11PositionPid2kIE"]], "simple_flight::params::positionpid::kmaxlimit (c++ member)": [[475, "_CPPv4N13simple_flight6Params11PositionPid9kMaxLimitE"], [479, "_CPPv4N13simple_flight6Params11PositionPid9kMaxLimitE"]], "simple_flight::params::positionpid::kp (c++ member)": [[475, "_CPPv4N13simple_flight6Params11PositionPid2kPE"], [479, "_CPPv4N13simple_flight6Params11PositionPid2kPE"]], "simple_flight::params::positionpid::max_limit (c++ member)": [[475, "_CPPv4N13simple_flight6Params11PositionPid9max_limitE"], [479, "_CPPv4N13simple_flight6Params11PositionPid9max_limitE"]], "simple_flight::params::positionpid::p (c++ member)": [[475, "_CPPv4N13simple_flight6Params11PositionPid1pE"], [479, "_CPPv4N13simple_flight6Params11PositionPid1pE"]], "simple_flight::params::rc (c++ struct)": [[475, "_CPPv4N13simple_flight6Params2RcE"], [480, "_CPPv4N13simple_flight6Params2RcE"]], "simple_flight::params::rc::action_request_tolerance (c++ member)": [[475, "_CPPv4N13simple_flight6Params2Rc24action_request_toleranceE"], [480, "_CPPv4N13simple_flight6Params2Rc24action_request_toleranceE"]], "simple_flight::params::rc::allow_api_always (c++ member)": [[475, "_CPPv4N13simple_flight6Params2Rc16allow_api_alwaysE"], [480, "_CPPv4N13simple_flight6Params2Rc16allow_api_alwaysE"]], "simple_flight::params::rc::allow_api_control_channel (c++ member)": [[475, "_CPPv4N13simple_flight6Params2Rc25allow_api_control_channelE"], [480, "_CPPv4N13simple_flight6Params2Rc25allow_api_control_channelE"]], "simple_flight::params::rc::allow_api_when_disconnected (c++ member)": [[475, "_CPPv4N13simple_flight6Params2Rc27allow_api_when_disconnectedE"], [480, "_CPPv4N13simple_flight6Params2Rc27allow_api_when_disconnectedE"]], "simple_flight::params::rc::arm_duration (c++ member)": [[475, "_CPPv4N13simple_flight6Params2Rc12arm_durationE"], [480, "_CPPv4N13simple_flight6Params2Rc12arm_durationE"]], "simple_flight::params::rc::channel_count (c++ member)": [[475, "_CPPv4N13simple_flight6Params2Rc13channel_countE"], [480, "_CPPv4N13simple_flight6Params2Rc13channel_countE"]], "simple_flight::params::rc::channels (c++ member)": [[475, "_CPPv4N13simple_flight6Params2Rc8channelsE"], [480, "_CPPv4N13simple_flight6Params2Rc8channelsE"]], "simple_flight::params::rc::disarm_duration (c++ member)": [[475, "_CPPv4N13simple_flight6Params2Rc15disarm_durationE"], [480, "_CPPv4N13simple_flight6Params2Rc15disarm_durationE"]], "simple_flight::params::rc::max_angle_level_switch (c++ member)": [[475, "_CPPv4N13simple_flight6Params2Rc22max_angle_level_switchE"], [480, "_CPPv4N13simple_flight6Params2Rc22max_angle_level_switchE"]], "simple_flight::params::rc::min_angling_throttle (c++ member)": [[475, "_CPPv4N13simple_flight6Params2Rc20min_angling_throttleE"], [480, "_CPPv4N13simple_flight6Params2Rc20min_angling_throttleE"]], "simple_flight::params::rc::neutral_duration (c++ member)": [[475, "_CPPv4N13simple_flight6Params2Rc16neutral_durationE"], [480, "_CPPv4N13simple_flight6Params2Rc16neutral_durationE"]], "simple_flight::params::rc::rate_level_mode_channel (c++ member)": [[475, "_CPPv4N13simple_flight6Params2Rc23rate_level_mode_channelE"], [480, "_CPPv4N13simple_flight6Params2Rc23rate_level_mode_channelE"]], "simple_flight::params::rc::read_interval_ms (c++ member)": [[475, "_CPPv4N13simple_flight6Params2Rc16read_interval_msE"], [480, "_CPPv4N13simple_flight6Params2Rc16read_interval_msE"]], "simple_flight::params::takeoff (c++ struct)": [[475, "_CPPv4N13simple_flight6Params7TakeoffE"], [481, "_CPPv4N13simple_flight6Params7TakeoffE"]], "simple_flight::params::takeoff::takeoff_z (c++ member)": [[475, "_CPPv4N13simple_flight6Params7Takeoff9takeoff_zE"], [481, "_CPPv4N13simple_flight6Params7Takeoff9takeoff_zE"]], "simple_flight::params::velocitypid (c++ struct)": [[475, "_CPPv4N13simple_flight6Params11VelocityPidE"], [482, "_CPPv4N13simple_flight6Params11VelocityPidE"]], "simple_flight::params::velocitypid::d (c++ member)": [[475, "_CPPv4N13simple_flight6Params11VelocityPid1dE"], [482, "_CPPv4N13simple_flight6Params11VelocityPid1dE"]], "simple_flight::params::velocitypid::i (c++ member)": [[475, "_CPPv4N13simple_flight6Params11VelocityPid1iE"], [482, "_CPPv4N13simple_flight6Params11VelocityPid1iE"]], "simple_flight::params::velocitypid::iterm_discount (c++ member)": [[475, "_CPPv4N13simple_flight6Params11VelocityPid14iterm_discountE"], [482, "_CPPv4N13simple_flight6Params11VelocityPid14iterm_discountE"]], "simple_flight::params::velocitypid::kd (c++ member)": [[475, "_CPPv4N13simple_flight6Params11VelocityPid2kDE"], [482, "_CPPv4N13simple_flight6Params11VelocityPid2kDE"]], "simple_flight::params::velocitypid::ki (c++ member)": [[475, "_CPPv4N13simple_flight6Params11VelocityPid2kIE"], [482, "_CPPv4N13simple_flight6Params11VelocityPid2kIE"]], "simple_flight::params::velocitypid::kmaxlimit (c++ member)": [[475, "_CPPv4N13simple_flight6Params11VelocityPid9kMaxLimitE"], [482, "_CPPv4N13simple_flight6Params11VelocityPid9kMaxLimitE"]], "simple_flight::params::velocitypid::kminthrottle (c++ member)": [[475, "_CPPv4N13simple_flight6Params11VelocityPid12kMinThrottleE"], [482, "_CPPv4N13simple_flight6Params11VelocityPid12kMinThrottleE"]], "simple_flight::params::velocitypid::kp (c++ member)": [[475, "_CPPv4N13simple_flight6Params11VelocityPid2kPE"], [482, "_CPPv4N13simple_flight6Params11VelocityPid2kPE"]], "simple_flight::params::velocitypid::max_limit (c++ member)": [[475, "_CPPv4N13simple_flight6Params11VelocityPid9max_limitE"], [482, "_CPPv4N13simple_flight6Params11VelocityPid9max_limitE"]], "simple_flight::params::velocitypid::min_throttle (c++ member)": [[475, "_CPPv4N13simple_flight6Params11VelocityPid12min_throttleE"], [482, "_CPPv4N13simple_flight6Params11VelocityPid12min_throttleE"]], "simple_flight::params::velocitypid::output_bias (c++ member)": [[475, "_CPPv4N13simple_flight6Params11VelocityPid11output_biasE"], [482, "_CPPv4N13simple_flight6Params11VelocityPid11output_biasE"]], "simple_flight::params::velocitypid::p (c++ member)": [[475, "_CPPv4N13simple_flight6Params11VelocityPid1pE"], [482, "_CPPv4N13simple_flight6Params11VelocityPid1pE"]], "simple_flight::params::angle_level_pid (c++ member)": [[475, "_CPPv4N13simple_flight6Params15angle_level_pidE"]], "simple_flight::params::angle_rate_pid (c++ member)": [[475, "_CPPv4N13simple_flight6Params14angle_rate_pidE"]], "simple_flight::params::api_goal_timeout (c++ member)": [[475, "_CPPv4N13simple_flight6Params16api_goal_timeoutE"]], "simple_flight::params::controller_type (c++ member)": [[475, "_CPPv4N13simple_flight6Params15controller_typeE"]], "simple_flight::params::default_goal_mode (c++ member)": [[475, "_CPPv4N13simple_flight6Params17default_goal_modeE"]], "simple_flight::params::default_vehicle_state (c++ member)": [[475, "_CPPv4N13simple_flight6Params21default_vehicle_stateE"]], "simple_flight::params::gains_changed (c++ member)": [[475, "_CPPv4N13simple_flight6Params13gains_changedE"]], "simple_flight::params::min_armed_throttle (c++ function)": [[475, "_CPPv4N13simple_flight6Params18min_armed_throttleEv"]], "simple_flight::params::motor (c++ member)": [[475, "_CPPv4N13simple_flight6Params5motorE"]], "simple_flight::params::position_pid (c++ member)": [[475, "_CPPv4N13simple_flight6Params12position_pidE"]], "simple_flight::params::rc (c++ member)": [[475, "_CPPv4N13simple_flight6Params2rcE"]], "simple_flight::params::takeoff (c++ member)": [[475, "_CPPv4N13simple_flight6Params7takeoffE"]], "simple_flight::params::velocity_pid (c++ member)": [[475, "_CPPv4N13simple_flight6Params12velocity_pidE"]], "simple_flight::pidconfig (c++ struct)": [[483, "_CPPv4I0EN13simple_flight9PidConfigE"]], "simple_flight::pidconfig::integratortype (c++ enum)": [[483, "_CPPv4N13simple_flight9PidConfig14IntegratorTypeE"]], "simple_flight::pidconfig::integratortype::rungkutta (c++ enumerator)": [[483, "_CPPv4N13simple_flight9PidConfig14IntegratorType9RungKuttaE"]], "simple_flight::pidconfig::integratortype::standard (c++ enumerator)": [[483, "_CPPv4N13simple_flight9PidConfig14IntegratorType8StandardE"]], "simple_flight::pidconfig::pidconfig (c++ function)": [[483, "_CPPv4N13simple_flight9PidConfig9PidConfigEfff1T1Tfb1Tf"]], "simple_flight::pidconfig::enabled (c++ member)": [[483, "_CPPv4N13simple_flight9PidConfig7enabledE"]], "simple_flight::pidconfig::integrator_type (c++ member)": [[483, "_CPPv4N13simple_flight9PidConfig15integrator_typeE"]], "simple_flight::pidconfig::iterm_discount (c++ member)": [[483, "_CPPv4N13simple_flight9PidConfig14iterm_discountE"]], "simple_flight::pidconfig::kd (c++ member)": [[483, "_CPPv4N13simple_flight9PidConfig2kdE"]], "simple_flight::pidconfig::ki (c++ member)": [[483, "_CPPv4N13simple_flight9PidConfig2kiE"]], "simple_flight::pidconfig::kp (c++ member)": [[483, "_CPPv4N13simple_flight9PidConfig2kpE"]], "simple_flight::pidconfig::max_output (c++ member)": [[483, "_CPPv4N13simple_flight9PidConfig10max_outputE"]], "simple_flight::pidconfig::min_output (c++ member)": [[483, "_CPPv4N13simple_flight9PidConfig10min_outputE"]], "simple_flight::pidconfig::output_bias (c++ member)": [[483, "_CPPv4N13simple_flight9PidConfig11output_biasE"]], "simple_flight::pidconfig::time_scale (c++ member)": [[483, "_CPPv4N13simple_flight9PidConfig10time_scaleE"]], "nervosys::autonomylib::rpclibadaptorsbase (c++ type)": [[484, "_CPPv4N8nervosys11autonomylib18RpcLibAdaptorsBaseE"]], "nervosys::autonomylib::carrpclibadaptors (c++ type)": [[485, "_CPPv4N8nervosys11autonomylib17CarRpcLibAdaptorsE"]], "nervosys::autonomylib::multirotorrpclibadaptors (c++ type)": [[486, "_CPPv4N8nervosys11autonomylib24MultirotorRpcLibAdaptorsE"]], "simple_flight::treal (c++ type)": [[487, "_CPPv4N13simple_flight5TRealE"]], "simple_flight::axis4r (c++ type)": [[488, "_CPPv4N13simple_flight6Axis4rE"]], "simple_flight::axis3r (c++ type)": [[489, "_CPPv4N13simple_flight6Axis3rE"]], "html_theme (conf attribute)": [[491, "conf.html_theme"]], "version (conf attribute)": [[492, "conf.version"]], "author (conf attribute)": [[493, "conf.author"]], "breathe_default_project (conf attribute)": [[494, "conf.breathe_default_project"]], "latex_elements (conf attribute)": [[495, "conf.latex_elements"]], "autosectionlabel_maxdepth (conf attribute)": [[496, "conf.autosectionlabel_maxdepth"]], "project (conf attribute)": [[497, "conf.project"]], "primary_domain (conf attribute)": [[498, "conf.primary_domain"]], "html_style (conf attribute)": [[499, "conf.html_style"]], "texinfo_documents (conf attribute)": [[500, "conf.texinfo_documents"]], "html_css_files (conf attribute)": [[501, "conf.html_css_files"]], "epub_exclude_files (conf attribute)": [[502, "conf.epub_exclude_files"]], "latex_documents (conf attribute)": [[503, "conf.latex_documents"]], "exclude_patterns (conf attribute)": [[504, "conf.exclude_patterns"]], "man_pages (conf attribute)": [[505, "conf.man_pages"]], "autosummary_generate (conf attribute)": [[506, "conf.autosummary_generate"]], "todo_include_todos (conf attribute)": [[507, "conf.todo_include_todos"]], "html_theme_options (conf attribute)": [[508, "conf.html_theme_options"]], "intersphinx_mapping (conf attribute)": [[509, "conf.intersphinx_mapping"]], "copyright (conf attribute)": [[510, "conf.copyright"]], "master_doc (conf attribute)": [[511, "conf.master_doc"]], "autodoc_default_flags (conf attribute)": [[512, "conf.autodoc_default_flags"]], "html_js_files (conf attribute)": [[513, "conf.html_js_files"]], "language (conf attribute)": [[514, "conf.language"]], "highlight_language (conf attribute)": [[515, "conf.highlight_language"]], "autosectionlabel_prefix_document (conf attribute)": [[516, "conf.autosectionlabel_prefix_document"]], "release (conf attribute)": [[517, "conf.release"]], "source_suffix (conf attribute)": [[518, "conf.source_suffix"]], "breathe_projects (conf attribute)": [[519, "conf.breathe_projects"]], "htmlhelp_basename (conf attribute)": [[520, "conf.htmlhelp_basename"]], "extensions (conf attribute)": [[521, "conf.extensions"]], "templates_path (conf attribute)": [[522, "conf.templates_path"]], "pygments_style (conf attribute)": [[523, "conf.pygments_style"]], "epub_title (conf attribute)": [[524, "conf.epub_title"]], "html_static_path (conf attribute)": [[525, "conf.html_static_path"]], "exhale_args (conf attribute)": [[526, "conf.exhale_args"]], "html_title (conf attribute)": [[527, "conf.html_title"]]}, "docurls": ["api/classnervosys_1_1autonomylib_1_1ApiProvider.html", "api/classnervosys_1_1autonomylib_1_1ApiServerBase.html", "api/classnervosys_1_1autonomylib_1_1ArduCopterApi.html", "api/classnervosys_1_1autonomylib_1_1ArduCopterParams.html", "api/classnervosys_1_1autonomylib_1_1ArduCopterSoloApi.html", "api/classnervosys_1_1autonomylib_1_1ArduCopterSoloParams.html", "api/classnervosys_1_1autonomylib_1_1ArduRoverApi.html", "api/classnervosys_1_1autonomylib_1_1BarometerBase.html", "api/classnervosys_1_1autonomylib_1_1BarometerSimple.html", "api/classnervosys_1_1autonomylib_1_1CarApiBase.html", "api/classnervosys_1_1autonomylib_1_1CarApiFactory.html", "api/classnervosys_1_1autonomylib_1_1CarRpcLibClient.html", "api/classnervosys_1_1autonomylib_1_1CarRpcLibServer.html", "api/classnervosys_1_1autonomylib_1_1CubeGeoFence.html", "api/classnervosys_1_1autonomylib_1_1DebugPhysicsBody.html", "api/classnervosys_1_1autonomylib_1_1DebugPhysicsBody_1_1WrenchVertex.html", "api/classnervosys_1_1autonomylib_1_1DistanceBase.html", "api/classnervosys_1_1autonomylib_1_1DistanceSimple.html", "api/classnervosys_1_1autonomylib_1_1Environment.html", "api/classnervosys_1_1autonomylib_1_1ExternalPhysicsEngine.html", "api/classnervosys_1_1autonomylib_1_1FastPhysicsEngine.html", "api/classnervosys_1_1autonomylib_1_1GpsBase.html", "api/classnervosys_1_1autonomylib_1_1GpsSimple.html", "api/classnervosys_1_1autonomylib_1_1IGeoFence.html", "api/classnervosys_1_1autonomylib_1_1ImuSimple.html", "api/classnervosys_1_1autonomylib_1_1Kinematics.html", "api/classnervosys_1_1autonomylib_1_1LidarBase.html", "api/classnervosys_1_1autonomylib_1_1LidarSimple.html", "api/classnervosys_1_1autonomylib_1_1MagnetometerBase.html", "api/classnervosys_1_1autonomylib_1_1MagnetometerSimple.html", "api/classnervosys_1_1autonomylib_1_1MavLinkMultirotorApi.html", "api/classnervosys_1_1autonomylib_1_1MavLinkMultirotorApi_1_1MavLinkLogViewerLog.html", "api/classnervosys_1_1autonomylib_1_1MultirotorApiBase.html", "api/classnervosys_1_1autonomylib_1_1MultirotorApiBase_1_1ObsStrategyChanger.html", "api/classnervosys_1_1autonomylib_1_1MultirotorApiBase_1_1SingleCall.html", "api/classnervosys_1_1autonomylib_1_1MultirotorApiBase_1_1SingleTaskCall.html", "api/classnervosys_1_1autonomylib_1_1MultirotorApiBase_1_1UnsafeMoveException.html", "api/classnervosys_1_1autonomylib_1_1MultirotorParams.html", "api/classnervosys_1_1autonomylib_1_1MultirotorParamsFactory.html", "api/classnervosys_1_1autonomylib_1_1MultirotorPhysicsBody.html", "api/classnervosys_1_1autonomylib_1_1MultirotorRpcLibClient.html", "api/classnervosys_1_1autonomylib_1_1MultirotorRpcLibServer.html", "api/classnervosys_1_1autonomylib_1_1ObstacleMap.html", "api/classnervosys_1_1autonomylib_1_1PhysXCarApi.html", "api/classnervosys_1_1autonomylib_1_1PhysicsBody.html", "api/classnervosys_1_1autonomylib_1_1PhysicsBodyVertex.html", "api/classnervosys_1_1autonomylib_1_1PhysicsEngineBase.html", "api/classnervosys_1_1autonomylib_1_1PhysicsWorld.html", "api/classnervosys_1_1autonomylib_1_1Px4MultirotorParams.html", "api/classnervosys_1_1autonomylib_1_1RotorActuator.html", "api/classnervosys_1_1autonomylib_1_1RpcLibClientBase.html", "api/classnervosys_1_1autonomylib_1_1RpcLibServerBase.html", "api/classnervosys_1_1autonomylib_1_1RpcLibServerBase_1_1ApiNotSupported.html", "api/classnervosys_1_1autonomylib_1_1SafetyEval.html", "api/classnervosys_1_1autonomylib_1_1SensorBase.html", "api/classnervosys_1_1autonomylib_1_1SensorCollection.html", "api/classnervosys_1_1autonomylib_1_1SensorFactory.html", "api/classnervosys_1_1autonomylib_1_1SimpleFlightApi.html", "api/classnervosys_1_1autonomylib_1_1SimpleFlightBoard.html", "api/classnervosys_1_1autonomylib_1_1SimpleFlightCommLink.html", "api/classnervosys_1_1autonomylib_1_1SimpleFlightCommon.html", "api/classnervosys_1_1autonomylib_1_1SimpleFlightEstimator.html", "api/classnervosys_1_1autonomylib_1_1SimpleFlightQuadXParams.html", "api/classnervosys_1_1autonomylib_1_1SphereGeoFence.html", "api/classnervosys_1_1autonomylib_1_1VehicleApiBase.html", "api/classnervosys_1_1autonomylib_1_1VehicleApiBase_1_1VehicleCommandNotImplementedException.html", "api/classnervosys_1_1autonomylib_1_1VehicleApiBase_1_1VehicleControllerException.html", "api/classnervosys_1_1autonomylib_1_1VehicleApiBase_1_1VehicleMoveException.html", "api/classnervosys_1_1autonomylib_1_1VehicleSimApiBase.html", "api/classnervosys_1_1autonomylib_1_1World.html", "api/classnervosys_1_1autonomylib_1_1WorldSimApiBase.html", "api/classnervosys_1_1autonomylib__rpclib_1_1CarRpcLibAdaptors.html", "api/classnervosys_1_1autonomylib__rpclib_1_1MultirotorRpcLibAdaptors.html", "api/classnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase.html", "api/classsimple__flight_1_1AdaptiveController.html", "api/classsimple__flight_1_1AngleLevelController.html", "api/classsimple__flight_1_1AngleRateController.html", "api/classsimple__flight_1_1Axis3.html", "api/classsimple__flight_1_1Axis4.html", "api/classsimple__flight_1_1CascadeController.html", "api/classsimple__flight_1_1ConstantOutputController.html", "api/classsimple__flight_1_1Firmware.html", "api/classsimple__flight_1_1GoalMode.html", "api/classsimple__flight_1_1IAxisController.html", "api/classsimple__flight_1_1IBoard.html", "api/classsimple__flight_1_1IBoardClock.html", "api/classsimple__flight_1_1IBoardInputPins.html", "api/classsimple__flight_1_1IBoardOutputPins.html", "api/classsimple__flight_1_1IBoardSensors.html", "api/classsimple__flight_1_1ICommLink.html", "api/classsimple__flight_1_1IController.html", "api/classsimple__flight_1_1IFirmware.html", "api/classsimple__flight_1_1IGoal.html", "api/classsimple__flight_1_1IOffboardApi.html", "api/classsimple__flight_1_1IPidIntegrator.html", "api/classsimple__flight_1_1IStateEstimator.html", "api/classsimple__flight_1_1IUpdatable.html", "api/classsimple__flight_1_1Mixer.html", "api/classsimple__flight_1_1OffboardApi.html", "api/classsimple__flight_1_1PassthroughController.html", "api/classsimple__flight_1_1PidController.html", "api/classsimple__flight_1_1PositionController.html", "api/classsimple__flight_1_1RemoteControl.html", "api/classsimple__flight_1_1RungKuttaPidIntegrator.html", "api/classsimple__flight_1_1StdPidIntegrator.html", "api/classsimple__flight_1_1VehicleState.html", "api/classsimple__flight_1_1VelocityController.html", "api/define_CarRpcLibClient_8cpp_1a586e110623cde145b8a5bdefb429e144.html", "api/define_CarRpcLibClient_8cpp_1a64441379d8bafa0a1c65e98e5e0d55bf.html", "api/define_CarRpcLibServer_8cpp_1a586e110623cde145b8a5bdefb429e144.html", "api/define_CarRpcLibServer_8cpp_1a64441379d8bafa0a1c65e98e5e0d55bf.html", "api/define_MultirotorRpcLibClient_8cpp_1a586e110623cde145b8a5bdefb429e144.html", "api/define_MultirotorRpcLibClient_8cpp_1a64441379d8bafa0a1c65e98e5e0d55bf.html", "api/define_MultirotorRpcLibServer_8cpp_1a586e110623cde145b8a5bdefb429e144.html", "api/define_MultirotorRpcLibServer_8cpp_1a64441379d8bafa0a1c65e98e5e0d55bf.html", "api/define_RpcLibClientBase_8cpp_1a586e110623cde145b8a5bdefb429e144.html", "api/define_RpcLibClientBase_8cpp_1a64441379d8bafa0a1c65e98e5e0d55bf.html", "api/define_RpcLibServerBase_8cpp_1a586e110623cde145b8a5bdefb429e144.html", "api/define_RpcLibServerBase_8cpp_1a64441379d8bafa0a1c65e98e5e0d55bf.html", "api/dir_AutonomyLib.html", "api/dir_AutonomyLib_docs.html", "api/dir_AutonomyLib_include.html", "api/dir_AutonomyLib_include_api.html", "api/dir_AutonomyLib_include_physics.html", "api/dir_AutonomyLib_include_safety.html", "api/dir_AutonomyLib_include_sensors.html", "api/dir_AutonomyLib_include_sensors_barometer.html", "api/dir_AutonomyLib_include_sensors_distance.html", "api/dir_AutonomyLib_include_sensors_gps.html", "api/dir_AutonomyLib_include_sensors_imu.html", "api/dir_AutonomyLib_include_sensors_lidar.html", "api/dir_AutonomyLib_include_sensors_magnetometer.html", "api/dir_AutonomyLib_include_vehicles.html", "api/dir_AutonomyLib_include_vehicles_car.html", "api/dir_AutonomyLib_include_vehicles_car_api.html", "api/dir_AutonomyLib_include_vehicles_car_firmwares.html", "api/dir_AutonomyLib_include_vehicles_car_firmwares_ardurover.html", "api/dir_AutonomyLib_include_vehicles_car_firmwares_physxcar.html", "api/dir_AutonomyLib_include_vehicles_multirotor.html", "api/dir_AutonomyLib_include_vehicles_multirotor_api.html", "api/dir_AutonomyLib_include_vehicles_multirotor_firmwares.html", "api/dir_AutonomyLib_include_vehicles_multirotor_firmwares_arducopter.html", "api/dir_AutonomyLib_include_vehicles_multirotor_firmwares_mavlink.html", "api/dir_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight.html", "api/dir_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware.html", "api/dir_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces.html", "api/dir_AutonomyLib_src.html", "api/dir_AutonomyLib_src_api.html", "api/dir_AutonomyLib_src_safety.html", "api/dir_AutonomyLib_src_vehicles.html", "api/dir_AutonomyLib_src_vehicles_car.html", "api/dir_AutonomyLib_src_vehicles_car_api.html", "api/dir_AutonomyLib_src_vehicles_multirotor.html", "api/dir_AutonomyLib_src_vehicles_multirotor_api.html", "api/enum_namespacenervosys_1_1autonomylib_1a1196743369d5c954ebd9873aaeb4b16f.html", "api/enum_namespacenervosys_1_1autonomylib_1a2402602ce73d29c9c525783b2c5e7e68.html", "api/enum_namespacenervosys_1_1autonomylib_1ad3b29d40f39b85f517085b2d3316fce4.html", "api/enum_namespacesimple__flight_1a250e3c7d376dc0322fe64230b88cb4e1.html", "api/enum_namespacesimple__flight_1a57a47b1a1e13d7ac5ba39dd60752f6f8.html", "api/file_AutonomyLib_docs_conf.py.html", "api/file_AutonomyLib_include_api_ApiProvider.hpp.html", "api/file_AutonomyLib_include_api_ApiServerBase.hpp.html", "api/file_AutonomyLib_include_api_RpcLibAdaptorsBase.hpp.html", "api/file_AutonomyLib_include_api_RpcLibClientBase.hpp.html", "api/file_AutonomyLib_include_api_RpcLibServerBase.hpp.html", "api/file_AutonomyLib_include_api_VehicleApiBase.hpp.html", "api/file_AutonomyLib_include_api_VehicleSimApiBase.hpp.html", "api/file_AutonomyLib_include_api_WorldSimApiBase.hpp.html", "api/file_AutonomyLib_include_physics_DebugPhysicsBody.hpp.html", "api/file_AutonomyLib_include_physics_Environment.hpp.html", "api/file_AutonomyLib_include_physics_ExternalPhysicsEngine.hpp.html", "api/file_AutonomyLib_include_physics_FastPhysicsEngine.hpp.html", "api/file_AutonomyLib_include_physics_Kinematics.hpp.html", "api/file_AutonomyLib_include_physics_PhysicsBody.hpp.html", "api/file_AutonomyLib_include_physics_PhysicsBodyVertex.hpp.html", "api/file_AutonomyLib_include_physics_PhysicsEngineBase.hpp.html", "api/file_AutonomyLib_include_physics_PhysicsWorld.hpp.html", "api/file_AutonomyLib_include_physics_World.hpp.html", "api/file_AutonomyLib_include_safety_CubeGeoFence.hpp.html", "api/file_AutonomyLib_include_safety_IGeoFence.hpp.html", "api/file_AutonomyLib_include_safety_ObstacleMap.hpp.html", "api/file_AutonomyLib_include_safety_SafetyEval.hpp.html", "api/file_AutonomyLib_include_safety_SphereGeoFence.hpp.html", "api/file_AutonomyLib_include_sensors_SensorBase.hpp.html", "api/file_AutonomyLib_include_sensors_SensorCollection.hpp.html", "api/file_AutonomyLib_include_sensors_SensorFactory.hpp.html", "api/file_AutonomyLib_include_sensors_barometer_BarometerBase.hpp.html", "api/file_AutonomyLib_include_sensors_barometer_BarometerSimple.hpp.html", "api/file_AutonomyLib_include_sensors_barometer_BarometerSimpleParams.hpp.html", "api/file_AutonomyLib_include_sensors_distance_DistanceBase.hpp.html", "api/file_AutonomyLib_include_sensors_distance_DistanceSimple.hpp.html", "api/file_AutonomyLib_include_sensors_distance_DistanceSimpleParams.hpp.html", "api/file_AutonomyLib_include_sensors_gps_GpsBase.hpp.html", "api/file_AutonomyLib_include_sensors_gps_GpsSimple.hpp.html", "api/file_AutonomyLib_include_sensors_gps_GpsSimpleParams.hpp.html", "api/file_AutonomyLib_include_sensors_imu_ImuSimple.hpp.html", "api/file_AutonomyLib_include_sensors_imu_ImuSimpleParams.hpp.html", "api/file_AutonomyLib_include_sensors_lidar_LidarBase.hpp.html", "api/file_AutonomyLib_include_sensors_lidar_LidarSimple.hpp.html", "api/file_AutonomyLib_include_sensors_lidar_LidarSimpleParams.hpp.html", "api/file_AutonomyLib_include_sensors_magnetometer_MagnetometerBase.hpp.html", "api/file_AutonomyLib_include_sensors_magnetometer_MagnetometerSimple.hpp.html", "api/file_AutonomyLib_include_sensors_magnetometer_MagnetometerSimpleParams.hpp.html", "api/file_AutonomyLib_include_vehicles_car_CarApiFactory.hpp.html", "api/file_AutonomyLib_include_vehicles_car_api_CarApiBase.hpp.html", "api/file_AutonomyLib_include_vehicles_car_api_CarRpcLibAdaptors.hpp.html", "api/file_AutonomyLib_include_vehicles_car_api_CarRpcLibClient.hpp.html", "api/file_AutonomyLib_include_vehicles_car_api_CarRpcLibServer.hpp.html", "api/file_AutonomyLib_include_vehicles_car_firmwares_ardurover_ArduRoverApi.hpp.html", "api/file_AutonomyLib_include_vehicles_car_firmwares_physxcar_PhysXCarApi.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_MultiRotorParams.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_MultiRotorParamsFactory.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_MultiRotorPhysicsBody.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_RotorActuator.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_RotorParams.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_api_MultirotorApiBase.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_api_MultirotorCommon.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_api_MultirotorRpcLibAdaptors.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_api_MultirotorRpcLibClient.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_api_MultirotorRpcLibServer.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_arducopter_ArduCopterApi.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_arducopter_ArduCopterParams.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_mavlink_ArduCopterSoloApi.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_mavlink_ArduCopterSoloParams.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_mavlink_MavLinkMultirotorApi.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_mavlink_Px4MultiRotorParams.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_SimpleFlightApi.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_SimpleFlightBoard.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_SimpleFlightCommLink.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_SimpleFlightCommon.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_SimpleFlightEstimator.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_SimpleFlightQuadXParams.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_AdaptiveController.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_AngleLevelController.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_AngleRateController.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_CascadeController.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_ConstantOutputController.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_Firmware.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_Mixer.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_OffboardApi.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_Params.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_PassthroughController.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_PidController.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_PositionController.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_RemoteControl.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_RungKuttaPidIntegrator.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_StdPidIntegrator.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_VelocityController.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_CommonStructs.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IAxisController.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IBoard.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IBoardClock.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IBoardInputPins.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IBoardOutputPins.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IBoardSensors.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_ICommLink.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IController.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IFirmware.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IGoal.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IOffboardApi.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IPidIntegrator.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IStateEstimator.hpp.html", "api/file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IUpdatable.hpp.html", "api/file_AutonomyLib_src_api_RpcLibClientBase.cpp.html", "api/file_AutonomyLib_src_api_RpcLibServerBase.cpp.html", "api/file_AutonomyLib_src_safety_ObstacleMap.cpp.html", "api/file_AutonomyLib_src_safety_SafetyEval.cpp.html", "api/file_AutonomyLib_src_vehicles_car_api_CarRpcLibClient.cpp.html", "api/file_AutonomyLib_src_vehicles_car_api_CarRpcLibServer.cpp.html", "api/file_AutonomyLib_src_vehicles_multirotor_api_MultirotorApiBase.cpp.html", "api/file_AutonomyLib_src_vehicles_multirotor_api_MultirotorRpcLibClient.cpp.html", "api/file_AutonomyLib_src_vehicles_multirotor_api_MultirotorRpcLibServer.cpp.html", "api/function_MultirotorRpcLibAdaptors_8hpp_1a4ad96bb0b0fd837d8132bf284f81932c.html", "api/function_MultirotorRpcLibAdaptors_8hpp_1abfcd08d1e6f1840d131bdd83c3ace4eb.html", "api/function_RpcLibAdaptorsBase_8hpp_1a46cd14d414e8fc72032ef2edc817fca7.html", "api/function_RpcLibAdaptorsBase_8hpp_1a4f4b3060c8be9db77d0cbd4d342023ab.html", "api/function_RpcLibAdaptorsBase_8hpp_1aa48460dda401d585625e850d035669c3.html", "api/function_RpcLibAdaptorsBase_8hpp_1abb33b0231861928bba288833a2c05173.html", "api/function_RpcLibAdaptorsBase_8hpp_1afb001b2ca995cc726f581621db317400.html", "api/library_root.html", "api/namespace_conf.html", "api/namespace_mavlinkcom.html", "api/namespace_nervosys.html", "api/namespace_nervosys__autonomylib.html", "api/namespace_nervosys__autonomylib_rpclib.html", "api/namespace_simple_flight.html", "api/namespace_std.html", "api/program_listing_file_AutonomyLib_docs_conf.py.html", "api/program_listing_file_AutonomyLib_include_api_ApiProvider.hpp.html", "api/program_listing_file_AutonomyLib_include_api_ApiServerBase.hpp.html", "api/program_listing_file_AutonomyLib_include_api_RpcLibAdaptorsBase.hpp.html", "api/program_listing_file_AutonomyLib_include_api_RpcLibClientBase.hpp.html", "api/program_listing_file_AutonomyLib_include_api_RpcLibServerBase.hpp.html", "api/program_listing_file_AutonomyLib_include_api_VehicleApiBase.hpp.html", "api/program_listing_file_AutonomyLib_include_api_VehicleSimApiBase.hpp.html", "api/program_listing_file_AutonomyLib_include_api_WorldSimApiBase.hpp.html", "api/program_listing_file_AutonomyLib_include_physics_DebugPhysicsBody.hpp.html", "api/program_listing_file_AutonomyLib_include_physics_Environment.hpp.html", "api/program_listing_file_AutonomyLib_include_physics_ExternalPhysicsEngine.hpp.html", "api/program_listing_file_AutonomyLib_include_physics_FastPhysicsEngine.hpp.html", "api/program_listing_file_AutonomyLib_include_physics_Kinematics.hpp.html", "api/program_listing_file_AutonomyLib_include_physics_PhysicsBody.hpp.html", "api/program_listing_file_AutonomyLib_include_physics_PhysicsBodyVertex.hpp.html", "api/program_listing_file_AutonomyLib_include_physics_PhysicsEngineBase.hpp.html", "api/program_listing_file_AutonomyLib_include_physics_PhysicsWorld.hpp.html", "api/program_listing_file_AutonomyLib_include_physics_World.hpp.html", "api/program_listing_file_AutonomyLib_include_safety_CubeGeoFence.hpp.html", "api/program_listing_file_AutonomyLib_include_safety_IGeoFence.hpp.html", "api/program_listing_file_AutonomyLib_include_safety_ObstacleMap.hpp.html", "api/program_listing_file_AutonomyLib_include_safety_SafetyEval.hpp.html", "api/program_listing_file_AutonomyLib_include_safety_SphereGeoFence.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_SensorBase.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_SensorCollection.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_SensorFactory.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_barometer_BarometerBase.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_barometer_BarometerSimple.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_barometer_BarometerSimpleParams.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_distance_DistanceBase.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_distance_DistanceSimple.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_distance_DistanceSimpleParams.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_gps_GpsBase.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_gps_GpsSimple.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_gps_GpsSimpleParams.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_imu_ImuSimple.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_imu_ImuSimpleParams.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_lidar_LidarBase.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_lidar_LidarSimple.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_lidar_LidarSimpleParams.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_magnetometer_MagnetometerBase.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_magnetometer_MagnetometerSimple.hpp.html", "api/program_listing_file_AutonomyLib_include_sensors_magnetometer_MagnetometerSimpleParams.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_car_CarApiFactory.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_car_api_CarApiBase.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_car_api_CarRpcLibAdaptors.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_car_api_CarRpcLibClient.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_car_api_CarRpcLibServer.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_car_firmwares_ardurover_ArduRoverApi.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_car_firmwares_physxcar_PhysXCarApi.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_MultiRotorParams.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_MultiRotorParamsFactory.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_MultiRotorPhysicsBody.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_RotorActuator.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_RotorParams.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_api_MultirotorApiBase.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_api_MultirotorCommon.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_api_MultirotorRpcLibAdaptors.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_api_MultirotorRpcLibClient.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_api_MultirotorRpcLibServer.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_arducopter_ArduCopterApi.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_arducopter_ArduCopterParams.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_mavlink_ArduCopterSoloApi.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_mavlink_ArduCopterSoloParams.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_mavlink_MavLinkMultirotorApi.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_mavlink_Px4MultiRotorParams.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_SimpleFlightApi.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_SimpleFlightBoard.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_SimpleFlightCommLink.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_SimpleFlightCommon.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_SimpleFlightEstimator.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_SimpleFlightQuadXParams.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_AdaptiveController.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_AngleLevelController.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_AngleRateController.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_CascadeController.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_ConstantOutputController.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_Firmware.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_Mixer.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_OffboardApi.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_Params.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_PassthroughController.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_PidController.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_PositionController.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_RemoteControl.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_RungKuttaPidIntegrator.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_StdPidIntegrator.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_VelocityController.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_CommonStructs.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IAxisController.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IBoard.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IBoardClock.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IBoardInputPins.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IBoardOutputPins.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IBoardSensors.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_ICommLink.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IController.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IFirmware.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IGoal.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IOffboardApi.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IPidIntegrator.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IStateEstimator.hpp.html", "api/program_listing_file_AutonomyLib_include_vehicles_multirotor_firmwares_simple_flight_firmware_interfaces_IUpdatable.hpp.html", "api/program_listing_file_AutonomyLib_src_api_RpcLibClientBase.cpp.html", "api/program_listing_file_AutonomyLib_src_api_RpcLibServerBase.cpp.html", "api/program_listing_file_AutonomyLib_src_safety_ObstacleMap.cpp.html", "api/program_listing_file_AutonomyLib_src_safety_SafetyEval.cpp.html", "api/program_listing_file_AutonomyLib_src_vehicles_car_api_CarRpcLibClient.cpp.html", "api/program_listing_file_AutonomyLib_src_vehicles_car_api_CarRpcLibServer.cpp.html", "api/program_listing_file_AutonomyLib_src_vehicles_multirotor_api_MultirotorApiBase.cpp.html", "api/program_listing_file_AutonomyLib_src_vehicles_multirotor_api_MultirotorRpcLibClient.cpp.html", "api/program_listing_file_AutonomyLib_src_vehicles_multirotor_api_MultirotorRpcLibServer.cpp.html", "api/structnervosys_1_1autonomylib_1_1ArduCopterApi_1_1RotorControlMessage.html", "api/structnervosys_1_1autonomylib_1_1ArduCopterSoloApi_1_1RotorControlMessage.html", "api/structnervosys_1_1autonomylib_1_1ArduCopterSoloApi_1_1SensorMessage.html", "api/structnervosys_1_1autonomylib_1_1ArduRoverApi_1_1RoverControlMessage.html", "api/structnervosys_1_1autonomylib_1_1BarometerBase_1_1Output.html", "api/structnervosys_1_1autonomylib_1_1BarometerSimpleParams.html", "api/structnervosys_1_1autonomylib_1_1CarApiBase_1_1CarControls.html", "api/structnervosys_1_1autonomylib_1_1CarApiBase_1_1CarState.html", "api/structnervosys_1_1autonomylib_1_1DistanceSimpleParams.html", "api/structnervosys_1_1autonomylib_1_1Environment_1_1State.html", "api/structnervosys_1_1autonomylib_1_1GpsBase_1_1GnssReport.html", "api/structnervosys_1_1autonomylib_1_1GpsBase_1_1GpsPoint.html", "api/structnervosys_1_1autonomylib_1_1GpsBase_1_1NavSatFix.html", "api/structnervosys_1_1autonomylib_1_1GpsBase_1_1NavSatStatus.html", "api/structnervosys_1_1autonomylib_1_1GpsBase_1_1Output.html", "api/structnervosys_1_1autonomylib_1_1GpsSimpleParams.html", "api/structnervosys_1_1autonomylib_1_1ImuSimpleParams.html", "api/structnervosys_1_1autonomylib_1_1ImuSimpleParams_1_1Accelerometer.html", "api/structnervosys_1_1autonomylib_1_1ImuSimpleParams_1_1Gyroscope.html", "api/structnervosys_1_1autonomylib_1_1ImuSimple_1_1State.html", "api/structnervosys_1_1autonomylib_1_1Kinematics_1_1State.html", "api/structnervosys_1_1autonomylib_1_1LidarSimpleParams.html", "api/structnervosys_1_1autonomylib_1_1MagnetometerBase_1_1Output.html", "api/structnervosys_1_1autonomylib_1_1MagnetometerSimpleParams.html", "api/structnervosys_1_1autonomylib_1_1MultirotorApiBase_1_1PathPosition.html", "api/structnervosys_1_1autonomylib_1_1MultirotorApiBase_1_1PathSegment.html", "api/structnervosys_1_1autonomylib_1_1MultirotorApiBase_1_1StatusLock.html", "api/structnervosys_1_1autonomylib_1_1MultirotorApiParams.html", "api/structnervosys_1_1autonomylib_1_1MultirotorParams_1_1Params.html", "api/structnervosys_1_1autonomylib_1_1MultirotorParams_1_1RotorPose.html", "api/structnervosys_1_1autonomylib_1_1MultirotorRpcLibClient_1_1impl.html", "api/structnervosys_1_1autonomylib_1_1MultirotorState.html", "api/structnervosys_1_1autonomylib_1_1ObstacleMap_1_1ObstacleInfo.html", "api/structnervosys_1_1autonomylib_1_1RotorActuator_1_1Output.html", "api/structnervosys_1_1autonomylib_1_1RotorParameters.html", "api/structnervosys_1_1autonomylib_1_1RotorParams.html", "api/structnervosys_1_1autonomylib_1_1RotorStates.html", "api/structnervosys_1_1autonomylib_1_1RpcLibClientBase_1_1impl.html", "api/structnervosys_1_1autonomylib_1_1RpcLibServerBase_1_1impl.html", "api/structnervosys_1_1autonomylib_1_1SafetyEval_1_1EvalResult.html", "api/structnervosys_1_1autonomylib_1_1SensorBase_1_1GroundTruth.html", "api/structnervosys_1_1autonomylib_1_1YawMode.html", "api/structnervosys_1_1autonomylib__rpclib_1_1CarRpcLibAdaptors_1_1CarControls.html", "api/structnervosys_1_1autonomylib__rpclib_1_1CarRpcLibAdaptors_1_1CarState.html", "api/structnervosys_1_1autonomylib__rpclib_1_1MultirotorRpcLibAdaptors_1_1MultirotorState.html", "api/structnervosys_1_1autonomylib__rpclib_1_1MultirotorRpcLibAdaptors_1_1RotorParameters.html", "api/structnervosys_1_1autonomylib__rpclib_1_1MultirotorRpcLibAdaptors_1_1RotorStates.html", "api/structnervosys_1_1autonomylib__rpclib_1_1MultirotorRpcLibAdaptors_1_1YawMode.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1BarometerData.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1Box2D.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1Box3D.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1CameraInfo.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1CollisionInfo.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1DetectionInfo.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1DistanceSensorData.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1EnvironmentState.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1GeoPoint.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1GnssReport.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1GpsData.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1ImageRequest.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1ImageResponse.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1ImuData.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1KinematicsState.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1LidarData.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1MagnetometerData.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1MeshPositionVertexBuffersResponse.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1Pose.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1ProjectionMatrix.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1Quaternionr.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1RCData.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1Vector2r.html", "api/structnervosys_1_1autonomylib__rpclib_1_1RpcLibAdaptorsBase_1_1Vector3r.html", "api/structsimple__flight_1_1GeoPoint.html", "api/structsimple__flight_1_1KinematicsState.html", "api/structsimple__flight_1_1Mixer_1_1motorMixer__t.html", "api/structsimple__flight_1_1Params.html", "api/structsimple__flight_1_1Params_1_1AngleLevelPid.html", "api/structsimple__flight_1_1Params_1_1AngleRatePid.html", "api/structsimple__flight_1_1Params_1_1Motor.html", "api/structsimple__flight_1_1Params_1_1PositionPid.html", "api/structsimple__flight_1_1Params_1_1Rc.html", "api/structsimple__flight_1_1Params_1_1Takeoff.html", "api/structsimple__flight_1_1Params_1_1VelocityPid.html", "api/structsimple__flight_1_1PidConfig.html", "api/typedef_namespacenervosys_1_1autonomylib_1ab612bbe5d09576c357476cf93a8b611b.html", "api/typedef_namespacenervosys_1_1autonomylib_1aca0b799f5c11c061814050c52d1f5837.html", "api/typedef_namespacenervosys_1_1autonomylib_1af6585842024482c1a3830f623b357fcf.html", "api/typedef_namespacesimple__flight_1a6c283e487d45919133e4e34a89d7b1bf.html", "api/typedef_namespacesimple__flight_1a709310063a5dd767791c3dc8d729e3c6.html", "api/typedef_namespacesimple__flight_1afb2b9fec0eda30ae3f743b1013beb242.html", "api/unabridged_orphan.html", "api/variable_namespaceconf_1a012ba9863b958ed7baa933116f2a05b6.html", "api/variable_namespaceconf_1a082ce7a1be62a491bf884702146210d3.html", "api/variable_namespaceconf_1a0b68e66074bc74dbb7460951f810b4c8.html", "api/variable_namespaceconf_1a15ff89fd36856d4530d4ed2083e6dfc7.html", "api/variable_namespaceconf_1a22dccd379199c1e183e7c397857ea491.html", "api/variable_namespaceconf_1a250fb9e2509cf9fdc44e13613ff16e90.html", "api/variable_namespaceconf_1a2803387c30920e3e74f46eb541db430d.html", "api/variable_namespaceconf_1a29a875965329e39a7743d14834ecd7b3.html", "api/variable_namespaceconf_1a2cdaf1e7c45d61ad10c5c68108ea38ee.html", "api/variable_namespaceconf_1a54b0faed214ac92017d5689efbb10672.html", "api/variable_namespaceconf_1a6f28557bb41c23eaa415a2476682af3e.html", "api/variable_namespaceconf_1a75f94e80cc9b5ce60a0f0a8a096bad8e.html", "api/variable_namespaceconf_1a7812f49970f3de0d15dd7b9b9a10e3a1.html", "api/variable_namespaceconf_1a7ad48fb6f3e9b129c02346ea0d3527c1.html", "api/variable_namespaceconf_1a85efc5fee48a26fa2d651f6eeb38fc2b.html", "api/variable_namespaceconf_1a8f68ed1142fb4b92094385f9991c5274.html", "api/variable_namespaceconf_1a8fe7f0d85f975f4ecba5cb6066959a09.html", "api/variable_namespaceconf_1a920ff115ba22562a3dab4b3f4c9bd634.html", "api/variable_namespaceconf_1a92a41f663d41803fc3a5545f9f050a02.html", "api/variable_namespaceconf_1aa11e0a8e9c47ccc775796bd64c295d2c.html", "api/variable_namespaceconf_1aa95c63cf0a3d87fed36d450840c6fd48.html", "api/variable_namespaceconf_1aad1fe7669bcae16063c77543f4fbcce8.html", "api/variable_namespaceconf_1ab6375baea213a912022ee6fe80c17ee8.html", "api/variable_namespaceconf_1ab6542454bc5925b7e6e5bb075315570d.html", "api/variable_namespaceconf_1ab8d92530e7b655593764a1740aaf81c5.html", "api/variable_namespaceconf_1abee787160a3091eff84a184a81517b88.html", "api/variable_namespaceconf_1aca7e23e5f354ec5d8e18d6b5769908c9.html", "api/variable_namespaceconf_1ad15efa571aa0827e142708247b74ee13.html", "api/variable_namespaceconf_1ad7fcd78de73b7505cc99717d4abf2ac1.html", "api/variable_namespaceconf_1ad9d7d7cfcf6e22cc48ad369cded0448a.html", "api/variable_namespaceconf_1ae475e080536acb271a0a0efe56c3ba42.html", "api/variable_namespaceconf_1ae850ae634911b713e036b43894fdd525.html", "api/variable_namespaceconf_1aea2e7ab4a244666c9b2e6231c9d53c2b.html", "api/variable_namespaceconf_1aef7f6885073ed868d8115d6645e81744.html", "api/variable_namespaceconf_1af4fb5d8851ccaade135c2668dd3ced41.html", "api/variable_namespaceconf_1afc493d68a3a3535029d60df7528370b4.html", "api/variable_namespaceconf_1afc97ec136f4d1501641ffa3d32af994c.html", "index.html"]})