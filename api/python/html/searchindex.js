Search.setIndex({"titles": ["autonomysim package", "autonomysim.ai package", "autonomysim.ai.imitation package", "autonomysim.ai.reinforcement package", "autonomysim.ai.vision package", "autonomysim.gym package", "autonomysim.gym.envs package", "autonomysim.sensors package", "autonomysim.unreal package", "autonomysim.utils package", "autonomysim.utils.io package", "autonomysim", "AutonomySim"], "terms": {"ai": [0, 11, 12], "imit": [0, 1], "agent": [0, 1], "gener": [0, 1], "preprocessor": [0, 1], "trainer": [0, 1], "reinforc": [0, 1], "vision": [0, 1], "benchmark": [0, 1], "navig": [0, 1], "gym": [0, 11, 12], "env": [0, 5], "autonomysim_env": [0, 5], "car_env": [0, 5], "drone_env": [0, 5], "sensor": [0, 11, 12], "event_camera": [0, 11], "kinect": [0, 11], "thermal_camera": [0, 11], "unreal": [0, 11, 12], "command": [0, 11], "runcmdlist": [0, 8], "runconsolecmd": [0, 8], "util": [0, 11, 12], "io": [0, 9], "audio": [0, 9], "conv": [0, 11], "list_to_2d_float_arrai": [0, 9], "string_to_float_arrai": [0, 9], "string_to_uint8_arrai": [0, 9], "to_dict": [0, 9], "to_eularian_angl": [0, 9], "to_quaternion": [0, 9], "to_str": [0, 9], "setuppath": [0, 9], "addautonomysimmodulepath": [0, 9], "getcurrentpath": [0, 9], "getdirlevel": [0, 9], "getgrandparentdir": [0, 9], "getparentdir": [0, 9], "generate_color_palett": [0, 9], "get_public_field": [0, 9], "wait_kei": [0, 9], "class": [0, 9], "carclient": [0, 11, 12], "ip": 0, "port": 0, "41451": 0, "timeout_valu": 0, "3600": 0, "sourc": [0, 8, 9, 10], "base": [0, 9], "vehiclecli": [0, 11, 12], "object": [0, 9], "getcarcontrol": [0, 11], "vehicle_nam": 0, "paramet": 0, "str": 0, "option": 0, "name": [0, 11], "vehicl": 0, "return": [0, 9], "carcontrol": [0, 11, 12], "getcarst": [0, 11], "The": 0, "posit": [0, 11], "insid": 0, "carstat": [0, 11, 12], "i": [0, 9], "frame": 0, "": 0, "start": 0, "point": 0, "setcarcontrol": [0, 11], "control": 0, "car": 0, "us": [0, 10], "throttl": [0, 11], "steer": [0, 11], "brake": [0, 11], "etc": 0, "struct": 0, "contain": 0, "valu": 0, "multirotorcli": [0, 11, 12], "getmultirotorst": [0, 11], "multirotorst": [0, 11, 12], "get": 0, "state": 0, "getrotorst": [0, 11], "rotorst": [0, 11, 12], "obtain": 0, "current": 0, "all": 0, "multirotor": 0, "rotor": [0, 11], "includ": 0, "speed": [0, 11], "thrust": 0, "torqu": 0, "timestamp": [0, 11], "gohomeasync": [0, 11], "timeout_sec": 0, "3e": 0, "38": 0, "home": 0, "e": 0, "launch": 0, "locat": 0, "int": 0, "timeout": 0, "reach": 0, "desir": 0, "altitud": [0, 11], "send": 0, "thi": [0, 9, 12], "futur": 0, "call": 0, "join": 0, "wait": [0, 9], "method": 0, "finish": 0, "exampl": 0, "msgpackrpc": 0, "hoverasync": [0, 11], "landasync": [0, 11], "60": 0, "land": [0, 11], "movebyangleratesthrottleasync": [0, 11], "roll_rat": 0, "pitch_rat": 0, "yaw_rat": 0, "durat": 0, "between": 0, "0": 0, "1": [0, 10], "roll": [0, 9, 11], "rate": 0, "pitch": [0, 9, 11], "yaw": [0, 9, 11], "set": 0, "ar": 0, "given": 0, "radian": 0, "bodi": 0, "follow": 0, "front": 0, "left": 0, "up": [0, 9], "flu": 0, "convent": 0, "right": 0, "handed": 0, "x": [0, 10], "axi": 0, "along": 0, "direct": 0, "quadrotor": 0, "clockwis": 0, "rotat": [0, 11], "about": 0, "defin": 0, "angl": 0, "henc": 0, "equival": 0, "translat": 0, "w": [0, 10], "r": 0, "t": [0, 9], "our": 0, "y": 0, "z": 0, "toward": 0, "wrt": 0, "Or": 0, "an": 0, "anticlockwis": 0, "fashion": 0, "xy": 0, "fl": 0, "plane": 0, "float": 0, "second": 0, "amount": 0, "time": 0, "movebyanglerateszasync": [0, 11], "local": [0, 9], "ned": 0, "movebyanglethrottleasync": [0, 11], "movebyanglezasync": [0, 11], "movebymanualasync": [0, 11], "vx_max": 0, "vy_max": 0, "z_min": 0, "drivetrain": 0, "yaw_mod": 0, "yawmod": [0, 11, 12], "is_rat": [0, 11], "true": 0, "yaw_or_r": [0, 11], "read": [0, 10], "rc": 0, "setup": [0, 9], "constraint": 0, "veloc": [0, 11], "minimum": 0, "while": 0, "fly": [0, 11], "If": [0, 9], "detect": 0, "violat": 0, "would": 0, "ignor": 0, "max": [0, 11], "allow": 0, "min": [0, 11], "after": 0, "switch": 0, "back": 0, "non": 0, "manual": 0, "mode": 0, "drivetraintyp": [0, 11, 12], "when": 0, "forwardonli": [0, 11], "itself": 0, "so": 0, "its": 0, "alwai": 0, "face": 0, "travel": 0, "maxdegreeoffreedom": [0, 11], "doesn": 0, "do": [0, 9], "instead": 0, "doe": [0, 9], "crab": 0, "like": 0, "movement": 0, "specifi": 0, "should": 0, "fals": 0, "around": 0, "movebymotorpwmsasync": [0, 11], "front_right_pwm": 0, "rear_left_pwm": 0, "front_left_pwm": 0, "rear_right_pwm": 0, "directli": 0, "motor": 0, "pwm": 0, "rear": 0, "movebyrc": [0, 11], "rcdata": [0, 11, 12], "is_initi": [0, 11], "is_valid": [0, 11], "switch1": [0, 11], "switch2": [0, 11], "switch3": [0, 11], "switch4": [0, 11], "switch5": [0, 11], "switch6": [0, 11], "switch7": [0, 11], "switch8": [0, 11], "movebyrollpitchyawthrottleasync": [0, 11], "degre": 0, "px4": 0, "simpleflight": 0, "movebyrollpitchyawzasync": [0, 11], "movebyrollpitchyawratethrottleasync": [0, 11], "per": 0, "movebyrollpitchyawratezasync": [0, 11], "movebyvelocityasync": [0, 11], "vx": 0, "vy": 0, "vz": 0, "world": 0, "movebyvelocitybodyframeasync": [0, 11], "movebyvelocityzasync": [0, 11], "movebyvelocityzbodyframeasync": [0, 11], "moveonpathasync": [0, 11], "path": [0, 9], "lookahead": 0, "adaptive_lookahead": 0, "movetogpsasync": [0, 11], "latitud": [0, 11], "longitud": [0, 11], "movetopositionasync": [0, 11], "movetozasync": [0, 11], "rotatebyyawrateasync": [0, 11], "rotatetoyawasync": [0, 11], "margin": 0, "5": 0, "setanglelevelcontrollergain": [0, 11], "angle_level_gain": 0, "anglelevelcontrollergain": [0, 11, 12], "level": 0, "gain": 0, "ani": 0, "api": 0, "refer": 0, "ex": 0, "modifi": 0, "also": 0, "affect": 0, "behaviour": 0, "becaus": 0, "flight": 0, "track": 0, "setpoint": 0, "convert": 0, "them": 0, "function": 0, "onli": 0, "default": 0, "pid": 0, "need": 0, "pass": 0, "correspond": 0, "ax": 0, "reset": [0, 11], "recommend": 0, "setangleratecontrollergain": [0, 11], "angle_rate_gain": 0, "angleratecontrollergain": [0, 11, 12], "have": 0, "move": 0, "which": 0, "That": 0, "setpositioncontrollergain": [0, 11], "position_gain": 0, "positioncontrollergain": [0, 11, 12], "movebypositionasync": 0, "setvelocitycontrollergain": [0, 11], "velocity_gain": 0, "velocitycontrollergain": [0, 11, 12], "moveonsplineasync": 0, "moveonsplinevelconstraintsasync": 0, "thei": 0, "both": 0, "trajectori": 0, "takeoffasync": [0, 11], "20": 0, "takeoff": 0, "3m": 0, "abov": 0, "ground": 0, "armdisarm": [0, 11], "arm": 0, "disarm": 0, "bool": 0, "success": 0, "cancellasttask": [0, 11], "cancel": 0, "previou": 0, "async": 0, "task": 0, "confirmconnect": [0, 11], "check": 0, "connect": 0, "everi": 0, "sec": 0, "report": 0, "consol": [0, 9], "user": 0, "can": 0, "see": [0, 9], "progress": 0, "enableapicontrol": [0, 11], "is_en": 0, "enabl": [0, 11], "disabl": 0, "getbarometerdata": [0, 11], "barometer_nam": 0, "baromet": 0, "data": [0, 10], "from": 0, "json": 0, "barometerdata": [0, 11, 12], "getclientvers": [0, 11], "getdistancesensordata": [0, 11], "distance_sensor_nam": 0, "distanc": [0, 11], "distancesensordata": [0, 11, 12], "getgpsdata": [0, 11], "gps_name": 0, "gp": 0, "gpsdata": [0, 11, 12], "gethomegeopoint": [0, 11], "geopoint": [0, 11, 12], "getimudata": [0, 11], "imu_nam": 0, "imu": 0, "imudata": [0, 11, 12], "getlidardata": [0, 11], "lidar_nam": 0, "lidar": 0, "lidardata": [0, 11, 12], "getmagnetometerdata": [0, 11], "magnetometer_nam": 0, "magnetomet": 0, "magnetometerdata": [0, 11, 12], "getminrequiredclientvers": [0, 11], "getminrequiredserververs": [0, 11], "getserververs": [0, 11], "getsettingsstr": [0, 11], "fetch": 0, "text": 0, "being": 0, "format": 0, "isapicontrolen": [0, 11], "establish": 0, "isrecord": [0, 11], "whether": 0, "record": 0, "run": 0, "els": [0, 9], "listvehicl": [0, 11], "list": 0, "ping": [0, 11], "otherwis": 0, "block": 0, "until": 0, "origin": 0, "note": 0, "you": 0, "must": [0, 10], "again": 0, "simadddetectionfiltermeshnam": [0, 11], "camera_nam": [0, 11], "image_typ": [0, 11], "mesh_nam": 0, "extern": 0, "add": [0, 9], "mesh": 0, "wild": 0, "card": 0, "For": 0, "car_": 0, "instanc": 0, "camera": 0, "backward": 0, "compat": 0, "id": 0, "number": 0, "imagetyp": [0, 11, 12], "imag": [0, 10], "requir": 0, "associ": 0, "simaddvehicl": [0, 11], "vehicle_typ": 0, "pose": [0, 11, 12], "pawn_path": 0, "creat": 0, "runtim": 0, "g": 0, "initi": 0, "blueprint": 0, "empti": 0, "wbich": 0, "wa": 0, "simcleardetectionmeshnam": [0, 11], "clear": 0, "filter": 0, "simcontinueforfram": [0, 11], "continu": 0, "resum": 0, "paus": 0, "simul": 0, "simcontinuefortim": [0, 11], "simcreatevoxelgrid": [0, 11], "re": 0, "construct": 0, "save": 0, "binvox": 0, "voxel": 0, "grid": 0, "environ": 0, "vector3r": [0, 11, 12], "center": 0, "m": 0, "size": 0, "each": 0, "dimens": 0, "resolut": 0, "output": 0, "file": [0, 10], "written": 0, "successfulli": 0, "simdestroyobject": [0, 11], "object_nam": [0, 11], "remov": 0, "select": 0, "queu": 0, "simenablefocusplan": [0, 11], "simenablemanualfocu": [0, 11], "simenableweath": [0, 11], "weather": 0, "effect": 0, "befor": 0, "simsetweatherparamet": [0, 11], "simflushpersistentmark": [0, 11], "persist": 0, "marker": 0, "those": 0, "plot": 0, "is_persist": 0, "below": 0, "simgetcamerainfo": [0, 11], "detail": 0, "camerainfo": [0, 11, 12], "simgetcollisioninfo": [0, 11], "info": 0, "collisioninfo": [0, 11, 12], "simgetcurrentfieldofview": [0, 11], "simgetdetect": [0, 11], "detectioninfo": [0, 11, 12], "arrai": [0, 10], "simgetdistortionparam": [0, 11], "distort": 0, "k1": 0, "k2": 0, "k3": 0, "p1": 0, "p2": 0, "respect": 0, "simgetfilmbackset": [0, 11], "simgetfocallength": [0, 11], "simgetfocusapertur": [0, 11], "simgetfocusdist": [0, 11], "simgetgroundtruthenviron": [0, 11], "environmentst": [0, 11, 12], "truth": 0, "simgetgroundtruthkinemat": [0, 11], "kinematicsst": [0, 11, 12], "kinemat": 0, "simgetimag": [0, 11], "singl": 0, "byte": 0, "png": [0, 10], "dump": 0, "abinari": 0, "numpi": [0, 10], "unit8": 0, "http": 0, "nervosi": [0, 12], "github": 0, "apis_imag": 0, "binari": [0, 10], "string": 0, "liter": 0, "compress": [0, 10, 11], "request": 0, "multipl": 0, "imagerequest": [0, 11, 12], "imagerespons": [0, 11, 12], "simgetlensset": [0, 11], "simgetlidarsegment": [0, 11], "deprec": 0, "segment": [0, 11], "collid": 0, "last": 0, "updat": 0, "wth": 0, "simgetmeshpositionvertexbuff": [0, 11], "static": [0, 9], "make": 0, "scene": [0, 11], "how": 0, "meshpositionvertexbuffersrespons": [0, 11, 12], "simgetobjectpos": [0, 11], "simgetobjectscal": [0, 11], "scale": [0, 10], "simgetpresetfilmbackset": [0, 11], "simgetpresetlensset": [0, 11], "simgetsegmentationobjectid": [0, 11], "map": 0, "rgb": 0, "seen": 0, "seg_rgb": 0, "txt": 0, "simgetvehiclepos": [0, 11], "simgetworldext": [0, 11], "repres": 0, "maximum": 0, "extent": 0, "simispaus": [0, 11], "simlistasset": [0, 11], "asset": 0, "present": 0, "registri": 0, "simlistsceneobject": [0, 11], "name_regex": 0, "regex": 0, "smaller": 0, "match": 0, "actor": 0, "against": 0, "cylind": 0, "simloadlevel": [0, 11], "level_nam": 0, "load": 0, "simpaus": [0, 11], "is_paus": 0, "releas": 0, "simplotarrow": [0, 11], "points_start": 0, "points_end": 0, "color_rgba": 0, "thick": 0, "arrow_s": 0, "2": 0, "arrow": 0, "n": 0, "3d": 0, "end": 0, "rgba": 0, "line": 0, "head": 0, "infinit": 0, "simplotlinelist": [0, 11], "strip": 0, "3": 0, "even": 0, "simplotlinestrip": [0, 11], "simplotpoint": [0, 11], "10": 0, "simplotstr": [0, 11], "where": 0, "one": 0, "font": 0, "transform": 0, "simplottransform": [0, 11], "length": 0, "simplottransformswithnam": [0, 11], "tf_scale": 0, "tf_thick": 0, "text_scal": 0, "text_color_rgba": 0, "simprintlogmessag": [0, 11], "messag": [0, 9, 11], "message_param": 0, "sever": 0, "print": 0, "window": 0, "suppli": 0, "next": 0, "case": 0, "same": 0, "differ": 0, "overwritten": 0, "new": 0, "displai": 0, "iter": 0, "keep": 0, "valid": 0, "inclus": 0, "color": 0, "rang": 0, "simrunconsolecommand": [0, 11], "execut": 0, "nativ": 0, "via": [0, 9], "afford": 0, "access": 0, "countless": 0, "built": 0, "stat": 0, "unit": 0, "fp": 0, "open": 0, "adjust": 0, "config": 0, "bespok": 0, "veri": 0, "easili": 0, "ad": 0, "custom": 0, "event": 0, "ce": 0, "myeventnam": 0, "arg": 0, "No": 0, "recompil": 0, "engin": 0, "simsetcamerafov": [0, 11], "fov_degre": 0, "field": 0, "view": 0, "simsetcamerapos": [0, 11], "orient": [0, 11], "simsetdetectionfilterradiu": [0, 11], "radius_cm": 0, "radiu": 0, "cm": 0, "simsetdistortionparam": [0, 11], "param_nam": 0, "distortion_param": 0, "dict": 0, "dictionari": 0, "param": 0, "simsetextforc": [0, 11], "ext_forc": 0, "arbitrari": 0, "forc": 0, "implement": 0, "simpl": 0, "payload": 0, "simsetfilmbackset": [0, 11], "sensor_width": 0, "sensor_height": 0, "simsetfocallength": [0, 11], "focal_length": 0, "simsetfocusapertur": [0, 11], "focus_apertur": 0, "simsetfocusdist": [0, 11], "focus_dist": 0, "simsetkinemat": [0, 11], "ignore_collis": 0, "don": [0, 9], "want": 0, "chang": 0, "just": 0, "compon": 0, "nan": 0, "pf": 0, "collis": [0, 11], "simsetlightintens": [0, 11], "light_nam": 0, "intens": 0, "light": 0, "simsetobjectmateri": [0, 11], "material_nam": 0, "component_id": 0, "swap": 0, "textur": 0, "texture_swap": 0, "materi": 0, "index": [0, 12], "element": 0, "simsetobjectmaterialfromtextur": [0, 11], "texture_path": 0, "simsetobjectpos": [0, 11], "teleport": 0, "mobil": 0, "movabl": 0, "undefin": 0, "www": 0, "unrealengin": 0, "com": 0, "en": 0, "u": 0, "blog": 0, "physic": 0, "immedi": 0, "without": 0, "simsetobjectscal": [0, 11], "scale_vector": 0, "simsetpresetfilmbackset": [0, 11], "preset_filmback_set": 0, "simsetpresetlensset": [0, 11], "preset_lens_set": 0, "simsetsegmentationobjectid": [0, 11], "object_id": [0, 11], "is_name_regex": 0, "specif": 0, "support": 0, "255": 0, "rbg": 0, "configur": 0, "found": 0, "simsettimeofdai": [0, 11], "start_datetim": 0, "is_start_datetime_dst": 0, "celestial_clock_spe": 0, "update_interval_sec": 0, "move_sun": 0, "sun": 0, "comput": 0, "coordin": 0, "origingeopoint": 0, "date": 0, "argument": 0, "dai": 0, "d": 0, "h": [0, 10], "2018": 0, "02": 0, "12": 0, "15": 0, "00": 0, "daylight": 0, "celesti": 0, "clock": 0, "faster": 0, "slower": 0, "than": 0, "100": 0, "mean": 0, "advanc": 0, "sky": 0, "much": 0, "interv": 0, "simsettracelin": [0, 11], "trace": 0, "press": [0, 9], "editor": 0, "enabletrac": 0, "simsetvehiclepos": [0, 11], "val": 0, "variou": 0, "weatherparamet": [0, 11, 12], "simsetwind": [0, 11], "wind": 0, "simspawnobject": [0, 11], "asset_nam": 0, "physics_en": 0, "is_blueprint": 0, "spawn": 0, "project": 0, "databas": 0, "had": 0, "simswaptextur": [0, 11], "tag": 0, "tex_id": 0, "material_id": 0, "delimit": 0, "identifi": 0, "perform": 0, "assign": 0, "undergo": 0, "out": 0, "bound": 0, "some": 0, "taken": 0, "modulo": 0, "were": 0, "avail": 0, "provid": 0, "perfom": 0, "simtestlineofsightbetweenpoint": [0, 11], "point1": 0, "point2": 0, "target": 0, "visibl": 0, "perspect": 0, "simtestlineofsighttopoint": [0, 11], "input": 0, "startrecord": [0, 11], "done": 0, "accord": 0, "stoprecord": [0, 11], "stop": 0, "roll_gain": 0, "pidgain": [0, 11, 12], "pitch_gain": 0, "yaw_gain": 0, "member": 0, "kp": 0, "ki": 0, "kd": 0, "to_list": [0, 11], "msgpackmixin": [0, 11, 12], "quaternionr": [0, 11, 12], "w_val": [0, 11], "x_val": [0, 11], "y_val": [0, 11], "z_val": [0, 11], "pressur": [0, 11], "qnh": [0, 11], "time_stamp": [0, 11], "box2d": [0, 11, 12], "vector2r": [0, 11, 12], "box3d": [0, 11, 12], "fov": [0, 11], "proj_mat": [0, 11], "projectionmatrix": [0, 11, 12], "handbrak": [0, 11], "is_manual_gear": [0, 11], "manual_gear": [0, 11], "gear_immedi": [0, 11], "set_throttl": [0, 11], "throttle_v": 0, "forward": 0, "gear": [0, 11], "kinematics_estim": [0, 11], "maxrpm": [0, 11], "rpm": [0, 11], "has_collid": [0, 11], "impact_point": [0, 11], "normal": [0, 11], "penetration_depth": [0, 11], "geo_point": [0, 11], "relative_pos": [0, 11], "max_dist": [0, 11], "min_dist": [0, 11], "air_dens": [0, 11], "air_pressur": [0, 11], "graviti": [0, 11], "temperatur": [0, 11], "gnssfixtyp": [0, 11, 12], "gnss_fix_2d_fix": [0, 11], "gnss_fix_3d_fix": [0, 11], "gnss_fix_no_fix": [0, 11], "gnss_fix_time_onli": [0, 11], "gnssreport": [0, 11, 12], "eph": [0, 11], "epv": [0, 11], "fix_typ": [0, 11], "time_utc": [0, 11], "gnss": [0, 11], "pixels_as_float": [0, 11], "camera_orient": [0, 11], "camera_posit": [0, 11], "height": [0, 9, 11], "image_data_float": [0, 11], "image_data_uint8": [0, 11], "width": [0, 9, 11], "depthperspect": [0, 11], "depthplanar": [0, 11], "depthvi": [0, 11], "disparitynorm": [0, 11], "4": 0, "infrar": [0, 11], "7": 0, "opticalflow": [0, 11], "8": 0, "opticalflowvi": [0, 11], "9": 0, "surfacenorm": [0, 11], "6": 0, "angular_veloc": [0, 11], "linear_acceler": [0, 11], "angular_acceler": [0, 11], "linear_veloc": [0, 11], "landedst": [0, 11, 12], "point_cloud": [0, 11], "magnetic_field_bodi": [0, 11], "magnetic_field_covari": [0, 11], "indic": [0, 11], "vertic": [0, 11], "classmethod": 0, "from_msgpack": [0, 11], "encod": 0, "to_msgpack": [0, 11], "kwarg": 0, "can_arm": [0, 11], "gps_locat": [0, 11], "landed_st": [0, 11], "rc_data": [0, 11], "readi": [0, 11], "ready_messag": [0, 11], "store": 0, "transmit": 0, "instanti": 0, "anglelevel": 0, "angler": 0, "proport": 0, "integr": 0, "deriv": 0, "position_v": 0, "none": 0, "orientation_v": 0, "containsnan": [0, 11], "nanpos": [0, 11], "x_gain": 0, "y_gain": 0, "z_gain": 0, "matrix": [0, 11], "conjug": [0, 11], "cross": [0, 11], "other": 0, "dot": [0, 11], "get_length": [0, 11], "invers": [0, 11], "nanquaternionr": [0, 11], "outer_product": [0, 11], "sgn": [0, 11], "star": [0, 11], "to_numpy_arrai": [0, 11], "distance_to": [0, 11], "nanvector3r": [0, 11], "to_quaternionr": [0, 11], "dust": [0, 11], "fog": [0, 11], "mapleleaf": [0, 11], "rain": [0, 11], "roadleaf": [0, 11], "roadsnow": [0, 11], "roadwet": [0, 11], "snow": [0, 11], "submodul": [1, 5, 11, 12], "client": [8, 11, 12], "cmd": 8, "get_pfm_arrai": [9, 10], "read_pfm": [9, 10], "write_fil": [9, 10], "write_pfm": [9, 10], "write_png": [9, 10], "flst": 9, "bstr": [9, 10], "obj": 9, "q": 9, "import": 9, "automat": 9, "first": 9, "tri": 9, "instal": 9, "pip": 9, "we": 9, "anyth": 9, "look": 9, "grand": 9, "parent": 9, "folder": 9, "ha": 9, "sy": 9, "numpixelswid": 9, "outputfil": 9, "kei": 9, "respons": 10, "pfm": 10, "filenam": 10, "write": 10, "channel": 10, "packag": [11, 12], "subpackag": [11, 12], "modul": [11, 12], "content": 11, "type": [11, 12], "page": 12, "document": 12, "python": 12, "search": 12}, "objects": {"": [[0, 0, 0, 1, "autonomysim", ""]], "autonomysim": [[1, 0, 0, 1, "ai", ""], [0, 0, 0, 1, "clients", ""], [7, 0, 0, 1, "sensors", ""], [0, 0, 0, 1, "types", ""], [8, 0, 0, 1, "unreal", ""], [9, 0, 0, 1, "utils", ""]], "autonomysim.ai": [[2, 0, 0, 1, "imitation", ""], [3, 0, 0, 1, "reinforcement", ""], [4, 0, 0, 1, "vision", ""]], "autonomysim.clients": [[0, 1, 1, 0, "CarClient", "Bases: VehicleClient, object"], [0, 1, 1, 0, "MultirotorClient", "Bases: VehicleClient, object"], [0, 1, 1, 0, "VehicleClient", "Bases: object"]], "autonomysim.clients.CarClient": [[0, 2, 1, 0, "getCarControls", "Name of vehicle"], [0, 2, 1, 0, "getCarState", "The position inside the returned CarState is in the frame of the vehicle's starting point"], [0, 2, 1, 0, "setCarControls", "Control the car using throttle, steering, brake, etc."]], "autonomysim.clients.CarClient.getCarControls": [[0, 3, 2, 0, "vehicle_name", "Name of vehicle"]], "autonomysim.clients.CarClient.getCarState": [[0, 3, 2, 0, "vehicle_name", "Name of vehicle"]], "autonomysim.clients.CarClient.setCarControls": [[0, 3, 2, 0, "controls", "Struct containing control values"], [0, 3, 2, 0, "vehicle_name", "Name of vehicle to be controlled"]], "autonomysim.clients.MultirotorClient": [[0, 2, 1, 0, "getMultirotorState", "The position inside the returned MultirotorState is in the frame of the vehicle's starting point"], [0, 2, 1, 0, "getRotorStates", "Used to obtain the current state of all a multirotor's rotors. The state includes the speeds, thrusts and torques for all rotors."], [0, 2, 1, 0, "goHomeAsync", "Return vehicle to Home i.e. Launch location"], [0, 2, 1, 0, "hoverAsync", ""], [0, 2, 1, 0, "landAsync", "Land the vehicle"], [0, 2, 1, 0, "moveByAngleRatesThrottleAsync", "Desired throttle is between 0.0 to 1.0"], [0, 2, 1, 0, "moveByAngleRatesZAsync", "z is given in local NED frame of the vehicle."], [0, 2, 1, 0, "moveByAngleThrottleAsync", ""], [0, 2, 1, 0, "moveByAngleZAsync", ""], [0, 2, 1, 0, "moveByManualAsync", "Read current RC state and use it to control the vehicles."], [0, 2, 1, 0, "moveByMotorPWMsAsync", "Directly control the motors using PWM values"], [0, 2, 1, 0, "moveByRC", ""], [0, 2, 1, 0, "moveByRollPitchYawThrottleAsync", "Desired throttle is between 0.0 to 1.0"], [0, 2, 1, 0, "moveByRollPitchYawZAsync", "z is given in local NED frame of the vehicle."], [0, 2, 1, 0, "moveByRollPitchYawrateThrottleAsync", "Desired throttle is between 0.0 to 1.0"], [0, 2, 1, 0, "moveByRollPitchYawrateZAsync", "z is given in local NED frame of the vehicle."], [0, 2, 1, 0, "moveByVelocityAsync", "desired velocity in world (NED) X axis"], [0, 2, 1, 0, "moveByVelocityBodyFrameAsync", "desired velocity in the X axis of the vehicle's local NED frame."], [0, 2, 1, 0, "moveByVelocityZAsync", ""], [0, 2, 1, 0, "moveByVelocityZBodyFrameAsync", "desired velocity in the X axis of the vehicle's local NED frame"], [0, 2, 1, 0, "moveOnPathAsync", ""], [0, 2, 1, 0, "moveToGPSAsync", ""], [0, 2, 1, 0, "moveToPositionAsync", ""], [0, 2, 1, 0, "moveToZAsync", ""], [0, 2, 1, 0, "rotateByYawRateAsync", ""], [0, 2, 1, 0, "rotateToYawAsync", ""], [0, 2, 1, 0, "setAngleLevelControllerGains", "Sets angle level controller gains (used by any API setting angle references - for ex: moveByRollPitchYawZAsync(), moveByRollPitchYawThrottleAsync(), etc)"], [0, 2, 1, 0, "setAngleRateControllerGains", "This is because any velocity setpoint is converted to an angle level setpoint which is tracked with an angle level controllers. That angle level setpoint is itself tracked with and angle rate controller."], [0, 2, 1, 0, "setPositionControllerGains", "Sets position controller gains for moveByPositionAsync. This function should only be called if the default position control PID gains need to be modified."], [0, 2, 1, 0, "setVelocityControllerGains", "Sets velocity controller gains for moveByVelocityAsync()."], [0, 2, 1, 0, "takeoffAsync", "Takeoff vehicle to 3m above ground. Vehicle should not be moving when this API is used"]], "autonomysim.clients.MultirotorClient.getMultirotorState": [[0, 3, 2, 0, "vehicle_name", "Vehicle to get the state of"]], "autonomysim.clients.MultirotorClient.getRotorStates": [[0, 3, 2, 0, "vehicle_name", "Vehicle to get the rotor state of"]], "autonomysim.clients.MultirotorClient.goHomeAsync": [[0, 3, 2, 0, "timeout_sec", "Timeout for the vehicle to reach desired altitude"], [0, 3, 2, 0, "vehicle_name", "Name of the vehicle to send this command to"]], "autonomysim.clients.MultirotorClient.landAsync": [[0, 3, 2, 0, "timeout_sec", "Timeout for the vehicle to land"], [0, 3, 2, 0, "vehicle_name", "Name of the vehicle to send this command to"]], "autonomysim.clients.MultirotorClient.moveByAngleRatesThrottleAsync": [[0, 3, 2, 0, "duration", "Desired amount of time (seconds), to send this command for"], [0, 3, 2, 0, "pitch_rate", "Desired pitch rate, in radians / second"], [0, 3, 2, 0, "roll_rate", "Desired roll rate, in radians / second"], [0, 3, 2, 0, "throttle", "Desired throttle (between 0.0 to 1.0)"], [0, 3, 2, 0, "vehicle_name", "Name of the multirotor to send this command to"], [0, 3, 2, 0, "yaw_rate", "Desired yaw rate, in radians / second"]], "autonomysim.clients.MultirotorClient.moveByAngleRatesZAsync": [[0, 3, 2, 0, "duration", "Desired amount of time (seconds), to send this command for"], [0, 3, 2, 0, "pitch_rate", "Desired pitch rate, in radians / second"], [0, 3, 2, 0, "roll_rate", "Desired roll rate, in radians / second"], [0, 3, 2, 0, "vehicle_name", "Name of the multirotor to send this command to"], [0, 3, 2, 0, "yaw_rate", "Desired yaw rate, in radians / second"], [0, 3, 2, 0, "z", "Desired Z value (in local NED frame of the vehicle)"]], "autonomysim.clients.MultirotorClient.moveByManualAsync": [[0, 3, 2, "autonomysim.clients.MultirotorClient.moveByManualAsync.drivetrain-0", "drivetrain=0", "when ForwardOnly, vehicle rotates itself so that its front is always facing the direction of travel. If MaxDegreeOfFreedom then it doesn't do that and instead does crab-like movement"], [0, 3, 2, 0, "duration", "after this duration vehicle would switch back to non-manual mode"], [0, 3, 2, "autonomysim.clients.MultirotorClient.moveByManualAsync.vehicle_name", "vehicle_name=&#x27;&#x27;", "Name of the multirotor to send this command to"], [0, 3, 2, 0, "vx_max", "max velocity allowed in x direction"], [0, 3, 2, 0, "vy_max", "max velocity allowed in y direction"], [0, 3, 2, 0, "z_min", "min z allowed for vehicle position"]], "autonomysim.clients.MultirotorClient.moveByMotorPWMsAsync": [[0, 3, 2, 0, "duration", "Desired amount of time (seconds), to send this command for"], [0, 3, 2, 0, "front_left_pwm", "PWM value for the front left motor (between 0.0 to 1.0)"], [0, 3, 2, 0, "front_right_pwm", "PWM value for the front right motor (between 0.0 to 1.0)"], [0, 3, 2, 0, "rear_left_pwm", "PWM value for the rear left motor (between 0.0 to 1.0)"], [0, 3, 2, 0, "rear_right_pwm", "PWM value for the rear right motor (between 0.0 to 1.0)"], [0, 3, 2, 0, "vehicle_name", "Name of the multirotor to send this command to"]], "autonomysim.clients.MultirotorClient.moveByRollPitchYawThrottleAsync": [[0, 3, 2, 0, "duration", "Desired amount of time (seconds), to send this command for"], [0, 3, 2, 0, "pitch", "Desired pitch angle."], [0, 3, 2, 0, "roll", "Desired roll angle."], [0, 3, 2, 0, "throttle", "Desired throttle (between 0.0 to 1.0)"], [0, 3, 2, 0, "vehicle_name", "Name of the multirotor to send this command to"], [0, 3, 2, 0, "yaw", "Desired yaw angle."]], "autonomysim.clients.MultirotorClient.moveByRollPitchYawZAsync": [[0, 3, 2, 0, "duration", "Desired amount of time (seconds), to send this command for"], [0, 3, 2, 0, "pitch", "Desired pitch angle, in radians."], [0, 3, 2, 0, "roll", "Desired roll angle, in radians."], [0, 3, 2, 0, "vehicle_name", "Name of the multirotor to send this command to"], [0, 3, 2, 0, "yaw", "Desired yaw angle, in radians."], [0, 3, 2, 0, "z", "Desired Z value (in local NED frame of the vehicle)"]], "autonomysim.clients.MultirotorClient.moveByRollPitchYawrateThrottleAsync": [[0, 3, 2, 0, "duration", "Desired amount of time (seconds), to send this command for"], [0, 3, 2, 0, "pitch", "Desired pitch angle, in radians."], [0, 3, 2, 0, "roll", "Desired roll angle, in radians."], [0, 3, 2, 0, "throttle", "Desired throttle (between 0.0 to 1.0)"], [0, 3, 2, 0, "vehicle_name", "Name of the multirotor to send this command to"], [0, 3, 2, 0, "yaw_rate", "Desired yaw rate, in radian per second."]], "autonomysim.clients.MultirotorClient.moveByRollPitchYawrateZAsync": [[0, 3, 2, 0, "duration", "Desired amount of time (seconds), to send this command for"], [0, 3, 2, 0, "pitch", "Desired pitch angle, in radians."], [0, 3, 2, 0, "roll", "Desired roll angle, in radians."], [0, 3, 2, 0, "vehicle_name", "Name of the multirotor to send this command to"], [0, 3, 2, 0, "yaw_rate", "Desired yaw rate, in radian per second."], [0, 3, 2, 0, "z", "Desired Z value (in local NED frame of the vehicle)"]], "autonomysim.clients.MultirotorClient.moveByVelocityAsync": [[0, 3, 2, "autonomysim.clients.MultirotorClient.moveByVelocityAsync.drivetrain-0", "drivetrain=0", ""], [0, 3, 2, 0, "duration", "Desired amount of time (seconds), to send this command for"], [0, 3, 2, "autonomysim.clients.MultirotorClient.moveByVelocityAsync.vehicle_name", "vehicle_name=&#x27;&#x27;", "Name of the multirotor to send this command to"], [0, 3, 2, 0, "vx", "desired velocity in world (NED) X axis"], [0, 3, 2, 0, "vy", "desired velocity in world (NED) Y axis"], [0, 3, 2, 0, "vz", "desired velocity in world (NED) Z axis"]], "autonomysim.clients.MultirotorClient.moveByVelocityBodyFrameAsync": [[0, 3, 2, "autonomysim.clients.MultirotorClient.moveByVelocityBodyFrameAsync.drivetrain-0", "drivetrain=0", ""], [0, 3, 2, 0, "duration", "Desired amount of time (seconds), to send this command for"], [0, 3, 2, "autonomysim.clients.MultirotorClient.moveByVelocityBodyFrameAsync.vehicle_name", "vehicle_name=&#x27;&#x27;", "Name of the multirotor to send this command to"], [0, 3, 2, 0, "vx", "desired velocity in the X axis of the vehicle's local NED frame."], [0, 3, 2, 0, "vy", "desired velocity in the Y axis of the vehicle's local NED frame."], [0, 3, 2, 0, "vz", "desired velocity in the Z axis of the vehicle's local NED frame."]], "autonomysim.clients.MultirotorClient.moveByVelocityZBodyFrameAsync": [[0, 3, 2, "autonomysim.clients.MultirotorClient.moveByVelocityZBodyFrameAsync.drivetrain-0", "drivetrain=0", ""], [0, 3, 2, 0, "duration", "Desired amount of time (seconds), to send this command for"], [0, 3, 2, "autonomysim.clients.MultirotorClient.moveByVelocityZBodyFrameAsync.vehicle_name", "vehicle_name=&#x27;&#x27;", "Name of the multirotor to send this command to"], [0, 3, 2, 0, "vx", "desired velocity in the X axis of the vehicle's local NED frame"], [0, 3, 2, 0, "vy", "desired velocity in the Y axis of the vehicle's local NED frame"], [0, 3, 2, 0, "z", "desired Z value (in local NED frame of the vehicle)"]], "autonomysim.clients.MultirotorClient.setAngleLevelControllerGains": [[0, 3, 2, "autonomysim.clients.MultirotorClient.setAngleLevelControllerGains.vehicle_name", "vehicle_name=&#x27;&#x27;", "Name of the multirotor to send this command to"]], "autonomysim.clients.MultirotorClient.setAngleRateControllerGains": [[0, 3, 2, "autonomysim.clients.MultirotorClient.setAngleRateControllerGains.vehicle_name", "vehicle_name=&#x27;&#x27;", "Name of the multirotor to send this command to"]], "autonomysim.clients.MultirotorClient.setVelocityControllerGains": [[0, 3, 2, "autonomysim.clients.MultirotorClient.setVelocityControllerGains.vehicle_name", "vehicle_name=&#x27;&#x27;", "Name of the multirotor to send this command to"]], "autonomysim.clients.MultirotorClient.takeoffAsync": [[0, 3, 2, 0, "timeout_sec", "Timeout for the vehicle to reach desired altitude"], [0, 3, 2, 0, "vehicle_name", "Name of the vehicle to send this command to"]], "autonomysim.clients.VehicleClient": [[0, 2, 1, 0, "armDisarm", "Arms or disarms vehicle"], [0, 2, 1, 0, "cancelLastTask", "Cancel previous Async task"], [0, 2, 1, 0, "confirmConnection", "Checks state of connection every 1 sec and reports it in Console so user can see the progress for connection."], [0, 2, 1, 0, "enableApiControl", "Enables or disables API control for vehicle corresponding to vehicle_name"], [0, 2, 1, 0, "getBarometerData", "Name of Barometer to get data from, specified in settings.json"], [0, 2, 1, 0, "getClientVersion", ""], [0, 2, 1, 0, "getDistanceSensorData", "Name of Distance Sensor to get data from, specified in settings.json"], [0, 2, 1, 0, "getGpsData", "Name of GPS to get data from, specified in settings.json"], [0, 2, 1, 0, "getHomeGeoPoint", "Get the Home location of the vehicle"], [0, 2, 1, 0, "getImuData", "Name of IMU to get data from, specified in settings.json"], [0, 2, 1, 0, "getLidarData", "Name of Lidar to get data from, specified in settings.json"], [0, 2, 1, 0, "getMagnetometerData", "Name of Magnetometer to get data from, specified in settings.json"], [0, 2, 1, 0, "getMinRequiredClientVersion", ""], [0, 2, 1, 0, "getMinRequiredServerVersion", ""], [0, 2, 1, 0, "getServerVersion", ""], [0, 2, 1, 0, "getSettingsString", "Fetch the settings text being used by AutonomySim"], [0, 2, 1, 0, "isApiControlEnabled", "Returns true if API control is established."], [0, 2, 1, 0, "isRecording", "Whether Recording is running or not"], [0, 2, 1, 0, "listVehicles", "Lists the names of current vehicles"], [0, 2, 1, 0, "ping", "If connection is established then this call will return true otherwise it will be blocked until timeout"], [0, 2, 1, 0, "reset", "Reset the vehicle to its original starting state"], [0, 2, 1, 0, "simAddDetectionFilterMeshName", "Add mesh name to detect in wild card format"], [0, 2, 1, 0, "simAddVehicle", "Create vehicle at runtime"], [0, 2, 1, 0, "simClearDetectionMeshNames", "Clear all mesh names from detection filter"], [0, 2, 1, 0, "simContinueForFrames", "Continue (or resume if paused) the simulation for the specified number of frames, after which the simulation will be paused."], [0, 2, 1, 0, "simContinueForTime", "Continue the simulation for the specified number of seconds"], [0, 2, 1, 0, "simCreateVoxelGrid", "Construct and save a binvox-formatted voxel grid of environment"], [0, 2, 1, 0, "simDestroyObject", "Removes selected object from the world"], [0, 2, 1, 0, "simEnableFocusPlane", ""], [0, 2, 1, 0, "simEnableManualFocus", ""], [0, 2, 1, 0, "simEnableWeather", "Enable Weather effects. Needs to be called before using simSetWeatherParameter API"], [0, 2, 1, 0, "simFlushPersistentMarkers", "Clear any persistent markers - those plotted with setting is_persistent=True in the APIs below"], [0, 2, 1, 0, "simGetCameraInfo", "Get details about the camera"], [0, 2, 1, 0, "simGetCollisionInfo", "Name of the Vehicle to get the info of"], [0, 2, 1, 0, "simGetCurrentFieldOfView", ""], [0, 2, 1, 0, "simGetDetections", "Get current detections"], [0, 2, 1, 0, "simGetDistortionParams", "Get camera distortion parameters"], [0, 2, 1, 0, "simGetFilmbackSettings", ""], [0, 2, 1, 0, "simGetFocalLength", ""], [0, 2, 1, 0, "simGetFocusAperture", ""], [0, 2, 1, 0, "simGetFocusDistance", ""], [0, 2, 1, 0, "simGetGroundTruthEnvironment", "Get ground truth environment state"], [0, 2, 1, 0, "simGetGroundTruthKinematics", "Get Ground truth kinematics of the vehicle"], [0, 2, 1, 0, "simGetImage", "Get a single image"], [0, 2, 1, 0, "simGetImages", "Get multiple images"], [0, 2, 1, 0, "simGetLensSettings", ""], [0, 2, 1, 0, "simGetLidarSegmentation", "NOTE: Deprecated API, use getLidarData() API instead Returns Segmentation ID of each point's collided object in the last Lidar update"], [0, 2, 1, 0, "simGetMeshPositionVertexBuffers", "Returns the static meshes that make up the scene"], [0, 2, 1, 0, "simGetObjectPose", "The position inside the returned Pose is in the world frame"], [0, 2, 1, 0, "simGetObjectScale", "Gets scale of an object in the world"], [0, 2, 1, 0, "simGetPresetFilmbackSettings", ""], [0, 2, 1, 0, "simGetPresetLensSettings", ""], [0, 2, 1, 0, "simGetSegmentationObjectID", "Returns Object ID for the given mesh name"], [0, 2, 1, 0, "simGetVehiclePose", "The position inside the returned Pose is in the frame of the vehicle's starting point"], [0, 2, 1, 0, "simGetWorldExtents", "Returns a list of GeoPoints representing the minimum and maximum extents of the world"], [0, 2, 1, 0, "simIsPause", "Returns true if the simulation is paused"], [0, 2, 1, 0, "simListAssets", "Lists all the assets present in the Asset Registry"], [0, 2, 1, 0, "simListSceneObjects", "Lists the objects present in the environment"], [0, 2, 1, 0, "simLoadLevel", "Loads a level specified by its name"], [0, 2, 1, 0, "simPause", "Pauses simulation"], [0, 2, 1, 0, "simPlotArrows", "Plots a list of arrows in World NED frame, defined from points_start[0] to points_end[0], points_start[1] to points_end[1], ... , points_start[n-1] to points_end[n-1]"], [0, 2, 1, 0, "simPlotLineList", "Plots a line strip in World NED frame, defined from points[0] to points[1], points[2] to points[3], ... , points[n-2] to points[n-1]"], [0, 2, 1, 0, "simPlotLineStrip", "Plots a line strip in World NED frame, defined from points[0] to points[1], points[1] to points[2], ... , points[n-2] to points[n-1]"], [0, 2, 1, 0, "simPlotPoints", "Plot a list of 3D points in World NED frame"], [0, 2, 1, 0, "simPlotStrings", "Plots a list of strings at desired positions in World NED frame."], [0, 2, 1, 0, "simPlotTransforms", "Plots a list of transforms in World NED frame."], [0, 2, 1, 0, "simPlotTransformsWithNames", "Plots a list of transforms with their names in World NED frame."], [0, 2, 1, 0, "simPrintLogMessage", "Prints the specified message in the simulator's window."], [0, 2, 1, 0, "simRunConsoleCommand", "Allows the client to execute a command in Unreal's native console, via an API. Affords access to the countless built-in commands such as \"stat unit\", \"stat fps\", \"open [map]\", adjust any config settings, etc. etc. Allows the user to create bespoke APIs very easily, by adding a custom event to the level blueprint, and then calling the console command \"ce MyEventName [args]\". No recompilation of AutonomySim needed!"], [0, 2, 1, 0, "simSetCameraFov", "Control the field of view of a selected camera"], [0, 2, 1, 0, "simSetCameraPose", "Control the pose of a selected camera"], [0, 2, 1, 0, "simSetDetectionFilterRadius", "Set detection radius for all cameras"], [0, 2, 1, 0, "simSetDistortionParam", "Set single camera distortion parameter"], [0, 2, 1, 0, "simSetDistortionParams", "Set camera distortion parameters"], [0, 2, 1, 0, "simSetExtForce", "Set arbitrary external forces, in World frame, NED direction. Can be used for implementing simple payloads."], [0, 2, 1, 0, "simSetFilmbackSettings", ""], [0, 2, 1, 0, "simSetFocalLength", ""], [0, 2, 1, 0, "simSetFocusAperture", ""], [0, 2, 1, 0, "simSetFocusDistance", ""], [0, 2, 1, 0, "simSetKinematics", "Set the kinematics state of the vehicle"], [0, 2, 1, 0, "simSetLightIntensity", "Change intensity of named light"], [0, 2, 1, 0, "simSetObjectMaterial", "Runtime Swap Texture API See https://nervosys.github.io/AutonomySim/texture_swapping/ for details :param object_name: name of object to set material for :type object_name: str :param material_name: name of material to set for object :type material_name: str :param component_id: index of material elements :type component_id: int, optional"], [0, 2, 1, 0, "simSetObjectMaterialFromTexture", "Runtime Swap Texture API See https://nervosys.github.io/AutonomySim/texture_swapping/ for details :param object_name: name of object to set material for :type object_name: str :param texture_path: path to texture to set for object :type texture_path: str :param component_id: index of material elements :type component_id: int, optional"], [0, 2, 1, 0, "simSetObjectPose", "Set the pose of the object(actor) in the environment"], [0, 2, 1, 0, "simSetObjectScale", "Sets scale of an object in the world"], [0, 2, 1, 0, "simSetPresetFilmbackSettings", ""], [0, 2, 1, 0, "simSetPresetLensSettings", ""], [0, 2, 1, 0, "simSetSegmentationObjectID", "Set segmentation ID for specific objects"], [0, 2, 1, 0, "simSetTimeOfDay", "Control the position of Sun in the environment"], [0, 2, 1, 0, "simSetTraceLine", "Modify the color and thickness of the line when Tracing is enabled"], [0, 2, 1, 0, "simSetVehiclePose", "Set the pose of the vehicle"], [0, 2, 1, 0, "simSetWeatherParameter", "Enable various weather effects"], [0, 2, 1, 0, "simSetWind", "Set simulated wind, in World frame, NED direction, m/s"], [0, 2, 1, 0, "simSpawnObject", "Spawned selected object in the world"], [0, 2, 1, 0, "simSwapTextures", "Runtime Swap Texture API"], [0, 2, 1, 0, "simTestLineOfSightBetweenPoints", "Returns whether the target point is visible from the perspective of the source point"], [0, 2, 1, 0, "simTestLineOfSightToPoint", "Returns whether the target point is visible from the perspective of the inputted vehicle"], [0, 2, 1, 0, "startRecording", "Start Recording"], [0, 2, 1, 0, "stopRecording", "Stop Recording"]], "autonomysim.clients.VehicleClient.armDisarm": [[0, 3, 2, 0, "arm", "True to arm, False to disarm the vehicle"], [0, 3, 2, 0, "vehicle_name", "Name of the vehicle to send this command to"]], "autonomysim.clients.VehicleClient.cancelLastTask": [[0, 3, 2, 0, "vehicle_name", "Name of the vehicle"]], "autonomysim.clients.VehicleClient.enableApiControl": [[0, 3, 2, 0, "is_enabled", "True to enable, False to disable API control"], [0, 3, 2, 0, "vehicle_name", "Name of the vehicle to send this command to"]], "autonomysim.clients.VehicleClient.getBarometerData": [[0, 3, 2, 0, "barometer_name", "Name of Barometer to get data from, specified in settings.json"], [0, 3, 2, 0, "vehicle_name", "Name of vehicle to which the sensor corresponds to"]], "autonomysim.clients.VehicleClient.getDistanceSensorData": [[0, 3, 2, 0, "distance_sensor_name", "Name of Distance Sensor to get data from, specified in settings.json"], [0, 3, 2, 0, "vehicle_name", "Name of vehicle to which the sensor corresponds to"]], "autonomysim.clients.VehicleClient.getGpsData": [[0, 3, 2, 0, "gps_name", "Name of GPS to get data from, specified in settings.json"], [0, 3, 2, 0, "vehicle_name", "Name of vehicle to which the sensor corresponds to"]], "autonomysim.clients.VehicleClient.getHomeGeoPoint": [[0, 3, 2, 0, "vehicle_name", "Name of vehicle to get home location of"]], "autonomysim.clients.VehicleClient.getImuData": [[0, 3, 2, 0, "imu_name", "Name of IMU to get data from, specified in settings.json"], [0, 3, 2, 0, "vehicle_name", "Name of vehicle to which the sensor corresponds to"]], "autonomysim.clients.VehicleClient.getLidarData": [[0, 3, 2, 0, "lidar_name", "Name of Lidar to get data from, specified in settings.json"], [0, 3, 2, 0, "vehicle_name", "Name of vehicle to which the sensor corresponds to"]], "autonomysim.clients.VehicleClient.getMagnetometerData": [[0, 3, 2, 0, "magnetometer_name", "Name of Magnetometer to get data from, specified in settings.json"], [0, 3, 2, 0, "vehicle_name", "Name of vehicle to which the sensor corresponds to"]], "autonomysim.clients.VehicleClient.isApiControlEnabled": [[0, 3, 2, 0, "vehicle_name", "Name of the vehicle"]], "autonomysim.clients.VehicleClient.simAddDetectionFilterMeshName": [[0, 3, 2, 0, "camera_name", "Name of the camera, for backwards compatibility, ID numbers such as 0,1,etc. can also be used"], [0, 3, 2, 0, "external", "Whether the camera is an External Camera"], [0, 3, 2, 0, "image_type", "Type of image required"], [0, 3, 2, 0, "mesh_name", "mesh name in wild card format"], [0, 3, 2, 0, "vehicle_name", "Vehicle which the camera is associated with"]], "autonomysim.clients.VehicleClient.simAddVehicle": [[0, 3, 2, 0, "pawn_path", "Vehicle blueprint path, default empty wbich uses the default blueprint for the vehicle type"], [0, 3, 2, 0, "pose", "Initial pose of the vehicle"], [0, 3, 2, 0, "vehicle_name", "Name of the vehicle being created"], [0, 3, 2, 0, "vehicle_type", "Type of vehicle, e.g. \"simpleflight\""]], "autonomysim.clients.VehicleClient.simClearDetectionMeshNames": [[0, 3, 2, 0, "camera_name", "Name of the camera, for backwards compatibility, ID numbers such as 0,1,etc. can also be used"], [0, 3, 2, 0, "external", "Whether the camera is an External Camera"], [0, 3, 2, 0, "image_type", "Type of image required"], [0, 3, 2, 0, "vehicle_name", "Vehicle which the camera is associated with"]], "autonomysim.clients.VehicleClient.simContinueForFrames": [[0, 3, 2, 0, "frames", "Frames to run the simulation for"]], "autonomysim.clients.VehicleClient.simContinueForTime": [[0, 3, 2, 0, "seconds", "Time to run the simulation for"]], "autonomysim.clients.VehicleClient.simCreateVoxelGrid": [[0, 3, 2, 0, "of", "Name of output file to save voxel grid as"], [0, 3, 2, 0, "position", "Position around which voxel grid is centered in m"], [0, 3, 2, 0, "res", "Resolution of voxel grid in m"], [0, 3, 2, 0, "x", "Size of each voxel grid dimension in m"], [0, 3, 2, 0, "y", "Size of each voxel grid dimension in m"], [0, 3, 2, 0, "z", "Size of each voxel grid dimension in m"]], "autonomysim.clients.VehicleClient.simDestroyObject": [[0, 3, 2, 0, "object_name", "Name of object to be removed"]], "autonomysim.clients.VehicleClient.simEnableWeather": [[0, 3, 2, 0, "enable", "True to enable, False to disable"]], "autonomysim.clients.VehicleClient.simGetCameraInfo": [[0, 3, 2, 0, "camera_name", "Name of the camera, for backwards compatibility, ID numbers such as 0,1,etc. can also be used"], [0, 3, 2, 0, "external", "Whether the camera is an External Camera"], [0, 3, 2, 0, "vehicle_name", "Vehicle which the camera is associated with"]], "autonomysim.clients.VehicleClient.simGetCollisionInfo": [[0, 3, 2, 0, "vehicle_name", "Name of the Vehicle to get the info of"]], "autonomysim.clients.VehicleClient.simGetDetections": [[0, 3, 2, 0, "camera_name", "Name of the camera, for backwards compatibility, ID numbers such as 0,1,etc. can also be used"], [0, 3, 2, 0, "external", "Whether the camera is an External Camera"], [0, 3, 2, 0, "image_type", "Type of image required"], [0, 3, 2, 0, "vehicle_name", "Vehicle which the camera is associated with"]], "autonomysim.clients.VehicleClient.simGetDistortionParams": [[0, 3, 2, 0, "camera_name", "Name of the camera, for backwards compatibility, ID numbers such as 0,1,etc. can also be used"], [0, 3, 2, 0, "external", "Whether the camera is an External Camera"], [0, 3, 2, 0, "vehicle_name", "Vehicle which the camera is associated with"]], "autonomysim.clients.VehicleClient.simGetGroundTruthEnvironment": [[0, 3, 2, 0, "vehicle_name", "Name of the vehicle"]], "autonomysim.clients.VehicleClient.simGetGroundTruthKinematics": [[0, 3, 2, 0, "vehicle_name", "Name of the vehicle"]], "autonomysim.clients.VehicleClient.simGetImage": [[0, 3, 2, 0, "camera_name", "Name of the camera, for backwards compatibility, ID numbers such as 0,1,etc. can also be used"], [0, 3, 2, 0, "external", "Whether the camera is an External Camera"], [0, 3, 2, 0, "image_type", "Type of image required"], [0, 3, 2, 0, "vehicle_name", "Name of the vehicle with the camera"]], "autonomysim.clients.VehicleClient.simGetImages": [[0, 3, 2, 0, "external", "Whether the camera is an External Camera"], [0, 3, 2, 0, "requests", "Images required"], [0, 3, 2, 0, "vehicle_name", "Name of vehicle associated with the camera"]], "autonomysim.clients.VehicleClient.simGetLidarSegmentation": [[0, 3, 2, 0, "lidar_name", "Name of Lidar sensor"], [0, 3, 2, 0, "vehicle_name", "Name of the vehicle wth the sensor"]], "autonomysim.clients.VehicleClient.simGetObjectPose": [[0, 3, 2, 0, "object_name", "Object to get the Pose of"]], "autonomysim.clients.VehicleClient.simGetObjectScale": [[0, 3, 2, 0, "object_name", "Object to get the scale of"]], "autonomysim.clients.VehicleClient.simGetSegmentationObjectID": [[0, 3, 2, 0, "mesh_name", "Name of the mesh to get the ID of"]], "autonomysim.clients.VehicleClient.simGetVehiclePose": [[0, 3, 2, 0, "vehicle_name", "Name of the vehicle to get the Pose of"]], "autonomysim.clients.VehicleClient.simListSceneObjects": [[0, 3, 2, 0, "name_regex", "String to match actor names against, e.g. \"Cylinder.*\""]], "autonomysim.clients.VehicleClient.simLoadLevel": [[0, 3, 2, 0, "level_name", "Name of the level to load"]], "autonomysim.clients.VehicleClient.simPause": [[0, 3, 2, 0, "is_paused", "True to pause the simulation, False to release"]], "autonomysim.clients.VehicleClient.simPlotArrows": [[0, 3, 2, 0, "arrow_size", "Size of arrow head"], [0, 3, 2, 0, "color_rgba", "desired RGBA values from 0.0 to 1.0"], [0, 3, 2, 0, "duration", "Duration (seconds) to plot for"], [0, 3, 2, 0, "is_persistent", "If set to True, the desired object will be plotted for infinite time."], [0, 3, 2, 0, "points_end", "List of 3D end positions of arrow start positions, specified as Vector3r objects"], [0, 3, 2, 0, "points_start", "List of 3D start positions of arrow start positions, specified as Vector3r objects"], [0, 3, 2, 0, "thickness", "Thickness of line"]], "autonomysim.clients.VehicleClient.simPlotLineList": [[0, 3, 2, 0, "color_rgba", "desired RGBA values from 0.0 to 1.0"], [0, 3, 2, 0, "duration", "Duration (seconds) to plot for"], [0, 3, 2, 0, "is_persistent", "If set to True, the desired object will be plotted for infinite time."], [0, 3, 2, 0, "points", "List of 3D locations of line start and end points, specified as Vector3r objects. Must be even"], [0, 3, 2, 0, "thickness", "Thickness of line"]], "autonomysim.clients.VehicleClient.simPlotLineStrip": [[0, 3, 2, 0, "color_rgba", "desired RGBA values from 0.0 to 1.0"], [0, 3, 2, 0, "duration", "Duration (seconds) to plot for"], [0, 3, 2, 0, "is_persistent", "If set to True, the desired object will be plotted for infinite time."], [0, 3, 2, 0, "points", "List of 3D locations of line start and end points, specified as Vector3r objects"], [0, 3, 2, 0, "thickness", "Thickness of line"]], "autonomysim.clients.VehicleClient.simPlotPoints": [[0, 3, 2, 0, "color_rgba", "desired RGBA values from 0.0 to 1.0"], [0, 3, 2, 0, "duration", "Duration (seconds) to plot for"], [0, 3, 2, 0, "is_persistent", "If set to True, the desired object will be plotted for infinite time."], [0, 3, 2, 0, "points", "List of Vector3r objects"], [0, 3, 2, 0, "size", "Size of plotted point"]], "autonomysim.clients.VehicleClient.simPlotStrings": [[0, 3, 2, 0, "color_rgba", "desired RGBA values from 0.0 to 1.0"], [0, 3, 2, 0, "duration", "Duration (seconds) to plot for"], [0, 3, 2, 0, "positions", "List of positions where the strings should be plotted. Should be in one-to-one correspondence with the strings' list"], [0, 3, 2, 0, "scale", "Font scale of transform name"], [0, 3, 2, 0, "strings", "List of strings to plot"]], "autonomysim.clients.VehicleClient.simPlotTransforms": [[0, 3, 2, 0, "duration", "Duration (seconds) to plot for"], [0, 3, 2, 0, "is_persistent", "If set to True, the desired object will be plotted for infinite time."], [0, 3, 2, 0, "poses", "List of Pose objects representing the transforms to plot"], [0, 3, 2, 0, "scale", "Length of transforms' axes"], [0, 3, 2, 0, "thickness", "Thickness of transforms' axes"]], "autonomysim.clients.VehicleClient.simPlotTransformsWithNames": [[0, 3, 2, 0, "duration", "Duration (seconds) to plot for"], [0, 3, 2, 0, "names", "List of strings with one-to-one correspondence to list of poses"], [0, 3, 2, 0, "poses", "List of Pose objects representing the transforms to plot"], [0, 3, 2, 0, "text_color_rgba", "desired RGBA values from 0.0 to 1.0 for the transform name"], [0, 3, 2, 0, "text_scale", "Font scale of transform name"], [0, 3, 2, 0, "tf_scale", "Length of transforms' axes"], [0, 3, 2, 0, "tf_thickness", "Thickness of transforms' axes"]], "autonomysim.clients.VehicleClient.simPrintLogMessage": [[0, 3, 2, 0, "message", "Message to be printed"], [0, 3, 2, 0, "message_param", "Parameter to be printed next to the message"], [0, 3, 2, 0, "severity", "Range 0-3, inclusive, corresponding to the severity of the message"]], "autonomysim.clients.VehicleClient.simRunConsoleCommand": [[0, 3, 2, 0, "command", "Desired Unreal Engine Console command to run"]], "autonomysim.clients.VehicleClient.simSetCameraFov": [[0, 3, 2, 0, "camera_name", "Name of the camera to be controlled"], [0, 3, 2, 0, "external", "Whether the camera is an External Camera"], [0, 3, 2, 0, "fov_degrees", "Value of field of view in degrees"], [0, 3, 2, 0, "vehicle_name", "Name of vehicle which the camera corresponds to"]], "autonomysim.clients.VehicleClient.simSetCameraPose": [[0, 3, 2, 0, "camera_name", "Name of the camera to be controlled"], [0, 3, 2, 0, "external", "Whether the camera is an External Camera"], [0, 3, 2, 0, "pose", "Pose representing the desired position and orientation of the camera"], [0, 3, 2, 0, "vehicle_name", "Name of vehicle which the camera corresponds to"]], "autonomysim.clients.VehicleClient.simSetDetectionFilterRadius": [[0, 3, 2, 0, "camera_name", "Name of the camera, for backwards compatibility, ID numbers such as 0,1,etc. can also be used"], [0, 3, 2, 0, "external", "Whether the camera is an External Camera"], [0, 3, 2, 0, "image_type", "Type of image required"], [0, 3, 2, 0, "radius_cm", "Radius in [cm]"], [0, 3, 2, 0, "vehicle_name", "Vehicle which the camera is associated with"]], "autonomysim.clients.VehicleClient.simSetDistortionParam": [[0, 3, 2, 0, "camera_name", "Name of the camera, for backwards compatibility, ID numbers such as 0,1,etc. can also be used"], [0, 3, 2, 0, "external", "Whether the camera is an External Camera"], [0, 3, 2, 0, "param_name", "Name of distortion parameter"], [0, 3, 2, 0, "value", "Value of distortion parameter"], [0, 3, 2, 0, "vehicle_name", "Vehicle which the camera is associated with"]], "autonomysim.clients.VehicleClient.simSetDistortionParams": [[0, 3, 2, 0, "camera_name", "Name of the camera, for backwards compatibility, ID numbers such as 0,1,etc. can also be used"], [0, 3, 2, 0, "distortion_params", "Dictionary of distortion param names and corresponding values {\"K1\": 0.0, \"K2\": 0.0, \"K3\": 0.0, \"P1\": 0.0, \"P2\": 0.0}"], [0, 3, 2, 0, "external", "Whether the camera is an External Camera"], [0, 3, 2, 0, "vehicle_name", "Vehicle which the camera is associated with"]], "autonomysim.clients.VehicleClient.simSetExtForce": [[0, 3, 2, 0, "ext_force", "Force, in World frame, NED direction, in N"]], "autonomysim.clients.VehicleClient.simSetKinematics": [[0, 3, 2, 0, "ignore_collision", "Whether to ignore any collision or not"], [0, 3, 2, 0, "state", "Desired Pose pf the vehicle"], [0, 3, 2, 0, "vehicle_name", "Name of the vehicle to move"]], "autonomysim.clients.VehicleClient.simSetLightIntensity": [[0, 3, 2, 0, "intensity", "New intensity value"], [0, 3, 2, 0, "light_name", "Name of light to change"]], "autonomysim.clients.VehicleClient.simSetObjectPose": [[0, 3, 2, 0, "object_name", "Name of the object(actor) to move"], [0, 3, 2, 0, "pose", "Desired Pose of the object"], [0, 3, 2, 0, "teleport", "Whether to move the object immediately without affecting their velocity"]], "autonomysim.clients.VehicleClient.simSetObjectScale": [[0, 3, 2, 0, "object_name", "Object to set the scale of"], [0, 3, 2, 0, "scale_vector", "Desired scale of object"]], "autonomysim.clients.VehicleClient.simSetSegmentationObjectID": [[0, 3, 2, 0, "is_name_regex", "Whether the mesh name is a regex"], [0, 3, 2, 0, "mesh_name", "Name of the mesh to set the ID of (supports regex)"], [0, 3, 2, 0, "object_id", "Object ID to be set, range 0-255"]], "autonomysim.clients.VehicleClient.simSetTimeOfDay": [[0, 3, 2, 0, "celestial_clock_speed", "Run celestial clock faster or slower than simulation clock E.g. Value 100 means for every 1 second of simulation clock, Sun's position is advanced by 100 seconds so Sun will move in sky much faster"], [0, 3, 2, 0, "is_enabled", "True to enable time-of-day effect, False to reset the position to original"], [0, 3, 2, 0, "is_start_datetime_dst", "True to adjust for Daylight Savings Time"], [0, 3, 2, 0, "move_sun", "Whether or not to move the Sun"], [0, 3, 2, 0, "start_datetime", "Date & Time in %Y-%m-%d %H:%M:%S format, e.g. 2018-02-12 15:20:00"], [0, 3, 2, 0, "update_interval_secs", "Interval to update the Sun's position"]], "autonomysim.clients.VehicleClient.simSetTraceLine": [[0, 3, 2, 0, "color_rgba", "desired RGBA values from 0.0 to 1.0"], [0, 3, 2, 0, "thickness", "Thickness of the line"], [0, 3, 2, 0, "vehicle_name", "Name of the vehicle to set Trace line values for"]], "autonomysim.clients.VehicleClient.simSetVehiclePose": [[0, 3, 2, 0, "ignore_collision", "Whether to ignore any collision or not"], [0, 3, 2, 0, "pose", "Desired Pose pf the vehicle"], [0, 3, 2, 0, "vehicle_name", "Name of the vehicle to move"]], "autonomysim.clients.VehicleClient.simSetWeatherParameter": [[0, 3, 2, 0, "param", "Weather effect to be enabled"], [0, 3, 2, 0, "val", "Intensity of the effect, Range 0-1"]], "autonomysim.clients.VehicleClient.simSetWind": [[0, 3, 2, 0, "wind", "Wind, in World frame, NED direction, in m/s"]], "autonomysim.clients.VehicleClient.simSpawnObject": [[0, 3, 2, 0, "asset_name", "Name of asset(mesh) in the project database"], [0, 3, 2, 0, "is_blueprint", "Whether to spawn a blueprint or an actor"], [0, 3, 2, 0, "object_name", "Desired name of new object"], [0, 3, 2, 0, "physics_enabled", "Whether to enable physics for the object"], [0, 3, 2, 0, "pose", "Desired pose of object"], [0, 3, 2, 0, "scale", "Desired scale of object"]], "autonomysim.clients.VehicleClient.simSwapTextures": [[0, 3, 2, 0, "component_id", ""], [0, 3, 2, 0, "material_id", ""], [0, 3, 2, 0, "tags", "string of \",\" or \", \" delimited tags to identify on which actors to perform the swap"], [0, 3, 2, 0, "tex_id", "indexes the array of textures assigned to each actor undergoing a swap"]], "autonomysim.clients.VehicleClient.simTestLineOfSightBetweenPoints": [[0, 3, 2, 0, "point1", "source point"], [0, 3, 2, 0, "point2", "target point"]], "autonomysim.clients.VehicleClient.simTestLineOfSightToPoint": [[0, 3, 2, 0, "point", "target point"], [0, 3, 2, 0, "vehicle_name", "Name of vehicle"]], "autonomysim.types": [[0, 1, 1, 0, "AngleLevelControllerGains", "Bases: object"], [0, 1, 1, 0, "AngleRateControllerGains", "Bases: object"], [0, 1, 1, 0, "BarometerData", "Bases: MsgpackMixin"], [0, 1, 1, 0, "Box2D", "Bases: MsgpackMixin"], [0, 1, 1, 0, "Box3D", "Bases: MsgpackMixin"], [0, 1, 1, 0, "CameraInfo", "Bases: MsgpackMixin"], [0, 1, 1, 0, "CarControls", "Bases: MsgpackMixin"], [0, 1, 1, 0, "CarState", "Bases: MsgpackMixin"], [0, 1, 1, 0, "CollisionInfo", "Bases: MsgpackMixin"], [0, 1, 1, 0, "DetectionInfo", "Bases: MsgpackMixin"], [0, 1, 1, 0, "DistanceSensorData", "Bases: MsgpackMixin"], [0, 1, 1, 0, "DrivetrainType", "Bases: object"], [0, 1, 1, 0, "EnvironmentState", "Bases: MsgpackMixin"], [0, 1, 1, 0, "GeoPoint", "Bases: MsgpackMixin"], [0, 1, 1, 0, "GnssFixType", "Bases: MsgpackMixin"], [0, 1, 1, 0, "GnssReport", "Bases: MsgpackMixin"], [0, 1, 1, 0, "GpsData", "Bases: MsgpackMixin"], [0, 1, 1, 0, "ImageRequest", "Bases: MsgpackMixin"], [0, 1, 1, 0, "ImageResponse", "Bases: MsgpackMixin"], [0, 1, 1, 0, "ImageType", "Bases: object"], [0, 1, 1, 0, "ImuData", "Bases: MsgpackMixin"], [0, 1, 1, 0, "KinematicsState", "Bases: MsgpackMixin"], [0, 1, 1, 0, "LandedState", "Bases: object"], [0, 1, 1, 0, "LidarData", "Bases: MsgpackMixin"], [0, 1, 1, 0, "MagnetometerData", "Bases: MsgpackMixin"], [0, 1, 1, 0, "MeshPositionVertexBuffersResponse", "Bases: MsgpackMixin"], [0, 1, 1, 0, "MsgpackMixin", "Bases: object"], [0, 1, 1, 0, "MultirotorState", "Bases: MsgpackMixin"], [0, 1, 1, 0, "PIDGains", "Bases: object"], [0, 1, 1, 0, "Pose", "Bases: MsgpackMixin"], [0, 1, 1, 0, "PositionControllerGains", "Bases: object"], [0, 1, 1, 0, "ProjectionMatrix", "Bases: MsgpackMixin"], [0, 1, 1, 0, "Quaternionr", "Bases: MsgpackMixin"], [0, 1, 1, 0, "RCData", "Bases: MsgpackMixin"], [0, 1, 1, 0, "RotorStates", "Bases: MsgpackMixin"], [0, 1, 1, 0, "Vector2r", "Bases: MsgpackMixin"], [0, 1, 1, 0, "Vector3r", "Bases: MsgpackMixin"], [0, 1, 1, 0, "VelocityControllerGains", "Bases: object"], [0, 1, 1, 0, "WeatherParameter", "Bases: object"], [0, 1, 1, 0, "YawMode", "Bases: MsgpackMixin"]], "autonomysim.types.AngleLevelControllerGains": [[0, 2, 1, 0, "to_lists", ""]], "autonomysim.types.AngleRateControllerGains": [[0, 2, 1, 0, "to_lists", ""]], "autonomysim.types.BarometerData": [[0, 4, 1, 0, "altitude", ""], [0, 4, 1, 0, "pressure", ""], [0, 4, 1, 0, "qnh", ""], [0, 4, 1, 0, "time_stamp", ""]], "autonomysim.types.Box2D": [[0, 4, 1, 0, "max", ""], [0, 4, 1, 0, "min", ""]], "autonomysim.types.Box3D": [[0, 4, 1, 0, "max", ""], [0, 4, 1, 0, "min", ""]], "autonomysim.types.CameraInfo": [[0, 4, 1, 0, "fov", ""], [0, 4, 1, 0, "pose", ""], [0, 4, 1, 0, "proj_mat", ""]], "autonomysim.types.CarControls": [[0, 4, 1, 0, "brake", ""], [0, 4, 1, 0, "gear_immediate", ""], [0, 4, 1, 0, "handbrake", ""], [0, 4, 1, 0, "is_manual_gear", ""], [0, 4, 1, 0, "manual_gear", ""], [0, 2, 1, 0, "set_throttle", ""], [0, 4, 1, 0, "steering", ""], [0, 4, 1, 0, "throttle", ""]], "autonomysim.types.CarState": [[0, 4, 1, 0, "collision", ""], [0, 4, 1, 0, "gear", ""], [0, 4, 1, 0, "handbrake", ""], [0, 4, 1, 0, "kinematics_estimated", ""], [0, 4, 1, 0, "maxrpm", ""], [0, 4, 1, 0, "rpm", ""], [0, 4, 1, 0, "speed", ""], [0, 4, 1, 0, "timestamp", ""]], "autonomysim.types.CollisionInfo": [[0, 4, 1, 0, "has_collided", ""], [0, 4, 1, 0, "impact_point", ""], [0, 4, 1, 0, "normal", ""], [0, 4, 1, 0, "object_id", ""], [0, 4, 1, 0, "object_name", ""], [0, 4, 1, 0, "penetration_depth", ""], [0, 4, 1, 0, "position", ""], [0, 4, 1, 0, "time_stamp", ""]], "autonomysim.types.DetectionInfo": [[0, 4, 1, 0, "box2D", ""], [0, 4, 1, 0, "box3D", ""], [0, 4, 1, 0, "geo_point", ""], [0, 4, 1, 0, "name", ""], [0, 4, 1, 0, "relative_pose", ""]], "autonomysim.types.DistanceSensorData": [[0, 4, 1, 0, "distance", ""], [0, 4, 1, 0, "max_distance", ""], [0, 4, 1, 0, "min_distance", ""], [0, 4, 1, 0, "relative_pose", ""], [0, 4, 1, 0, "time_stamp", ""]], "autonomysim.types.DrivetrainType": [[0, 4, 1, 0, "ForwardOnly", ""], [0, 4, 1, 0, "MaxDegreeOfFreedom", ""]], "autonomysim.types.EnvironmentState": [[0, 4, 1, 0, "air_density", ""], [0, 4, 1, 0, "air_pressure", ""], [0, 4, 1, 0, "geo_point", ""], [0, 4, 1, 0, "gravity", ""], [0, 4, 1, 0, "position", ""], [0, 4, 1, 0, "temperature", ""]], "autonomysim.types.GeoPoint": [[0, 4, 1, 0, "altitude", ""], [0, 4, 1, 0, "latitude", ""], [0, 4, 1, 0, "longitude", ""]], "autonomysim.types.GnssFixType": [[0, 4, 1, 0, "GNSS_FIX_2D_FIX", ""], [0, 4, 1, 0, "GNSS_FIX_3D_FIX", ""], [0, 4, 1, 0, "GNSS_FIX_NO_FIX", ""], [0, 4, 1, 0, "GNSS_FIX_TIME_ONLY", ""]], "autonomysim.types.GnssReport": [[0, 4, 1, 0, "eph", ""], [0, 4, 1, 0, "epv", ""], [0, 4, 1, 0, "fix_type", ""], [0, 4, 1, 0, "geo_point", ""], [0, 4, 1, 0, "time_utc", ""], [0, 4, 1, 0, "velocity", ""]], "autonomysim.types.GpsData": [[0, 4, 1, 0, "gnss", ""], [0, 4, 1, 0, "is_valid", ""], [0, 4, 1, 0, "time_stamp", ""]], "autonomysim.types.ImageRequest": [[0, 4, 1, 0, "camera_name", ""], [0, 4, 1, 0, "compress", ""], [0, 4, 1, 0, "image_type", ""], [0, 4, 1, 0, "pixels_as_float", ""]], "autonomysim.types.ImageResponse": [[0, 4, 1, 0, "camera_orientation", ""], [0, 4, 1, 0, "camera_position", ""], [0, 4, 1, 0, "compress", ""], [0, 4, 1, 0, "height", ""], [0, 4, 1, 0, "image_data_float", ""], [0, 4, 1, 0, "image_data_uint8", ""], [0, 4, 1, 0, "image_type", ""], [0, 4, 1, 0, "message", ""], [0, 4, 1, 0, "pixels_as_float", ""], [0, 4, 1, 0, "time_stamp", ""], [0, 4, 1, 0, "width", ""]], "autonomysim.types.ImageType": [[0, 4, 1, 0, "DepthPerspective", ""], [0, 4, 1, 0, "DepthPlanar", ""], [0, 4, 1, 0, "DepthVis", ""], [0, 4, 1, 0, "DisparityNormalized", ""], [0, 4, 1, 0, "Infrared", ""], [0, 4, 1, 0, "OpticalFlow", ""], [0, 4, 1, 0, "OpticalFlowVis", ""], [0, 4, 1, 0, "Scene", ""], [0, 4, 1, 0, "Segmentation", ""], [0, 4, 1, 0, "SurfaceNormals", ""]], "autonomysim.types.ImuData": [[0, 4, 1, 0, "angular_velocity", ""], [0, 4, 1, 0, "linear_acceleration", ""], [0, 4, 1, 0, "orientation", ""], [0, 4, 1, 0, "time_stamp", ""]], "autonomysim.types.KinematicsState": [[0, 4, 1, 0, "angular_acceleration", ""], [0, 4, 1, 0, "angular_velocity", ""], [0, 4, 1, 0, "linear_acceleration", ""], [0, 4, 1, 0, "linear_velocity", ""], [0, 4, 1, 0, "orientation", ""], [0, 4, 1, 0, "position", ""]], "autonomysim.types.LandedState": [[0, 4, 1, 0, "Flying", ""], [0, 4, 1, 0, "Landed", ""]], "autonomysim.types.LidarData": [[0, 4, 1, 0, "point_cloud", ""], [0, 4, 1, 0, "pose", ""], [0, 4, 1, 0, "segmentation", ""], [0, 4, 1, 0, "time_stamp", ""]], "autonomysim.types.MagnetometerData": [[0, 4, 1, 0, "magnetic_field_body", ""], [0, 4, 1, 0, "magnetic_field_covariance", ""], [0, 4, 1, 0, "time_stamp", ""]], "autonomysim.types.MeshPositionVertexBuffersResponse": [[0, 4, 1, 0, "indices", ""], [0, 4, 1, 0, "name", ""], [0, 4, 1, 0, "orientation", ""], [0, 4, 1, 0, "position", ""], [0, 4, 1, 0, "vertices", ""]], "autonomysim.types.MsgpackMixin": [[0, 2, 1, 0, "from_msgpack", ""], [0, 2, 1, 0, "to_msgpack", ""]], "autonomysim.types.MultirotorState": [[0, 4, 1, 0, "can_arm", ""], [0, 4, 1, 0, "collision", ""], [0, 4, 1, 0, "gps_location", ""], [0, 4, 1, 0, "kinematics_estimated", ""], [0, 4, 1, 0, "landed_state", ""], [0, 4, 1, 0, "rc_data", ""], [0, 4, 1, 0, "ready", ""], [0, 4, 1, 0, "ready_message", ""], [0, 4, 1, 0, "timestamp", ""]], "autonomysim.types.PIDGains": [[0, 2, 1, 0, "to_list", ""]], "autonomysim.types.Pose": [[0, 2, 1, 0, "containsNan", ""], [0, 2, 1, 0, "nanPose", ""], [0, 4, 1, 0, "orientation", ""], [0, 4, 1, 0, "position", ""]], "autonomysim.types.PositionControllerGains": [[0, 2, 1, 0, "to_lists", ""]], "autonomysim.types.ProjectionMatrix": [[0, 4, 1, 0, "matrix", ""]], "autonomysim.types.Quaternionr": [[0, 2, 1, 0, "conjugate", ""], [0, 2, 1, 0, "containsNan", ""], [0, 2, 1, 0, "cross", ""], [0, 2, 1, 0, "dot", ""], [0, 2, 1, 0, "get_length", ""], [0, 2, 1, 0, "inverse", ""], [0, 2, 1, 0, "nanQuaternionr", ""], [0, 2, 1, 0, "outer_product", ""], [0, 2, 1, 0, "rotate", ""], [0, 2, 1, 0, "sgn", ""], [0, 2, 1, 0, "star", ""], [0, 2, 1, 0, "to_numpy_array", ""], [0, 4, 1, 0, "w_val", ""], [0, 4, 1, 0, "x_val", ""], [0, 4, 1, 0, "y_val", ""], [0, 4, 1, 0, "z_val", ""]], "autonomysim.types.RCData": [[0, 4, 1, 0, "is_initialized", ""], [0, 4, 1, 0, "is_valid", ""], [0, 4, 1, 0, "pitch", ""], [0, 4, 1, 0, "roll", ""], [0, 4, 1, 0, "switch1", ""], [0, 4, 1, 0, "switch2", ""], [0, 4, 1, 0, "switch3", ""], [0, 4, 1, 0, "switch4", ""], [0, 4, 1, 0, "switch5", ""], [0, 4, 1, 0, "switch6", ""], [0, 4, 1, 0, "switch7", ""], [0, 4, 1, 0, "switch8", ""], [0, 4, 1, 0, "throttle", ""], [0, 4, 1, 0, "timestamp", ""], [0, 4, 1, 0, "yaw", ""]], "autonomysim.types.RotorStates": [[0, 4, 1, 0, "rotors", ""], [0, 4, 1, 0, "timestamp", ""]], "autonomysim.types.Vector2r": [[0, 4, 1, 0, "x_val", ""], [0, 4, 1, 0, "y_val", ""]], "autonomysim.types.Vector3r": [[0, 2, 1, 0, "containsNan", ""], [0, 2, 1, 0, "cross", ""], [0, 2, 1, 0, "distance_to", ""], [0, 2, 1, 0, "dot", ""], [0, 2, 1, 0, "get_length", ""], [0, 2, 1, 0, "nanVector3r", ""], [0, 2, 1, 0, "to_Quaternionr", ""], [0, 2, 1, 0, "to_numpy_array", ""], [0, 4, 1, 0, "x_val", ""], [0, 4, 1, 0, "y_val", ""], [0, 4, 1, 0, "z_val", ""]], "autonomysim.types.VelocityControllerGains": [[0, 2, 1, 0, "to_lists", ""]], "autonomysim.types.WeatherParameter": [[0, 4, 1, 0, "Dust", ""], [0, 4, 1, 0, "Enabled", ""], [0, 4, 1, 0, "Fog", ""], [0, 4, 1, 0, "MapleLeaf", ""], [0, 4, 1, 0, "Rain", ""], [0, 4, 1, 0, "RoadLeaf", ""], [0, 4, 1, 0, "RoadSnow", ""], [0, 4, 1, 0, "Roadwetness", ""], [0, 4, 1, 0, "Snow", ""]], "autonomysim.types.YawMode": [[0, 4, 1, 0, "is_rate", ""], [0, 4, 1, 0, "yaw_or_rate", ""]], "autonomysim.unreal": [[8, 0, 0, 1, "commands", ""]], "autonomysim.unreal.commands": [[8, 5, 1, 0, "RunCmdList", ""], [8, 5, 1, 0, "RunConsoleCmd", ""]], "autonomysim.utils": [[9, 1, 1, 0, "SetupPath", "Bases: object"], [9, 0, 0, 1, "convs", ""], [9, 5, 1, 0, "generate_color_palette", ""], [9, 5, 1, 0, "get_public_fields", ""], [10, 0, 0, 1, "io", ""], [9, 5, 1, 0, "wait_key", "Wait for a key press on the console and return it."]], "autonomysim.utils.SetupPath": [[9, 2, 1, 0, "addAutonomySimModulePath", ""], [9, 2, 1, 0, "getCurrentPath", ""], [9, 2, 1, 0, "getDirLevels", ""], [9, 2, 1, 0, "getGrandParentDir", ""], [9, 2, 1, 0, "getParentDir", ""]], "autonomysim.utils.convs": [[9, 5, 1, 0, "list_to_2d_float_array", ""], [9, 5, 1, 0, "string_to_float_array", ""], [9, 5, 1, 0, "string_to_uint8_array", ""], [9, 5, 1, 0, "to_dict", ""], [9, 5, 1, 0, "to_eularian_angles", ""], [9, 5, 1, 0, "to_quaternion", ""], [9, 5, 1, 0, "to_str", ""]], "autonomysim.utils.io": [[10, 5, 1, 0, "get_pfm_array", ""], [10, 5, 1, 0, "read_pfm", "Read a pfm file"], [10, 5, 1, 0, "write_file", "Write binary data to file. Used for writing compressed PNG images"], [10, 5, 1, 0, "write_pfm", "Write a pfm file"], [10, 5, 1, 0, "write_png", "image must be numpy array H X W X channels"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:parameter", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"autonomysim": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "packag": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "subpackag": [0, 1, 5, 9], "submodul": [0, 2, 4, 6, 7, 8, 9, 10], "client": 0, "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "type": 0, "content": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12], "ai": [1, 2, 3, 4], "imit": 2, "agent": 2, "gener": 2, "preprocessor": 2, "trainer": 2, "reinforc": 3, "vision": 4, "benchmark": 4, "navig": 4, "gym": [5, 6], "env": 6, "autonomysim_env": 6, "car_env": 6, "drone_env": 6, "sensor": 7, "event_camera": 7, "kinect": 7, "thermal_camera": 7, "unreal": 8, "command": 8, "util": [9, 10], "conv": 9, "io": 10, "audio": 10, "indic": 12, "tabl": 12}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"autonomysim package": [[0, "autonomysim-package"]], "Subpackages": [[0, "subpackages"], [1, "subpackages"], [5, "subpackages"], [9, "subpackages"]], "Submodules": [[0, "submodules"], [2, "submodules"], [4, "submodules"], [6, "submodules"], [7, "submodules"], [8, "submodules"], [9, "submodules"], [10, "submodules"]], "autonomysim.clients module": [[0, "module-autonomysim.clients"]], "autonomysim.types module": [[0, "module-autonomysim.types"]], "Module contents": [[0, "module-autonomysim"], [1, "module-autonomysim.ai"], [2, "module-autonomysim.ai.imitation"], [3, "module-autonomysim.ai.reinforcement"], [4, "module-autonomysim.ai.vision"], [5, "module-contents"], [6, "module-contents"], [7, "module-autonomysim.sensors"], [8, "module-autonomysim.unreal"], [9, "module-autonomysim.utils"], [10, "module-autonomysim.utils.io"]], "autonomysim.ai package": [[1, "autonomysim-ai-package"]], "autonomysim.ai.imitation package": [[2, "autonomysim-ai-imitation-package"]], "autonomysim.ai.imitation.agents module": [[2, "autonomysim-ai-imitation-agents-module"]], "autonomysim.ai.imitation.generators module": [[2, "autonomysim-ai-imitation-generators-module"]], "autonomysim.ai.imitation.preprocessors module": [[2, "autonomysim-ai-imitation-preprocessors-module"]], "autonomysim.ai.imitation.trainers module": [[2, "autonomysim-ai-imitation-trainers-module"]], "autonomysim.ai.reinforcement package": [[3, "autonomysim-ai-reinforcement-package"]], "autonomysim.ai.vision package": [[4, "autonomysim-ai-vision-package"]], "autonomysim.ai.vision.benchmarks module": [[4, "autonomysim-ai-vision-benchmarks-module"]], "autonomysim.ai.vision.navigation module": [[4, "autonomysim-ai-vision-navigation-module"]], "autonomysim.gym package": [[5, "autonomysim-gym-package"]], "autonomysim.gym.envs package": [[6, "autonomysim-gym-envs-package"]], "autonomysim.gym.envs.autonomysim_env module": [[6, "autonomysim-gym-envs-autonomysim-env-module"]], "autonomysim.gym.envs.car_env module": [[6, "autonomysim-gym-envs-car-env-module"]], "autonomysim.gym.envs.drone_env module": [[6, "autonomysim-gym-envs-drone-env-module"]], "autonomysim.sensors package": [[7, "autonomysim-sensors-package"]], "autonomysim.sensors.event_camera module": [[7, "autonomysim-sensors-event-camera-module"]], "autonomysim.sensors.kinect module": [[7, "autonomysim-sensors-kinect-module"]], "autonomysim.sensors.thermal_camera module": [[7, "autonomysim-sensors-thermal-camera-module"]], "autonomysim.unreal package": [[8, "autonomysim-unreal-package"]], "autonomysim.unreal.commands module": [[8, "module-autonomysim.unreal.commands"]], "autonomysim.utils package": [[9, "autonomysim-utils-package"]], "autonomysim.utils.convs module": [[9, "module-autonomysim.utils.convs"]], "autonomysim.utils.io package": [[10, "autonomysim-utils-io-package"]], "autonomysim.utils.io.audio module": [[10, "autonomysim-utils-io-audio-module"]], "autonomysim": [[11, "autonomysim"]], "AutonomySim": [[12, "autonomysim"]], "Contents:": [[12, null]], "Indices and Tables": [[12, "indices-and-tables"]]}, "indexentries": {"anglelevelcontrollergains (class in autonomysim.types)": [[0, "autonomysim.types.AngleLevelControllerGains"]], "angleratecontrollergains (class in autonomysim.types)": [[0, "autonomysim.types.AngleRateControllerGains"]], "barometerdata (class in autonomysim.types)": [[0, "autonomysim.types.BarometerData"]], "box2d (class in autonomysim.types)": [[0, "autonomysim.types.Box2D"]], "box3d (class in autonomysim.types)": [[0, "autonomysim.types.Box3D"]], "camerainfo (class in autonomysim.types)": [[0, "autonomysim.types.CameraInfo"]], "carclient (class in autonomysim.clients)": [[0, "autonomysim.clients.CarClient"]], "carcontrols (class in autonomysim.types)": [[0, "autonomysim.types.CarControls"]], "carstate (class in autonomysim.types)": [[0, "autonomysim.types.CarState"]], "collisioninfo (class in autonomysim.types)": [[0, "autonomysim.types.CollisionInfo"]], "depthperspective (autonomysim.types.imagetype attribute)": [[0, "autonomysim.types.ImageType.DepthPerspective"]], "depthplanar (autonomysim.types.imagetype attribute)": [[0, "autonomysim.types.ImageType.DepthPlanar"]], "depthvis (autonomysim.types.imagetype attribute)": [[0, "autonomysim.types.ImageType.DepthVis"]], "detectioninfo (class in autonomysim.types)": [[0, "autonomysim.types.DetectionInfo"]], "disparitynormalized (autonomysim.types.imagetype attribute)": [[0, "autonomysim.types.ImageType.DisparityNormalized"]], "distancesensordata (class in autonomysim.types)": [[0, "autonomysim.types.DistanceSensorData"]], "drivetraintype (class in autonomysim.types)": [[0, "autonomysim.types.DrivetrainType"]], "dust (autonomysim.types.weatherparameter attribute)": [[0, "autonomysim.types.WeatherParameter.Dust"]], "enabled (autonomysim.types.weatherparameter attribute)": [[0, "autonomysim.types.WeatherParameter.Enabled"]], "environmentstate (class in autonomysim.types)": [[0, "autonomysim.types.EnvironmentState"]], "flying (autonomysim.types.landedstate attribute)": [[0, "autonomysim.types.LandedState.Flying"]], "fog (autonomysim.types.weatherparameter attribute)": [[0, "autonomysim.types.WeatherParameter.Fog"]], "forwardonly (autonomysim.types.drivetraintype attribute)": [[0, "autonomysim.types.DrivetrainType.ForwardOnly"]], "gnss_fix_2d_fix (autonomysim.types.gnssfixtype attribute)": [[0, "autonomysim.types.GnssFixType.GNSS_FIX_2D_FIX"]], "gnss_fix_3d_fix (autonomysim.types.gnssfixtype attribute)": [[0, "autonomysim.types.GnssFixType.GNSS_FIX_3D_FIX"]], "gnss_fix_no_fix (autonomysim.types.gnssfixtype attribute)": [[0, "autonomysim.types.GnssFixType.GNSS_FIX_NO_FIX"]], "gnss_fix_time_only (autonomysim.types.gnssfixtype attribute)": [[0, "autonomysim.types.GnssFixType.GNSS_FIX_TIME_ONLY"]], "geopoint (class in autonomysim.types)": [[0, "autonomysim.types.GeoPoint"]], "gnssfixtype (class in autonomysim.types)": [[0, "autonomysim.types.GnssFixType"]], "gnssreport (class in autonomysim.types)": [[0, "autonomysim.types.GnssReport"]], "gpsdata (class in autonomysim.types)": [[0, "autonomysim.types.GpsData"]], "imagerequest (class in autonomysim.types)": [[0, "autonomysim.types.ImageRequest"]], "imageresponse (class in autonomysim.types)": [[0, "autonomysim.types.ImageResponse"]], "imagetype (class in autonomysim.types)": [[0, "autonomysim.types.ImageType"]], "imudata (class in autonomysim.types)": [[0, "autonomysim.types.ImuData"]], "infrared (autonomysim.types.imagetype attribute)": [[0, "autonomysim.types.ImageType.Infrared"]], "kinematicsstate (class in autonomysim.types)": [[0, "autonomysim.types.KinematicsState"]], "landed (autonomysim.types.landedstate attribute)": [[0, "autonomysim.types.LandedState.Landed"]], "landedstate (class in autonomysim.types)": [[0, "autonomysim.types.LandedState"]], "lidardata (class in autonomysim.types)": [[0, "autonomysim.types.LidarData"]], "magnetometerdata (class in autonomysim.types)": [[0, "autonomysim.types.MagnetometerData"]], "mapleleaf (autonomysim.types.weatherparameter attribute)": [[0, "autonomysim.types.WeatherParameter.MapleLeaf"]], "maxdegreeoffreedom (autonomysim.types.drivetraintype attribute)": [[0, "autonomysim.types.DrivetrainType.MaxDegreeOfFreedom"]], "meshpositionvertexbuffersresponse (class in autonomysim.types)": [[0, "autonomysim.types.MeshPositionVertexBuffersResponse"]], "msgpackmixin (class in autonomysim.types)": [[0, "autonomysim.types.MsgpackMixin"]], "multirotorclient (class in autonomysim.clients)": [[0, "autonomysim.clients.MultirotorClient"]], "multirotorstate (class in autonomysim.types)": [[0, "autonomysim.types.MultirotorState"]], "opticalflow (autonomysim.types.imagetype attribute)": [[0, "autonomysim.types.ImageType.OpticalFlow"]], "opticalflowvis (autonomysim.types.imagetype attribute)": [[0, "autonomysim.types.ImageType.OpticalFlowVis"]], "pidgains (class in autonomysim.types)": [[0, "autonomysim.types.PIDGains"]], "pose (class in autonomysim.types)": [[0, "autonomysim.types.Pose"]], "positioncontrollergains (class in autonomysim.types)": [[0, "autonomysim.types.PositionControllerGains"]], "projectionmatrix (class in autonomysim.types)": [[0, "autonomysim.types.ProjectionMatrix"]], "quaternionr (class in autonomysim.types)": [[0, "autonomysim.types.Quaternionr"]], "rcdata (class in autonomysim.types)": [[0, "autonomysim.types.RCData"]], "rain (autonomysim.types.weatherparameter attribute)": [[0, "autonomysim.types.WeatherParameter.Rain"]], "roadleaf (autonomysim.types.weatherparameter attribute)": [[0, "autonomysim.types.WeatherParameter.RoadLeaf"]], "roadsnow (autonomysim.types.weatherparameter attribute)": [[0, "autonomysim.types.WeatherParameter.RoadSnow"]], "roadwetness (autonomysim.types.weatherparameter attribute)": [[0, "autonomysim.types.WeatherParameter.Roadwetness"]], "rotorstates (class in autonomysim.types)": [[0, "autonomysim.types.RotorStates"]], "scene (autonomysim.types.imagetype attribute)": [[0, "autonomysim.types.ImageType.Scene"]], "segmentation (autonomysim.types.imagetype attribute)": [[0, "autonomysim.types.ImageType.Segmentation"]], "snow (autonomysim.types.weatherparameter attribute)": [[0, "autonomysim.types.WeatherParameter.Snow"]], "surfacenormals (autonomysim.types.imagetype attribute)": [[0, "autonomysim.types.ImageType.SurfaceNormals"]], "vector2r (class in autonomysim.types)": [[0, "autonomysim.types.Vector2r"]], "vector3r (class in autonomysim.types)": [[0, "autonomysim.types.Vector3r"]], "vehicleclient (class in autonomysim.clients)": [[0, "autonomysim.clients.VehicleClient"]], "velocitycontrollergains (class in autonomysim.types)": [[0, "autonomysim.types.VelocityControllerGains"]], "weatherparameter (class in autonomysim.types)": [[0, "autonomysim.types.WeatherParameter"]], "yawmode (class in autonomysim.types)": [[0, "autonomysim.types.YawMode"]], "air_density (autonomysim.types.environmentstate attribute)": [[0, "autonomysim.types.EnvironmentState.air_density"]], "air_pressure (autonomysim.types.environmentstate attribute)": [[0, "autonomysim.types.EnvironmentState.air_pressure"]], "altitude (autonomysim.types.barometerdata attribute)": [[0, "autonomysim.types.BarometerData.altitude"]], "altitude (autonomysim.types.geopoint attribute)": [[0, "autonomysim.types.GeoPoint.altitude"]], "angular_acceleration (autonomysim.types.kinematicsstate attribute)": [[0, "autonomysim.types.KinematicsState.angular_acceleration"]], "angular_velocity (autonomysim.types.imudata attribute)": [[0, "autonomysim.types.ImuData.angular_velocity"]], "angular_velocity (autonomysim.types.kinematicsstate attribute)": [[0, "autonomysim.types.KinematicsState.angular_velocity"]], "armdisarm() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.armDisarm"]], "autonomysim": [[0, "module-autonomysim"]], "autonomysim.clients": [[0, "module-autonomysim.clients"]], "autonomysim.types": [[0, "module-autonomysim.types"]], "box2d (autonomysim.types.detectioninfo attribute)": [[0, "autonomysim.types.DetectionInfo.box2D"]], "box3d (autonomysim.types.detectioninfo attribute)": [[0, "autonomysim.types.DetectionInfo.box3D"]], "brake (autonomysim.types.carcontrols attribute)": [[0, "autonomysim.types.CarControls.brake"]], "camera_name (autonomysim.types.imagerequest attribute)": [[0, "autonomysim.types.ImageRequest.camera_name"]], "camera_orientation (autonomysim.types.imageresponse attribute)": [[0, "autonomysim.types.ImageResponse.camera_orientation"]], "camera_position (autonomysim.types.imageresponse attribute)": [[0, "autonomysim.types.ImageResponse.camera_position"]], "can_arm (autonomysim.types.multirotorstate attribute)": [[0, "autonomysim.types.MultirotorState.can_arm"]], "cancellasttask() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.cancelLastTask"]], "collision (autonomysim.types.carstate attribute)": [[0, "autonomysim.types.CarState.collision"]], "collision (autonomysim.types.multirotorstate attribute)": [[0, "autonomysim.types.MultirotorState.collision"]], "compress (autonomysim.types.imagerequest attribute)": [[0, "autonomysim.types.ImageRequest.compress"]], "compress (autonomysim.types.imageresponse attribute)": [[0, "autonomysim.types.ImageResponse.compress"]], "confirmconnection() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.confirmConnection"]], "conjugate() (autonomysim.types.quaternionr method)": [[0, "autonomysim.types.Quaternionr.conjugate"]], "containsnan() (autonomysim.types.pose method)": [[0, "autonomysim.types.Pose.containsNan"]], "containsnan() (autonomysim.types.quaternionr method)": [[0, "autonomysim.types.Quaternionr.containsNan"]], "containsnan() (autonomysim.types.vector3r method)": [[0, "autonomysim.types.Vector3r.containsNan"]], "cross() (autonomysim.types.quaternionr method)": [[0, "autonomysim.types.Quaternionr.cross"]], "cross() (autonomysim.types.vector3r method)": [[0, "autonomysim.types.Vector3r.cross"]], "distance (autonomysim.types.distancesensordata attribute)": [[0, "autonomysim.types.DistanceSensorData.distance"]], "distance_to() (autonomysim.types.vector3r method)": [[0, "autonomysim.types.Vector3r.distance_to"]], "dot() (autonomysim.types.quaternionr method)": [[0, "autonomysim.types.Quaternionr.dot"]], "dot() (autonomysim.types.vector3r method)": [[0, "autonomysim.types.Vector3r.dot"]], "enableapicontrol() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.enableApiControl"]], "eph (autonomysim.types.gnssreport attribute)": [[0, "autonomysim.types.GnssReport.eph"]], "epv (autonomysim.types.gnssreport attribute)": [[0, "autonomysim.types.GnssReport.epv"]], "fix_type (autonomysim.types.gnssreport attribute)": [[0, "autonomysim.types.GnssReport.fix_type"]], "fov (autonomysim.types.camerainfo attribute)": [[0, "autonomysim.types.CameraInfo.fov"]], "from_msgpack() (autonomysim.types.msgpackmixin class method)": [[0, "autonomysim.types.MsgpackMixin.from_msgpack"]], "gear (autonomysim.types.carstate attribute)": [[0, "autonomysim.types.CarState.gear"]], "gear_immediate (autonomysim.types.carcontrols attribute)": [[0, "autonomysim.types.CarControls.gear_immediate"]], "geo_point (autonomysim.types.detectioninfo attribute)": [[0, "autonomysim.types.DetectionInfo.geo_point"]], "geo_point (autonomysim.types.environmentstate attribute)": [[0, "autonomysim.types.EnvironmentState.geo_point"]], "geo_point (autonomysim.types.gnssreport attribute)": [[0, "autonomysim.types.GnssReport.geo_point"]], "getbarometerdata() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.getBarometerData"]], "getcarcontrols() (autonomysim.clients.carclient method)": [[0, "autonomysim.clients.CarClient.getCarControls"]], "getcarstate() (autonomysim.clients.carclient method)": [[0, "autonomysim.clients.CarClient.getCarState"]], "getclientversion() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.getClientVersion"]], "getdistancesensordata() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.getDistanceSensorData"]], "getgpsdata() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.getGpsData"]], "gethomegeopoint() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.getHomeGeoPoint"]], "getimudata() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.getImuData"]], "getlidardata() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.getLidarData"]], "getmagnetometerdata() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.getMagnetometerData"]], "getminrequiredclientversion() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.getMinRequiredClientVersion"]], "getminrequiredserverversion() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.getMinRequiredServerVersion"]], "getmultirotorstate() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.getMultirotorState"]], "getrotorstates() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.getRotorStates"]], "getserverversion() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.getServerVersion"]], "getsettingsstring() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.getSettingsString"]], "get_length() (autonomysim.types.quaternionr method)": [[0, "autonomysim.types.Quaternionr.get_length"]], "get_length() (autonomysim.types.vector3r method)": [[0, "autonomysim.types.Vector3r.get_length"]], "gnss (autonomysim.types.gpsdata attribute)": [[0, "autonomysim.types.GpsData.gnss"]], "gohomeasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.goHomeAsync"]], "gps_location (autonomysim.types.multirotorstate attribute)": [[0, "autonomysim.types.MultirotorState.gps_location"]], "gravity (autonomysim.types.environmentstate attribute)": [[0, "autonomysim.types.EnvironmentState.gravity"]], "handbrake (autonomysim.types.carcontrols attribute)": [[0, "autonomysim.types.CarControls.handbrake"]], "handbrake (autonomysim.types.carstate attribute)": [[0, "autonomysim.types.CarState.handbrake"]], "has_collided (autonomysim.types.collisioninfo attribute)": [[0, "autonomysim.types.CollisionInfo.has_collided"]], "height (autonomysim.types.imageresponse attribute)": [[0, "autonomysim.types.ImageResponse.height"]], "hoverasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.hoverAsync"]], "image_data_float (autonomysim.types.imageresponse attribute)": [[0, "autonomysim.types.ImageResponse.image_data_float"]], "image_data_uint8 (autonomysim.types.imageresponse attribute)": [[0, "autonomysim.types.ImageResponse.image_data_uint8"]], "image_type (autonomysim.types.imagerequest attribute)": [[0, "autonomysim.types.ImageRequest.image_type"]], "image_type (autonomysim.types.imageresponse attribute)": [[0, "autonomysim.types.ImageResponse.image_type"]], "impact_point (autonomysim.types.collisioninfo attribute)": [[0, "autonomysim.types.CollisionInfo.impact_point"]], "indices (autonomysim.types.meshpositionvertexbuffersresponse attribute)": [[0, "autonomysim.types.MeshPositionVertexBuffersResponse.indices"]], "inverse() (autonomysim.types.quaternionr method)": [[0, "autonomysim.types.Quaternionr.inverse"]], "isapicontrolenabled() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.isApiControlEnabled"]], "isrecording() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.isRecording"]], "is_initialized (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.is_initialized"]], "is_manual_gear (autonomysim.types.carcontrols attribute)": [[0, "autonomysim.types.CarControls.is_manual_gear"]], "is_rate (autonomysim.types.yawmode attribute)": [[0, "autonomysim.types.YawMode.is_rate"]], "is_valid (autonomysim.types.gpsdata attribute)": [[0, "autonomysim.types.GpsData.is_valid"]], "is_valid (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.is_valid"]], "kinematics_estimated (autonomysim.types.carstate attribute)": [[0, "autonomysim.types.CarState.kinematics_estimated"]], "kinematics_estimated (autonomysim.types.multirotorstate attribute)": [[0, "autonomysim.types.MultirotorState.kinematics_estimated"]], "landasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.landAsync"]], "landed_state (autonomysim.types.multirotorstate attribute)": [[0, "autonomysim.types.MultirotorState.landed_state"]], "latitude (autonomysim.types.geopoint attribute)": [[0, "autonomysim.types.GeoPoint.latitude"]], "linear_acceleration (autonomysim.types.imudata attribute)": [[0, "autonomysim.types.ImuData.linear_acceleration"]], "linear_acceleration (autonomysim.types.kinematicsstate attribute)": [[0, "autonomysim.types.KinematicsState.linear_acceleration"]], "linear_velocity (autonomysim.types.kinematicsstate attribute)": [[0, "autonomysim.types.KinematicsState.linear_velocity"]], "listvehicles() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.listVehicles"]], "longitude (autonomysim.types.geopoint attribute)": [[0, "autonomysim.types.GeoPoint.longitude"]], "magnetic_field_body (autonomysim.types.magnetometerdata attribute)": [[0, "autonomysim.types.MagnetometerData.magnetic_field_body"]], "magnetic_field_covariance (autonomysim.types.magnetometerdata attribute)": [[0, "autonomysim.types.MagnetometerData.magnetic_field_covariance"]], "manual_gear (autonomysim.types.carcontrols attribute)": [[0, "autonomysim.types.CarControls.manual_gear"]], "matrix (autonomysim.types.projectionmatrix attribute)": [[0, "autonomysim.types.ProjectionMatrix.matrix"]], "max (autonomysim.types.box2d attribute)": [[0, "autonomysim.types.Box2D.max"]], "max (autonomysim.types.box3d attribute)": [[0, "autonomysim.types.Box3D.max"]], "max_distance (autonomysim.types.distancesensordata attribute)": [[0, "autonomysim.types.DistanceSensorData.max_distance"]], "maxrpm (autonomysim.types.carstate attribute)": [[0, "autonomysim.types.CarState.maxrpm"]], "message (autonomysim.types.imageresponse attribute)": [[0, "autonomysim.types.ImageResponse.message"]], "min (autonomysim.types.box2d attribute)": [[0, "autonomysim.types.Box2D.min"]], "min (autonomysim.types.box3d attribute)": [[0, "autonomysim.types.Box3D.min"]], "min_distance (autonomysim.types.distancesensordata attribute)": [[0, "autonomysim.types.DistanceSensorData.min_distance"]], "module": [[0, "module-autonomysim"], [0, "module-autonomysim.clients"], [0, "module-autonomysim.types"], [1, "module-autonomysim.ai"], [2, "module-autonomysim.ai.imitation"], [3, "module-autonomysim.ai.reinforcement"], [4, "module-autonomysim.ai.vision"], [7, "module-autonomysim.sensors"], [8, "module-autonomysim.unreal"], [8, "module-autonomysim.unreal.commands"], [9, "module-autonomysim.utils"], [9, "module-autonomysim.utils.convs"], [10, "module-autonomysim.utils.io"]], "movebyangleratesthrottleasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByAngleRatesThrottleAsync"]], "movebyanglerateszasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByAngleRatesZAsync"]], "movebyanglethrottleasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByAngleThrottleAsync"]], "movebyanglezasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByAngleZAsync"]], "movebymanualasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByManualAsync"]], "movebymotorpwmsasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByMotorPWMsAsync"]], "movebyrc() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByRC"]], "movebyrollpitchyawthrottleasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByRollPitchYawThrottleAsync"]], "movebyrollpitchyawzasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByRollPitchYawZAsync"]], "movebyrollpitchyawratethrottleasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByRollPitchYawrateThrottleAsync"]], "movebyrollpitchyawratezasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByRollPitchYawrateZAsync"]], "movebyvelocityasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByVelocityAsync"]], "movebyvelocitybodyframeasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByVelocityBodyFrameAsync"]], "movebyvelocityzasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByVelocityZAsync"]], "movebyvelocityzbodyframeasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveByVelocityZBodyFrameAsync"]], "moveonpathasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveOnPathAsync"]], "movetogpsasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveToGPSAsync"]], "movetopositionasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveToPositionAsync"]], "movetozasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.moveToZAsync"]], "name (autonomysim.types.detectioninfo attribute)": [[0, "autonomysim.types.DetectionInfo.name"]], "name (autonomysim.types.meshpositionvertexbuffersresponse attribute)": [[0, "autonomysim.types.MeshPositionVertexBuffersResponse.name"]], "nanpose() (autonomysim.types.pose static method)": [[0, "autonomysim.types.Pose.nanPose"]], "nanquaternionr() (autonomysim.types.quaternionr static method)": [[0, "autonomysim.types.Quaternionr.nanQuaternionr"]], "nanvector3r() (autonomysim.types.vector3r static method)": [[0, "autonomysim.types.Vector3r.nanVector3r"]], "normal (autonomysim.types.collisioninfo attribute)": [[0, "autonomysim.types.CollisionInfo.normal"]], "object_id (autonomysim.types.collisioninfo attribute)": [[0, "autonomysim.types.CollisionInfo.object_id"]], "object_name (autonomysim.types.collisioninfo attribute)": [[0, "autonomysim.types.CollisionInfo.object_name"]], "orientation (autonomysim.types.imudata attribute)": [[0, "autonomysim.types.ImuData.orientation"]], "orientation (autonomysim.types.kinematicsstate attribute)": [[0, "autonomysim.types.KinematicsState.orientation"]], "orientation (autonomysim.types.meshpositionvertexbuffersresponse attribute)": [[0, "autonomysim.types.MeshPositionVertexBuffersResponse.orientation"]], "orientation (autonomysim.types.pose attribute)": [[0, "autonomysim.types.Pose.orientation"]], "outer_product() (autonomysim.types.quaternionr method)": [[0, "autonomysim.types.Quaternionr.outer_product"]], "penetration_depth (autonomysim.types.collisioninfo attribute)": [[0, "autonomysim.types.CollisionInfo.penetration_depth"]], "ping() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.ping"]], "pitch (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.pitch"]], "pixels_as_float (autonomysim.types.imagerequest attribute)": [[0, "autonomysim.types.ImageRequest.pixels_as_float"]], "pixels_as_float (autonomysim.types.imageresponse attribute)": [[0, "autonomysim.types.ImageResponse.pixels_as_float"]], "point_cloud (autonomysim.types.lidardata attribute)": [[0, "autonomysim.types.LidarData.point_cloud"]], "pose (autonomysim.types.camerainfo attribute)": [[0, "autonomysim.types.CameraInfo.pose"]], "pose (autonomysim.types.lidardata attribute)": [[0, "autonomysim.types.LidarData.pose"]], "position (autonomysim.types.collisioninfo attribute)": [[0, "autonomysim.types.CollisionInfo.position"]], "position (autonomysim.types.environmentstate attribute)": [[0, "autonomysim.types.EnvironmentState.position"]], "position (autonomysim.types.kinematicsstate attribute)": [[0, "autonomysim.types.KinematicsState.position"]], "position (autonomysim.types.meshpositionvertexbuffersresponse attribute)": [[0, "autonomysim.types.MeshPositionVertexBuffersResponse.position"]], "position (autonomysim.types.pose attribute)": [[0, "autonomysim.types.Pose.position"]], "pressure (autonomysim.types.barometerdata attribute)": [[0, "autonomysim.types.BarometerData.pressure"]], "proj_mat (autonomysim.types.camerainfo attribute)": [[0, "autonomysim.types.CameraInfo.proj_mat"]], "qnh (autonomysim.types.barometerdata attribute)": [[0, "autonomysim.types.BarometerData.qnh"]], "rc_data (autonomysim.types.multirotorstate attribute)": [[0, "autonomysim.types.MultirotorState.rc_data"]], "ready (autonomysim.types.multirotorstate attribute)": [[0, "autonomysim.types.MultirotorState.ready"]], "ready_message (autonomysim.types.multirotorstate attribute)": [[0, "autonomysim.types.MultirotorState.ready_message"]], "relative_pose (autonomysim.types.detectioninfo attribute)": [[0, "autonomysim.types.DetectionInfo.relative_pose"]], "relative_pose (autonomysim.types.distancesensordata attribute)": [[0, "autonomysim.types.DistanceSensorData.relative_pose"]], "reset() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.reset"]], "roll (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.roll"]], "rotate() (autonomysim.types.quaternionr method)": [[0, "autonomysim.types.Quaternionr.rotate"]], "rotatebyyawrateasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.rotateByYawRateAsync"]], "rotatetoyawasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.rotateToYawAsync"]], "rotors (autonomysim.types.rotorstates attribute)": [[0, "autonomysim.types.RotorStates.rotors"]], "rpm (autonomysim.types.carstate attribute)": [[0, "autonomysim.types.CarState.rpm"]], "segmentation (autonomysim.types.lidardata attribute)": [[0, "autonomysim.types.LidarData.segmentation"]], "setanglelevelcontrollergains() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.setAngleLevelControllerGains"]], "setangleratecontrollergains() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.setAngleRateControllerGains"]], "setcarcontrols() (autonomysim.clients.carclient method)": [[0, "autonomysim.clients.CarClient.setCarControls"]], "setpositioncontrollergains() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.setPositionControllerGains"]], "setvelocitycontrollergains() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.setVelocityControllerGains"]], "set_throttle() (autonomysim.types.carcontrols method)": [[0, "autonomysim.types.CarControls.set_throttle"]], "sgn() (autonomysim.types.quaternionr method)": [[0, "autonomysim.types.Quaternionr.sgn"]], "simadddetectionfiltermeshname() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simAddDetectionFilterMeshName"]], "simaddvehicle() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simAddVehicle"]], "simcleardetectionmeshnames() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simClearDetectionMeshNames"]], "simcontinueforframes() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simContinueForFrames"]], "simcontinuefortime() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simContinueForTime"]], "simcreatevoxelgrid() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simCreateVoxelGrid"]], "simdestroyobject() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simDestroyObject"]], "simenablefocusplane() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simEnableFocusPlane"]], "simenablemanualfocus() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simEnableManualFocus"]], "simenableweather() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simEnableWeather"]], "simflushpersistentmarkers() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simFlushPersistentMarkers"]], "simgetcamerainfo() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetCameraInfo"]], "simgetcollisioninfo() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetCollisionInfo"]], "simgetcurrentfieldofview() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetCurrentFieldOfView"]], "simgetdetections() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetDetections"]], "simgetdistortionparams() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetDistortionParams"]], "simgetfilmbacksettings() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetFilmbackSettings"]], "simgetfocallength() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetFocalLength"]], "simgetfocusaperture() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetFocusAperture"]], "simgetfocusdistance() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetFocusDistance"]], "simgetgroundtruthenvironment() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetGroundTruthEnvironment"]], "simgetgroundtruthkinematics() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetGroundTruthKinematics"]], "simgetimage() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetImage"]], "simgetimages() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetImages"]], "simgetlenssettings() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetLensSettings"]], "simgetlidarsegmentation() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetLidarSegmentation"]], "simgetmeshpositionvertexbuffers() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetMeshPositionVertexBuffers"]], "simgetobjectpose() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetObjectPose"]], "simgetobjectscale() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetObjectScale"]], "simgetpresetfilmbacksettings() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetPresetFilmbackSettings"]], "simgetpresetlenssettings() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetPresetLensSettings"]], "simgetsegmentationobjectid() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetSegmentationObjectID"]], "simgetvehiclepose() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetVehiclePose"]], "simgetworldextents() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simGetWorldExtents"]], "simispause() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simIsPause"]], "simlistassets() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simListAssets"]], "simlistsceneobjects() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simListSceneObjects"]], "simloadlevel() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simLoadLevel"]], "simpause() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simPause"]], "simplotarrows() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simPlotArrows"]], "simplotlinelist() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simPlotLineList"]], "simplotlinestrip() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simPlotLineStrip"]], "simplotpoints() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simPlotPoints"]], "simplotstrings() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simPlotStrings"]], "simplottransforms() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simPlotTransforms"]], "simplottransformswithnames() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simPlotTransformsWithNames"]], "simprintlogmessage() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simPrintLogMessage"]], "simrunconsolecommand() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simRunConsoleCommand"]], "simsetcamerafov() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetCameraFov"]], "simsetcamerapose() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetCameraPose"]], "simsetdetectionfilterradius() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetDetectionFilterRadius"]], "simsetdistortionparam() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetDistortionParam"]], "simsetdistortionparams() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetDistortionParams"]], "simsetextforce() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetExtForce"]], "simsetfilmbacksettings() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetFilmbackSettings"]], "simsetfocallength() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetFocalLength"]], "simsetfocusaperture() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetFocusAperture"]], "simsetfocusdistance() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetFocusDistance"]], "simsetkinematics() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetKinematics"]], "simsetlightintensity() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetLightIntensity"]], "simsetobjectmaterial() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetObjectMaterial"]], "simsetobjectmaterialfromtexture() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetObjectMaterialFromTexture"]], "simsetobjectpose() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetObjectPose"]], "simsetobjectscale() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetObjectScale"]], "simsetpresetfilmbacksettings() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetPresetFilmbackSettings"]], "simsetpresetlenssettings() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetPresetLensSettings"]], "simsetsegmentationobjectid() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetSegmentationObjectID"]], "simsettimeofday() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetTimeOfDay"]], "simsettraceline() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetTraceLine"]], "simsetvehiclepose() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetVehiclePose"]], "simsetweatherparameter() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetWeatherParameter"]], "simsetwind() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSetWind"]], "simspawnobject() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSpawnObject"]], "simswaptextures() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simSwapTextures"]], "simtestlineofsightbetweenpoints() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simTestLineOfSightBetweenPoints"]], "simtestlineofsighttopoint() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.simTestLineOfSightToPoint"]], "speed (autonomysim.types.carstate attribute)": [[0, "autonomysim.types.CarState.speed"]], "star() (autonomysim.types.quaternionr method)": [[0, "autonomysim.types.Quaternionr.star"]], "startrecording() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.startRecording"]], "steering (autonomysim.types.carcontrols attribute)": [[0, "autonomysim.types.CarControls.steering"]], "stoprecording() (autonomysim.clients.vehicleclient method)": [[0, "autonomysim.clients.VehicleClient.stopRecording"]], "switch1 (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.switch1"]], "switch2 (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.switch2"]], "switch3 (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.switch3"]], "switch4 (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.switch4"]], "switch5 (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.switch5"]], "switch6 (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.switch6"]], "switch7 (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.switch7"]], "switch8 (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.switch8"]], "takeoffasync() (autonomysim.clients.multirotorclient method)": [[0, "autonomysim.clients.MultirotorClient.takeoffAsync"]], "temperature (autonomysim.types.environmentstate attribute)": [[0, "autonomysim.types.EnvironmentState.temperature"]], "throttle (autonomysim.types.carcontrols attribute)": [[0, "autonomysim.types.CarControls.throttle"]], "throttle (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.throttle"]], "time_stamp (autonomysim.types.barometerdata attribute)": [[0, "autonomysim.types.BarometerData.time_stamp"]], "time_stamp (autonomysim.types.collisioninfo attribute)": [[0, "autonomysim.types.CollisionInfo.time_stamp"]], "time_stamp (autonomysim.types.distancesensordata attribute)": [[0, "autonomysim.types.DistanceSensorData.time_stamp"]], "time_stamp (autonomysim.types.gpsdata attribute)": [[0, "autonomysim.types.GpsData.time_stamp"]], "time_stamp (autonomysim.types.imageresponse attribute)": [[0, "autonomysim.types.ImageResponse.time_stamp"]], "time_stamp (autonomysim.types.imudata attribute)": [[0, "autonomysim.types.ImuData.time_stamp"]], "time_stamp (autonomysim.types.lidardata attribute)": [[0, "autonomysim.types.LidarData.time_stamp"]], "time_stamp (autonomysim.types.magnetometerdata attribute)": [[0, "autonomysim.types.MagnetometerData.time_stamp"]], "time_utc (autonomysim.types.gnssreport attribute)": [[0, "autonomysim.types.GnssReport.time_utc"]], "timestamp (autonomysim.types.carstate attribute)": [[0, "autonomysim.types.CarState.timestamp"]], "timestamp (autonomysim.types.multirotorstate attribute)": [[0, "autonomysim.types.MultirotorState.timestamp"]], "timestamp (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.timestamp"]], "timestamp (autonomysim.types.rotorstates attribute)": [[0, "autonomysim.types.RotorStates.timestamp"]], "to_quaternionr() (autonomysim.types.vector3r method)": [[0, "autonomysim.types.Vector3r.to_Quaternionr"]], "to_list() (autonomysim.types.pidgains method)": [[0, "autonomysim.types.PIDGains.to_list"]], "to_lists() (autonomysim.types.anglelevelcontrollergains method)": [[0, "autonomysim.types.AngleLevelControllerGains.to_lists"]], "to_lists() (autonomysim.types.angleratecontrollergains method)": [[0, "autonomysim.types.AngleRateControllerGains.to_lists"]], "to_lists() (autonomysim.types.positioncontrollergains method)": [[0, "autonomysim.types.PositionControllerGains.to_lists"]], "to_lists() (autonomysim.types.velocitycontrollergains method)": [[0, "autonomysim.types.VelocityControllerGains.to_lists"]], "to_msgpack() (autonomysim.types.msgpackmixin method)": [[0, "autonomysim.types.MsgpackMixin.to_msgpack"]], "to_numpy_array() (autonomysim.types.quaternionr method)": [[0, "autonomysim.types.Quaternionr.to_numpy_array"]], "to_numpy_array() (autonomysim.types.vector3r method)": [[0, "autonomysim.types.Vector3r.to_numpy_array"]], "velocity (autonomysim.types.gnssreport attribute)": [[0, "autonomysim.types.GnssReport.velocity"]], "vertices (autonomysim.types.meshpositionvertexbuffersresponse attribute)": [[0, "autonomysim.types.MeshPositionVertexBuffersResponse.vertices"]], "w_val (autonomysim.types.quaternionr attribute)": [[0, "autonomysim.types.Quaternionr.w_val"]], "width (autonomysim.types.imageresponse attribute)": [[0, "autonomysim.types.ImageResponse.width"]], "x_val (autonomysim.types.quaternionr attribute)": [[0, "autonomysim.types.Quaternionr.x_val"]], "x_val (autonomysim.types.vector2r attribute)": [[0, "autonomysim.types.Vector2r.x_val"]], "x_val (autonomysim.types.vector3r attribute)": [[0, "autonomysim.types.Vector3r.x_val"]], "y_val (autonomysim.types.quaternionr attribute)": [[0, "autonomysim.types.Quaternionr.y_val"]], "y_val (autonomysim.types.vector2r attribute)": [[0, "autonomysim.types.Vector2r.y_val"]], "y_val (autonomysim.types.vector3r attribute)": [[0, "autonomysim.types.Vector3r.y_val"]], "yaw (autonomysim.types.rcdata attribute)": [[0, "autonomysim.types.RCData.yaw"]], "yaw_or_rate (autonomysim.types.yawmode attribute)": [[0, "autonomysim.types.YawMode.yaw_or_rate"]], "z_val (autonomysim.types.quaternionr attribute)": [[0, "autonomysim.types.Quaternionr.z_val"]], "z_val (autonomysim.types.vector3r attribute)": [[0, "autonomysim.types.Vector3r.z_val"]], "autonomysim.ai": [[1, "module-autonomysim.ai"]], "autonomysim.ai.imitation": [[2, "module-autonomysim.ai.imitation"]], "autonomysim.ai.reinforcement": [[3, "module-autonomysim.ai.reinforcement"]], "autonomysim.ai.vision": [[4, "module-autonomysim.ai.vision"]], "autonomysim.sensors": [[7, "module-autonomysim.sensors"]], "runcmdlist() (in module autonomysim.unreal.commands)": [[8, "autonomysim.unreal.commands.RunCmdList"]], "runconsolecmd() (in module autonomysim.unreal.commands)": [[8, "autonomysim.unreal.commands.RunConsoleCmd"]], "autonomysim.unreal": [[8, "module-autonomysim.unreal"]], "autonomysim.unreal.commands": [[8, "module-autonomysim.unreal.commands"]], "setuppath (class in autonomysim.utils)": [[9, "autonomysim.utils.SetupPath"]], "addautonomysimmodulepath() (autonomysim.utils.setuppath static method)": [[9, "autonomysim.utils.SetupPath.addAutonomySimModulePath"]], "autonomysim.utils": [[9, "module-autonomysim.utils"]], "autonomysim.utils.convs": [[9, "module-autonomysim.utils.convs"]], "generate_color_palette() (in module autonomysim.utils)": [[9, "autonomysim.utils.generate_color_palette"]], "getcurrentpath() (autonomysim.utils.setuppath static method)": [[9, "autonomysim.utils.SetupPath.getCurrentPath"]], "getdirlevels() (autonomysim.utils.setuppath static method)": [[9, "autonomysim.utils.SetupPath.getDirLevels"]], "getgrandparentdir() (autonomysim.utils.setuppath static method)": [[9, "autonomysim.utils.SetupPath.getGrandParentDir"]], "getparentdir() (autonomysim.utils.setuppath static method)": [[9, "autonomysim.utils.SetupPath.getParentDir"]], "get_public_fields() (in module autonomysim.utils)": [[9, "autonomysim.utils.get_public_fields"]], "list_to_2d_float_array() (in module autonomysim.utils.convs)": [[9, "autonomysim.utils.convs.list_to_2d_float_array"]], "string_to_float_array() (in module autonomysim.utils.convs)": [[9, "autonomysim.utils.convs.string_to_float_array"]], "string_to_uint8_array() (in module autonomysim.utils.convs)": [[9, "autonomysim.utils.convs.string_to_uint8_array"]], "to_dict() (in module autonomysim.utils.convs)": [[9, "autonomysim.utils.convs.to_dict"]], "to_eularian_angles() (in module autonomysim.utils.convs)": [[9, "autonomysim.utils.convs.to_eularian_angles"]], "to_quaternion() (in module autonomysim.utils.convs)": [[9, "autonomysim.utils.convs.to_quaternion"]], "to_str() (in module autonomysim.utils.convs)": [[9, "autonomysim.utils.convs.to_str"]], "wait_key() (in module autonomysim.utils)": [[9, "autonomysim.utils.wait_key"]], "autonomysim.utils.io": [[10, "module-autonomysim.utils.io"]], "get_pfm_array() (in module autonomysim.utils.io)": [[10, "autonomysim.utils.io.get_pfm_array"]], "read_pfm() (in module autonomysim.utils.io)": [[10, "autonomysim.utils.io.read_pfm"]], "write_file() (in module autonomysim.utils.io)": [[10, "autonomysim.utils.io.write_file"]], "write_pfm() (in module autonomysim.utils.io)": [[10, "autonomysim.utils.io.write_pfm"]], "write_png() (in module autonomysim.utils.io)": [[10, "autonomysim.utils.io.write_png"]]}, "docurls": ["api/autonomysim.html", "api/autonomysim.ai.html", "api/autonomysim.ai.imitation.html", "api/autonomysim.ai.reinforcement.html", "api/autonomysim.ai.vision.html", "api/autonomysim.gym.html", "api/autonomysim.gym.envs.html", "api/autonomysim.sensors.html", "api/autonomysim.unreal.html", "api/autonomysim.utils.html", "api/autonomysim.utils.io.html", "api/modules.html", "index.html"]})